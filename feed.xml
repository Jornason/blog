<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TaoAlpha's Blog</title><link>http://taoalpha.me/blog</link><pubDate>2016-01-10T03:56:40.489Z</pubDate><description></description><language>en</language><generator>hexo</generator><item> <title>JavaScript Coding Style</title><link>http://taoalpha.me/blog/2016/01/09/read-javascript-coding-style/</link><category>read</category><tag>JS,coding style</tag><pubDate>2016-01-10T01:49:12.000Z</pubDate><description>Why and What is Coding StyleCoding style is like the common styles and patterns that are used in your personal codebase or some organizations’ codebase, its purpose is making your code more readable and reusable through the entire developemnt, especially when you work in a team. Everyone can create their own coding style, there is no right or wrong among them, like you prefer 4 spaces than 2 spaces, you like to use camelCase represent the functions and variables,that’s totally fine. 
The benefit of using the same style is obvious, it can save you a lot of time reading and modifying others’ code or even your own code. There are some styles that are pretty popular and agreed by a lot of people and team, like Google Style Guide. Being modified and updated for so many years, I believe these styles would be a better choice to choose rather than create one by yourself.
Javascript Style GuideThere are several popular style guide for javascript, one is the part of the Google Style Guide series:  Google JavaScript Style Guide, another is created by airbnb:Airbnb JavaScript Style Guide, and also there is a Code Conventions for the JavaScript Programming Language created by the author of JavaScript: The Good Parts.
I read them all and summarize the core parts here.
Google JavaScript Style GuideHere I ignore all parts related to the Google Closure Compiler, if you are interested in, take a look at Closure Compiler.
Syntax &amp;amp; Basic Concept
var: never declare a variable without var to save you from global variables;
semicolons: always use semicolons, sometimes the closing brackets are not enough to signal the end of the statement: Javascript never ends a statement if the next token is an infix or bracket operator;
new: Never use wrapper objects for primitive types(like new Boolean(false), return an object!), but can use Boolean(0) to do casting, also for array and object, use literal syntax instead of new; 
prototye: Use prototype to attach methods to an object created via new, initialize other properties within constructor,Current JavaScript engines optimize based on the “shape” of an object, adding a property to an object (including overriding a value set on the prototype) changes the shape and can degrade performance., and NEVER modify prototype of builtins like Object and Array;
delete: Use set to null instead of delete to delete some properties, but if the number of properties of the object matters, use delete;
closure: Be careful to use closure since it might cause memory leak;
eval,with(){}: Just don’t use them;
for-in-loop: Only use it to iterate the key of object/hashmap;
quote: Use single quote &amp;#39;&amp;#39; for strings, use string concatenation if the string is too long;

Naming
CONSTANT_NAME: always use ALL_CAP_SNAKE_CASE represent the constant;
functionName,variableName,methodName: use camelCase represent the functions and variables, methods;
ClassName,EnumNamesLikeThis: use CamelCase represent class or enums;
filenameslikethis.js: use plain lowercase as the name of the files;
_private: private should be named with a trailing underscore;
opt_: Optional function arguments start with opt_;
global: try not to contaminate the global, can use a global object to store all variables you want to use as gloabl scope - prevent some conflicts between global and local;

Comments &amp;amp; JSDocJust remmeber that comments is written for someone who isn’t familiar with the code including youself after a long time!
Here is some resouces about the JSDoc
TipsSome Boolean Expressions1234567891011121314151617Boolean('0') == true'0' != true0 != null0 == []0 == falseBoolean(null) == falsenull != truenull != falseBoolean(undefined) == falseundefined != trueundefined != falseBoolean([]) == true[] != true[] == falseBoolean(&amp;#123;&amp;#125;) == true&amp;#123;&amp;#125; != true&amp;#123;&amp;#125; != false
Better For Loop1234var paragraphs = document.getElementsByTagName('p');for (var i = 0, paragraph; paragraph = paragraphs[i]; i++) &amp;#123;  doSomething(paragraph);&amp;#125;
BE CONSISTENTAirbnb JavaScript Style GuideI will address some difference between this one and google’s.
Syntax &amp;amp; Basic Concept
const: Alwasy use const on references instead of var, ensure that you can not reassign your reference, Block-scoped;
let: If you must reassign references, use let instead of var, Block-scoped;
reserved words: don’t use reserved words as keys;
object shorthand: use object shorthand for method and value defined in an Object, and also put all shorthands at the beginning of the object declaration;

123456789101112131415161718// methodconst atom = &amp;#123;  value: 1,  addValue(value) &amp;#123;    return atom.value + value;  &amp;#125;,&amp;#125;;// value, if value and key are the same// put all shorthands at the beginning// only quote properties that are invalid identifiersconst obj = &amp;#123;  lukeSkywalker,  foo: 3,  bar: 4,  'data-blah': 5,&amp;#125;;

spreads: Use ... to copy arrays: const itemsCopy = [...items]; 
Array.from(): Use Array.from() convert an array-like object to an array;
destructuring: Use object and array destructuring when accessing and using multiple properties of an object;

123456789101112131415161718192021222324// goodfunction getFullName(user) &amp;#123;  const &amp;#123; firstName, lastName &amp;#125; = user;  return `$&amp;#123;firstName&amp;#125; $&amp;#123;lastName&amp;#125;`;&amp;#125;// bestfunction getFullName(&amp;#123; firstName, lastName &amp;#125;) &amp;#123;  return `$&amp;#123;firstName&amp;#125; $&amp;#123;lastName&amp;#125;`;&amp;#125;// array destructuringconst arr = [1, 2, 3, 4];const [first, second] = arr;// Prefer object destructuring for multiple return values to array destructuring// goodfunction processInput(input) &amp;#123;  // then a miracle occurs  return &amp;#123; left, right, top, bottom &amp;#125;;&amp;#125;// the caller selects only the data they needconst &amp;#123; left, right &amp;#125; = processInput(input);

template strings: When programmatically building up strings, use template strings instead of concatenation;
functions declarations: Use function declarations instead of function expressions, when you must use function expressions (as when passing an anonymous function), use arrow function notation;

1234567891011121314151617181920212223242526272829// badconst foo = function () &amp;#123;&amp;#125;;// goodfunction foo() &amp;#123;&amp;#125;// use arrow functions as function expressions// immediately-invoked function expression (IIFE)(() =&amp;gt; &amp;#123;  console.log('Welcome to the Internet. Please follow me.');&amp;#125;)();// No function declarations should be in a block// badif (currentUser) &amp;#123;  function test() &amp;#123;    console.log('Nope.');  &amp;#125;&amp;#125;// goodlet test;if (currentUser) &amp;#123;  test = () =&amp;gt; &amp;#123;    console.log('Yup.');  &amp;#125;;&amp;#125;

arguments: Don’t use it, use ...args instead;

12345678910function concatenateAll(...args) &amp;#123;  return args.join('');&amp;#125;```  - `default value`: Use default parameter syntax rather than mutating function arguments, and always put default parameters last;``` javascriptfunction handleThings(name, opts = &amp;#123;&amp;#125;) &amp;#123;  // ...&amp;#125;

spacing: put space between function name and the brackets and curly brackets;
parameter: Never mutate parameters, Never reassign parameters;

123456789// badfunction f1(obj) &amp;#123;  obj.key = 1;&amp;#125;;// goodfunction f2(obj) &amp;#123;  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;&amp;#125;;

arrow functions: 
If the function body consists of a single expression, omit the braces and use the implicit return. Otherwise, keep the braces and use a return statement;
and if the expression spans over multiple lines, wrap it in parentheses;
If your function takes a single argument and doesn’t use braces, omit the parentheses;



12345678910111213141516171819// good[1, 2, 3].map(number =&amp;gt; `A string containing the $&amp;#123;number&amp;#125;.`);// bad[1, 2, 3].map(number =&amp;gt; &amp;#123;  const nextNumber = number + 1;  `A string containing the $&amp;#123;nextNumber&amp;#125;.`;&amp;#125;);// good[1, 2, 3].map( (number) =&amp;gt; &amp;#123;  const nextNumber = number + 1;  return `A string containing the $&amp;#123;nextNumber&amp;#125;.`;&amp;#125;);[1, 2, 3].map(number =&amp;gt; (  `As time went by, the string containing the $&amp;#123;number&amp;#125; became much ` +  'longer. So we needed to break it over multiple lines.'));

class: Always use class. Avoid manipulating prototype directly;
extends: Use extends for inheritance;
methods: Methods can return this to help with method chaining;

123456// goodclass PeekableQueue extends Queue &amp;#123;  peek() &amp;#123;    return this._queue[0];  &amp;#125;&amp;#125;

import: Always use modules (import/export) over a non-standard module system. You can always transpile to your preferred module system, which means don’t use require etc;
Do not use wildcard imports;
And do not export directly from an import;



1234567891011121314// badimport * as AirbnbStyleGuide from './AirbnbStyleGuide';// goodimport AirbnbStyleGuide from './AirbnbStyleGuide';// bad// filename es6.jsexport &amp;#123; es6 as default &amp;#125; from './airbnbStyleGuide';// good// filename es6.jsimport &amp;#123; es6 &amp;#125; from './AirbnbStyleGuide';export default es6;

iterators and generators:
Don’t use iterators. Prefer JavaScript’s higher-order functions like map() and reduce() instead of loops like for-of;
Don’t use generators for now.



123456789101112131415161718const numbers = [1, 2, 3, 4, 5];// badlet sum = 0;for (let num of numbers) &amp;#123;  sum += num;&amp;#125;sum === 15;// goodlet sum = 0;numbers.forEach((num) =&amp;gt; sum += num);sum === 15;// best (use the functional force)const sum = numbers.reduce((total, num) =&amp;gt; total + num, 0);sum === 15;

properties:

Use dot notation when accessing properties;
Use subscript notation [] when accessing properties with a variable;


variables:

Always use const to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that;
Use one const declaration per variable;
Group all your consts and then group all your lets;
Assign variables where you need them, but place them in a reasonable place;


hoisting:

var declarations get hoisted to the top of their scope, their assignment does not; 
const and let declarations are blessed with a new concept called Temporal Dead Zones (TDZ);
It’s important to know why typeof is no longer safe;
Anonymous function expressions hoist their variable name, but not the function assignment;
Named function expressions hoist the variable name, not the function name or the function body;
Function declarations hoist their name and the function body;



1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// using const and letfunction example() &amp;#123;  console.log(declaredButNotAssigned); // =&amp;gt; throws a ReferenceError  console.log(typeof declaredButNotAssigned); // =&amp;gt; throws a ReferenceError  const declaredButNotAssigned = true;&amp;#125;// assignment will not be hoistedfunction example() &amp;#123;  console.log(anonymous); // =&amp;gt; undefined  anonymous(); // =&amp;gt; TypeError anonymous is not a function  var anonymous = function () &amp;#123;    console.log('anonymous function expression');  &amp;#125;;&amp;#125;function example() &amp;#123;  console.log(named); // =&amp;gt; undefined  named(); // =&amp;gt; TypeError named is not a function  superPower(); // =&amp;gt; ReferenceError superPower is not defined  var named = function superPower() &amp;#123;    console.log('Flying');  &amp;#125;;&amp;#125;// the same is true when the function name// is the same as the variable name.function example() &amp;#123;  console.log(named); // =&amp;gt; undefined  named(); // =&amp;gt; TypeError named is not a function  var named = function named() &amp;#123;    console.log('named');  &amp;#125;&amp;#125;// BUT! Function declarations hoist their name and the function body.function example() &amp;#123;  superPower(); // =&amp;gt; Flying  function superPower() &amp;#123;    console.log('Flying');  &amp;#125;&amp;#125;

Comparison Operators &amp;amp; Equality:
Use === and !== over == and !=;
Conditional statements such as the if statement evaluate their expression using coercion with the ToBoolean abstract method and always follow these simple rules:
Objects evaluate to true
Undefined evaluates to false
Null evaluates to false
Booleans evaluate to the value of the boolean
Numbers evaluate to false if +0, -0, or NaN, otherwise true
Strings evaluate to false if an empty string ‘’, otherwise true





Comments
Use /** ... */ for multi-line comments. Include a description, specify types and values for all parameters and return values;
Use // for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block;
Prefixing your comments with FIXME or TODO helps other developers quickly understand if you’re pointing out a problem that needs to be revisited, or if you’re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are FIXME – need to figure this out or TODO – need to implement;

12345678910111213/** * make() returns a new element * based on the passed in tag name * * @param &amp;#123;String&amp;#125; tag * @return &amp;#123;Element&amp;#125; element */function make(tag) &amp;#123;  // ...stuff...  return element;&amp;#125;
Spaces
Use soft tabs set to 2 spaces;
Place 1 space before the leading brace;
Place 1 space before the opening parenthesis in control statements (if, while etc.). Place no space between the argument list and the function name in function calls and declarations;
Set off operators with spaces;
End files with a single newline character;
Use indentation when making long method chains. Use a leading dot, which emphasizes that the line is a method call, not a new statement;
Leave a blank line after blocks and before the next statement;
Do not pad your blocks with blank lines;
Do not add spaces inside parentheses;
Do not add spaces inside brackets;
Add spaces inside curly braces;
Avoid having lines of code that are longer than 100 characters (including whitespace);

Commas and Semicolons
Leading commas: NOPE;
Additional trailing comma: Yup;
Always use semicolons;

12345// good (guards against the function becoming an argument when two files with IIFEs are concatenated);(() =&amp;gt; &amp;#123;  const name = 'Skywalker';  return name;&amp;#125;)();
Type Casting &amp;amp; Coercion
Perform type coercion at the beginning of the statement, use String,Number etc instead of other tricky methods;
If for whatever reason you are doing something wild and parseInt is your bottleneck and need to use Bitshift for performance reasons, leave a comment explaining why and what you’re doing;
Be careful when using bitshift operations. Numbers are represented as 64-bit values, but Bitshift operations always return a 32-bit integer (source). Bitshift can lead to unexpected behavior for integer values larger than 32 bits;

12345678910// good/** * parseInt was the reason my code was slow. * Bitshifting the String to coerce it to a * Number made it a lot faster. */const val = inputValue &amp;gt;&amp;gt; 0;// be careful2147483649 &amp;gt;&amp;gt; 0 //=&amp;gt; -2147483647
Naming
Avoid single letter names. Be descriptive with your naming;
Use camelCase when naming objects, functions, and instances;
Use PascalCase when naming constructors or classes;
Use a leading underscore _ when naming private properties;
Don’t save references to this. Use arrow functions or Function#bind;
If your file exports a single class, your filename should be exactly the name of the class;
Use camelCase when you export-default a function. Your filename should be identical to your function’s name;
Use PascalCase when you export a singleton / function library / bare object;

1234567891011121314// badfunction foo() &amp;#123;  const that = this;  return function () &amp;#123;    console.log(that);  &amp;#125;;&amp;#125;// goodfunction foo() &amp;#123;  return () =&amp;gt; &amp;#123;    console.log(this);  &amp;#125;;&amp;#125;
Accessors
Accessor functions for properties are not required;
If you do make accessor functions use getVal() and setVal(‘hello’);
If the property is a boolean, use isVal() or hasVal();
It’s okay to create get() and set() functions, but be consistent;

jQuery
Prefix jQuery object variables with a $;
Cache jQuery lookups;
For DOM queries use Cascading $(&amp;#39;.sidebar ul&amp;#39;) or parent &amp;gt; child $(&amp;#39;.sidebar &amp;gt; ul&amp;#39;);
Use find with scoped jQuery object queries;

1234567891011// goodfunction setSidebar() &amp;#123;  const $sidebar = $('.sidebar');  $sidebar.hide();  // ...stuff...  $sidebar.css(&amp;#123;    'background-color': 'pink'  &amp;#125;);&amp;#125;
TestingYou should write testing!!!
Code Conventions for the JavaScript Programming LanguageAll coved by two styles I list above.
SummaryCompared to google’s old style guide, airbnb’s style guide has much more valuable new ES6 styles, if you are an active ES6 users, I strongly suggest you use airbnb’s style !!!
Even you are a solo worker, you should use some common styles, it is a good habit and you should have.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>SASS SYNTAX</title><link>http://taoalpha.me/blog/2013/12/19/read-translation-sass-syntax/</link><category>read</category><tag>HCIBib,Sass,Sass for web designers,翻译文章,译系列</tag><pubDate>2013-12-19T06:00:00.000Z</pubDate><description>本文继续 “SASS for web designers” 这本书~ 这是续 Why Sass? 这一章的遗漏,全书共分为四章,我会尽量都过一遍~哈
============正文=============
在Sass中实际上是有两种不同的语法的.比较新的一种是之前提到的SCSS语法,SCSS文件会以.scss结尾.这也是我比较倾向的一种语法,理由如下:
      因为SCSS是基于CSS,是CSS的一个父集, 所以我可以依然按照过去十年写CSS那样写SCSS,而不用担心它不能识别;    它可以允许你一步步的将现有的css样式转换为sass的结构;    它不会导致一个很突兀的代码风格转变;

一个简单的SCSS例子

如下是一个展示SCSS语法是如何工作的范例, 它定义了一个变量并且在之后的css中使用了这个变量.
123456789$pink: #ea4c89;p&amp;#123;font-size: 12px;color: $pink;&amp;#125;p strong&amp;#123;text-transform: uppercase;&amp;#125;
翻译成css则是:
12345678p&amp;#123;font-size: 12px;color: #ea4c89;&amp;#125;p strong&amp;#123;text-transform: uppercase;&amp;#125;
除了那个$pink变量之外,是不是看起来很熟悉. 本书的后部分我们会详细说说这个变量~
SCSS围绕CSS,而CSS本身你已经非常熟悉了. 也因此, 我非常喜欢SCSS~
sass原始语法
sass自身的语法, 从某方面来说, 和SCSS以及css都是完全不一样的. 一些人比较喜欢它直来直去的风格, 没有任何的花括号,分号等, 完全由缩进控制结构的语法.如果你也习惯这种类似ruby或者python的语法形式, 那么SASS的语法你会觉得比较熟悉, 而且你会更加舒适自然.
如果把之前的片段用这种语法表示出来, 就会出现如下的形式:
12345678$pink: #ea4c89p	font-size: 12px	color: $pinkp strong	text-transform: uppercase
没有了括号和分号,只剩下一堆的空格和缩进来表示声明和定义. 很明显这更加干净而且简单, 你们中的部分人可能会非常钟情于此. 它可以提升代码的速度, 同时去除那些乱七八糟的东西. 但是对我而言, 我依然更喜欢SCSS, 应为它和正常的css更像, 就如同我之前提到的原因一样.
本书后续的章节里也都会用SCSS语法来做演示. 如果你更喜欢那个干净的Sass语法, 也很容易转换. 而我们所有提到的Sass功能对两者都是适用的. 只是偏好的问题罢了. 
Sass的误解传言
我在之前已经提到过这个我最初不愿意尝试sass的原因. 部分归咎于那些大量的传言….(此处同Why Sass? 中的传言部分.)
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>What does it mean to be simple?(译)</title><link>http://taoalpha.me/blog/2013/06/08/read-what-does-it-mean-to-be-simple-translated/</link><category>read</category><tag>HCI,HCIBib,UX,产品学习,翻译,翻译文章</tag><pubDate>2013-06-08T13:00:00.000Z</pubDate><description>什么才意味着真正的简单呢?(What does it mean to be simple?)所有的设计师都在说”简洁性”是多么多么的重要,那么,究竟什么才真正意味着简单呢?多数情况下我我们认为简单意味着更少,通过去掉一些事物来达到简单的目的. 我们以为通过把内容放置在明显位置,可以帮助用户更好的集中注意力,或者采用使用符号列表而不是段落的形式,会有更多的人愿意去阅读;亦或者通过将文本内容缩略到一半可以让内容更清晰. 但是简单并不意味着”更少”.一个更准确的定义应该是”刚刚好”.
唔,我可能过于简单了…
在一些时候,设计需要更多的东西来实现简单.所以,一个更好的定义应该是:”刚刚好可以满足理解以及实现我们的目标”.不采用隐藏或者去除某些东西,我们采用如下的方法让我们的设计变得更加有意义的简单:
    只有一个核心观点(不要多个观点或者一个不完全的观点)    随时间而逐渐增强清晰性(不要被不恰当的细节淹没)    一致性(避免使用不必要的特殊界面和信息)
只有一个核心观点注意力和兴趣是你试图让某人做任何事的首要因素.最好的吸引注意力和建立兴趣的方式是只展现一个核心的观点,全面的阐述这一观点.这将允许用户来做一个二选一的选项:”我感兴趣啊?”.
在介绍某个特性的时候,应当让用户能立刻”看到”自己的操作会产生的任何后果,这将帮助用户更好的理清内容同时对于下一步要做什么有更好的掌控. 只有一个核心目标的原则是贯穿始终的,从全局到每个细小的属性.“除了’Send Message’,没有更好的词语可以描述清楚’Send Message’”.—Des Treynor这是一个非常典型的例子,它的结果非常清楚(就是Send Message).这里其他的版本可能是”Go”或者”Submit Now”,或者仅仅是”Send”.但这些都没有”Send Message”那样清楚,只用两个词就可以让用户非常清楚的理解其含义,从而更轻松的做出选择. 随着转移到更加复杂的一些属性,让其概念清晰易于选择的困难程度呈指数级增长,但是我们的目标应该是一致的:利用一个核心观点指引用户合理的设定他们的预期.如果我们没能成功的做到这一点,那么感知起来的复杂度就会有所增加.
只有一个核心观点包括以下内容:
    二选一的:足够简单只有两个选择…允许人们方便的评估他们同意与否    用朴实的语言来陈述:尽可能的清晰以及明显的表述问题或者选择的机会    不断的重复:每一个界面都应该在适当的位置不断重复恰当的问题或选择的机会.    让预期变得明显:每一个问题或者选择机会的结果都应该可预计;
随时间提升其清晰性在获得人们的兴趣之后,下一步就需要让他们投入时间和精力了.即便当你的用户发现你的应用非常有趣,也依然有很多”摩擦”可能会出现.如果他们被这些阻拦了,那么转化率依然很低.你必须要清晰的没有任何困扰的展示给他们他们可以实现他们的目标.“网络出版:写的太少,无法清楚地表达意思.写的太多,会因为太厚而无法浏览从而有很多内容被跳过.”–Ryan Singer就好比很多对话可以随着时间的进行而变得更清楚更准确,正确的时间出现的正确的细节将会增加最终获得满意结局的机会.去除相关的但是不恰当的细节,将可以帮助用户不断前进而减少被分散的机会.谨记,每一个无法获得有意义的结果的时间和精力的投资都会增加感知的复杂性.
随时间提升清晰性可以采用如下方法:
    清楚的开始和结束–确保界面中如何清楚的做某一件事实非常清楚地.    逐步解密–要做到恰到好处:把用户的焦点只放在那些有主意他们理解当前任务的细节上.    明显的路径–总是提供一个清晰的路径到下一步或者下一层次的细节.
一致性一个新用户和一个老用户是完全不同的两种用户.如果你想要让人们一直停留这里,那么你需要帮助他们,让他们感觉自己掌握了这一应用的每一部分,而且完全没有必要去担心下一个是什么. 每一个特性都需要足够的便捷而让用户感到愉悦以及他们的时间和精力得到了最好的利用.“无论是风中舞动的旗子,空的和挤满人的站台的区别,亦或者是那些暗示着可行的路径的脚印,我们一直寻找着世界上那些明显的标志来提供指引.”–Don Norman你给予他人友好的表情可以带给他们自信,而且可以收获笑容.帮助人们看到那些他们之前看到的内容,基于他们已经知道的事情获得结论.当你确实有一个复杂的问题时,你的界面比较复杂并没有错,但是毫无理由的把用户扔在一个陌生的地方,而且不给于任何指引或者地图,那就是不友好了.
通过以下方法保持一致性:
    巩固惯例–使用相似的处理过程,使用相似的方法.    建立模式–把相似的事物放在相似的地方,这样用户就可以根据直觉来行动了.    偶尔破坏规则–知道什么时候一个界面需要独一无二,实际上可能比你想象中更少一些.
当多就是少的时候目前盛行的观念认为简单就是少…删减再删减.但是简单真的应该针对理解和清晰的目标…我们能做出让用户立刻就明白正在做什么,同时可以非常明确的了解下一步将做什么的设计吗?为了实践实现简单,我们可以坚持只有一个核心观点,随时间提升其清晰性,同时利用一致性帮助用户更高效的使用. 在这种情况下,更多也可能就是更少…通过在适当的时候添加适当的细节,整个处理过程将会变得更加简单易用.简单性促使我们认为它应该是更少的,但是其实它真的应该是”刚刚好”. Edit By MaHua
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Why Sass?</title><link>http://taoalpha.me/blog/2013/12/16/read-translation-why-sass/</link><category>read</category><tag>HCIBib,Sass for web designers,翻译文章,译系列</tag><pubDate>2013-12-16T08:00:00.000Z</pubDate><description>好久不写HCI翻译项目了~恩,拾起~哈===========================================正文===============================原作者:DAN CEDERHOLM @ November 13,2013
原文备注: 这是DAN CEDERHOLM&amp;lt;&amp;lt;Sass For Web Designers&amp;gt;&amp;gt; 一书的一部分摘要.
正文:
我并不是一个Sass的虔诚信奉者. 我一般都是自己写样式表! 我不需要任何帮助!而且我当然不想要给我的工作增加任何的复杂成分.所以,请走开(Sass)!
无论如何,这是最初的想法.但是实际上,Sass以及其他的CSS预处理程序都可以成为一个非常强有力的帮手,一个任何样式作者都可以轻易的在日常工作中使用的工具. 它确实让我犹豫了好一阵儿,不过我非常确定我很高兴我真的这么做了.
而这也是我想要写这本书的原因. 来分享我是如何通过使用Sass在保持我自己10年来形成的舒适的CSS写作方式的同时让自己变得更加高效的.最初,我对Sass有很多误解,这也是一直阻止我去接近它的原因.我一直担心自己需要完全变更自己已有的写作和管理样式表的方式.因为CSS很多时候确实很琐碎,所以对于作者们希望保护自己的创作的心情是可以理解的~不是吗?
恩,所以,我在此向大家展示Sass是如何在不打断你的工作和处理方式的同时让你的生活变的容易的~我会阐述Sass的各个方面: 如何安装?如何使用?以及它是如何在我自己的项目中帮助我们的.幸运的话,我希望你也能成为一个Sass的信奉者~
Sass的电梯游说

假如你要做个小改动,比如说一个颜色值,然后你发现自己需要在多处修改这个值.难道你不希望CSS可以允许你这么做吗:
12345678$brand-color: #fc3;a &amp;#123;color: $brand-color;&amp;#125;nav &amp;#123;         background-color: $brand-color;&amp;#125;
如果你只需要在一个地方修改这个值,然后整个样式文件都会生效,这样岂不快哉?用Sass就可以!~
再比如在样式文件中多处重复使用的样式模块:
12345678p &amp;#123;margin-bottom: 20px; font-size: 14px; line-height: 1.5;&amp;#125;footer &amp;#123;         margin-bottom: 20px;         font-size: 14px;         line-height: 1.5;&amp;#125;
如果把这些共享的规则都放进一个重复使用的模块中不是更奇妙更好吗? 再一次,利用Sass你就可以只需要定义一次,然后在任何地方使用它了
1234567891011     @mixin default-type &amp;#123;     margin-bottom: 20px;     font-size: 14px;     line-height: 1.5;&amp;#125;p &amp;#123;@include default-type;&amp;#125;footer &amp;#123;     @include default-type;&amp;#125;
这些都是Sass的功劳!这两个极为简单,只能算得上Sass工作的皮毛的例子已经足以告诉你Sass是如何让样式文件的制作更加的快捷,更加的容易以及更加的灵活~这是一个在网页设计领域非常受欢迎的助手, 因为任何一个制作网站的人都知道…
CSS很难我们需要面对这个事实: 学习CSS并不是一个容易的事情.了解每个属性都能做什么,层叠是如何工作的,哪个浏览器支持哪个属性,选择器,各种技巧等等,这并不容易.再加上我们现在这个时代流行的界面的复杂度,以及长时间的维护…等等,为什么我们再次开始抱怨这些? 这是一个迷,而我们中的部分人会非常享受最终的完工一刻~但CSS的问题还在于它最开始并不是用来做现在做的事情的.当然,因为浏览器快速的而更新以及CSS3的实施等,CSS有了一个非常不错的转变~但是我们仍然需要依赖那些技术,或者说,那些技巧.比如说float这个属性,其实是设计来让在一个文本块中的图片能够很好的对其.对,就是这样,而我们则逐渐利用这个属性来调整整个界面的布局~我们的样式表更是拥有者大量的重复.颜色,字体,以及经常使用的成堆的样式属性等等.一个典型的CSS文件是一个非常极端的线性文档–那种让一个面向对象的程序员想要把自己的头发揪掉的东西…我并不是一个面向对象的程序员,但是我确实剩下没多少的头发…你可以尽可能曲解此意..随着界面和网页应用变得更加强大和复杂,我们正在将原本的CSS运用到更加广阔的地方,那些想都没想过的地方.我们实际上很享受其中.幸运的是,浏览器一致在非常快速的适应着最新的CSS特性,利用更加高效抢到的属性以及选择器来解决各种现在遇到的问题.那些像CSS3新的层级属性:border-radius,box-shadow,以及高级的选择器,变化,变形,动画等等.这是一个令人兴奋的时代,当然,CSS本身还有很多的欠缺.随着漏洞的逐渐修补完善,样式的制作者们的生活应该变得更加容易~DRY原则如果我们窥视到软件工程的世界(这里我更喜欢用窥视而不是逛悠,也更加自然),我们可以很快的了解到那些关于组织结构,变量,常量,控制变量等概念都是非常根深蒂固的,对于创建复杂系统都是非常关键的工作.你可能听说过”不要重复(代码)”(DRY)原则.由Andy Hunt以及Dave Thomas在他们的&amp;lt;&amp;gt;一书中提出,含义是:知识的每一个碎片在其系统内都一定有一个单独的,不混淆的,权威的表述.这一观点的提出是因为重复的代码很容易造成失败以及对开发者造成困惑.同样作为常识:把公用的模式只写一遍然后在整个程序中重复使用.这对于维护代码也会更加高效而容易.CSS就是典型的DRY原则适用者.曾经,它充斥着各种重复的规则,声明,属性等等,在整个样式文件中我们不断的重复着那些颜色,字体等常用的样式类型…一旦看过一个适当的CSS文件,一个DRY原则实践者一定会泪牛满面的,先是困惑,然后会遇到失望于挫折.“如何维护这些恶心的符号!@#$?”他们会问.“我告诉你过关于IE的bug吧?”你一定会带着一丝厌恶的回答他.那么为什么CSS会这么的难用呢?我们可以从CSS的共同创始人Bert Bos的一篇文章中获得一些提示:  CSS停用了很多在其他语言中使用的比较强大的功能,比如宏,变量,符号常量,条件语句,变量表达式等等,那是因为这些东西会让很多厉害的使用者们获得更多的方便和技巧,但是那些经验比较少的人常常会不自知的陷入其中,不能自拔; 或者更可能的是,他们甚至不会去尝试接近CSS.这算是一个平衡,而且对于CSS而言,这个平衡还略有不同.  最初的CSS构架是经过深思熟虑后的.他们非常希望能有更多的人可以自己创建网站.他们希望CSS能成为一个足够强大的工具来自定义他们的网页,在易用和易于理解的同时又能和内容的展示区分开来.我当然对此表示非常尊重.同时,我们又必须承认我们目前的工作正在越来越复杂,越微妙,也越来越有挑战性,无论是维护还是未来发展.幸运的是,还是有很多方法可以帮助我们脱离苦海,其中之一就是使用Sass.什么是Sass?Sass是一个CSS的预处理程序–一个介于样式表和css文件之间的中间层.Sass(Syntactically Awesome Stylesheets的简称)为CSS填补了不少漏洞,允许你利用DRY原则更快的coding,更加高效也更加容易的维护.Sass官网上给出的简介如下:  Sass是一个基于CSS之上的元语言,用来更加整洁以及结构化的方式来描述一个样式文本,比单纯的CSS要更加强大.Sass同时提供了一个更加简单,更加优雅的CSS语法以及更多样的特性使用来创建更加可控的样式文件.  所以,当常规的CSS不能允许的诸如变量,复用块以及其他的好东西,Sass都可以提供,为你的CSS开启了”高级功能”模式.之后又可以通过一个命令行程序或者网页框架插件把这些语法翻译成一个常规的CSS文件.更特别的是,Sass是一个CSS3的扩展,而且它的SCSS语法–我们稍后会谈到–是CSS3的父集.意思是,任何有效的CSS3文本都是一个有效的SCSS文本.这促成了Sass可以作为一个你很容易使用的工具.开始Sass的过程是没有任何痛苦的,而且你可以随意的使用或多或少的SCSS语法~这也意味着将一个现成的CSS文件转为SCSS格式的文件是可以分步进行的,随着你对Sass的功能的了解而逐步加深.稍后,当你已经熟练使用Sass时(这不会需要多少时间),它就会变成一个CSS的扩展,非常自然,就好像CSS自己把我们想要它弥补的那些漏洞补上了一样.这也是为什么,一旦我开始使用Sass后,我就从来不曾认为它有任何的尴尬或者费劲–它就像CSS应该做到的那样.一旦你开始尝试了,你很有可能就会永远的离不开它.Sass的误解

我之前提到过我非常犹豫的尝试Sass.这也是因为我在使用它之前听到的大量的传闻.我需要先了解Ruby或者高级的命令行技巧吗?我需要完全改变我写css的方式吗?输出的css会不会很臃肿完全不能看呢?
谢天谢地,以上所有的问题的答案都是否定的,当然,但是我确实能从各种网络渠道到听到很多人在提到Sass的时候蹦出这些问题…让我们来清理一下一部分流言:
我很恐惧命令行…无论从哪方面讲我都绝对不是一个命令行专家,但是这么多年来,我或多或少的在不同地方学到了一些,刚刚够让我陷入困境的…我不担心切换文件系统或者使用Git命令等.那意味着,我同情那些设计师以及前端开发者,他们从不担心这些.在一些人群中确实有一种命令行的恐慌.对于Sass,只需要非常少的一些命令行操作-实际上,一个命令行就足够做到所有了~更何况,现在有很多app以及网络框架都可以让你免受命令行的打扰来实现一切.(在下一章我会介绍这些工具)所以,如果你想要避开命令行,那么不要让命令行成为阻止你接触Sass的理由~我不想要改变我写CSS的模式

这是我当时所持有的一个误解.我特别在意的就是我的样式文件的结构和组织方式.这里有非常多的个人习惯存在其中. 但是要记住,因为SCSS是一个CSS3的父集,所以你完全不用改变任何你写CSS的方式和习惯.注释,缩进或者不缩进等,所有你所偏好的设置都可以保留在.scss文件中.一旦我了解了这些,我就没有任何恐惧的开始了Sass之行.
我不想要SASS改变我设计的方式

另一方面,Sass并不会解决你所有的问题,也不会纠正你的话习惯.更无效率的是,臃肿的样式即便用Sass也会同样的臃肿.良好的组织以及敏捷的思考仍然适用这里.实际上,有很多例子证实Sass可以放大一些弊端,这些我们稍后也会到.但是当使用的足够合适和明智,Sass将会成为一个非常优秀的网页助手.
好吧,我们先把所有的细节都移开,让我们先玩些有趣的事情.我想你一定会被Sass所能做到的事情所震惊的.在下一章,我会建立起我们的工作流–Sass是如何适应你的处理流程以及在命令行或者app中操作它是多么的简单.让我们开始Sass吧~凡人们!
DONE!–有兴趣的可翻阅全书! 从国外网盘找到了先关资源~分享给大家(因为公开分享会导致审核失败…所以只能私密了,领取码为:77ur)~有机会可能会翻译全书.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>What is Pythonic?</title><link>http://taoalpha.me/blog/2015/03/08/read-what-is-pythonic/</link><category>read</category><tag>coding,python,pythonic,翻译文章,译系列</tag><pubDate>2015-03-08T08:00:00.000Z</pubDate><description>[缘起] python算是我最常用的语言之一了, 随着最近对自身定位的思考以及抉择, 我也开始逐渐加深自己对知识领域的纵深了解了. 所以开始有意识的去更加全面, 深入的了解一些喜欢的东西, 正如福尔摩斯所言: 人类的大脑是有限的, 我们应该尽量装入更多的有价值的东西, 而不能让无意义的东西占据有限的空间. 又扯远了… Pythonic是最近看到的一个名词, 于是简单做了下搜索, 查到了一个05年的定义, 考虑到虽然时间有点久远, 但是本身pythonic的基本没有多少变化, 所以还能勉强拿来借鉴的.

作者写文本是回答一个在EuroPython会议邮件中的同一个问题. 考虑到这是个很有趣的问题, 而且作者本身也已经见过多次pythonic这个词语, 却一直没怎么看到过一篇很详细的解释, 所以作者写本文总结了自己以及其他人对这一名词的理解.

[正文]  pythonic是一个很模糊的概念, 但又不至于像”智慧”或者”生命”那种你完全无法准确定义的模糊. 但是无法被定义不代表他们就是无用的, 尤其是人类本身对于这种模糊定义的事情非常擅长. Pythonic 的意思是”易读易于人类理解的Python”,  下面我们则针对它的意思进行简单的介绍.

随着时间, Python在逐渐的发展, Python社区也在逐渐的成长, 于是出现了很多关于如何正确的使用python的想法. 而python本身也非常鼓励用多样的风格方法来实现各种任务. 而新的风格方法也会反过来帮助python社区以及python语言的发展. 举个简单的例子就是dictionary对象的.get()方法, 它结合了对象的读取和has_key()函数的调用这本来需要两步完成的操作.

很多时候有些风格方法也不完全是直接从其他的语言中借用来的. 以C语言中的列表元素循环为例, 下面是在C语言中的写法:


1234for (i=0; i &amp;amp;lt; mylist_length; i++) &amp;#123;    do_something(mylist[i]);&amp;#125;&amp;lt;/code&amp;gt;
而直接转换到Python中会是如下写法:


12345i = 0while i &amp;amp;lt; mylist_length:   do_something(mylist[i])   i += 1&amp;lt;/code&amp;gt;
虽然这样写也没有错, 但是通常我们不认为它符合Pythonic的原则. 这绝不是python语言所鼓励的风格. 我们可以进行一些修正. 通常来说, python中建议用内置的range()函数来生成一个纯数字的列表:


123for i in range(mylist_length):     do_something(mylist[i])&amp;lt;/code&amp;gt;
但是这样也不能算是pythonic. 那么符合pythonic的方式是如何写呢? 如下所示:


123for element in mylist:    do_something(element)&amp;lt;/code&amp;gt;
在comp.lang.python 上有一个常见的问题是如何传递以及直接修改引用, 而这本身在python中是不能实现的, Python中只有assignment(类似import, class以及def这类). 很多时候, 我们会希望在自己写的函数中返回多个值. 那么在C语言或者其他很多语言中推荐的方式都是传递指针或者引用到函数中去:


12345678910void foo(int* a, float* b)&amp;#123;    *a = 3;    *b = 3.5;&amp;#125;...int alpha;int beta;foo(&amp;amp;amp;alpha, &amp;amp;amp;beta);&amp;lt;/code&amp;gt;
在Python中也确实可以利用一些策略实现把函数返回结果赋值给变量 , 比如:


12345678910def foo(a, b):    a[0] = 3    b[0] = 5.5alpha = [0]beta = [0]foo(alpha, beta)alpha = alpha[0]beta = beta[0]&amp;lt;/code&amp;gt;
但是这种用法就相当的不pythonic了, 我们通常可以直接使用更好的方法, 利用数组:


12345def foo():    return 3, 5.5alpha, beta = foo()&amp;lt;/code&amp;gt;
对于那些不那么pythonic的代码, 那些有经验的python程序员是很容易可以看出来的, 因为这样的代码往往会比较奇怪或者粗糙笨重. 往往还会感觉非常冗余, 难以理解, 尤其是和使用正常的, 推荐的, 简介的方法相比.  而且语言本身也是为了支持正确的风格方法,  所以那些不好的方法执行速度也会很慢.

那么如何做到pythonic呢? 简单说就是要保证结构和数据结构都简介, 高可读性. 只在需要时为实例生成动态的类型而不是到处定义冗余的变量. 而遵循pythonic的优势之一也是为了不给那些有经验的python程序员带来因为陌生代码而引起的不必要的麻烦…

pythonic除了在这种低效风格上外, 还有很多别的用处. 比如对于一个library或者框架而言, pythonic就意味着简洁自然, 能够让一个python程序员很容易的使用. 通常一个用python写的library或者框架,  如果不能有效的帮助程序员写出优质的python代码也会被认为不算是pythonic.  可能是因为它没有使用python提供的一些结构, 比如类啊, 虽然有时候这样做能够让library更加便捷或者更加容易理解.  有时候利用类似可以把函数作为参数传递给函数的方法也能够带来很多帮助的.  在一个library的类中, 有时候你可能会像在Java中那样去隐藏一些信息, 但是在Python中则相对更为宽松, 属性默认是开放的但是程序员可以通过前置下划线来声明其私有属性.

当然, 当你达到使用libraries和框架的境界前,  有时候判断是否符合pythonic会更加困难或者界限模糊. 但是我们依然有一些原则可以借鉴. 其中之一就是尽量简洁, 避免废话: Python的接口跟倾向于小而轻, 尤其是和Java的相比起来. Python中那些有着非常详尽的复杂的API通常被认为不那么的Pythonic. 比如W3C XML DOM API就是个典型的例子. 有一些人认为它很像JAVA的风格, 但是实际上就我所了解的, 很多JAVA的程序员也并不是很认同这是JAVA风格的.

一个基于Python的框架只要不是在重造轮子的话倒是可以被认为是pythonic的, 当然它也要符合python的一些通用方法. 

当然问题在于框架既然被称为框架, 不可避免的会引入一些模式或者方法是那些习惯小型应用的所不熟悉的. 这也是你发挥一个框架的为例的途径. 比如我比较熟悉的一个Zope 2的框架, 就是一个典型的例子, 它引入了很多你平时不会经常使用的方法. Acquisition就是一个典型例子, 但这样的结果就是Zope 2在很多有经验的python程序员眼中是不符合Pythonic的.

想要创造一个pythonic的框架是很困难的. 这一点和如今Python本身越发完善, 优秀无关. 有一些诸如generator, set, unicode string和datetime的功能都已经被认为算是pythonic的了. Zope 2则是一个过于年轻的框架, 所以一定程度上到也不能责怪它, 毕竟它是97年才创造的. 考虑到这一点, 它已经很不容易啦.

近些年来通过我自己的观察, 是可以找到一些pythonic下的新趋势的. 尤其是基于一些标准的常用python库的发展来看. 比如Twisted, Zope 3, 以及PyPy他们都或多或少的遵循这下面这一模式:

模块名称简洁, 基本使用小写, 单数形式;包名称通常只是包名, 基本都有一个空的init.py文件.

我也沿用了同样的方式在我写的lxml库中.

有时候我认为把一个软件直接谴责其不够pythonic是一件不公平的事情, 因为有时候会影响人们看到它更有价值的一面. 一个功能不那么强大的框架往往更加容易去学习和使用, 而那些符合pythonic的框架有时候往往反而需要花费更多的时间.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>7条规则助你创造优质UI-上篇</title><link>http://taoalpha.me/blog/2014/11/26/read-7-rules-to-help-you-create-high-quality-ui-part/</link><category>read</category><tag>Design,UI,关于HCI,翻译文章,设计,译系列</tag><pubDate>2014-11-26T05:00:00.000Z</pubDate><description>本文来自Medium, 分为上下两篇, 讲述了在制作UI的时候的7条实用规则, 表示个人喜欢最后一条”steal like an artist”…刚看完”the art of steal”…哈哈

不说废话.. 本文作者特别强调了下文章的适用对象主要有两种:

想要尝试自己设计UI的开发者们想要自己的作品集看起来更优秀或者是想要让自己的UI套装有更好的用户体验, 能卖个好价钱的UX设计师们

同时作者还特别说明了一下,  针对那些技术学校毕业的, 已经是UI设计师或者向着UI设计师前进中的孩纸们, 就可能会觉得本文比较枯燥, 乏味, 甚至是错误了. 作者针对此的建议也是: 请不要犹豫关闭本tab, 拜拜不送.

那么如果你还是本文的受众, 请继续阅读:

作者背景: 作者是一个UX设计师, 没有什么UI技能. 他很喜欢设计UX, 但是没做多久就发现把UI设计好的好处多多啊:

我的作品集如果很糟糕的话, 就会反映出我自己在工作和思维过程中可能同样很糟糕我的那些UX咨询客户们宁愿花钱请一个技艺娴熟的UI设计师做设计而不是向我这样给出一堆手绘草图我会不会突发奇想的去加入一个创业公司呢? 那么最好有这个技能

一般来说UI设计不行的人都会这么给自己找借口: 我的专长是工程(交互等), 我对美学这东西一窍不通. 所以我做出来的东西看起来很丑也是一件很正常的事情.

接着作者介绍了一下自己如何向着美学前进的, 无外乎就是Google, Dribbble, Pinterest到处搜然后从模仿研究伟大作品开始~ 中间作者给出了一个很不错的建议:

  致广大的呆子们: 如果我现在能够说自己在UI上有所成绩, 那么一切都是因为我研究过一些东西-而不是我对于美学和平衡有什么直觉性的天赋.

哈哈, 这也是为什么我喜欢这篇文章的原因: 文章并没有什么深奥的理论和赤裸裸的美感炫耀, 而是非常简单的应用技巧, 让你从一个美盲到一个能够做出不错UI的人.

下面说正题: 规则.

Light comes from the sky (光从上面来)Black and white first (黑白优先)Double your whitespace(留白要多)Learn the methods of overlaying text on images (学习各种在图片上加文字的方法)Make text pop— and un-pop (合理的让文本突出或者不突出)Only use good fonts (只用好看的字体)Steal like an artist (像艺术家一样懂得模仿)

#1  Light comes from the sky

阴影在设计上应用广泛, 而且价值无量, 因为它可以在无形中告诉我们所看到的界面元素是什么. 光产生阴影, 而光从上方向下方照射则是一个非常常规的事情, 以至于一旦我们改变这个规则, 就会显得很诡异, 比如下面这张图片:



正常的上方投射光会使得元素的顶部为亮层, 阴影则出现在下层, 从而形成一种立体感. 这让我们即便是针对二维的屏幕也能产生三维的感知.



上图是作者非常喜欢的一个点击示意图. 单从光方面分析以下里面体现的细节:

按前的按钮底部有明显的暗边 – 因为光没有找到.按前的按钮上部分要比下面略微亮一些 – 这是在模拟一种轻微的弧状凸面, 上部因为反光会更加明亮按前的按钮边缘有非常轻微的阴影 – 在放大的图层中看到的比较明显按下的按钮, 虽然下部依然没有上部亮, 但是整体都变暗了 – 因为按下后, 感觉按钮就被压到平面里面, 阳光就不容易照到了(至于你说我们实际生活中看到的按下的按钮显得更暗, 那是因为我们的手挡住光线所致..)

就这么个小按钮就能够反映出很多的细节. 



上面是iOS 6下的一个实例, 虽然可能有些过时了, 不过单纯从说明问题的角度来说还是可以的.

里面涉及的光照应用就不多说了, 直接看图就能看出些了~



还有向上面这种, 通过明暗来表现一中凹陷堎的效果.

概括来说:

通常为凹进去的元素有:

文本输入域按下的按钮滑轨未选中的单选按钮复选框

通常为凸出的元素有:

未按下的按钮滑块下拉触发按钮卡片单选按钮中的按钮部分弹出框

如果你仔细观察以下, 你就会发现它的应用无处不在.

那么, 对于扁平化设计, 又该怎么说呢?



iOS 7开始, 苹果引入了扁平化设计, 去掉了所有的阴影啊等等拟物化的细节.  就此而言, 作者并不欣赏, 作者虽然也很喜欢简单明了, 但是他认为这种扁平化设计绝非能够盛行不衰的设计风格, 作者认为还是模拟现实的拟物化更加自然.

不过鉴于如今扁平化风行, 所以作者比较推荐半扁平化设计. 其实是在扁平的基础上加入了层级关系, 保留了阴影形成的立体感.



我觉得吧. 这块没什么对错, 扁平化设计有很多好处毋庸置疑, 拟物化设计的自然美感和各种细节都让人着迷. 但是拟物化本身的特点是来源于让你们更自然的使用科技产品, 把生活中的东西搬到电子中去, 但是, 在产品适应人的过程中, 人也在适应着产品, 所以apple盛行的今天, 其形成了扁平化的设计风格, 也是基于用户对于拟物的需求已不那么必要, 很多拟物的元素甚至都消失在历史长河中去了.  光线也不在局限在日光上了, 如今不夜已经不再是个夸张了. 年轻人, 尤其是年轻的消费者喜欢新颖, 喜欢未来感十足的产品, 而扁平化带来的就是这样的感觉.  当然, 也不是只有扁平化能带来这种未来感, 像我, 就更喜欢material design的层级立体平面. anyway, 人类适应了科技, 自然不再需要更多的现实参照物来去运用科技了.

哈哈, 刚写完上面的话就看到作者谈及了material design. MD是一种统一的视觉表现, 核心就是去模拟真实的物理世界(注意! 这里是物理世界哦, 不是现实世界, 所以科技感有了, 立体感也有了).





可以感觉出作者对material design还是比较欣赏的. 作者也承认拟物化(即模仿现实世界)有点过时了, 但是作者相比于纯粹的扁平化, 更欣赏半扁平的那种设计. 这也是纯粹的扁平哦~ 哈哈

#2: Black and White First

在设计初完全使用灰阶作图而不加任何颜色可以让设计更加纯粹, 且暂时不用考虑最复杂的视觉设计元素–颜色, 而聚焦在布局上.

如今到处都在喊”移动居先”, 设计师们也都在响应式设计的路上越走越远… 这都要求你更多的关注页面的布局, 在移动端是什么样, 在大屏上又是怎样.

这种限制其实很好, 因为它有助于帮助我们思考. 我们需要从小屏开始, 这通常比较困难, 但是想清楚了小屏的用法, 那么再去应用到大屏上就会容易很多了.

而 Black and White First则是另一个类似的限制. 如何让一个app显得很高端大气实用, 但是又不实用任何的颜色是一个困难的问题, 在解决了这个之后, 再去以颜色辅助.



使用灰阶可以免除很多颜色的干扰. 毕竟颜色加多了很容易毁掉你的设计的.







灰阶设计完事了, 就要进入第二步: 上色了.

最简单的上色方法是只用单色.





只用一种色的好处是能够非常明显的强化你的亮色元素.

如果一种色不够, 那么你就可以尝试2种色或者多种色但是用同样的饱和度(通过调节同一个颜色的饱和度和亮度, 就可以得到一系列的颜色, 有强有弱, 轻重点和内容跟你一区分.)



#3:  Double your whitespace

留白是门艺术! 真的, 在不加任何样式的html上你就能看到样式给html带来的巨大变化!!!… 毫无美感… 我们需要留白来帮助你更好的布局自己的元素, 不是满满的就都是爱了…



上图是一个music player的设计示意图. 里面就有很多的留白示例, 可以重点关注下左侧菜单栏和顶部的导航栏, 搜索框. 都是大量留白, 让人赏心悦目.

那么, 怎么留白呢?

你可以按照下述的步骤试试看:

在行与行之间加上些空白;在元素与元素之间加上空白;在一组元素与另一组元素之间加上空白;看看哪种有效果, 就用之;

下一篇介绍剩下的四种~
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>简述一次网页浏览行为的过程</title><link>http://taoalpha.me/blog/2014/11/26/read-brief-web-browsing-behavior/</link><category>read</category><tag>request,翻译文章,译系列</tag><pubDate>2014-11-26T12:00:00.000Z</pubDate><description>原文其实是讲述我们应该如何为性能做更好的考虑, 其中简单介绍了一个request从发出到结果展现的整个过程, 尤其是其在移动网络和常规网络的区别非常有趣, 所以特定分享以下.

我们的上网行为, 简单来说就是一个浏览器和一个网络服务器之间的数据交换.  而从我们点了确认/提交/Go之后, 到页面开始进行加载, 这个过程基本就是一个请求啦. 拆解一下呢, 我们初始的请求会带着一些参数从浏览器出发发送到一个DNS服务器上去, 它会把URL解析为一个IP地址来找到我们这个URL指向的主机, 然后又DNS向主机发送请求, 获取指定的主机内容, 再返回给我们的浏览器.



整个过程就是如此了. 这基本是我们常规的设备通过wifi或者有限网络浏览网络的全过程了. 那么对于一个连接到移动网络的设备而言, 会多出一步了: 浏览器首先会把请求发送给信号基站, 由信号基站转发给DNS, 然后开始正常的网络请求循环.  而这个多余的过程, 即便是以3G速度而言, 也需要一定的时间, 相对于网络中以百万分之一毫秒来计算, 这个时间绝对不短. 大致算下来, 移动设备联网过程会比Wifi要慢2s之多.

2s看起来比较短, 但实际上对于连300ms的延迟都能感觉到的用户而言, 2s绝对是个灾难性的影响了. 这也是为什么移动网一直比不上wifi的原因了. 

不过幸运的是, LTE和4G的慢慢普及, 相信这种差别一定会降低很多, 以后的访问速度一定会快很多的.

至于说请求返回浏览器后到页面真正完整展示出来的过程, 其实是浏览器的渲染过程了, 这个很多时候取决于浏览器本身的渲染引擎和机制了. 通常来说, 除了本身的HTML外, 主要有CSS和JS两个资源需要加载, 通常来说, css会优先加载,  在html文档渲染前就会完成加载, 从而不影响HTML的视觉展现, 而JS, 则通常可以后加载. 不过JS和CSS的加载都会影响页面的展示, 通常来说, 两者加载和执行的过程中, 页面是不会渲染展示的, 这一过程称之为Blocking.  当然这个过程你是可以中断的,尤其是中断js的加载很多时候不会影响到页面的视觉效果(前提是js不涉及DOM操作), 这也是为什么有时候你的loading菊花转着转着你叉掉了页面还是会加载出来的原因.



不过, 图片元素通常是不会被blocking的, 浏览器不会等待一个图片元素加载完成后才进行页面渲染~ 所以经常出现页面加载后, 图片没显示完整的现象.

这种blocking的机制主要是为了防止裸露的HTML带给用户的糟糕体验, 毕竟如果css在html之后加载, 那么无样式的html会先渲染展示, 然后样式加载完在reflow, 感觉就很痛苦了… 这种闪一下的现象通常叫做: Flash of unstyled content(FOUC). 所以现在浏览器通常都采取blocking的方式来保证用户看到的页面的视觉效果. 而blocking对js而言主要是为了应对document.write这个函数, 其实根本来说也是为了一次性让用户看到比较完整, 好看的内容. 当然, 现在其实很多人都不推荐大家使用document.write这个函数, 毕竟js经常会导致更多的blocking时间, 但是毕竟有人再用… 而且浏览器又没办法提前判断js中用没用这个函数…

恩, 基本上, 从一个请求发出到页面加载的过程就是这样了~ 如果想要提高性能, 自然也就从这里面涉及的各个方面着手喽~
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>设计心理学系列(1) - 网络心理学</title><link>http://taoalpha.me/blog/2015/05/08/read-design-psychology-1-cyber-psychology/</link><category>read</category><tag>Cyber Psychology,设计心理学</tag><pubDate>2015-05-08T12:00:00.000Z</pubDate><description>什么是网络心理学?网络心理学是随着互联网等新技术出现以及发展而逐渐发展起来的一门新兴科学. 它所研究的领域就是网络与心理学的结合, Cyberpsychology本身由两个词合并而成, 前者Cyber是取自Cybernetics, 代表着对于机械控制和与之通信的研究, 代表着对新兴网络领域的研究, 而心理学则是对人脑和行为学的研究. 两者的集合即表明了Cyberpsychology的研究领域主要集中在了人与新兴机器系统(包含虚拟系统)的心理学研究.
网络心理学简介演化历史Cyberpsychology最开始是集中关注于人在操作机器以及与机器交互的过程中的心理学变化, 后来随着电脑的出现以及普及, 互联网的诞生以及发展, 加上新兴智能机器的出现和发展, 都使得Cyberpsychology的研究重点放到了互联网上面. 而随着虚拟现实技术的出现, Cyberpsychology的研究范围再一次的增广, 可以说, Cyberpsychology的研究范围基本会随着cyberspace的领域增长而延伸.
通常认为John Suler, 来自Rider University的心理学教授, 是Cyberpsychology的奠基人. Suler教授是最早开始关注与网络对人们心理变化带来的影响, 其出版的The Psychology of Cyberspace一书也是被认为最早整合性的Cyberpsychology学术作品.
从1960年代, 计算机开始出现网络系统, 到1980年代世界性互联出现, 领域内专家, 极客作为初始用户. 又过了10年, 随着超链接的出现, 衍生了一个对普通人更友好的万维网. 全球互联网正式诞生.
随着人们对互联网的使用越来越频繁, 开始逐渐有心理学研究人员关注到这一领域, 慢慢促成了Cyberpsychology的诞生. 而随着互联网对人们生活的侵入越发全面, 这一领域也越来越收到人们的重视, 而随着互联网的发展, 新技术的出现, 这一领域也在不断的自我演进. 
很多人都预言未来毫无疑问将会是网络的时代, 而随着智能设备, 智能家居以及虚拟现实的出现, 都让这一预言变的更加可信. 所以研究人与网络的交互过程对人类本身的影响反馈是非常重要而值得的.
参考视频: The Birth of CyberPsychology - 需翻墙
包含方向目前人们对于Cyberpsychology的研究方向都还集中在那些因网络出现而造成的明显影响之中, 尤其是那些负面影响, 目前大体的一些主流热门话题都围绕在以下几个方面:

网络成瘾问题;
网络身份与自我认知问题;
网络关系问题;
网络与现实的表现差别问题;
网络人格/性格问题;
虚拟现实领域;

…
网络心理学的研究知名人士
Dr. John Suler - The founder of the Cyber Psychology
J. &amp;amp; Parker - The author of the Cyberpsychology
Bernard Luskin - Launched the first MA/Ph.D program in Media Psychology

重要期刊
Journal of Computer Mediated Communication
Cyberpsychology: Journal of Psychosocial Research on Cyberspace
Cyberpsychology, Behavior, and Social Networking
Journal of CyberTherapy &amp;amp; Rehabilitation

阅读书目
The Psychology of Cyberspace by John Suler
Cyberpsychology by Alison Attrill
Cyberpsychology: An introduction to Human-Computer Interaction
Cyberspace Romance: The Psychology of Online Relationships
The Psychology of Menu Selection: Designing Cognitive Control at the Human/Computer Interface (Human/Computer Interaction)

参考文献
Wikipedia of Cyberpsychology
The psychology of cyberspace
Cyber Psychology &amp;amp; Cyber Sociology
Cyberpsychology and Vitrual Reality
The first decade of CyberPsychology

2015-05-09 By 
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>52WeeksOfUX-第一周(译)</title><link>http://taoalpha.me/blog/2013/06/11/read-first-week-of-52weeksofux-translated/</link><category>read</category><tag>Design,UX,产品学习,翻译文章</tag><pubDate>2013-06-11T12:00:00.000Z</pubDate><description>The First Rule of UX(UX第一定律)“你不得不交流.所有的行为本质都是一种交流.因为行为本身没有一个完全相反的概念(没有反=行为的概念),所以不可能不去交流.(这个因为所以没有看懂啊)”–Paul Watzlawick关于沟通的第一公理.
这是UX的第一条规则.设计师所做的任何事都会对用户体验造成影响.从一个有一天添加的设计元素到一个关键信息的疏忽遗漏,每一个决定都在塑造着我们设计服务的用户的未来模型.
因此,任何一个好的设计师的首要目标都是传达预期的信息…这可以促进用户体验的提升.文案,文本颜色,表格的对齐,导航链文字标题的大小写–即便是没有设计模式,也都是沟通的一部分.
了解了这些,我们可以问这样的一个问题(最好也能回答):”这个元素和我想要向用户传达的信息是相辅呢?还是相悖呢?”而且,通过询问这些,你可以重新定义改善一些细节;一些经常不被注意的细节,而这些通常组成了最终的用户体验.
What makes the user experience?用户体验是由一个用户和你的品牌,公司,组织的全部交互所组成的.这将可能包含于你的软件的交互,与你网站的交互,与你电话服务中心的交互,与广告的交互,以及在他人电脑上指指点点的交互,与一个移动应用的交互,与你Twitter账户的交互,与你通过邮件的交互,可能甚至是面对面的交互.这些交互的总和构成了用户体验.
交互设计师就是在这个时候发挥作用的.他们的一部分指责就是让所有的交互都灵活,包含所有软件,文案,图形,布局,用户流动,物理体验的各个方面.对于一个体验而言,如果一部分极好而另一部分极差,那才是羞耻.内聚力是非常重要的.
用户体验贯穿了很多的实际工作.以建筑为例,如果一个建筑师被雇佣来为一个财力雄厚的客户创造一种很棒的用户体验,他们将不会止步于设计人们的居住环境.他们会花时间花精力去关注周边的绿化,车道的弧线,每个角度的视觉感受..可能甚至是客户可能打招呼的方式以及桌椅摆放的方式.所有的这些触点对于一个大型的系统都是重要的组成部分..而房屋仅仅只是这块大拼图的一片而已.
网页设计师,传统观点中的网页创建者,现在有了更广的领域.因为用户体验设计时的环境比以前变的更广了.所以,我们必须调整我们的设计方法,包含用户体验的方方面面.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>How Users Read on the Web(译)</title><link>http://taoalpha.me/blog/2013/06/04/read-how-users-read-on-the-web-translation/</link><category>read</category><tag>HCIBib,产品学习,网页浏览,翻译文章</tag><pubDate>2013-06-04T10:00:00.000Z</pubDate><description>本文主要是针对网页上的文字排版对于用户阅读的影响,列举了三种不同的处理方式以及混合情况下对网页可用性的提升效果.他们从不阅读。
人们极少逐字逐句地阅读网页上的内容，他们只是扫视页面，选取某些字词语句来阅读。 在关于人们如何阅读网站的研究中，我们发现大概79%的测试用户对于任何他们进入的页面都是采用扫视的方式阅读，只有16%的用户 是逐字阅读的。(更新：一个新的研究发现用户在阅读email时比阅读网站更加散漫。)
所以，网页需要提供可以扫视的文本信息，利用：
    高亮关键字(超文本链接是高亮的一种形式，字体和颜色变化也是高亮的形式)    有意义的子标题(不算作很明智的选择)    符号列表    一个段落一个主题(如果用户没有段落中前几个词所吸引的话,那么他们会跳过剩下的所有)    倒金字塔风格,先说结论    相比传统的写作而言,字数至少要减少一半我们发现可信性对于网页用户而言是非常重要的,因为对于网页信息背后的作者以及网页是否可以信任是不清楚的.可信性可以通过高质量的图片/优秀的写作以及向外的超文本连接来提高.外链表现出作者已经做完了该做的,并不担心用户访问别的站点.
用户厌恶”商业感”,通过主观的自我夸赞和宣言(有史以来最经典的)来提升写作风格在当下的网页中已经不再使用了.网页用户非常忙碌的,他们想要得到最直接的结果.还有,如果用户清晰的看到网站在夸大,可信性会一落千丈的.
衡量提高网页写作风格带来的影响
为衡量一些我们已经确认的内容指南所带来的影响,我们制作了想通网站的五个不同的版本(形同的基础信息;不同的措辞;相同的站点导航).接着我们让用户在不同的网站下完成相同的任务.正如下表中所示,易用性在简介版本以及浏览性版本的网站中得到了很明显的提升(58%以及47%的提高).而且当我们将三种 方式整合到一起来提升写作风格,形成一个单一的站点,结果会更加炫目:124%的易用性提升.




网页版本

示例段落

可用性提升

促销对照组 使用的就是常规商业网站使用的风格
Nebraska is filled with internationally recognized attractions that draw large crowds of people every year, without fail. In 1996, some of the most popular places were Fort Robinson State Park (355,000 visitors), Scotts Bluff National Monument (132,166), Arbor Lodge State Historical Park &amp;amp; Museum (100,000), Carhenge (86,598), Stuhr Museum of the Prairie Pioneer (60,002), and Buffalo Bill Ranch State Historical Park (28,446).
0% (by definition)

简洁版本只有对照组的一半字数
In 1996, six of the best-attended attractions in Nebraska were Fort Robinson State Park, Scotts Bluff National Monument, Arbor Lodge State Historical Park &amp;amp; Museum, Carhenge, Stuhr Museum of the Prairie Pioneer, and Buffalo Bill Ranch State Historical Park.
58%

扫描式布局 和对照组文本一致,但采用易于扫视的格式
Nebraska is filled with internationally recognized attractions that draw large crowds of people every year, without fail. In 1996, some of the most popular places were:

Fort Robinson State Park (355,000 visitors)
Scotts Bluff National Monument (132,166)
Arbor Lodge State Historical Park &amp;amp; Museum (100,000)
Carhenge (86,598)
Stuhr Museum of the Prairie Pioneer (60,002)
Buffalo Bill Ranch State Historical Park (28,446).47%客观的语言 利用中立而不是主观自负或者言过其实的语言(其他都和对照组一致)Nebraska has several attractions. In 1996, some of the most-visited places were Fort Robinson State Park (355,000 visitors), Scotts Bluff National Monument (132,166), Arbor Lodge State Historical Park &amp;amp; Museum (100,000), Carhenge (86,598), Stuhr Museum of the Prairie Pioneer (60,002), and Buffalo Bill Ranch State Historical Park (28,446).27%整合版本以上三种写错风格修改的集合.In 1996, six of the most-visited places in Nebraska were:
Fort Robinson State Park
Scotts Bluff National Monument
Arbor Lodge State Historical Park &amp;amp; Museum
Carhenge
Stuhr Museum of the Prairie Pioneer
Buffalo Bill Ranch State Historical Park124%在客观语言版本中可用性获得了27%的提升着实让我们吃惊了.我们期待用户可以喜欢这个版本胜过对照组(实际上也确实是这样的),但是我们认为评价标准对于任意一种语言而言都是一样的.正如预计的那样,我们的四种评价标准(时间错误内存网站结构)都获得了客观风格比原始的促销版本更好一些的结论.我们用以解释这一发现的猜想是促销性语言为用户强加了认知的负担,必须让用户花费精力去过滤夸张的表象从而获得事实. 当人你们在阅读一个以”Nebraska是一个充满了国际公认景点的地方”开头的地方,他们的第一反应是”不,不是的”,并且这一想法将会降低他们使用网站的速度,分散他们的注意力.

</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Introduction To Usability(译)</title><link>http://taoalpha.me/blog/2013/06/13/read-introduction-to-usability-translated/</link><category>read</category><tag>UX,Usability,产品学习,翻译文章</tag><pubDate>2013-06-13T09:00:00.000Z</pubDate><description>Introduction To UsabilitySummary 如何定义可用性?如何,什么时间,什么地方来提升?为什么你要关注可用性?这是一个关于核心的可用性概念的介绍以及回答一些基本的问题.
What–Definition Of Usability
可用性是一个表征质量的属性,用以描述用户界面在使用性上的难易程度.”Usability”这个词本身也有用以提升设计过程中易用性的方法的含义.
可用性主要通过以下5个部分的特点组成:
    易学性:对于用户而言,第一次使用时完成基础任务的难易程度?    高效性:一旦用户学会了之后,他们完成任务的效率有多高?    记忆性:当用户在一段时间的不用后再次返回时,他们重新熟练的容易性如何?    错误率:用户会犯多少错误,这些错误的严重程度如何,以及他们从这些错误中脱身的难易程度?    满意度:用户使用这一设计的满意度如何?此外还有很多重要的品质属性.其中比较关键的一个就是实用性,表征的是设计的功能性:它所做的都是用户所需的吗?
可用性和实用性都是同等重要的,而且它们一起决定了设计是否有用:如果某物很容易但却不是你想要的也是没啥意义的. 虽然对于幻想那种可以做任何你想做的事情的系统也不见得是好的,但是如果你的交互界面很难用的话,你是不可能做到这一点的.为了研究一个设计的实用性,你可以用提升易用性同样的研究方法.
    Definition: Utility—它是否提供了你所需要的功能;    Definition: Usability–这些功能用起来的难度和满意度如何.    Definition: Useful = Usability + UtilityWhy Usability is Important(为什么可用性这么重要)
在网络上,可用性是一个必须要考虑的生存条件.如果一个网站非常难用,人们就会离开.如果一个公司的主页不能描述清楚公司提供的产品或者服务,用户可以做什么等,人们也会离开.如果用户在一个网站迷路了,他们就会离开.如果一个网站的信息很难阅读或者无法回答用户的关键问题,他们也会离开. 注意到一个模式了吗?根本不存在这样的情况:用户费劲的阅读说明书或者花费很多时间去理解一个界面.外面还有无数的网站等待用户去选择,离开是用户在感到难用时的第一选择.
电子商务的第一条定律就是如果用户无法找到产品,他们就无法购买这个产品.
对于企业内部网络,可用性就是一个关乎员工生产力的事情了.用户如果花费太多的时间在内部网络或者纠结于思考那些困难的指令,那么也就等同于在浪费着你付给他们工作的薪水了.
目前最佳的财政预算是将设计项目预算的10%留给可用性上.平均来讲,这些大概是一个网站期望的质量标准的2倍左右,而且大概是一个内部网络质量标准花费的两倍略低一些.对于软件或者实际的物理商品,强调设计过程的易用性,所致的提升效果会相对较小,但是依然很显著.
对于内部的设计项目,应该考虑将培训预算砍掉一半,而将易用性方面的预算加倍,以及加倍做事的员工的时薪.对于外部的设计,则应该考虑加倍销售的预算以及注册用户和用户引导的预算,同时加倍那些对你的设计项目有提升动机的预期计划.
How to Improve Usability(如何提升易用性)
在研究易用性上有很多方法,但是最主要最基础最有用的就是用户测试了,它包含了以下三个部分:
    找到一些典型的用户,比如电子商务网站的消费者或者内部网络的员工(在后者的情况下,他们应该是在你们部门之外工作的);    让用户实施一些有代表性的任务;    观察用户做了什么,那些地方成功了,哪些地方他们遇到了问题,而且闭上你的嘴,而让用户讲出他们想说的;逐一分别的测试用户,让他们独立解决任何问题是很重要的,.如果你帮助他们或者把他们的注意力指引向屏幕的任何部分,你都让实验结果受到了污染;
为确定一个设计最重要的易用性问题,测试5个用户就基本足够.预期去运行一个大型的,昂贵的项目研究,还不如使用这些资源进行一个小规模的测试,并且逐一重新审视你的设计,这样你才能在确定问题后修正你的易用性瑕疵.迭代设计是一个而方法来提升你的体验质量.你和用户测试的版本和界面设计越多,效果越好.
用户测试和焦点小组是不同的,焦点小组是一种相对较差的方式来评估设计的易用性.焦点小组常用于市场调研,但是为了评价交互设计,你必须足够近的观察一个用户利用你的设计界面去完成一个任务.通过聆听用户所说的会有误导:你必须去亲自观察他们真正做的是什么.
When to Work on Usability(什么时候注意易用性)
易用性在设计过程的每一步中都占据一定的地位.对于多个研究的需要也是我推荐把个人独立的研究尽快而又便宜的完成的原因之一:
    在开始一个新的设计之前,测试旧有的设计来确定其中好的部分,这样你就可以保留这些部分并加以强化,同时知道哪些对用户造成困扰的部分.    除非你在一个内部网络中工作,测试你竞争者的设计可以廉价的获取到一组相对较好的设计界面,而且这些都和你的设计有着很多共同的特性.(如果你工作于一个内部网络,那么可以通过阅读内部的设计年刊来学习其他的设计).    针对用户在他们的日常生活中是如何表现的做一个实地的考察;    对一个或者更多的新设计注意制作纸质原型并加以测试.你投资在这些设计的时间越少,效果越好,因为你需要根据测试结果来修改他们(就是不用花费太多的时间去做特别精致的原型)    通过多次迭代后,对最优秀的那个设计不断修改来完善它,逐渐的从低质量的原型到高质量的电子原型展示.每一次迭代都需要测试.    观察那些和建立可用性规则先关的设计,无论是你早期的研究还是公开的研究.    一旦你决定了并且开始着手最终的设计,再次测试一次.一些微小的可用性问题经常在实施的时候出现.不要抵制用户测试,除非你已经有了一个完成的设计了.如果你已经有了一个成品,那么再去修复绝大多数测试没有覆盖到的关键问题就会变得不可能了.像这一类的问题大多是比较偏向结构方面的,而修复他们将会需要对主要部分的重构.
想要获得一个高质量的用户体验唯一的方法就是在设计的早期就开始用户测试,并一直持续的在接下来的每一步实施它.
Where to Test(在哪里测试)
如果你每周至少实施一次用户测试,那么专门建立一个可用性实验室就有必要的了.但对绝大多数公司,在一个会议室或者办公室里进行一次测试就已经不错了,只要你关上门隔开干扰就可以了.重点在于你要有真实的用户,并且可以在他们测试的过程中陪坐一旁.你唯一需要的设备就是一个笔记本.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>当你出现在Designer News的头条之后会发生什么?</title><link>http://taoalpha.me/blog/2014/11/25/read-what-happens-when-you-appear-after-the-designer-news-headlines/</link><category>read</category><tag>DN,翻译文章,译系列</tag><pubDate>2014-11-25T12:00:00.000Z</pubDate><description>本文原文来自 What happens when you’re #1 on Designer News , 内容主要是介绍了一个上周的DN头条产品, 在DN的首位占据了大概12个小时的时间, 获得了48的赞和16个评论, 然后他们分析了这一段时间的一些数据, 很有意思, 值得一看哦~

一些背景数据: DN目前大约有17000个注册用户, 主要受众是设计圈~

总体指标:

一些关于直接来自DN的用户总体指标:

1900 用户5600 PV平均一次访问时长: 1:40min蹦失率: 60%

其他一些结果:

而因为一些看客们在社交媒体上分享了我们的网站, 所以我们实际获得了更多的访问者, 甚至在某个blog中露了一次脸:

SitePoint的报道(带来了500的访问者)大约50条Tweets来自Google+的100位访问者来自facebook的1000位访问者PV的峰值达到了80/min

有几个大牛也在twitter上转载了关于我们的产品推文.

用户的其他属性:

DN的用户基本是30岁左右, 来自美国本土的MacBook用户, 通常使用的也都是Chrome(当然他们中多数都厌恶IE, 哈哈. PS: who doesn’t?):

OS: 83% Mac, 11%  windowsMobile:  95% Desktop, 4% Mobile, 1% TabletBrowser: 88% Chrome, 11% Safari, … , 0% IE!!!Coutries: 40% 美国, 10%的英国, 5%的加拿大, 4%的德国, 4%的瑞士;Language: 85%的英语;

 

如上~

博主说:

对于一个小产品或者说初始项目而言, 这种小站或者特定细分的垂直站的推广也是不容小觑的哦~ 不过从用户属性来说, DN这种垂直站点的用户属性确实非常突出, 集中啊.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Knowledge vs Intelligence</title><link>http://taoalpha.me/blog/2014/11/21/read-knowledge-vs-intelligence/</link><category>read</category><tag>翻译文章,译系列</tag><pubDate>2014-11-21T10:00:00.000Z</pubDate><description>大约一周前, 我在开发我一个小产品的时候遇到了一个很严重的问题. 我花了好几个晚上的时间去解决这个问题, 但是依然没有什么进展, 这让我很沮丧.

之后的一个晚上, 我正在和 Olivier Lacan视讯, 我们讨论了这个问题. 因为他是我的一个非常好的朋友, 所以他建议我把我的桌面分享给他来让他看看. 我正在研究 Laravel一个全新的PHP的框架, 也是Olivier从来没用过的一个框架(当然其实他连PHP都不用的). 但是他很聪明而且是一个很伟大的开发者, 所以我很愉快的接受了他的要求.

我们开始梳理整个代码库, 我带着他过了一遍整个应用和框架,  他则见或提出一些内部系统的尖锐问题. 因为Olivier并不是非常熟悉Laravel, 所以他问的问题就和我不同, 而这些问题则指向了一个有趣的部分, 而这个部分正是我一个人想的时候没有注意到的. 而在一个小时的debug后, 我们找到问题的根源并且解决了它.

我之前曾谈论过有关 “编码交换”的话题, 就是把自己的电脑与他人交换, 然后尝试解决对方的问题–但是这次则是另一个问题. 这是一个类似 传统的 “橡皮鸭”的问题, 不同的是有一个可信任的聪明的朋友.

这里的关键在于知识和智慧之间的区别. 知识是关于技能, 以及经历和从中获取的信息的集合. 智慧则是应用知识的能力.  一个人缺乏某个领域的知识不代表他们不能应用自己的智慧来帮助解决对应的问题.

知识是很好的, 但是它总会随着技术和科技的 兴起没落而渐渐消失掉. 但是智慧则不会. 它跨越了技术和科技之间的壁垒, 这就是最大的区别了.

Source:

Knowledge vs Intelligence
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>网页设计简史</title><link>http://taoalpha.me/blog/2014/12/05/read-read-a-brief-history-of-web-design/</link><category>read</category><tag>Design,翻译文章,设计,读系列</tag><pubDate>2014-12-05T09:00:00.000Z</pubDate><description>本文针对网页设计的历史做了简单的介绍, 配上了很多动态图片作为示意, 可以说很简练但是也很完整, 值得一读.

作者最开始应该是对设计和代码实现都比较有兴趣的, 但随着代码越来越复杂, 实现一个设计的方法越来越多, 但是即便这么多的方法, 都不能保证适用于所有浏览器. 于是作者慢慢对代码层失去了兴趣, 专心开始搞设计了~ 所以本文开篇, 作者提出了一个很好的问题:

  设计和代码部分是如何分开的呢? 而且越分越远?

所以相对于设计师该不该学代码的问题, 本文研究的则是设计和代码是如何在网页设计这条路上分道扬镳的呢?

1989–网页设计最黑暗的时期



可以说最开始的网页设计是非常不明朗的, 那个时候屏幕都是黑色背景的命令行状态, 再加上非常有限的屏幕尺寸.  可以说, 那个时候所谓设计能依赖的东西只有那些符号和制表符了… 真可以说那个时候就不存在什么网页设计…

1995 - 网页设计的开端-表格设计



随着可以展示图片的浏览器的诞生, 宣告了网页设计的正式开始. 而在当时, 已经存在于html中的table元素就成为了设计师用来发挥自己设计天赋的绝佳工具. 当时有本著名的书 Creating Killer Sites就是介绍如何用Table布局的. 但是Table的设定本身并不是为了进行页面的设计布局, 而是为了展示结构化的数据, 所以存在了很多的问题, 比如维护这种碎片化的结构是个相当费事的事情… 但是, 因为各种原因, 这种设计方式依然存在流行了很长的一段时间~ 而在这一时期, 切图设计也逐渐变热. 设计师们设计出各种酷炫的布局, 而开发者则将他们拆分成一个个小块然后再拼接在一起. 另一方面, 表格又确实有着一些非常棒的属性: 比如垂直居中. 这些优势和我们后面会说到的grid布局设计极为相像.  但也正因为这种布局结构的麻烦和痛苦, 所以很多开发者们都很不喜欢进行前端编程…

1995-JS的出现



JS可谓是对HTML的很好补充. 比如说, 如果我们需要一个弹出窗口, 想要动态的对某些东西进行排序? 那么JS就是最好的选择了.  问题在于JS是基于网页基础结构之上的, 所以它不能和web资源一起载入, 而需要分开进行载入.  所以有种像是html的补丁一样~

如今我们多数情况下能用CSS实现的基本不用JS实现, 但是当时JS可谓是网页设计的一大救星啊. 即便如今, jQuery此类的JS库依然是前端编程和后端编程(node.js)的热门组件.

1996-设计的黄金时期



为了打破当时网页设计的限制, 出现了一个前所未有的工具, 而使用它, 设计师们的工作变的无比的自由! 任意的形状, 布局, 动画, 交互, 字体, 随便搞. 这个工具就是–Flash. 把需要的资源打包到一起, 然后交给浏览器去展示就行了. 这就意味着只要用户拥有最新的flash插件, 那么只需要等待一段载入时间, 那么它就能呈现出非常绚烂的结果. 这可以说是网页设计的黄金时期, 出现了无数的飞溅式设计, 介绍动画, 以及各式各样的交互效果. 但不幸的是, 它的不够开放或者说对搜索引擎非常不友好以及处理本身耗费的资源过多等特性, 都导致其终将被舍弃. 而随着Apple决定在他们的iPhone上直接抛弃了Flash的支持, Flash就开始走向了衰亡(至少对网页设计来说是的).

1998-CSS



CSS大概和Flash同时期出现的, 作为一个解决设计布局的更好的方法而出现在设计师面前.  基本的想法就是把网页内容层和展示样式层分离开. 所以外观展现和样式类型都由CSS来决定, 而内容则由HTML决定. 第一版的CSS当然远没有如今的这么灵活, 丰富, 但是这还不是当时最大的问题. 当时最重要的问题是各大浏览器的支持率. CSS花费了几年的时间才让很多浏览器开始支持它, 而且最初还有着很多各式各样的问题存在.  而在当时, 一个浏览器更新支持一个新功能, 而其他浏览器还没有支持这种让开发者痛苦至死的事情(即便到如今依然有这个问题…尤其是在国内: IE6,7..永恒的恨啊..)已经开始出现. 

值得说明的是: CSS并不是一种编程语言, 它更像一种声明性语言. 我们可以讨论设计师是不是需要编程, 但是设计师需不需要了解CSS的工作原理则是完全不需要讨论的事情.

2007-移动端的升起-网格布局和框架的时代



在移动端浏览网页对当时的设计师而言是个非常大的挑战. 不说布局, 单就是它引发的内容问题(content-parity)就是个挺麻烦的事情: 在小屏幕下展示时和大屏一样呢? 还是要精简一些呢? 在小屏幕上如何投放那些晃眼的广告呢? 速度也是个问题, 毕竟加载资源过多的话网费就够你喝一壶的了. 首先提出的解决方案是网格布局法. 而经过几次迭代厚, 960 grid system成功的普及开来, 而这种12列的布局方式页逐渐成为设计师们日常使用的布局结构了.  而下一步解决的问题就是常用的各个组件, 比如表格, 导航, 按钮这些元素的复用. 基本的想法是, 制作一个元素的库来存储这些代码. 而最后的胜出者就是如今大名鼎鼎的Bootstrap和Foundation了~  而随着网页和app的界限逐渐消失, 这些框架变的更加流行. 但是所有的设计看起来都是蛮像的, 而设计师如果完全不理解代码工作的原理那么也是无法发现他们的区别的.

2010-响应式设计



Ethan Marcotte决心改变当时的设计方式, 想要用同一套内容但是不同的布局来自动的适应不同的屏幕尺寸(厉害啊!), 于是, 响应式布局就出现了. 从技术上, 还是使用HTML和CSS, 所以倒也不是一个新的技术. 但是如今对响应式依然存在了很多的误解. 对于一个设计师而言, 响应式往往意味着要进行多布局的设计. 对于客户而言, 就是单纯的: 这个网站在手机上也能看的比较舒服. 对开发者而言, 则设计了很多方面, 包括图像的展示, 下载速度, 是否移动居先等等问题. 而这里最大的好处就是内容, 它能够保证网站内容的完整性和一致性. 

其实响应式的问题目前也主要集中在加载层面, 毕竟响应式会导致在手机上也会加载几乎全套的资源, 这必然会导致加载速度受到影响. 而包含了各个尺寸样式的css文件也会导致加载速度的变慢~ 不过! 随着技术手段的提升和网络速度的提高, 这些问题想来也不会是什么大的问题吧.

2010-扁平化时代



为不同布局状态设计是很费力的一件事, 而简化设计流程, 去掉那些烦人的阴影效果以及仿真化的细节, 自然能够让设计变的容易很多. 这就是扁平化设计, 其极大的简化了元素的细节, 重回设计的根本–为内容服务.  而那些酷炫的按钮则被图标取代, 使我们能够使用位图以及icon字体. 有趣的是, 这在一定程度上和网页的起始阶段很像, 不是吗? 果然是回归根本啊…哈哈

2014-光明的未来



网页设计说白了就是设计师制作的视觉效果在浏览器中呈现罢了. 想象以下, 未来设计们可能只需要拖动下元素, 就能够获得一个简洁的代码文件, 而不在需要手写代码, 这多给力啊. 哪怕不能做到那些酷炫的效果, 仅仅单纯的静态页面和简单的交互也是相当不错的事情呢. 再想象以下未来开发者们再也不用担忧浏览器兼容的问题, 而只需要集中精力解决那些真正的问题, 那TM该是多美好的未来啊…

如今技术上已经出现了一些光明未来的曙光: 比如CSS中新引入的一些属性, vh, vw就容许布局上有更好的灵活性. Flexbox则帮助更好的布局, 不再需要那么多的代码, 只用一行就能制作很棒的布局了. 而那些现成的做好的各个组件, 比如注册登录等等, 都让网页设计变的更加容易更加流畅. 
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Google又做了一件大好事:干掉了烦人的识别型验证码!</title><link>http://taoalpha.me/blog/2014/12/04/read-read-google-did-a-good-thing-kill-annoying-type-identification-code/</link><category>read</category><tag>Captcha,reCaptcha,翻译文章,读系列</tag><pubDate>2014-12-04T14:00:00.000Z</pubDate><description>译系列正式转为读系列, 以后都为阅读后自己整理总结成文~ 吸收知识哈哈
伟大的Google又做了一件大好事啊!! 它干掉了烦人的识别型验证码!!! 本文简单介绍了一下这一新的验证码.

对于验证码, 大家都不会陌生, 无论你是否经常上网, 是否买过东西, 是否看过网络视频, 你一定遇到过验证码!!! 而如今最为常见的几种验证码形式分别是:

Captcha(Completely Automated Public Turing test to tell Computers and Humans Apart): 图片识别, 通过识别一些或模糊或清晰的图片中的文字信息来达到验证”我不是机器人”的效果;reCAPTCHA: 同样来自Google, 用Captcha的方式做有意义的事情. 其和Captcha的表现形式基本是一致的, 只不过里面的图片不再是预设好的人工生成的那种故意扭曲或者加干扰后的图片, 而是Google的图书扫描项目中那些OCR无法识别的单词(多数是手写体或者不够清晰), 这样你每次输入验证码, 还能帮助Google的Books做的更好哦~(至于如果它自己都不识别, 那么怎么判断输入是否正确, 则是因为通常reCaptcha会提供两个词组, 一个是已知的, 一个是未知的, 所以呢, 在已知的正确的情况下, 未知的正确性就有了一定的保证, 而结合大量的输入, 那么最中获得的结果的正确概率就越高:所以, 面对一些很少有人输入过的验证码, 其实你很有可能输错了部分, 但也通过了~哈); 而继图书项目后, Google又在reCaptcha项目中加入了Google街景的路牌, 街道名识别~ 所以有时候你会遇到那种拍的很模糊的数字图~Puzzle CAPTCHA: 在识别类验证码之后, 又出现了这种拼图类的验证码, 操作方式有很多, 有的是图片切分打乱, 需要你重新排列成完整的图片, 有的则是有一块图片从整个图片中脱离出来, 需要你移动回去这种~ 这种有时候也叫做Draggable Captcha~Quiz Captcha: 这种则属于问答类的验证码了, 有的时候是一些显而易见的数学计算题或者找规律题, 有的时候则是一些基本常识, 还有些时候甚至是当前往网站名称这类有着明显答案提示的问题~

当然, 除了上述的这些, 还有着很多的验证码类型, 但是无论怎样, 为了实现区分人和机器的目的, 都是需要一定操作成本的, 这也是为什么大家很讨厌验证码的原因~

但是! Google这次新的reCaptcha:No CAPTCHA reCAPTCHA, 就改变了这一点, 它完全干掉了现有的这种繁琐的验证码, 取而代之的是一个简单的checkbox!!! 你只要勾选了这个”我不是机器人”边上的checkbox, 就算是通过了验证~ 似乎感觉这不是进步而是退步? 这样怎么能够实现Captcha的区分人和机器人的目的呢?

其实这个简单的checkbox里面有着非常复杂的机制, 它会通过你验证码勾选前后的整个表现来判断是否是一个机器人, 一旦有所怀疑, 甚至可以选择变回旧有的那种图形或者其他传统类型的验证码来再次确认. 这些都是基于 人工智能方面很深入的研究和成果.

目前这种新的Captcha的API已经开放给很多大客户了, 最近在开始接受网站主们的申请了~ 而那些大客户的反馈来看, 其效果是非常不错的: 核心的anti-spam质量虽然文章中没说, 但应该不错, 文章中重点提到了这个新Captcha的一个优点就是可以让用户更快的登录访问网站.

有兴趣的可以前往Google reCaptcha了解更多详情~
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Reloading Python Modules</title><link>http://taoalpha.me/blog/2015/02/16/read-reloading-python-modules/</link><category>read</category><tag>coding,python,应用推荐与技巧,翻译文章</tag><pubDate>2015-02-16T13:00:00.000Z</pubDate><description>Reloading Python Modules是一篇10年的老文了. 不过正好最近有看到Python中reload的相关介绍, 推荐了本文, 特地译来加深记忆以及分享给大家:

Python众多优点中的一个就是可以对代码模块进行重载. 这就允许了开发者即便在Python的编译器运行状态下也可以修改Python代码了. 通常来说,  只需要把对应要重载的模块对象传入 imp.reload()函数中即可(python 2.x中是通过直接reload()来实现). 

不过这里面还有几个潜在的复杂问题.

如果一个模块中引入了重载模块的一些symbols, 那么这些symbols不会自动重载. 比如, 我们有一个包含了常量 INTERVAL = 5的A模块, 而模块B则引入了这一常量, 比如通过(from A import INTERVAL). 那么如果我们修改INTERVAL = 10, 然后重载A模块的话, 在B模块中的INTERVAL以及所有基于INTERVAL的值都不会自动更新的.

解决这一问题的办法就是我们要把B模块也重载一些. 但是要注意的是一定要在A模块重载完后重载B, 不然的话, B还是不能按照更新后的A来执行.

PyUnit则通过引入了一个 rollbackimporter的方式来处理这类问题. 它会通过重写python的全局引入 import而将引入规则”rolls back”到之前的状态.  这一方法在让编译器还原到前一测试点上非常便捷, 但是却不能算是一个解决实时代码重载的好方法, 因为那些为加载的模块还是不能自动的重载.

下述介绍了一个很好的模块重载解决方法, 目的是让这一过程更加自动化, 更加透明以及可靠.

Recording Module Dependencies

在重载前一定要清楚各个模块之间依赖关系, 这样才能很好的设计重载的顺序. 理想的方法是建立一个模块之间的依赖关系图谱. 这可以通过引入一个自定义的import, 并且在程序常规代码部分引入它来实现.

import builtins


12345678910111213141516171819202122232425262728_baseimport = builtins.__import___dependencies = dict()_parent = Nonedef _import(name, globals=None, locals=None, fromlist=None, level=-1):    # Track our current parent module.  This is used to find our current    # place in the dependency graph.    global _parent    parent = _parent    _parent = name    # Perform the actual import using the base import function.    m = _baseimport(name, globals, locals, fromlist, level)    # If we have a parent (i.e. this is a nested import) and this is a    # reloadable (source-based) module, we append ourself to our parent's    # dependency list.    if parent is not None and hasattr(m, '__file__'):        l = _dependencies.setdefault(parent, &amp;amp;lt;input type=checkbox&amp;amp;gt;)        l.append(m)    # Lastly, we always restore our global _parent pointer.    _parent = parent    return mbuiltins.__import__ = _import&amp;lt;/code&amp;gt;
这里把内置的import函数(在_baseimport类中)做了简单的修改. 它能够跟踪当前的母模块(依赖模块), 也就是进行import操作的模块. 而最顶层的模块自然是没有依赖模块的.

而一旦一个模块被成功的引入后, 它就会自动的加入到依赖模块的依赖列表中去. 你可能注意到上述代码中只是关注了那些基于文件的模块 内置的那些扩展则都被忽略了, 这是因为内置的模块是不能够被重载的.

这就给我们了一个完整的模块依赖关系链, 我们就能够轻松的获取到某个模块相关的所有依赖模块了:


1234def get_dependencies(m):    &quot;&quot;&quot;Get the dependency list for the given imported module.&quot;&quot;&quot;    return _dependencies.get(m.__name__, None)&amp;lt;/code&amp;gt;
Reloading Modules

在知道了相关的依赖模块关系后, 我么就可以建立一个依赖模块重载路线了:


1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import impdef _reload(m, visited):    &quot;&quot;&quot;Internal module reloading routine.&quot;&quot;&quot;    name = m.__name__    # Start by adding this module to our set of visited modules.  We use    # this set to avoid running into infinite recursion while walking the    # module dependency graph.    visited.add(m)    # Start by reloading all of our dependencies in reverse order.  Note    # that we recursively call ourself to perform the nested reloads.    deps = _dependencies.get(name, None)    if deps is not None:        for dep in reversed(deps):            if dep not in visited:                _reload(dep, visited)    # Clear this module's list of dependencies.  Some import statements    # may have been removed.  We'll rebuild the dependency list as part    # of the reload operation below.    try:        del _dependencies[name]    except KeyError:        pass    # Because we're triggering a reload and not an import, the module    # itself won't run through our _import hook.  In order for this    # module's dependencies (which will pass through the _import hook) to    # be associated with this module, we need to set our parent pointer    # beforehand.    global _parent    _parent = name    # Perform the reload operation.    imp.reload(m)    # Reset our parent pointer.    _parent = Nonedef reload(m):    &quot;&quot;&quot;Reload an existing module.    Any known dependencies of the module will also be reloaded.&quot;&quot;&quot;    _reload(m, set())&amp;lt;/code&amp;gt;
上述reload()函数通过递归方式去按照相反顺序依次reload所有和这一模块相关的模块, 而最后再reload以下自身. 它通过visited属性的设置来避免出现无限死循环. 同时在reload的时候它会自动重建模块的依赖关系, 来确保他们能精确的反映出模块的更新状态.

Custom Reloading Behavior

有时候reload模块的时候可能需要执行一些其他的操作或者逻辑. 比如, 重新初始化一些预加载的状态. 而为了支持这一点, 我们需要让我们的reload函数去寻找一个模块级函数reload(). 这一函数可以在一个成功的重载后被调用, 且能保留重载前的状态.

这种情况下, 我们就不能简单的直接调用imp.reload()了:


12345678910# If the module has a __reload__(d) function, we'll call it with a# copy of the original module's dictionary after it's been reloaded.callback = getattr(m, '__reload__', None)if callback is not None:    d = _deepcopy_module_dict(m)    imp.reload(m)    callback(d)else:    imp.reload(m)&amp;lt;/code&amp;gt;
其中_deepcopy_module_dict()的作用是帮助我们避免deepcopy()一些不支持或者不需要的数据.


12345678910111213def _deepcopy_module_dict(m):    &quot;&quot;&quot;Make a deep copy of a module's dictionary.&quot;&quot;&quot;    import copy    # We can't deepcopy() everything in the module's dictionary because    # some items, such as '__builtins__', aren't deepcopy()-able.    # To work around that, we start by making a shallow copy of the    # dictionary, giving us a way to remove keys before performing the    # deep copy.    d = vars(m).copy()    del d['__builtins__']    return copy.deepcopy(d)&amp;lt;/code&amp;gt;
Monitoring Module Changes

对于重载而言, 能够自动检测模块的变化而进行自动重载那是最好不过了. 那么, 实际上我们确实有很多方式来检测一个文件的变化情况. 这里使用的是一个后台线程以及 stat()这个系统函数的调用来检测文件上一次修改时间, 从而确定其更新状态. 一旦检测到一个文件被更新, 那么就会把这一文件名加入到一个 thread-safe queue


1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import os, sys, timeimport queue, threading_win = (sys.platform == 'win32')class ModuleMonitor(threading.Thread):    &quot;&quot;&quot;Monitor module source file changes&quot;&quot;&quot;    def __init__(self, interval=1):        threading.Thread.__init__(self)        self.daemon = True        self.mtimes = &amp;#123;&amp;#125;        self.queue = queue.Queue()        self.interval = interval    def run(self):        while True:            self._scan()            time.sleep(self.interval)    def _scan(self):        # We're only interested in file-based modules (not C extensions).        modules = [m.__file__ for m in sys.modules.values()                if '__file__' in m.__dict__]        for filename in modules:            # We're only interested in the source .py files.            if filename.endswith('.pyc') or filename.endswith('.pyo'):                filename = filename[:-1]            # stat() the file.  This might fail if the module is part            # of a bundle (.egg).  We simply skip those modules because            # they're not really reloadable anyway.            try:                stat = os.stat(filename)            except OSError:                continue            # Check the modification time.  We need to adjust on Windows.            mtime = stat.st_mtime            if _win32:                mtime -= stat.st_ctime            # Check if we've seen this file before.  We don't need to do            # anything for new files.            if filename in self.mtimes:                # If this file's mtime has changed, queue it for reload.                if mtime != self.mtimes[filename]:                    self.queue.put(filename)            # Record this filename's current mtime.            self.mtimes[filename] = mtime&amp;lt;/code&amp;gt;
此外还可以通过调用原生操作系统的相关函数, 比如 Win32 Directory Change Notification之类的函数.

加上我们的reloader()部分:


1234567891011121314151617181920212223242526import impimport reloaderclass Reloader(object):    def __init__(self):        self.monitor = ModuleMonitor()        self.monitor.start()    def poll(self):        filenames = set()        while not self.monitor.queue.empty():            try:                filenames.add(self.monitor.queue.get_nowait())            except queue.Empty:                break        if filenames:            self._reload(filenames)    def _reload(self, filenames):        modules = [m for m in sys.modules.values()                if getattr(m, '__file__', None) in filenames]        for mod in modules:            reloader.reload(mod)&amp;lt;/code&amp;gt;
在这一模型中, reloader需要循环执行来检测文件的状态, 从而能够计时的响应. 最简单的则是:


12345r = Reloader()while True:    r.poll()    time.sleep(1)&amp;lt;/code&amp;gt;
想要看源代码的可以前往:  complete source code 本身代码也发布到Python Package Index中, 名称为  reloader
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Success happens overnight(译)--很好的解释&quot;一夜成名&quot;的真相</title><link>http://taoalpha.me/blog/2013/06/11/read-success-happens-overnight-translated-a-good-explanation-overnight-truth/</link><category>read</category><tag>HCIBib,产品学习,翻译文章</tag><pubDate>2013-06-11T09:00:00.000Z</pubDate><description>From UXMYTH{Myth # 32} Success happens overnight–成功总是发生在一夜之间的苹果iPod的出现几乎立刻就把MP3播放器市场整了个天翻地覆,不是吗?亚马逊 也几乎是一下子改变了整个书类的销售方式,不是吗?好吧,世界上它们并没有那么夸张…虽然外界看起来好像是这样的.
事实上,即便是对于互联网企业,也往往需要多年的努力才能获得一夜成名. 多年的辛苦工作,学习,试验以及一路上无数的失败.有时候甚至还要追逐一个几乎所有人都不喜欢的项目,比如当初随着Gmail开发的”Crazy Javascript stuff”.


那些看起来很写意的成功也往往花费了很长的时间去实现的.
    Amazon:亚马逊成立于1994年,但是直到1996年才增加了书评的功能.一开始他们主要努力于获取用户.他们一直到1998年才增加了CDs类的商品,而直到2001年它们甚至都没有获得利润.而这一点很容易被人忽略,从而以为它们在此之前就获得了成功…    Twitter:Twitter的创始人Biz Stone在创立Twitter之前,已经在Blog,移动和社交等领域从事产品工作长达八年之久.他自己说:”时机,耐心,花费十年努力才最终让你似乎一夜成名”.    Apple iPod:iPod的一夜成名背后有着三年的努力付出.”第一款的iPod是在2001年发布的,在一年内,苹果就改进了它的功效性而发布了第二版.但是直到2004年的第四版才开始出现脱销的盛况.”    37signals:当我们五年前开始Basecamp的时候,我想我们只有不到2000人订阅我们的RSS.即便算上那些时不时只是过来看一下的用户也只多了几千人.所以猜测我们初始的用户不到5000人还是蛮合理的.从今天来看,它的规模是非常小的.但是当初那些用户也是我们花费了多年的时间建立起来的.    Gmail:我们是在2001年8月开始Gmail项目的.在很长的一段时间里,几乎所有人都不喜欢它…有不少的一些人认为我们应该关闭这个项目,或者重启这个项目,并将它作为一个企业级产品,再加上本地客户端软件,而不是所谓的crazy Javascript stuff.甚至到2004年4月1日,也就是开启2年半后,许多Google内部的人都预测它最终将走向灭亡…    AngryBirds:愤怒的小鸟是一款非常成功的手机游戏.但是Rovio本身在做到这一点之前已经经历过30多款手机游戏了…    FedEx:Frederick W.Smith在1965年的时候想到了这个快递寄送服务的主意,在1973年的时候成立了FedEx,当时第一天只有7个包裹,而在事业初期的26个月里,它就损失了2900万美金,但是仅仅到70年代末它就获得了成功.    The Beatles:披头士似乎是在1964年在Ed sullivan的表演中,突然出现并引爆了整个世界.但是它们其实从1957年就开始在Liverpool和Hamburg的小酒吧中玩音乐了,而且在他们获得了广大影响力的早期,它们第一个关键意义的成功,Sgt Peppers是在1967年发布的.    …或者看下Tiger Woods:虽然他是世界上最年轻的获得大师赛冠军的高尔夫选手,他也是花费了他整个人生在练习的.”他是一个少年天才,在两岁前就开始接触高尔夫了.”还有更多的一些关于一夜成名的看法:
    一夜成名的概念对于任何希望长期并稳定可持续发展的企业而言都是一种误导甚至非常有害的.无论是何种商业,巨大的成功都是花费了多年的努力汗水才建立起来的,而且很少有反例(即很少有不劳而获的).”Spotify的联合创始人Daniel Ek说道.”一夜成名的背后往往有着长时间的努力积累.简单的总结就是:更努力的工作,把一件事做到更好,做得更快,让自己变得更加强壮,比之前更好,一小时接着一小时的,我们的工作从来没有结束的时候.”    Seth Godin认为”一直以来,一些人说服自己去相信只有一种成功值得拥有,那就是’一夜成名’,那种如果你不在第一周内达到巅峰,那么你就等同于失败了.那种如果你的交互界面没有完美到跳出界面本身,或者你的新店没有在开张的时候门口就排了5000人的队,那么你就都已经输了”.    Barrie Bergman曾在他的ChangeThis宣言中这样写道”个人来说,我从来没遇到过一夜成名的好事.我曾经遇到过那些在很长的时间里都做得好好的人,只是突然被发现了而已.然后所有人都假设这些人都是无名氏,就那么突然一夜成名了.”    “一夜成名真的也就是一夜而已.” Jonathan Fields.当然,YouTube算是一个例外了.不过想想即便是他们也花费了五年的时间才开始盈利.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>15 essential Sass mixins</title><link>http://taoalpha.me/blog/2014/11/17/read-t-15-essential-sass-mixins/</link><category>read</category><tag>Mixin,Sass,coding,翻译文章,译系列</tag><pubDate>2014-11-17T08:00:00.000Z</pubDate><description>Source:

原文: 15 essential Sass Mixins

15 个必备的Sass mixins

现在有很多成套的sass mixin库, 比如我个人很喜欢的 Bourbon和非常流行的 Compass. 但是有时候, 实际上是多数情况下, 可能从中选一些结合自己的mixin才是最适合自己的.

过于依赖一个工具总是不好的, 而且如果你想让sass的mixin通过@include来调用的话, 那么你就更应该试着写写自己的mixin了~

sass的mixin的应用范围是非常广泛的, 而以下这15个mixin则是每个开发者都应该有的:

box-sizing

sass就像所有的预处理器一样, 能够很好的处理浏览器前缀的. 下面这个mixin是用于处理box-sizing这个前缀的:


1234567@mixin box-sizing($type) &amp;#123; -webkit-box-sizing:$type; -moz-box-sizing:$type; box-sizing:$type; &amp;#125;&amp;lt;/code&amp;gt;
用法很简单:


1234div&amp;#123;    @include box-sizing(border-box);&amp;#125;&amp;lt;/code&amp;gt;
Opacity除了浏览器前缀之外, 还让人无比反感但又经常使用的就是透明度的问题了, 尤其是老版本的IE. 下面这个mixin则可以帮助你解决这个问题:


12345@mixin opacity($opacity) &amp;#123;    opacity: $opacity;    filter: alpha(opacity=($opacity * 100)); &amp;#125;&amp;lt;/code&amp;gt;
用法也很简单:


1234div &amp;#123;@include opacity(0.5);&amp;#125;&amp;lt;/code&amp;gt;
column-width
这又是一个mixin处理浏览器前缀的极好例子:

12345@mixin column-width ( $value: 150px ) &amp;#123; -webkit-column-width: $value;  -moz-column-width: $value;  column-width: $value; &amp;#125;
用法很简单:

123div&amp;#123; @include column-width(150px); &amp;#125;
circle
一旦你为 border-radius做了mixin后, 你就可以在其他的mixin中使用它了, 下例就是典型:

1234@mixin circle &amp;#123; @include border-radius(100%); &amp;#125;
用法很简单:

123div &amp;#123; @include circle(); &amp;#125;
font-size
Mixin对于边试边调是极好的, 下例的font-size的mixin就可以通过简单的修改rem来调整字体大小了, 而rem也仅会在支持它的浏览器中起作用.

1234@mixin font-size($size) &amp;#123; font-size:$size; font-size: ($size / 16px) * 1rem; &amp;#125;
用法很简单:

123div &amp;#123; @include font-size(14px); &amp;#125;
box-shadow
同样还是处理浏览器前缀问题的:

12345@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: #000000 ) &amp;#123;  -webkit-box-shadow: $h $v $b $s $c;  -moz-box-shadow: $h $v $b $s $c;  box-shadow: $h $v $b $s $c;&amp;#125;
用法很简单:

123div &amp;#123; @include box-shadow(8px, 8px); &amp;#125;
xPos
你还可以使用mixin来简化代码, 下面例子就是让你把元素沿横轴定位时使用:

123456@mixin xPos($x)&amp;#123; -webkit-transform:translateX($x); -moz-transform:translateX($x); -ms-transform:translateX($x); transform:translateX($x); &amp;#125;
用法很简单:

123div &amp;#123; @include xPos(50px); &amp;#125;
vertical-align
纵向居中一个元素是很费劲的一件事, 不过下面这个mixin则可以给你很大的帮助:

1234567@mixin vertical-align &amp;#123; position: relative; top: 50%; -webkit-transform: translateY(-50%); -ms-transform: translateY(-50%); transform: translateY(-50%); &amp;#125;
用法很简单:

123div &amp;#123; @include vertical-align(); &amp;#125;
flexbox
mixin在处理类似flexbox的问题时非常有效: .

1234567@mixin flexbox&amp;#123; display:-webkit-box; // old display:-moz-box; // old display:-ms-flexbox; // ie display:-webkit-flex; // new display:flex; // new &amp;#125;
用法很简单:

123div &amp;#123; @include flexbox(); &amp;#125;
flex
一旦通过mixin设定 display 属性为 flex, 那么你就也需要一个mixin来设定 flex 属性了:

1234567@mixin flex($values) &amp;#123; -webkit-box-flex: $values; -moz-box-flex: $values; -ms-flex: $values; -webkit-flex: $values; flex: $values; &amp;#125;
用法很简单:

123div &amp;#123; @include flex(1, 2); &amp;#125;
flex-order
再加一个设定order的:

1234567@mixin flex-order($order)&amp;#123; -webkit-box-ordinal-group: $order; // old -moz-box-ordinal-group: $order; // old -ms-flex-order: $order; // ie -webkit-order: $order; // new order: $order; // new &amp;#125;
用法很简单:

123div &amp;#123; @include flex-order(3); &amp;#125;
flex-direction
mixin也是支持sass中的 @if, @else if, 以及 @else 等语句的, 可以用来把2个不同的mixin合并到一起:

123456789101112131415161718@mixin flex-direction($direction)&amp;#123; @if $direction == column &amp;#123; -webkit-flex-direction:vertical; -moz-flex-direction:vertical; -ms-flex-direction:column; -webkit-flex-direction:column; flex-direction:column; &amp;#125; @else &amp;#123; -webkit-flex-direction:horizontal; -moz-flex-direction:horizontal; -ms-flex-direction:row; -webkit-flex-direction:row; flex-direction:row; &amp;#125; &amp;#125;
用法很简单:

123div &amp;#123; @include flex-direction(column); &amp;#125;
gradient
代码尽量要简单, 不过在必要的时候, mixin比较臃肿也是情有可原的.下面这个例子是为不同浏览器设定渐变效果的mixin, 只需要3个参数就能实现很好的渐变效果:

123456789101112131415161718192021222324252627282930313233343536@mixin gradient($start-color, $end-color, $orientation)&amp;#123; background: $start-color; @if $orientation == vertical &amp;#123; // vertical background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%); background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color)); background: -webkit-linear-gradient(top, $start-color 0%,$end-color 100%); background: -o-linear-gradient(top, $start-color 0%,$end-color 100%); background: -ms-linear-gradient(top, $start-color 0%,$end-color 100%); background: linear-gradient(to bottom, $start-color 0%,$end-color 100%); filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 ); &amp;#125; @else if $orientation == horizontal &amp;#123; // horizontal background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%); background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color)); background: -webkit-linear-gradient(left, $start-color 0%,$end-color 100%); background: -o-linear-gradient(left, $start-color 0%,$end-color 100%); background: -ms-linear-gradient(left, $start-color 0%,$end-color 100%); background: linear-gradient(to right, $start-color 0%,$end-color 100%); filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 ); &amp;#125; @else &amp;#123; // radial background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%); background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color)); background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%,$end-color 100%); background: -o-radial-gradient(center, ellipse cover, $start-color 0%,$end-color 100%); background: -ms-radial-gradient(center, ellipse cover, $start-color 0%,$end-color 100%); background: radial-gradient(ellipse at center, $start-color 0%,$end-color 100%); filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 ); &amp;#125; &amp;#125;
用法很简单:

123div &amp;#123; @include gradient(#ff00ff, #ff00cc, vertical); &amp;#125;
ghost-button
如果你想要紧随潮流的话, 你可以利用下面这个mixin来创建一个 ghost button, 上面的例子是我们几周前做的. 通过 &amp;amp;:hover 属性可以让我们指定其hover的状态:

1234567891011121314151617@mixin ghost-button($font, $font-size, $font-color, $border-size, $border-color, $padding, $transition-speed, $hover-color)&amp;#123; display:inline-block; text-decoration:none; text-transform:uppercase; font-family: $font; font-size: $font-size; color:$font-color; border:$border-size solid $border-color; padding:$padding; -webkit-transition: color $transition-speed, background $transition-speed; transition: color $transition-speed, background $transition-speed; &amp;amp;amp;:hover &amp;#123; background:$border-color; color:$hover-color; &amp;#125; &amp;#125;
用法很简单:

123div &amp;#123; @include ghost-button(“Trebuchet”, 12px, #ffffff, 5px, #34dec6, 4px, 300ms, #000000 ); &amp;#125;
break-point
通过使用 @content 语句, 我们甚至可以把内容也加入include中去, 在此基础上建立断点. 当然你不应该仅仅根据设备尺寸来设定断点, 不过下面的例子中还是简单的分为了PC和手机端:

123456789101112131415@mixin break-point($point) &amp;#123; @if $point == desktop&amp;#123; @media only screen and (max-width:50em) &amp;#123; @content; &amp;#125; &amp;#125; @else if $point == mobile&amp;#123; @media only screen and (max-width:20em) &amp;#123; @content; &amp;#125; &amp;#125; &amp;#125;
用法很简单:

1234567div &amp;#123; margin:5em; @include break-point(mobile) &amp;#123; margin:2em; &amp;#125; &amp;#125;
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>27 个工作情景的英文写作模板</title><link>http://taoalpha.me/blog/2014/11/25/read-t-27-english-writing-template/</link><category>read</category><tag>翻译文章,译系列,邮件</tag><pubDate>2014-11-25T09:00:00.000Z</pubDate><description>以后译系列会略作调整, 采取不完全译法, 我会尽量保证原文的意义不变的同时, 捡重点的来翻译和分享~哈
本文很实用, 尤其是对于在工作中要经常写英文文档的人士以及广大的留美同志们…

沟通总是一件不容易的事情.  2012年麦肯锡的一个报告就指出那些高效的办公人士往往也会花费28%的工作时间来处理邮件, 而如今这个数字还在增长之中.  而除了这种时间上的花销之外, 还有很多精神上的花费, 需要思考如何回复各种邮件, 各种求助, 拒绝甚至是搞砸了后自己要发的认错邮件.

为了帮助你最大化的利用你的时间和精力, 下面这些现成的模板就能够帮助你尽快的梳理思绪, 万事开头难, 有了这些模板, 自然会加速很多啦. 

模板按照不同的类别分为”找工作”,”工作中”,以及”管理”三类, 下面一一列举一下:

找工作篇:

当你需要通过你的社交圈来帮助你找一份工作时: 通过自己的朋友圈来找工作是最为简单的一个事情了, 毕竟大家一起帮助你找比你一个人孤军奋战要好得多, 机会也会更多, 不是吗? 当然, 想要别人帮助你, 自然就需要尽可能让这个帮助过程越容易越好了.  [查看模板]你需要一份来自梦想公司的内部推荐: 如果你想要在一个梦寐以求的公司工作,  然后你恰巧发现你认识的一个朋友正好和公司里面的人认识. 那么让这个朋友去引荐你就是一个好的方式, 如果觉得直接询问不好意思的话, 就可以通过邮件来表述喽. [查看模板]你想要写一个完美的介绍信强调自己的技能: 你的介绍信应该不只是列举自己的工作经历(那应该是你的简历所应该做的事情). 你要在其中突出你的技能, 告诉雇主自己的独特之处.  [查看模板]面试后的感谢信: 面试后感谢信是个很好的习惯, 经常能发挥出意想不到的效果.  [ 查看模板]你想要寄送一封真的很突出的感谢信: 如果你是去面试了自己的梦想公司, 你可能就需要好好准备一下自己的感谢信.  [ 查看模板]你一周或者两周前提交的申请, 想要确认下进度: 一直听不到什么回信? 如果已经好几周了, 那么你就可以发个信问问喽 [查看模板]你需要谢绝某个offer: 如果你通过了面试, 但是你最后想要拒绝这个offer, 那么你也可以发一封解释信, 而不是冷冰冰的拒绝他人, 得给自己留些后路~ [ 查看模板]

工作篇

当你不知道对方要的是什么时: 有时候会出现这种情况, 对方邮件内容过于含蓄, 模糊, 你不知道对方想要什么, 所以这种情况下你可能需要回复对方来确认对方到底在说什么. [ 查看模板]你需要学会拒绝一些事情: 说不是一个不容易的事情, 但是你又必须要学会这一点. [ 查看模板]你需要学会对那些你真心想要帮助的人说不: 当你对某个你十分想要帮助的人说不的时候,  会尤其的难.  但是你必须要学会这一点. [ 查看模板]如果你收到了一个内容非常丰富(充斥着各种想法, 注意和任务清单)的邮件: 对于这种内容满满的邮件, 你回复时可能要区分下来信的是你的老板还是同事, 但是核心都是你要确定以下任务的优先级. [ 查看模板]你需要更多的信息才能进行回复: 当你收到一封邮件向你请教的问题是你需要更多的信息才能回答的, 那么你就可以回复邮件人来获取更多的信息. [查看模板]你的同事在给一个项目火上浇油的时候: 如果你的同事是一个只会越帮越忙的人, 那么想到一个不伤害对方而又能让对方接受的方法是很难的, 你必须要意识到: 你这么做是为了大家的生活都能够更加轻松… 那么你就需要好好斟酌自己的用词了. [ See the Script]你工作中遇到的冲突, 而你需要告诉你的老板: 和同事产生摩擦后立刻找老板不是个好习惯, 你更应该先尝试自己解决, 不给老板找麻烦. 但是如果问题一直不断, 你又解决不了,那么, 你最好还是找经理来解决一下比较好. 此时你可以用下面的模板. [ 查看模板 ]你想要拒绝一个项目时: 如果你被要求做一个不想要做的项目时, 你可以写信给老板, 当然, 肯定不能很直白的告诉老板”没门”… 这个时候你就可以用更好的方式来拒绝这些你觉得无价值又浪费时间的事情. [ 查看模板]离职时: 辞呈是个很讲究的事情, 而且提出离职请求是个很难开口的事情, 下面的模板可以帮助你. [ See the Script]

管理篇

你想要邀请一个候选人来面试: 无论是你是第一次通知人来面试, 还是说已经发烦了这类邮件, 你都可以用这个模板来提供一个非常贴心的邮件邀请. [  查看模板]给一个候选人offer: 想要给某人发个offer? 简单, 用下面的模板吧. [ 查看模板]你想要拒绝一个候选人: 这可能比较痛苦, 技巧是尽量简短直接… [ 查看模板]如果你搞砸了, 你需要告诉你的客户时: 告知用户你搞砸了是个很难的事情… 但是它也会在另一方面展示你的诚实和解决问题的态度. 所以一定要慎重而且尽快的发送. [  查看模板]你需要写一个LinkedIn推荐的时候–急: 当你接到邀请要给某人在linkedIn上写推荐信时, 不要犹豫. 按照下面的模板填完就能保证你在5分钟内解决它. [  查看模板]你需要一个引荐时: 当你发现一个朋友或者同事认识一个你相当想认识的人时. 你如何合适的请求对方帮你做一个引荐呢? [ 查看模板]你被请求做一个引荐时: 当你被请求为他人做一个引荐时. 你不能立刻就介绍两人, 而应该确认一下被引荐的人是否同意, 那么你可以先发个邮件询问以下TA. [ 查看模板]如何做引荐呢: 当两方都没问题后, 你就可以正式做引荐了. [ 查看模板]你需要解释你的所做时: 无论是在网络还是在现实中,向一个新认识的人介绍自己的工作总是比较蛮烦的, 而想要做的有趣而又有效果的话, 就需要一些技巧了. 提示: 不要直白的说出你的头衔. [ 查看模板]你需要一个客户帮你引荐其他客户时: 如果你有一些很好的客户, 并且希望他们能帮你引荐更多的客户, 那么下面的模板可以帮助你. [  查看模板]邮件过多的时候: 很多时候你没有时间处理那么多的邮件的, 但又不能放着不管的话, 你可以利用一些策略或者简短回复来拒绝他们. [  See the Scripts]

这篇文章原载于:  The Daily Muse
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>For designers, the Customer is Never Right(Even when they are)</title><link>http://taoalpha.me/blog/2014/09/11/read-t-for-designers-the-customer-is-never-right-even-when-they-are/</link><category>read</category><tag>Design,翻译文章,设计,译系列</tag><pubDate>2014-09-11T10:00:00.000Z</pubDate><description>总的来说文章不错, 尤其是总结的四条让设计师无语的原因哈, 让我不自禁的想起来当初做PM的时候和设计师沟通的情景, 很有带入感哈哈~ 谨以此文献给所有设计师们~

“客户至上”的原则是如此的根深蒂固, 以至于反对这一原则变成了一件非常不可能的事情. 在我们很小的时候, 还远没有任何真实世界的应用经验的情况下, 我们就已经学习了这一准则. 即无论如何, 让消费者开心就是你最应该做的. 还有什么更好方式吗? 比从客户进门开始就奉承TA的每一个念头更好的方法?

[caption width=”570” align=”aligncenter”]For Desingers, the Customer is never right[/caption]

每一个设计师最终都会得到这个结论的. 尤其是当你作为一个自由职业者或者一个小企业的经营者, 你工作越久, 这一点就看得越清楚. 实际上, 即便在技术角度上客户是对的, 他们依然在一些方面是错误的. 因为无论他们能给项目规划带来多少亮点, 传达多少细节, 他们依然雇佣了你.  他们有些决定是基于缺乏相应的天赋, 知识以及经验的情况下作出的.

这就创造设计领域一个非常有趣的悖论:  客户提供的越多, 产生的帮助越小. 下面这四条就是你应该放弃那”顾客至上”原则的主要原因,  来自Clients From Hell非常准确的报道.

他们不知道他们到底要什么.

[caption width=”570” align=”aligncenter”]A client who then offered to pay me in haircuts[/caption]

当你第一次听客户说”做你想做的”时候, 你一定感觉像是听到天使的声音, 动听无比.  是的, 你会在忍受客户那些完全没有道理可言的需求之下, 尽情的展示你的技艺.

也许你觉得这种失望的感觉是暂时的,  你会在之后大展身手的. 很遗憾, 你的客户是不会给你这个机会的. 更多时候, 在你拿出一个草图后, 他们会立刻给你提供一堆的小变动.  看到了吧, 他们不是没想法, 他们只是没有和你分享他们的想法. 当然, 你又不会读心术, 你自然不知道.

其实, 他们可能真的和你分享过他们想要什么. 他们可能有一个非常具体的需求描述着自己像要什么. 不过可能是个非常糟糕的点子, 或者完全不可行… 亦或者, 他们就是没啥想法, 但是非常不幸的是他们觉得自己有… 这就让你说服他们变得非常困难, 当然… 你在整个项目过程中都会遇到这个问题的.

他们不知道改如何表达自己想要的是什么

[caption width=”570” align=”aligncenter”]They don’t know how to explain what they want[/caption]

继续说那些有”想法”的客户, 他们的脑袋中可能确实有点存货发酵出些好东西. 也许, 可能他们脑海中的那个画面真的超级棒. 可能他们想象中的网站/图标/宣传册甚至可以成为设计界的Sistine Chapel. 那么你可能有机会成为早就这一伟大的设计师, 成为一个艺术殿堂的大师级作品的创作者, 创造出某种设计流派的设计大师.

这些都没有意义, 你可能永远都无法知道你的客户脑海中的那个想法到底是什么.  因为没有客户能够清楚的解释描绘出他们的需求到底是什么样的. 这其实并不怪他们. 即便我们作为设计师, 有些时候我们也会觉得语言是那么的匮乏, 无法表达自己的想法. 当然这也是为啥我们先从草稿设计开始的原因.

不幸的是, 随着无数次的”小修改”, 诸如”我只是觉得这块是不是太红了些呢? 就是… 你懂我的意思?”, 想要保持耐心, 礼貌变得越来越难.

他们不注重细节

[caption width=”570” align=”aligncenter”]They don’t pay attention to the details[/caption]

客户经常觉得他们可以把整个任务的设计环节都派送给你. 当然实际上也确实是的. 但是在很多特定的环节中我们又必须要考虑他们的意见.

我遇到过很多次这种情况: 我的一个客户在某个时候支持了某个部分的设计, 甚至可以说是赞扬的. 但紧接着, 当我们提交最终设计时, 他们又开始针对同样的部分开始抱怨, 指出种种问题. 这可谓是当今世界最让人沮丧的事情之一了.

迄今为止, 我找到的避免此类情况发生的一个最好方式就是我们必须假设每个客户都完全不会注意细节的. 那么在这种假设下, 我就可以在各个环节中稍微的含糊一些来保证他们每个环节都能够满意. 直白的询问客户的喜恶会有一定的帮助, 但不是免死金牌. 因为很有可能你会发现人类是多么的善于说谎.

他们从不对我们投入的时间和精力表示感激

[caption width=”570” align=”aligncenter”]They don’t appreciate the effort and time a project takes[/caption]

“分分钟搞定的事儿”

每次听到这句话你是不是都觉得后脖子上的头发都竖起来了? 每个设计师都听到过这句话, 而每个设计师都是极为厌恶这句话的. 这个工作不可能只花费几分钟解决的, 它并不是那么的简单. 当然, 客户总是希望你能眨眼之间就搞定了, 不费吹灰之力.

问题在于他们并不清楚设计定稿期间的各个流程和环节. 就如同你可能不理解他们所关心的这个网站一样. 这也是你为什么要尽量在设计的每个环节都告知客户, 让他们了解项目的进度以及每个部分如果复查的话需要多久, 当然也要确保他们知道你不是在免费工作的. 毕竟, 如果他们觉得这事那么的简单, 只需分分钟搞定的话, 那么他们不如自己做呗. 不是吗?

礼貌的忽略客户

没有什么能够消除上述这4个问题的. 所以最后你只需要保证礼貌, 但是要坚决的, 告诉他们你的原则和规定(请事先订好原则, 确保没什么混淆的地方), 不接受任何越线的事情.

知道什么时候开掉一个客户是很重要的. 有一些”禁区”是你不能够忽视的. 希望, 你能够通过一次小小的谈话就解决所有的问题, 那么那些非常不愉快的流程就没有必要了.

如果他们提出了那个”客户至上”的原则怎么办? 冷静的告诉他们那只是一个从来没有应用到设计师身上的原则而已.
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>How to Create a web design style guide</title><link>http://taoalpha.me/blog/2014/11/10/read-t-how-to-create-a-web-design-style-guide/</link><category>read</category><tag>产品学习,翻译文章,设计,设计规范,译系列</tag><pubDate>2014-11-10T09:00:00.000Z</pubDate><description>如何制作一个网页设计样式规范

现如今, 做网站变的越来越复杂, 而且通常都已经不只是一个人的活了, 这就使得确保设计的一致性和优越性都能够符合商业目的并且有足够好的用户体验变的非常重要.

而确保不同分工的人能够很好的切合彼此同时也为了从开发者手上拯救悲催的设计师, 有一个很好的方法就是制作设计文档或者一个网页设计样式标准.

如果有一个样式标准的话, 对于在不同页面上保持一致的体验是有很大帮助的. 它同时还对确保以后的更新迭代, 第三方的产品接入都能够很好的融入整个产品, 成为产品和谐的一部分也有所帮助. 

Luke Clum 去年曾经浅谈过这一话题: 网页设计第一步之应用样式标准. 今天我则会更加深入一些的探讨下如何为你的项目创造一个网页设计样式规范这一问题.

什么是样式规范?

一个样式规范通常是一些设计好的元素, 图形以及设计师和开发者应当遵循的一些规则组成的, 是为确保网站的不同部分能够保持统一从而创造一致的用户体验.



为什么说它很重要呢?

对于一个大型网站项目或者app项目而言, 它通常是多个人员共同协作完成的, 那么这种情况下, 样式规范就非常重要了, 因为要依赖样式规范来确保每个人不会因为个体差异而产生较大的理解偏差. 在开发环节中, 如果能够有定义完整的元素标准, 那么开发者就能够复用这些样式, 省事很多了. 更何况, 有了规范, 开发者们会更加清楚他们所需要编写的对象了.

制作一个网页设计样式规范

学习品牌

首先, 你需要学习你服务的品牌, 理解其所代表的含义. 试着去了解品牌背后的故事, 观察它的团队, 找到这一公司的任务, 目标以及价值体现. 只有深入的了解一个品牌后, 你才能做出一个在视觉上以及情感上都能体现这一公司的样式规范出来.

如果你是一个不会写代码的设计师, 那么就打开PS, 做个文档, 写上标题, 加上一个简短的介绍说清楚文档的内容和目的即可.

如果你可以写代码, 那么最好是能够直接做出一个html文档, 写好能够复用的样式代码块, 从而可以让开发者们更容易的复用.

定义字体

根据 Oliver Reichenstein所说, 字体占据了网页设计的95%.

你必须要选一个正确的字体, 因为它将会是你和用户之间最重要的一个沟通工具了.

选好字体后要同时标好层级关系. 一共有标题类:h1-h6, 再加上正文字体, 粗体以及斜体这些情况都要考虑到. 同时考虑下可能会用到的小字号链接的字体, 介绍文本等. 提供出字体所属家族, 字体粗细以及颜色. 

调色板

人们对色彩的认知和感受, 以及人们对于那些知名品牌的色彩认知都是非常不可思议的. 想一下可口可乐, 我敢说你脑海中立刻一片红色~

首先, 你需要先设定样式规范的主色调, 通常主色应该不超过三个色调.  而在有些时候, 你可能需要选择一些备选色, 甚至第二备选色来渲染你的界面, 所以确保你把你的色调定义好. 另外要加上一些类似白色, 灰色, 黑色的中性色到你的主色组中.



语调

这里的语调算是我引入的一个概念了. 比如你在制作样式规范之前已经了解了这个品牌, 发现这个品牌是一个比较时尚, 比较潮流的品牌. 那么如果你的那些提示语都没有什么倾向的话, 你就需要定义你的语调倾向. 可以简单的举个例子, 语调要足够专业但又足够有趣温馨就行. 比如与其使用”你遇到了404错误”, 你可以换一种说法”哦, 孩子, 你刚刚弄坏了互联网…404错误”. 而如果语调主旨比较正式, 你就不应该这么做了~ 要记得, 智慧往往体现在细节上.

图标

图标已经存在几千年了, 远比语言, 文字都要古老. 所以好好利用图标, 能够让你的项目更加友好, 图标可以更好的和用户交互, 更容易理解, 更清楚的表情达意. 选择一个合适的图标往往能够赋予内容比色彩, 图像都要多的意义.  当使用图标的时候, 请确保仔细考虑了目标用户, 以及它们的历史, 宗教等信息, 这样你才能保证避免一些误解的产生. 还有一个值得一说的事情就是, 要结合品牌自身和其价值, 你不会愿意在一个大型的银行网站上使用手绘的图标的.





图像

图胜千言. 确保规范中包含网站中使用图片的样式和方向. 以及, 一定要考虑下品牌和其价值, 目标. 比如, 一个水资源的慈善机构会使用一个突出的画面来表现一种强烈的情感, 从而引发人们对自身所处环境的感激, 感激自己能够生活在一个基本资源, 如水, 食物, 电力, 教育都俱全的环境中.



表格

正是因为表格, 才能让你的网站和用户有了很好的动态交互, 用户输入数据, 而你则操纵这些数据从而完成某个工作.

确保建立一个层级结构并且尽可能增加不同形式的反馈: 激活态, 鼠标悬浮态, 以及错误提示, 警告和成功等附加信息, 比如密码过弱, 邮箱不正确或者仅仅是个简单的成功信息也可以: 比如”邮件已发送”~

按钮

按钮是一个集成体, 集合了色彩, 表格以及语态. 而依赖于这些已有的部分, 就可以创造外表和功能都一致的按钮设计.

留白

留白怎么在一个样式规范中体现呢? 提及留白这一点是非常重要的. 它可以是一个栅格式布局的形式, 也可以是在标题, 按钮, 图像, 表格和其他元素之间的留白.

合适的留白是非常重要的, 因为它的存在让元素更加自然, 宽松, 同时一致的留白会让你的网站更加专业, 结构清晰.

对于错

最后, 一定要加上一个”对于错”的环节, 就好像一个FAQ一样来列举常见的一些陷阱和错误, 并给予正确的样子作为参考.



示例

这有一些很好的样式规范示例, 可以作为你创建自己的样式规范的灵感来源. 需谨记的是这些规范都收到了所属组织本身结构, 视野, 任务以及价值观的很大影响. 有一些可能会和你所属项目的规则并不一致, 甚至有所冲突, 所以不要盲从, 仅作为参考即可.

Spotify



Dropbox



Kickstarter



Lonelyplanet



The best way to find Guides



结论

一定要先深入的学习了解设计对象品牌的价值和内涵, 这样才能让你的样式规范拥有更好的一致性, 才能成为一个好产品的基础.

Source:

原文: How to Create a web design style guide
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>It’s Not UX vs. UI, It’s UX &amp; UI</title><link>http://taoalpha.me/blog/2014/11/13/read-t-its-not-ux-vs-ui-its-ux-ui/</link><category>read</category><tag>UI,UX,关于HCI,翻译文章,设计,译系列</tag><pubDate>2014-11-13T08:00:00.000Z</pubDate><description>UX和UI并不是对立的Chris Bank of UXPin –  一个线框图和原型制作工具 – 对比了以下网页设计和用户体验, 解释了为什么我们有时候默认要先创建一个UI, 然后利用UI来塑造整体的UX.  如果想要了解下利用33个公司的例子所进行的分析, 可以前往阅读: 网页设计界面典型实例.网页用户体验(UX)是用来描述人们对一个网站所获得一种感受的这么一种抽象概念. 而用户界面(UI)则是在这个体验过程中, 用户所与之交互的界面.当设计一个网站时, 你希望你的UX能够尽可能的正面, 积极 – 你希望你的用户能够享受这一浏览过程, 这也是网站全部的意义所在. 但是你不能只是简单的说”让我们提升一下我们网站的UX吧”, 就好像你不能随便的对一个事业说”来让我们多赚点钱吧”. 只有我们用以创造体验的方法, 即用户界面这个媒介来提升我们的体验.来源: UX is not UI通常对网站而言, 一个公司的设计团队都是通过在UI上下功夫来提升UX的. 菜单选项啊, 按钮啊, 文本啊, 图像啊, 视频啊等等, 这些摆放在页面上的元素, 是组成这个界面的各个部分, 也是我们所需要精雕细琢的地方. 而这些都是UX的组成部分, 他们的使用直接影响着最终用户的体验.我们会结合一些UI的实例来解释种种可以帮助你题解为什么一个好的UX依赖于一个好的UI的方法, 并且会更进一步的解释为什么创造一个UI要比创造一种UX来的容易.网页用户界面究竟是什么?又不是什么?就网页这个情景下, 什么是UI呢? 假设设计师在管理内容方式上, 支持用户选择拖拽文件作为一种管理内容的方式. 这就是UI. 而假设一个用户相比竞品更喜欢这个网站, 因为他喜欢它的简洁, 在上面听歌更加享受. 那么, 这就是UX.正如在 2014网页UI最佳实例的讨论中,  网页UI是网页组成元素的设计, 展示以及操作方式的组合. 通常来讲, 这些的表现形式是多样的, 因为它们笼统的包含了设计师所能够放入网页的所有东西, 但是幸运的是, Usability.gov, 一个领先的UX规范, 实例等资源整合的网站,  用一种简便而又方便的方式归类如下:Input(输入) – 文本类输入域, 时间日期类输入域, 下拉列表, 复选框, 列表框, 可点击按钮, 转换键等Navigation(导航) – 幻灯片, 搜索输入域, 翻页导航, 侧边栏, 标签, 图标等Sharing(分享) – 好友列表, 关注按钮, 喜欢按钮, 分享按钮, 邀请好友Information(信息) – 文本域, 提示框, 信息框, 提醒, 图标, 进度条, 窗口等比如, 在 OS X Yosemite: 为最好的UI努力一文中. 虽然Yosemite是一个操作系统(而不是网站), 但是其UI背后的原理依然是可以用到网页设计中的. 他们在可点击按钮上所达到的视觉效果让用户在使用系统的时候非常享受, 而它的侧边栏则让用户能够看到更多窗口背后的内容(?), 而它的提醒中心则在完全不打乱当前工作流的情况下提供了你所需要知道的信息.最重要的是, 正如Apple在他们的UI设计规范中所陈述的, 这些元素都帮助他们完成了”自定义功能以及一个独到的用户体验”. Yosemite UI最终的目标是允许用户能够快乐的使用这个功能强大的系统, 而不至于因为系统的复杂而受挫.要让UI的效果看得到UI和UX是完全不同的概念, 但是又有着不可否认的联系.如在 2014 网页界面设计示例中, Google Play掌握了拖拽这一UI技术. 在他们的网站上, 用户可以拖拽歌曲到一个播放列表, 然后拖拽他们进行排序. 最终的结果是, UX因为用户所需要做的仅仅是告诉App他们想要听什么歌曲然后就可以轻松的听歌了而得到了很大的提升. 利用这种方式, 仅仅是一个UI的引入(拖拽)就提升了整个用户体验, 为什么呢? 因为更加方便, 更加可定制化了. 接下来我们说个不这么直接的例子. 假设你的很多用户都过早的离开了你的网站, 因为他们不想要注册来使用某些功能. 这显然是一个UX的问题, 因为这是体验导致用户提前离开, 但是你可能会发现其根源还是在UI上. 假设你当前的登录环节有太多的登录信息需要填写. 在这种情况下, 那么快速进入(“lazy signup”)的UI模式可能会是一种解决办法. 这可以让用户不需要注册也能访问绝大多数的站点内容. 而在一段时间的自由访问后, 他们就有可能决定去创建一个账户, 尤其是在他们发现有一些功能是仅对注册成员开放的情况下.AirBnB在吸引新用户的时候采取的就是这个策略. 用户如果是非注册成员, 那么也是可以像注册成员那样浏览绝大多数的帖子, 从而让他们也能看到AirBnB所拥有的各种有趣的东西. 但是, 一旦他们发现了一个他们想要预订的房子, 那么他们就需要一个账户才能预订.如果UX是通过UI来体现的, 那么UI就是通过设计环节, 比如速描, 线框, 原型制作等来创造的. 线框和原型就是一些简单的线条, 是设计师们在创造真正的网站之前所制作的设计蓝图. 通常是从手绘在纸巾上的草稿, 然后用类似 UXPin和Balsamiq等工具制作出来的数字原型.  这可以说是最重要的环节了, 设计师们必须系统的, 在理论上想清楚什么样的UI将会创造出预期的体验. 就如同建造一栋房屋, 你不能在蓝图还没想清楚的情况下就动手施工了.想要进一步了解线框原型的, 可以前往 线框原型规范.我们为什么要创建用户界面而不是用户体验呢Shawn Borsky, Rivet Games的UI/UX首席设计师,  告诫我们UX不仅仅是UI的结果. 据他所说, UX是”一个品牌的核武器”, 而一个品牌本身则是”一个人对公司或者组织的所有感受的累积”. 这就使得一个全面的UX绝不仅仅是UI的目标, 而是所有, 用户和这个组织所进行的交互的综合目标.一个网站的每一个细节都会对它的用户体验以及用户从而形成的对这个网站的印象有所影响 – 但是网站设计师往往是不能直接控制这种体验的. 就如同下面这副画所描述的, 我们很容易把自己的焦点只集中到UI上, 毕竟UI是有形的(就好比勺子一样), 而UX这种体验的东西是无形的(就好比一顿早餐的愉悦感一样).同样的, 如果你正在做一个重要的晚餐, 你可能会想在其中花很多的心思, 不是吗? 你手选出最好的调料, 选用最佳的食谱, 然后小心的按照上面说的一步步完成,  甚至最后你会在盘子中心放上一个漂亮的装饰来营造一个好的氛围. 那么, 网站也是如此, 你希望能够把每个部分都能够设计的足够完美, 让你的每个访客都能够愉快的浏览. 你可能会花费几个小时甚至几天的时间来设计, 准备这道菜, 但这只是最顿完美的晚餐的一部分. 这也是为什么只有当你装着UX在怀里的时候再去注意UI的细节才有价值.如果一个UI是你花心思, 集中注意力, 很小心的制作的, 那么它一定能够在UX中得到体现. 如果一个UI是你花了一点功夫赶出来的, 或者里面有一些大的疏忽, 那么UX也会反映出来的. 一个关于UI有疏忽的例子就是iPhone上的Shift键(虽然我们谈论的是网页设计, 但是移动设备在UI和UX的问题上也不能免俗的):上面的图片中, 哪个Shift键是激活状态的, 哪个不是呢? 在上面的键盘示意图中, 有些键始终都是灰色背景, 有些则始终都是白色背景, 但是Shift键这两种背景都有, 依赖于它的状态是否是激活的. 这是一个非常糟糕的设计, 虽然所有功能都正常, 而且用户依然可以使用Shift键. 但是结果呢? 用户(如在UXPin)经常不得不删掉刚打的词, 从新打过, 这让我们非常不爽… 也就产生了非常不好的用户体验.(说实话, 上面到底哪个是激活态?! 在UXPin, 我们使用iPhone已经6年了, 但我们始终没搞清楚这个…)再比如一个在 网页UI最佳实例中的示例, 哪怕是流行站点如LivingSocial中也存在着非常糟糕的UI设计:这是你在首次进入网站时看到的一个弹框. 问题在于… 完全没有取消的选项. 这意味着那些谨慎的用户们, 因为不愿意提供自己的邮箱, 就只能立刻离开了. 可能这也算是一个迫使用户提供自己的邮箱的一个国际惯例了… 但是你真的愿意自己的网站的体验和这个傻缺的一样?如今, 注意到UI上没啥大问题–配色也不错, 按钮看起来也很有点击欲望 – 但是用户体验很恶心已经是一个非常重要的事情了. 这也算是虽然有好的UI但是却没有好的体验的典型例子了. Marcin Treder, UXPin的CEO, 相信一个糟糕的用户体验只能在特定目标下有限度的接受. “有时候你会看到那种有着长长的, 复杂的表格, 所有的标签都左对齐着, 这是一种很糟糕的阅读体验”, Treder 说”但是另一方面, 你通过这种方法能够避免那些胡乱填的人从而能够获得比较好的数据质量, 而这也正式你的目标所在.”我们正在挑选一些 糟糕的UI设计样例, 仅仅是因为这些比较容易被注意到, 而且也比号的设计更有趣不是吗? 这也是因为一个好的UI, 是那种你感觉不到的好. 就好像一个好的电影让你看的都忘记自己在电影院里, 一个好的UI也会让用户沉浸其中而不会注意到的. 甚至都没有注意到创造出这么好的UX的UI.UI是如何塑造UX的理论讲的差不多了, 我们接下来看看UI选择是如何直接影响UX的吧.上述例子都是关于UI是如何影响UX的粗略描述, 想要看一个更加细节性的解释, 可以看看 2014网页UI设计模式虽然UI塑造了UX, 但是你首先要做的事情还是决定好UX, 然后再去找对应的UI. 类似的, 如果你的UX有问题, 那么最好的方法和确认问题所在就是去UI上找问题, 并且修正它.学习用户体验的用户体验要理解UX和UI之间的区别仅仅才刚开始 – 建立一个好的网站的关键依赖于你对这两个概念之间的联系的逐步了解. 虽然很多网页设计是割裂且独立的, 但是UX和UI多数情况下是直接联系在一起的.如上所示, 想要创建一个有效的用户体验需要很多东西, 远不止是视觉. 视觉和听觉设计只是UI设计的一小部分元素. 当你无法制你网站的UX时, 你可以试试控制你的UI – 确保你有一个好的UX预期然后恰当的设计你的UI.强烈推荐查阅: 网页UI最佳实例Source:    原文链接: It’s Not UX vs UI, It’s UX &amp;amp; UI
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>jQuery 3.0 &amp; jQuery Compat 3.0 are Announced</title><link>http://taoalpha.me/blog/2014/11/19/read-t-jquery-3-0-jquery-compat-3-0-are-announced/</link><category>read</category><tag>jquery,翻译文章,译系列</tag><pubDate>2014-11-19T10:00:00.000Z</pubDate><description>jQuery 3.0 &amp;amp; jQuery Compat 3.0 are Announced

如果你算是web开发领域的一员, 那么一可能会是下述两种类型之一: 你认为jQuery是自图像切片以来最棒的事情了, 没它你一周都过不下去; 或者, 你认为jQuery就是一个臃肿的拄杖, 是那些过于懒惰不愿意学习真正的JS的人的利器.

但是, 无论你持哪种观点, 你都不能否认jQuery对工业界产生的影响, 它已经是如今网页开发最流行的JS库了. 所以本周宣布的jQuery 3.0可以说是前端开发的又以里程碑事件啊.

jQuery 2.1.1会很好的继承到jQuery3.0.0中, 而jQuery 1.11.1则会很好的继承到jQuery Compat 3.0.0中. 他们共享一个版本号是因为他们的公共API都是一样的, 后者主要是最大化的兼顾兼容性问题, 前者则最大化的提升性能.

先别急着去更新自己的站点, jQuery 3.0还没正式发布呢, 它还处在计划阶段呢. 但是它意味着jQuery 2.0的时代已经告一段落了, 而任何残留的问题也都只能暂时保留了.

更重要的是, 它同时意味着用jQuery 2.1.1开发的东西不一定会在3.0的版本中正常工作呢, 因为通常来说当小版本迭代更新时往往能够向前兼容, 但是大版本的更新就不一定了. 这一点, 在 Dave Methvin的更新声明文章中也有着重提到.

这对开发者有什么影响呢? 如果你曾经通过Google引入jQuery过, 你就会知道你往往会请求某个特定版本的文件, 或者至少是特定的某个大版本号下的文件. 如果不是这样的话,  3.0 出来后就有可能引发一些问题. 但是目前手头还有一个更大的问题, 随着3.0的更新, 成千上万的使用jQuery的第三方产品将会急冲冲的开始更新自己的版本(很多是因为市场因素所致).

这种匆忙更新3.0很有可能造成一种多米诺骨牌的更新效果,  其中必然有一些会出现问题.

但是jQuery也不能常年不变, 那么它离废弃也不远了. 它必须更新自己的代码来应对新的需求和技术. 而通过强调下一版本为大版本更新, 告知可能出现的API变动, 本身就是一种负责任的表现, 而且他们已经尽可能的提前通知公众给大家足够多的警告了.

开发者们所需要做的就是确保他们在引入jQuery的时候指定一个详细的版本号(既有大版本号又包含小版本), 并且确保自己使用的第三方脚本也是用的同样版本的jQuery.

Source:

back to original page: jQuery 3.0 &amp;amp; jQuery Compat 3.0 are Announced
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Scarcity Principle in UI Design - Making Users Click RIGHT NOW or Lose Out</title><link>http://taoalpha.me/blog/2014/11/07/read-t-scarcity-principle-in-ui-design-making-users-click-right-now-or-lose-out/</link><category>read</category><tag>Scarcity Principle,UX,关于HCI,翻译文章,译系列</tag><pubDate>2014-11-07T09:00:00.000Z</pubDate><description>稀缺原理是社会心理学中的一个著名现象, 换句话说就是”物以稀为贵”. 在现实生活中, 黑色星期五就是一个稀缺原理的最好示例: 对这个每年仅进行一天的销售日(在美国是感恩节之后的那天), 且有着非常明确的数量限制, 再加上一定的折扣, 也就导致在这一天里, 成群结队的饥渴的消费者们往往对于零售商们而言是一个非常好的事情, 当然, 除非他们过于亢奋而引发暴力… 那就不好了…稀缺远离在交互界面的应用模式有限的时间和数量在上面这个Groupon的例子中, 这一交易的有效期和商品的数量都昭示着稀缺原理的应用.有限的范畴上述例子则是来自Creative Market, 这一次, 有限的是卖者, 所以卖家必须要申请获得一个邀请才能进入. 在互联网上, 空间的限制从来都不是仅仅为了限制空间, 他们通常都是用来进行一些收藏, 名人和内容的展览.有限的信息上述来自Urban Outfitters的例子则是通过利用最新的一首信息和优惠的邮件来演示了有限的信息.(我们的研究表明这种对于获取比别人更多更好的信息对订阅是一种很好的动力).稀缺原理的背景介绍稀缺原理是Robert Cialdini博士提出的6种影响力原理之一, RC博士是来自Arizona州立大学的一位教授, 因其1984年所著”影响力:说服的心理学”而出名. Cialdini的这一著作是围绕着关于妥协这一现象的心理学探究展开的, 描述了RC作为一个心理学教授, 他和他的学生们进行了无数的研究来探究这6种影响力.稀缺性是一个非常重要的影响因素, 为什么这么说呢? 其根本在于认知学上有一个著名的偏见叫做: 损失规避, 是由Daniel Kahneman和Amos Tversky两人首先提出的. K和T发现人们总是对失去的东西投入更多, 认为它们的价值高于所获得的, 从而导致人们更倾向于避免损失而不是增加收获. 换句话说, 损失$100的痛要压过获得$100的快乐…(译者注: 即失去了才懂得珍惜…)这种对于规避损失的强烈倾向解释了为什么稀缺原理如此有效: 因为我们觉得如果我们不立刻采取行动, 我们就要失去这一稀缺产品或者信息了. 比如, 如果一个人正在买机票, 然后发现有一个航班很符合他的需求, 然后发现后面注明这是这一价格下的最后一张机票了, 这个人可能会立刻因为担心错失这张机票而立刻下单购买, 即便可能他自己还没准备好订票呢. (对于这种当前$100的折扣, 除非用户能够在之后获得$200的优惠, 否则多数用户都无法说不的.)稀缺性可谓是一个非常有效的说服工具, 为什么这么说呢?  因为稀缺性有多种表现形式: 数量, 时间以及信息. Knishinsky曾做了一个实验证明了正是这些因素的累积效应产生了说服作用. 在他的研究中, 销售们通常可以通过告诉客户在接下来的几个月里牛排供应会比较稀缺而获得2被的销售量. 而更加不可思议的是他们还发现如果销售们不是直接的告诉客户, 而是以一种秘密消息透漏出去的情况下, 他们甚至可以达到6倍的销售量. 哈, 这种双重稀缺(商品+消息)比简单的商品稀缺要高出三倍的销售量啊.在互联网上, 我们什么时候去使用这一技巧呢?加快预期行动: 如果你发现你网站转化用户中的绝大多数人在成交前访问你网站的次数比你预期的还要多时, 那么你可以尝试利用稀缺性来减少这一延迟;提升商品感知价值: 暗示商品数量有限可以影响客户对商品价格的估计. 比如, 在一个高端晚餐中, 一个大盘子上一块小猪肉可以暗示其所使用的调料是非常稀有的, 也应该更加珍贵.测试稀缺性使用稀缺远离的最大风险就是会降低信誉. 如果你的用户怀疑你这种稀缺只是虚假的, 他们可能就会流失掉的. 这也是为什么在正式应用稀缺原理前一定要将进行前期的测试. 以下是一些对应的问题和你可以使用的对应方法:Q: 什么样的稀缺信息会增加转化率?      Testing: A/B TestingQ: 稀缺信息会减少转化所需时间吗?      Testing: Analytics data, 访问路径以及延迟时间报告Q: 这一稀缺信息会影响信誉吗?              Testing: Usability Testing结论稀缺原理在真实信息的基础上进行适当的微调, 可以鼓励用户更好的更流畅的在你的网站上达成转化. 但是, 如今这一原理在很多网站上有所应用, 所以其效果也在逐渐下降了. 也因此, 我们非常鼓励设计团队在正式应用前进行测试, 确认其对于转化率以及长期商业目标的影响.Reference:Robert B.Cialdini, Influence: Science and Practice. Pearson Education Inc., 2009.Amos Tversky and Daniel Kahneman. Loss Aversion In Riskless Choice: A reference-Dependent Model. The Quarterly Journal of Economics Vol. 106, No.4(Nov., 1991), pp. 1039-1061Knishinsky, A. The effects of scarcity of material and exclusivity of information on industrial buyer perceived risk in provoking a purchase decision. Unpublished doctoral dissertation, Arizona State University, Tempe, 1982.-Daniel Kahneman, Thinking, Fast and Slow. Farrar, Straus and Giroux, New York, 2011.Source:Scarcity Principle in UI Design: Making Users Click RIGHT NOW or Lose Out
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Semicolons in JavaScript is optional</title><link>http://taoalpha.me/blog/2014/11/05/read-t-semicolons-in-javascript-is-optional/</link><category>read</category><tag>coding,js,翻译文章,译系列</tag><pubDate>2014-11-05T08:00:00.000Z</pubDate><description>JavaScript作为脚本语言的一种, 其末尾的结尾符号:分号, 其实是可选的, 没错, 这个分号并非是强制要求的.但是, 对这一点很多人有着非常多的担忧啊, 顾虑啊, 不确定啊等等, 也就导致绝大多数的开发者都会推荐我们始终以分号结尾, 以防万一.那我们究竟在防止什么? 我搜集了一些关于开发者们为什么愿意强迫自己使用分号结尾的原因, 下面我就概括的说下:规则过于神秘而且JavaScript本身编译器之间又有很多不同对一个粗略浏览的读者而言, 即使很难理解,明白, 但是关于自动插入分号的规则依然是随处可见的. 而对于JS不同的编译器而言, 又存在很多的区别, 我这恰好有这么个例子. 当我问一些开发者关于为什么使用分号时, 通常他们会这么回答:”哦,有那么一个浏览期就不能正常的编译, 我就是想不起来是哪个了.” 当然, 他们永远也不会想起来的…我自己写JS基本不用分号的, 就个人经验而言, 还没遇到无法处理的JS编译器呢.如果不用分号就不能压缩JS代码对JS源文件而言, 压缩其实共分为3个层次: 压缩(比如gzip), 最小化(即去除不必要的空格和注释) 以及模糊化(修改代码, 缩短变量名以及函数名).类似gzip这类的压缩是最为容易的, 只需要在服务器上设置一次就行了, 完全不需要开发者在进行什么别的代码修改. 曾经IE6在一段时间内不支持这一设定, 不过我记得应该在几年前就已经打补丁修正了, 如今基本没有人会在意这部分了.最小化和模糊化都会对你的源码有一定的修改. 它们都算是一类你可以用于操作js文件, 用以压缩文件大小, 同时不改变代码本身功能的工具. 我比较不喜欢用这类的工具, 因为很多开发者都说如果我不按照特定的代码格式来编写代码的话, 比如使用分号结尾, 那么这些工具就有可能破坏我的代码. 我完全可以理解以及接受他人或者社区规定使我使用特定的代码格式, 但无法接受一个工具要强迫我使用某种代码格式.如果我有一段在我目标浏览器或者编译器上运行的代码, 而我通过你的压缩工具压缩后, 它无法运行了, 那么我只能很伤心的告诉你, 你的工具有问题. 如果一个工具想要编辑JS代码的话, 那么, 它最好还是按照真正的编译器理解的那样来进行.既然说到最小化问题, 我们就简单做个实际的测试吧. 我利用的是jQuery的源码, 当然, 去掉了所有的分号,  然后我在Google Closure Compiler上运行了以下, 将它压缩到76673bytes. 原始的jquery.min.js文件大小在76674(只多了1byte). 所以你可以发现, 基本上是没有区别的; 当然, 它的功能也是完全正常的.这是如何发生的呢? 我们可以参考下面的代码:var a=1var b=2var c=3它有24bytes. 给它加上分号后进行压缩:var a=1;var b=2;var c=3; 还是24bytes. 所以, 你可以看到, 添加分号移除空行后对我们的文件大小并没有产生任何的改变. 从根本上来说, 我们通过最小化减少的文件大小并不是通过移除空行所得的, 而是通过移除注释部分获得的.更新: 很多人都指出他们的最小化工具把上述代码重写为了var a=1,b=2,c=3. 我知道有些工具是这么干的, 但是本文的主旨仅在于探究分号和空行的关系. 而如果一个最小化工具都可以重写代码(比如Closure Compiler), 那么对于它而言, 自动添加分号自然不成问题了.同样的, 有些人推荐在块结构上使用括号, 即使块结构只有一行代码时:// beforeif(condition) stuff()// afterif(condition){  stuff()}// after minificationif(condition){stuff()}强制使用括号至少能给我们的表达式增加1byte, 即便是压缩后也一样. 我实在不知道这样做的好处在哪里–既不利于文件大小, 也不利于可读性啊.以下都是一些空格有具体意义的语言, 你可能听过其中的一些:Ruby – 把操作符,调用函数和空格联合使用的话会抛出异常的;Python - 更不用说了HTML - 可以通过Kangax’s HTML minifier了解更多Haml Templates当然, 针对最小化, 在服务器端我们就不需要进行任何操作了. 我列举这些主要目的是为了支持下面这一论述: 空格可以, 而且经常作为一个语言的一部分. 它并不是一个非要去除不可的坏东西.这是一个优秀的代码格式也通常可以理解为:这对于保持一致性有好处(如果不这么做的话)JSLint该有问题了Douglas Crockford是这么说的当然这也算是”其他人都这么做”的另一种表达方式, 很多人在线上讨论时自己没有观点时往往这么说.至于JSLint, 我能给的建议就是: 不要用了. 为什么要用它呢? 如果你相信它能帮助你, 减少你代码中的bug数目, 那么请听这条快讯: 只有人可以发现并解决软件中的问题, 而不是工具. 所以, 与其使用工具, 不如让更多人看看你的代码.至于所谓Douglas Crockford所说的”4个空格”论, 还有很多流行的JS库用的要么是tab要么是2个空格呢.不同项目的社区自然有着不同的观点, 这就是现实, 就如我之前说的: 让其他人以及你自己来塑造你的代码风格, 而不是某个人或者某个工具.你可能注意到本文中, 我并没有告诉你说你应该彻底扔掉分号. 我只是陈列一些事实告诉你你可以这么做. 具体如何选择还要看你自己.至于说代码风格, 它们的存在使得代码更加可读, 更加容易被团队中的人理解. 深入的想想分号是否真的可以提升你的代码的可读性. 其实多数情况下, 提升你代码可读性的是空格–缩进, 代码块之间的空行, 对齐表达式时使用的空格等, 以及非常易于理解的变量和函数名. 你可以看看这些非常难懂的代码, 里面总是有很多的分号的. 它帮助你更好的阅读了吗? 没有, 实际上帮助到你的是大量使用的空格以及那些初始变量名.在return中插入分号会反咬你一口哦我在搜索”JavaScript分号插入”时, 很多博文中都描述了这么一个问题:function add() {  var a = 1, b = 2  return    a + b}在你费解于为什么有人会把代码写成这么个样子之前, 我们先继续看问题, 这段代码会被最小化为:return;  a + b;显然它并没有返回我们要的求和.  但是你知道吗? 如果我们在a+b后面添加一个分号并不能解决问题. 而当我们去除了return和a+b之间的空行后, 问题就可以解决了.return a+b同样的, 利用这一个极端无知的例子, 我还是建议人们不要在代码中随意添加分号. 当然, 分号可能仅仅只是在这一个问题上有问题, 但是我们要做的其实是更好的理解一个语言是如何被解析的.不加分号的编码中唯一的问题下面这个例子是你在尽量少用分号的编码方式中需要注意的一种情况:// careful: will breaka = b + c(d + e).print()它正常的结果应该是:a = b + c(d + e).print();这一例子取自一篇关于JS2.0兼容性问题的文章, 但是我确实在我自己使用the module pattern的程序中遇到过几次.简单的解决办法是: 当某一行是以括号开头的时候, 可以在括号前面加一个分号.;(d + e).print()这可能看起来不那么优雅, 但是确实可以解决问题. Michaeljohn Clement 做了进一步的解释:如果你选择尽可能少的使用分号, 我的建议是在任何一个括号和方括号为开头的表达式前立刻插入一个分号, 或者任何一个以算数运算符 ‘/‘,’+’,’-‘开头的表达式也应该如此, 如果你正好写了这么一个表达式的话.接受这一建议就不会有问题了.Source:    原文: semicolons in javascript is optional
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>The Who, What, When, Wear, and Why of Wearable Technology</title><link>http://taoalpha.me/blog/2014/10/29/read-t-the-who-what-when-wear-and-why-of-wearable-technology/</link><category>read</category><tag>Wearable,关于HCI,穿戴式设备,翻译文章,译系列</tag><pubDate>2014-10-29T04:00:00.000Z</pubDate><description>穿戴式技术的5个W

什么是移动性？移动性就应该是让内容服务对用户做到随时随地的访问， 尽可能的便捷高效。 就好比移动设备让人们再也不用坐到一台电脑前才能获取信息那样，穿戴式设备让人们甚至不用再拿着设备来获取信息了。 就好比我们把思维模式转移到iPhone的小屏幕并且学习着这全新的使用情景一样， 我们需要再次调整我们的思维方式去适应穿戴式设备–更小的屏幕，以及更加收缩的交互界面。 苹果最近推出了Apple Watch， 这也是穿戴式设备正式登场的一大证明–所有重量级玩家都已经落座， 游戏要正式开始了。

深度挖掘

首先， 了解『穿戴式』这一术语的含义非常重要，因为这一术语有一些误导性， 因为它囊括了数以百计的，有着不同目的和用途的设备于一体：智能手表，智能眼镜，智能衣服，智能袜子，智能腕带等等。 最基本的， 『穿戴式』是指所有那些用户能够穿戴起来的设备，当然这些设备还需要能够实现有价值的计算功能的能力。 但是为了能够理解他们的能力， 我们需要区分这些不同的设备以及他们的应用模式。 以下是当下最主流也是最具区分性的穿戴式设备的特点。

活动记录

通常来说， 形如腕带的这种设备都是围绕在收集我们身体数据（诸如心率， 脉搏， 运动模式， 每日行走距离等）这一服务核心来服务的。获得数据后， 他们就可以把数据传输到云端， 进行分析从而获得一些关于如何提升用户身体健康的结论。 而通过穿上这么一个并不怎么碍眼的设备， 收集我们自己的身体数据， 我们就可以更好的了解我们自己的身体， 从而更好的生活。虽然活动记录这一功能已经很受欢迎， 但是他们依然还有着很多巨大的商业价值和利用空间。 比如， 加拿大奥运代表队就利用智能服装来跟踪记录队员的重要指标， 这在团队在Sochi奥运会上取得的成功中扮演了很重要的角色。 同样的， 这些小型设备还可以影响到保险行业， 保险公司可以通过获得客户的个人信息来更加精确的计算客户的风险， 从而来降低保价。当然， 这肯定会引发很多的隐私问题， 但是对那些为了折扣同意提供自己个人信息的市民而言还是很有可能做到的。

智能手表

与活动跟踪不同， 智能手表更多的是被用来主动使用的。 在很早以前就已经播下了智能手表的种子： 近百年来， 腕表一直作为一个重要的工具， 一个用于计时，随时告知我们身处当下的工具。

如今， 智能手表远远超出了这个范畴， 它能够给我们提供更加多样的情景信息： 邮件短信的提醒，会议的提醒，天气预报，电子票（机场，剧院，音乐会等等地方）。 智能手表还有着丰富的交互，意味着我们不仅可以用来查看我们的邮件， 还能回复邮件； 我们可以用来Google，入住酒店，修改音乐记录备忘，查看时间等等，再也不用花费时间去从手袋中掏出手机了。 正如设计师们都知道的， 行动的简洁性对我们决定是否采取行动有着非常重要的影响， 所以这些多余的时间是非常重要的。 这所有的一切都在说明一个现实， 就是我们如今把手机安放到了我们的手腕上， 虽然因此有了一些设计上的限制。

而对设计师而言更加有诱惑力的一个现实就是智能手表是支持定制apps的， 这也意味着我们可以拥有一个全新的手表专属apps的生态系统了。 我们可以看到全新版本的Instagram，Pinterest，Foursquare以及各种各样的新的商业apps。 这对于各大品牌而言同样是个好消息，因为他们有了一个新的机会和渠道向他们的客户宣传自己了。

智能眼镜

信息一直在不断的向着和我们大脑建立协同发展关系的目标前进着， 而智能眼镜无疑是这一阶梯上的下一步–跟随在20世纪60年代的计算中心的成功，以及之后数十年的PC时代，笔记本时代和手机时代之后。 智能眼镜和智能手表有一点是相似的： 他们把信息和我们的距离拉的更近了， 而且鼓励这种更加简单的交互形式。 但是， 眼镜是完全的解放了我们的双手， 彻底的把信息直接带到了我们的眼前， 完全使用语音命令和感应器作为输入设备。

与智能手表很轻易的就能融入到我们的日常生活不同， 智能眼镜略微有一点过于超前了。 问题出在很多方面， 比如：技术上，习俗上，以及社交上等等。 简而言之， 以Google Glass这个当前最有代表性的智能眼镜技术为例， 它所提供的价值和他本身的价格并不相配：$1500的价格，极为有限的电池寿命，非常不舒服的街道视觉体验等等， 再加上一个简单的相机和导航，非常有限的几个酷炫应用和效果， 尚不足以说服我每天都早上把这玩意带在我的脸上。。。至少目前还不行。

这种现象也被成为『杀手级应用问题』， 但是它并不意味着这个产品或者这种表现形式就是彻底无用的。 相反， 它已经被证实对商业使用有着巨大的价值：医生们可以用在手术过程中看到重要的提示，仓库工作人员就可以用语音实现商品扫描以及详细信息录入等事情了，运动员可以实时的看到他们的数据–这些理由都足够让Google开启他们的商业化项目并且和Vuzix合作了。 这其中的模式非常清楚而直接： 允许雇员们在工作以及处理数据的过程中解放双手。 这不仅可以节省他们的时间， 同时还能提高安全性： 不需要更换手套， 拿手机或者因为别的屏幕而分散注意力。

结论

每一种穿戴式设备都有他自身的特点。有一些只是单纯的用于收集数据， 还有一些则是用来进行主动的交互， 有些是把自身的使用环境建立在每天的日常使用基础上，而有些可能在某些特定场合下更加有帮助， 有一些可能在社会接受程度上更为突出， 而有些则需要时间和规则才能被慢慢接受。 但是他们都共享着一些相似的属性， 而了解这一点对于设计师，开发者以及那些处理产品商业相关事宜的人们都会有更好帮助，帮助他们更加全面的利用这些设备。

Resource:

原文：The Who, What, When, Wear, and Why of Wearable Technology
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>User Experience is a feeling</title><link>http://taoalpha.me/blog/2014/11/10/read-t-user-experience-is-a-feeling/</link><category>read</category><tag>UX,产品学习,关于HCI,翻译文章,译系列</tag><pubDate>2014-11-10T14:00:00.000Z</pubDate><description>用户体验是一种感觉

“如果你以’用户体验是一种感觉’为基础, 那么你就算是向真正理解用户体验迈出了一步.”

许多人似乎都认为用户体验是一个可以控制的设计产出–好像它是一个你可以通过你的想法, 设计师以及开发者们从而操纵一个人对某个产品或者服务的体验. 实际上, 用户体验经常被认为是一个定义以及管理用户对产品的感觉.

但是你的产品并不能决定一个用户的体验, 用户自己的行为, 态度以及情感才是决定因素. 因此, 用户体验就是一个感觉. 实际上, 它远不止于此, 但如果你是在此基础上去理解用户体验, 那么你就算是向真正理解用户体验迈出了一步.

一个用户在使用某个产品时的体验是每个产品都需要关注的点. 一个用户可能会有很好的体验也可能会有一个很糟糕的体验. 虽然你不能直接的设计一个用户对一个产品的体验, 但你可以采取一些措施, 应用一些用户为中心的设计原则和流程来确保他们的体验是积极的, 正面的.

你应该把以用户为中心的设计的各种优势告诉那些投资人, 相关利益人从而拿到钱, 而这些优势就包括以下这些:- 快速的获得更多客户- 保留现有的客户- 为你的公司建立信誉- 在公司长期运行中扩大销售额- 降低周边产品/服务(外围设备)的价格, 比如客服/售后- 减少无形的花费, 比如浪费的时间- 完成的更加高效

对于你的公司而言, 无论是一个创业公司还是说一个庞然巨物, 都要意识到这些利处, 而你所在的产品团队则需要:

理解伟大的设计和优质的体验之间的区别像用户那样去思考, 而不是站在一个产品的制作者角度在你的产品策划, 设计以及开发环节都要考虑到产品的用户

优秀的设计是不够的

“许多人认为用户体验就是一个产品是如何工作以及外观”. 换句话说, 人们很容易认为用户和产品的交互就是用户体验的全部内容了. 比如, 他们可能关注的焦点问题诸如: 产品的交互界面是否利于用户导航呢? 最重要的内容是否获得了视觉的最优位置呢? 产品外观是否足够优质呢?

如果对此类的回答是”是”, 就会让人很容易的认为你已经给你的产品赋予了极好用户体验. 在很多方面, 你可能已经做的比你的竞争对手好很多. 但是, 一个产品的用户体验所包含的内容远远不止是在一个网页浏览器或者移动设备中打开一个应用这么简单.

让我们以一个我们可能会提问的问题为例: 在用户第一次使用你的产品之前用户对产品的期望是什么? 可能他们听到很多其他用户的看法, 可能是好的, 也可能是不好的看法, 如果这样的话, 这些意见都会成为TA对你的产品最终形成的整体体验感受的重要组成部分, 它当然会影响到他们对产品的使用方式, 他们对产品以及你的公司的看法和感受, 以及很多我们接下来会说到的一些重要部分.

像素, 屏幕, 页面以及体验

“以用户为中心的设计所关心的不只是产品本身的用户界面, 还有用户在界面之外与产品的交互行为.” 这些包含但不限于以下几点:

你的产品市场和分发方式购买, 打开和首次使用产品的整个流程升级流程“登船体验”, 即逐步学习产品所具备的能力, 以及如何使用和如何处理错误信息的过程宣传, 用户的口碑是最好的广告客服或者售后服务质量, 以及你对产品能力的深入了解

上面这个清单仅仅只是非常表面的一些东西, 但是它可以初步让我们对影响用户体验的诸多因素有个大概的了解.

如果你曾经找你的手机或者线路公司进行技术咨询, 你就会理解这一经历会对你对他们的产品以及服务的感受观点有多大影响了. 虽然你可能最后还是解决了问题, 获得了更好的线路以及手机问题得以解决, 但是如果你在处理这一事宜的过程是非常让人不开心的一个经历, 那么你可能依然会对他们的服务产生负面的观感. 而一个用户对你公司的看法和以往的交往经历都可以算是用户体验的一部分.

像一个伟大的UX设计师那样思考

在本文后面的内容中, 我会提供一些你可以用来和你的产品团队分享, 一起帮助每个人像一个伟大的UX设计师那样思考问题. 为了创造一个人们喜欢的产品, 需要你整个团队, 不只是UX团队, 都聚焦到用户身上.” 而如果能够把焦点放到用户身上, 那么就能帮助你传递很多益处, 会带来很多我上面说过的好处.

走向优秀体验的态度

像一个伟大的UX设计师那样思考意味着你需要养成一些思维方式, 这些思维方式与其说是一些特定的思考流程或者做事规则, 不如说是一些基本的态度更为合适.

要有同理心

当你被无数决策缠身, 催促着你从想法走到原型直到上线, 你会很容易的陷入到一个困境, 就是视野会局限在产品团队之中.  你手头工作的复杂和困难以及你作为产品主导者对产品目的, 设计以及功能的熟悉都让你无法兼顾自检的环节了.  在这个环节中, 我们缺失的正式外界的观点-你的用户的角度的看法.

和你的用户交流所能带来的好处不仅是他们提供的那些你可以用来优化设计流程的信息, 随着时间, 和你的用户交流能够帮助你建立更好的同理心. 你将学会通过他们的眼睛看世界.

而有了同理心, 你将可以站在用户的角度去评估你的设计和商业决策. 而且你会更有可能创造一些他们 能够找到其价值, 用处以及给他们带来欢乐的产品.

要承认每个意见都是有价值的

以用户为中心的设计的下一个态度往往很难被人所采用. 请跟着我一起重复:”每个意见都有价值. 每个意见都有价值.” 哪怕是意见本身可能完全没有逻辑. 哪怕是这个意见完全违反了一个正确的设计原则. 哪怕是这个意见是完全非理性的, 而且对你而言完全没有意义的.

如果使用你的产品对用户而言是一个可选行为的话–实际上它确实是个可选的行为–那么他们的意见就是有意义的. 但是从那些非理性或者无逻辑的反馈中找到有价值的东西是有难度的. 然而, 这类用户反馈可能指向的更大的一些问题, 可能代表着用户的某种更深层次的情感模式, 而这对于用户和你的产品之间的交互有着很大的影响. 而如果带着”每个意见都有价值”的观点来处理用户的反馈, 那么就能够帮助你发现这些模式.

如果你收到一些对你完全没有意义的反馈, 那么你应该暂停一下, 好好思考以下它的具体含义. 可以问这么几个问题:

那些没有给我们反馈的用户中有多少可能也有同样的看法呢?为什么他们会需要这么一个具体的功能点呢?为什么他们不能理解我们设定的这种用户工作流呢?为什么他们会这么感觉呢?

退一步讲, 和你的用户聊天, 即便是一些似乎很疯狂的想法也往往能够给你带来一些新的观点, 说不定就能帮助你解决手头的问题呢.

意识到情景和经历都会对用户体验产生影响的

可能你的项目的目的是创造某个全新的东西, 但是你的产品最终会被那些有着自己过往使用科技产品经历以及特定的使用场景的人去使用的. 而这些经历以及所处的情景会在很深层次上影响人们和产品之间的交互.

比如, 我每次购物时如果发现那些老式的黑屏绿字, 带着键盘的销售终端依然还在投入使用时都会觉得这是一件非常令人着迷的事情. 实际上, 我经常能够在非常现代化, 成功的零售商们那里看到类似这样的用户界面.

这样的用户界面可能看起来很过时, 而且使用也不高效, 但是如果你考虑下它使用的场景, 就会有不同的看法了:

零售行业的工作人员在长期的工作中, 因为不断的使用同样的用户界面重复同样的销售操作, 会形成一种独特的肌肉记忆;他们的这种肌肉记忆会允许他们甚至不怎么注意屏幕就能够准确的完成操作, 也就让他们有更多的时间和客户进行视觉交流, 这样能够给客户更好的购物体验;这种肌肉记忆需要很长的时间才能形成. 可能需要一个缓慢的学习曲线去掌握, 但是一旦掌握了, 它带来的速度和效率的提升是雇员们所愿意放弃的, 即便是面临着一个有着快速学习曲线的新的交互界面的诱惑也一样.

如果你忽略这种历史原因以及特定的场景原因, 那么这种古老的POS终端看起来就是一个典型的糟糕的用户体验. 但是你一旦把这些都考虑进来, 你就会获得完全不同的理解了.

当你脱离用户界面, 而考虑更加宏观的一些事情时, 你就会知道哪些因素才能真正让你的产品体验有所不同.

要有情商

如果你自己质疑用户对你产品的感觉的重要性, 那么你可以回想下最近Facebook首次展示了他们做了明显改变的新用户界面, 而随之而来的用户疯狂的愤怒回应.

最强烈的情感–爱, 恨, 快乐和忠诚–都需要时间来建立的. 你的公司的新产品将会继承那些旧产品用户的情感, 而这些完全不受你控制–比如用户对你的app运行平台的看法以及在app store中的应用发现这一过程等都是不受你控制的.

但是他们对你产品的感觉会随着使用逐渐的形成并发展. 想象一下: 不断重复的讨人厌的登录环节, 一个流畅的,愉快的导航, 一个思虑周全的错误处理机制, 一个一直都不尽如人意的客户服务, 这些长期积累下来情绪, 会产生什么样的影响呢?

像一个UX设计师一样思考, 就要考虑到用户和你的产品之间的这种情感关系.

把这种优秀UX设计师的态度应用起来

有一个很简单的, 混合了这些特点的方式可以让你开始像一个优秀的UX设计师那样思考: 注意观察人们是如何和日常生活的事物进行交互的. 他们的这些行为会告诉你很多, 很多在你开始考虑开发一个产品之前需要考虑的事情, 会告诉你如何开发一个新产品, 一个能够让人们生活更加便捷, 更加快乐, 更加符合人们期望的产品. 

来源:

原文: User Experience Is a Feeling
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>What Is the Relationship Between HCI Research and UX Practice?</title><link>http://taoalpha.me/blog/2014/09/05/read-t-what-is-the-relationship-between-hci-research-and-ux-practice/</link><category>read</category><tag>HCI Research,HCI翻译,关于HCI,翻译文章,译系列</tag><pubDate>2014-09-05T08:00:00.000Z</pubDate><description>测试feedpusher的数据库搜索功能时找到了这篇文章~ 对于HCI Research有很好的介绍!


人机交互是一个快速发展的学术研究领域. 目前来说, 学术机构基本主导了绝大多数的HCI研究, 无论在US,UK,Europe,Australasia以及Japan, 还有逐渐发展起来的南亚以及中国. HCI研究经常是附属在计算机系之下的, 但是又保留着其很强的心理学背景和人因学背景. 此外, 还有几个大型的杰出公司同时在独立的, 当让也有和各学术研究机构合作进行的, HCI相关的研究. 比如微软, PARC以及goole.
What Do Academic HCI Researchers Do?(那么学术性的HCI研究者都在做什么呢?)
通常来说, 学术性研究者都在做以下这三类事情:
    他们通过探索性的实验以及利用复杂的交互系统来创造新的计算机用户界面;    他们建立并发展了一套经验体系, 针对用户对于用户界面的使用和体验; 主要通过实验室中的用户界面研究或者在实际环境中观察用户对用户界面的使用情况(就如同人种学研究一样)来获得的;    他们发展出了一个理论系统来讲述设计以及使用交互系统. 其中包含了一些基本理论, 比如Fitts’s law(菲茨定律),描述指针移动和目标元素在屏幕的位置的的关系, 通常, HCI理论采用设计框架的形式, 包含了各种混杂的概念. HCI研究可能是聚焦到某个整体的局部也可能是直接识图去强化整体.


Is There a Connection Between Academic Research and Industry Practice?(在学术研究和工业实践之间有联系吗?)
在工业界的UX从业人士也通常都会做些研究的, 就如同设计一样. 但是学术性HCI研究和UX研究在目的产出, 目标, 以及关注的范围都有着非常显著的差别, 学术研究和工业研究通常可能都在处理那些看起来比较接近的基础对象: 数字化交互系统的设计和理解以及它们的用户群体. 两者都遵循用户为中心的设计原则, 都提倡把对人类的理解融入到设计环节中. 所以说, 它们之间肯定也应该有很强的关系以及重叠区域.
在UK, 政府在HCI的学术研究基金投入上逐渐关注起学术研究和工业时间的联系了. UK的工程和物理科学研究委员会, 也是HCI研究领域基金的重要来源, 就讨论过关于HCI研究需要考虑如何”把理论和方法应用到工业实践中”. 更进一步地说, 既然HCI学术研究在很多的领域, 包含医疗健康, 电子设备消费品以及软件等等都有很强的关系, 那么在HCI学术研究和UX实践之间建立一个更好的联系就能够获得很高的回报.
虽然学术圈经常会对UX领域做出很多不准确的猜测,而且有时候认为两者的关系是理所当然的. 学术研究者们通常会假设因为知识的利用和转移, 所以学术研究和工业实践有着非常自然的联系. 但另一方面, UX领域则经常认为HCI的学术研究通常都是脱离实际的, 在现实社会中是无法应用的. 也因为这样的原因, 他们通常会整个抛弃学术研究, 或者至少是觉得消化以及应用学术研究的结论是非常困难的一件事.
Moving Toward Establishing a Mutually Beneficial Connection Between Academia and Industry(为学术研究和工业实践发展建立一个双赢互惠的关系)
有两个开放性问题我们需要强调的是:
    UX职业领域该如何指导以及启发学术研究?    学术研究又能够为UX职业领域做什么事情呢?

回答第一个问题可能需要HCI研究者们对理解UX职业领域的工作有着一定的热情, 并且进行一些关于UX实践的经验性研究. 迄今为止, 学术研究中对于UX实践应用的探索还是比较有限的. 无论如何, 在UX领域工作的经验能够对学术研究产生很多意外的重要启示. 而回答第二个问题就要相对更加复杂了 – 甚至可以说完全不知道该如何下手了. 它需要很深入的研究才行.
令人好奇的是, 学术研究者们通常对HCI研究中大量出现的创新以及其自身关注领域的快速发展而感到忧虑. 在一个学术领域中, 他们的目标通常是建立一个强有力的基础, 然后慢慢发展.
然而, HCI学术研究领域的创新和广度都强化了其和在工业限制下的UX领域有限的能力形成的鲜明对比. 比如说, 在一个很限制的项目中工作时, 你需要考虑有限定的预算, 有限的时间, 你需要去满足客户的需求以及相关利益人的利益, 还要能和其他领域的人相互配合, 比如软件开发者; 还要习惯于新的工作方式, 比如敏捷开发以及精益方法. 你不会担心有过多的创新, UX从业人士通常希望能够在他们非常受限的环境下创造更多的创新.
学术性研究的产出中完全可以提供很多对UX领域有潜在价值的东西. 但是如何来传递这些产出呢? 首先也是最重要的是, 我们完全不用把HCI研究和某一个项目或者新项目, 或某项服务的预期条件, 或者某个客户的特定需求绑定在一起; 其次, 学术新的HCI研究有其探究未来科技的自由 – 即便其设计本身有着一定的风险且没有清晰的,即时的回报. 所以, HCI研究者们通常在无数失败的基础上创造了快速的创新, 他们的工作少了很多的限制.
也许通过有效的沟通, HCI学术研究中的那些成果能够给工业实践带来巨大的价值. 很多UX从业人士都没有那么富裕的时间来让他们去探讨那些当前需求以外的东西. 但是在学术研究中, 关注范围更广是很通常的事情.
不幸的是, 就目前来说, 绝大多数的学术工作–无论是创造圆形, 概念, 想法, 或者是设计原则 – 都局限在了HCI研究者们在各种会议期刊上发表的论文中了. HCI研究者的受众多数都是那些其他的学术研究者, 而不是那些在工业界工作的人们.
通过理解用户体验的工作情景, HCI研究者们能够更好的把他们的研究方向切合这些受众, 从而和UX职业领域建立更加友好自然的联系. 与其让学术研究和工业实践互相竞争, 不如假设一方创造那些权威的, 严禁的知识体系, 一方吸收并加以应用呢. 两者这样的互利互惠关系才是最有价值的. 采用这一方法可能会让学术研究者们更好的理解他们该如何进行自己的研究, 让它们更加容易帮助到那些UX从业人士.
Postscript(后记)
作为我开始针对这一领域的调研的一部分, 我创建了一个非常简短的, 5分钟调查问卷, 邀请各位UX从业人士来提供一些关于自身背景, 所用方法以及和学术研究的关系的信息. 如果你愿意参与其中, 或者是对这一工作有兴趣的话, 请参与此项调查.
Acknowledgments(感谢)
作者非常感谢EPSRC的支持.
References(参考)
[1] Benford, Steve, and Gabriella Giannachi. Performing Mixed Reality. Cambridge, MA: MIT Press, 2011.[2] Engineering and Physical Sciences Research Council. Report of the Human EPSRC Computer Interaction Theme Day and Survey, March 2012.[3] Friess, Erin. “Personas and Decision Making in the Design Process: An Ethnographic Case Study.” In Proceedings of CHI ’12. New York: ACM Press, 2012.[4] Goodman, Elizabeth. Performance and Materiality in Professional Interaction Design. PhD thesis, University of California, Berkeley, 2013.[5] Gray, Colin M., Erik Stolterman, and Martin A. Siegel. “Reprioritizing the Relationship Between HCI Research and Practice: Bubble-Up and Trickle-Down Effects.” Proceedings of CHI ’14. New York: ACM Press, 2014.

Source Link:
    What Is the Relationship Between HCI Research and UX Practice?
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>Why Companies Need Full-Time Product Managers</title><link>http://taoalpha.me/blog/2014/11/01/read-t-why-companies-need-full-time-product-managers/</link><category>read</category><tag>PM,product manager,产品学习,产品经理,翻译文章,译系列</tag><pubDate>2014-11-01T11:00:00.000Z</pubDate><description>写在前头: PM是一个挺让人困惑的职位的, 尤其是在国内, 感觉大大小小PM无数, 更加让人苦恼PM究竟是个什么样的职位呢? 虽然我有接近2年多的PM经验, 但是因为本身更加喜欢FE, 所以往往也是做一个非常Geek的PM, 并不符合真正的PM本质, 而这次能够看到下文, 确实觉得它对PM的总结还是比较到位的, 非常推荐PM以及想要做PM的童鞋们看看~


公司为啥需要全职的产品经理呢?(或者说,他们一天都在干啥呢?)
什么是产品经理呢? 产品经理一天的工作都是什么呢? 最重要的是, 为什么公司需要招聘产品经理呢? 这是个好问题.

我们首先需要明确的问题是究竟什么是”产品”. 在软件开发这个领域内, 一个产品呢, 可以是一个网站, 一个应用, 或者是用户们使用的线上服务. 而根据公司的大小以及它的产品性质本身, 一个产品经理可能会是一个完整系统(比如一个移动app)的负责人, 也可能是某个整体系统的一部分(比如在电子商务网站中, 负责全平台的检验流程).

对这一点可能会存在一些困惑, 毕竟在绝大多数情况下, 产品通常代表着一个你要出售给客户的东西. 尤其是在电子商务, 经常会混淆产品经理和分类经理, 分类经理们主要是负责在电子商务网站出售商品的渠道和经营问题. 所以, 在一定程度上说, 用”产品”这个词确实并不是最合适的. 但是就目前来说, 现状如此, 我们也没法了, 就凑活着用吧.

为了明确产品经理这一职位的性质, 我们首先从Marc Andreessen就”创业公司唯一重要的事情”这一观点说起:

一个创业公司产品的质量可以定义为这一个产品对一个实际使用它的客户或者用户所留下的印象: 这个产品的易用性如何? 其功能的丰富性如何? 流畅性和速度如何? 扩展性又如何? 有多精致?有多少bug呢?

而一个创业公司的市场大小, 则是这一产品的客户或用户的数量, 增长速度 …

唯一重要的事情就是要让产品去适应市场(Product-market fit). 产品适应市场意思就是在一个好的市场里, 要让产品尽可能的满足市场的需求.

虽然Andreessen是为创业公司写的, 但是最后这段关于”产品适应市场”的重要性对每一个公司都是一样的–无论这个公司是在开发一个新产品还是说去改善一个现有产品,亦或者是介于这两者之间的,都一样. 这是通向成功的宇宙公理, 而这也是产品经理所负责的核心.

有了这个作为背景, 我对产品经理这一角色的定义就是: 通过数字产品持续性的更新和执行来符合用户需求从而实现商业上的成功.

这一定义总结了一个产品经理所需要涵盖的全部内容: 目标市场, 所属产品的各个方面, 商业成功的需求, 以及如何去衡量这一成功. 它还包含了三个产品经理绝对不能忽视的点:

成功的最佳衡量标准就是商业的健康度, 也即产品给用户提供的价值;所有的一切都起始于对目标市场和需求的深刻理解, 从而把焦点集中到产品体验的质量上去;为了符合市场需求, 可持续发展需要一个良好的策划与执行.

那么, 如何把这些转译成一个产品经理每天的工作呢? 这个问题就太大了, 在这里是说不清楚的, 不过仅作为一个初步介绍的话, Marty Cagan在它的电子书”每一个伟大的产品背后”中列出了一个针对产品经理需要负责的事项清单. 这一清单包含:

寻找确认并且评估产品机遇的可行性和易行性,确保合适的产品在合适的时机发布出去,为开发者提供清晰的产品策略和思路指南,带领团队执行产品的思路,确保向团队成员传达产品的内涵,在产品开发流程中始终站在用户的角度思考问题.

但是, 在一个产品经理能够做这些事情之前, 我们首先要问一些比较尴尬的问题. 首先, 公司真的需要产品经理吗? 另外, 如果我们同意说需要, 那么一个好的产品经理的特质是什么呢? 同时还有, 这一角色在公司组织架构中的位置呢? 我们来一一回答这些问题.

为什么公司需要产品经理

产品经理的角色有一些公司可能是非常不买账的. 通常的反对意见包含:

我们公司里有各种各样的人, 他们就已经满足一个产品经理职责的各个范畴了, 不需要专门配备这一个职务了.我完全看不出来这个角色能给公司带来什么实质性的利益.产品经理只会拖我们后腿.我不想把产品控制权交到别人手中.(通常这个理由不会那么公开的说…)

这些考虑都是很有道理的, 但是显然他们并没有很好的理解产品经理这一角色, 或者说这个公司的产品经理很差劲, 没有很好的体现产品经理的职责.

实情是, 为了更高的效率, 对一个产品或者领域的管理权最好不要分散给多个人掌控. 对于产品经理而言, 看到产品全局是非常重要的 – 大局战略和局部细致都是一样重要的 – 为了获得更好的抉择. 如果不同流程的情况掌握在不同人手中, 那么就没有人会有一个完好的大局观, 那么这一角色的价值自然也会渐渐失去.

我们看下产品经理通常能够带来的两个典型好处吧:

产品经理确保产品一直处于市场驱动

对产品经理而言, 其最突出的优点就是他们可以帮助公司一直为目标市场的需求和目标所驱动, 而不是被技术和潮流所驱动. 如同Barbara Nelson在”谁需要产品经理”一文中所说:

相比于找到你现有技术的客户而言, 找到市场问题然后用技术手段解决实在是简单太多了.

如果方法足够正确的话, 一个市场驱动的产品能够促成一个长期的, 可持续的, 有利润的商业, 因为这个公司会持续的把焦点放在解决市场问题而不是用最新的科技去做什么的问题上. 一个公司受什么驱动是很重要的, 因为受市场驱动的公司已经被证实比受其他因素驱动的公司所获得的利润更高(要多出31%, 根据George S.Day 和 Prakash Nedungadi的报告).

这并不意味着关注不断出现的变化和产品创新是互斥的. 确定市场问题并不仅仅是找到现有的问题进行改进(比如说, 60%的用户都会在这个页面离开, 那么我们就搞搞这个页面), 同时还需要创造心的产品来满足那些没有被满足的需求(比如说现在的电话实在太烂了, 我们搞个新的吧).

产品经理能够提升时间管理

产品经理带来的第二个好处就是他们能够减少一个公司实现目标所需的时间. 一个定位清晰合适的产品, 其开发流程掌握在一个有效率的管理者手中时会极大改善发布所需时间以及回报所需时间的.

那么为什么产品经理可以做到这一点呢? 因为他们要权衡出那些是值得做的, 那些是不值得的. 这也意味着可以把更少的时间花费在Spaghetti法上了(把所有事情都扔到墙上看哪个能够粘在上面…) 而有更多时间放在已经被市场验证过的产品上了. 这一方法同样还能帮助更好的确定公司的焦点所在, 帮助公司更加投入到那些更有可能成功的项目之中, 而不是把人力分散到那些没人能够确保获利的项目中去.

未完待续(还有两部分回答另外两个问题).

Resources:

原文 - Why Companies Need Full-Time Product Managers 
</description><source>TaoAlpha</source><author>TaoALpha</author></item><item> <title>谈谈颜色在市场方面的应用</title><link>http://taoalpha.me/blog/2014/11/27/read-talk-about-application-of-colors-in-the-market/</link><category>read</category><tag>关于HCI,翻译文章,设计,译系列,颜色</tag><pubDate>2014-11-27T08:00:00.000Z</pubDate><description>本文讲述了关于颜色的不同所能带来的不同影响, 相信很多人都认可”颜色和人的感受有着非常紧密的关系”这个事实. 那么颜色能产生多大的影响呢? 又是和产生的影响的对应关系如何呢?先说个趣闻: facebook为什么是蓝色为主色调呢? 其实根据New Yorker, 原因很简单. 就是因为Mark Zuckerberg是一个红绿色盲. 这就导致蓝色是Mark所能识别的最好的色调了. 用Mark自己的话说就是:

  蓝色对我而言是最丰富的了, 我可以看到各种的蓝色.

没什么科学价值? 可能就facebook这个个例来说确实没啥特别的价值, 但是实际上现实生活中还有很多关于颜色是如何影响消费者们的消费决策的实例的. 毕竟视觉可谓是多数人类最常用的接收器了.  甚至可以说决定我们是否尝试某款产品的90%因素都是颜色所致呢.

那么颜色和我们的感知究竟是什么样的对应关系呢?

这里作者聚了4个典型的例子:

黑色

绿色



蓝色



以及在大大小小品牌商标logo中使用的种种颜色:



基于此, 颜色对人类的感受是有着非常明显的影响的, 这一影响尤其是在我们购物时发挥的最为到位. 有一个分析公司 KISSmetrics曾经做过一个非常棒的信息图来描述关于颜色是如何影响我们的购买决策的.

从其中可以看出绿色在购物中使用的最为突出, 因为它最能让人放松.  其次, 黑色也经常用于奢侈品中, 它在背光下表现极为出色. 下面就是这一信息图的全文啦:



既然说了颜色会影响到人们的心情感受, 那么你要如何利用颜色来提升你的市场效果呢?

同样是来自 KISSmetrics, 我们概括来说有以下几点:

针对女性而言

女性爱好色: 蓝色, 紫色, 绿色女性厌恶色: 橘色, 棕色, 灰色

 

针对男性而言

男性爱好色: 蓝色, 绿色, 黑色男性厌恶色: 棕色, 橘色, 紫色

 

也有人曾经做过一个实验去看改变一个按钮的颜色 对于转化率的影响. 他们选用了绿色和红色作为对比.

对绿色呢, 他们初始猜测:

  绿色通常和”自然”,”环境”联系在一起, 在加上在交通灯中的广泛应用, 有一种”Go”或者前进的意味在其中;

对红色呢, 初始认为:

  红色和绿色不同, 通常认为是一种兴奋的, 激情的, 和血, 警告等联系在一起. 而在交通灯中常用来指示停止. 当然, 红色往往很抢眼.

按照上面的分析, 多数人会假设绿色更加友好, 其转化率应该更高猜对.

所以, 他们进行了一个简单的 A/B test, 来测试看看究竟是哪种颜色的转化率更高.



结果呢? 红色按钮的表现比绿色按钮的表现要好上21% 为什么呢? 本文并没有直接给出答案, 大家可以自己思考一下~

作者结合这个故事主要想说的一点是: 无论要做什么样的改变, 都要先从假设开始, 实践是检验真理的唯一标准.  data always beats opinion,no matter what.

最后来个趣味小知识: 为什么超链接是蓝色的呢?

看的时候我恰好看到下文中有个fun story….于是非常恶意的想: 不会又是万维网之父也是个红绿色盲吧…

当然不是… 哈哈. 实际上使用蓝色是为了能够和原本网页背景色的灰色形成最佳的对比.



详细解释如下:

  Tim Berners-Lee,万维网的主要缔造者, 被认为是初始设定链接为蓝色的人.  Mosaic, 这个非常早起的浏览器, 展示网页的时候默认是灰色的背景和黑色的文本. 而同样为深色调, 但是又不至于和黑色混在一起的就是蓝色了. 所以, 为了让链接能够在一堆文本中脱颖而出, 方便阅读, 就默认设定超链接的颜色为蓝色了.

作者最后做的总结其实确实值得深思:

  仅仅简单改变一些非常小的类似颜色这种细节, 就能产生如此巨大的改变,  甚至可以完全改变最后的产出.
</description><source>TaoAlpha</source><author>TaoALpha</author></item></channel></rss>