<?xml version="1.0" encoding="utf-8" ?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"><url><title>All Puzzles Confuse me!</title><loc>http://taoalpha.me/blog/puzzle/index.html</loc><publish>2016-01-01T19:41:53.000Z</publish><summary>&lt;div class=&quot;puzzle-top&quot;&gt;&lt;br&gt;  &lt;div class=&quot;namespace&quot;&gt;&lt;br&gt;    &lt;h1&gt;MY PUZZLES&lt;/h1&gt;&lt;br&gt;    &lt;span class=&quot;check&quot;&gt;&lt;i class=&quot;fa fa-check fa-1x&quot;&gt;0&lt;/i&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;ongoing&quot;&gt;&lt;i class=&quot;fa fa-hourglass-half fa-1x&quot;&gt;0&lt;/i&gt;&lt;/span&gt;&lt;br&gt;  &lt;/div&gt;&lt;br&gt;  &lt;div class=&quot;newbutton&quot;&gt;+&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div id=&quot;timeline&quot; class=&quot;timeline-container&quot;&gt;&lt;/div&gt;
</summary></url><url><title>GA Log Analytic</title><loc>http://taoalpha.me/blog/galog/index.html</loc><publish>2016-01-01T19:41:47.000Z</publish><summary>&lt;style&gt;
/************** GA log page ************/
article.galog ul {
  padding-left: 0px;
}

article.galog li.post.overall {
  height: 210px;
}

article.galog summary{
  margin-bottom: 20px;
}

article.galog li.overall summary ul li {
  width: 28%;
  float: left;
  margin: 0 20px 20px 0px;
  background-color: #F1F1F1;
  border-top: 4px solid #9E9E9E;
  color: #242424;
  font-weight: normal;
  padding: 7px;
}

article.galog li.overall summary span.itemname {
  font-size: 10px;
}

article.galog li.overall summary span.itemname i {
  margin-left: 5px;
}

article.galog li.overall summary span.count {
  font-size: 19px;
  text-shadow: 1px 1px 0 #FFF;
  padding: 8px 0px;
  display: block;
  font-weight: 700;
}
.pure-table {
    animation: float 5s infinite;
    border: 1px solid #cbcbcb;
    border-collapse: collapse;
    border-spacing: 0;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
    empty-cells: show;
    border-radius: 3px;
}
.pure-table a {
    color: #242424;
    outline: 0;
    text-decoration: none;
}
.pure-table td {
    border-left: 1px solid #cbcbcb;
}
.pure-table td,
.pure-table th {
    font-size: inherit;
    margin: 0;
    overflow: visible;
    padding: 6px 12px;
}
.pure-table th:last-child {
    padding-right: 0;
}
.pure-table th:last-child span {
    margin: 1px 15px 0 15px;
    float:right;
}
.pure-table thead th {
    border-bottom: 4px solid #9ea7af;
    border-right: 1px solid #343a45;
}
.pure-table tbody th {
    background: rgb(242, 242, 242);
    border-left: 1px solid rgb(203, 203, 203);
}
.pure-table td:first-child,
.pure-table th:first-child {
    border-left-width: 0
}
.pure-table td:last-child {
    white-space: normal;
    width: auto;
    word-break: break-all;
    word-wrap: break-word;
}
.pure-table thead {
    background: #242424;
    color: #FFF;
    text-align: left;
    text-shadow: 0px -1px 0px #000;
    vertical-align: bottom;
}
.pure-table td {
    background-color: #FFF
}
.pure-table td.num {
    text-align: right
}
.pure-table .sub td {
    background-color: #F2F2F2;
}
.pure-table tbody{
  color: #777;
  font-size:12px;
}
.pure-table tbody tr:nth-of-type(n+10){
  display:none;
}
.pure-table tbody tr:hover,
.pure-table-striped tr:nth-child(2n-1) td {
    background-color: #f4f4f4
}
.pure-table tr {
    border-bottom: 1px solid #ddd;
}
.pure-table thead tr {
    border: 1px solid rgb(52, 58, 69);
} 

&lt;/style&gt;

&lt;p&gt;&lt;nav id=&quot;bread&quot;&gt;&lt;br&gt;  &lt;h2&gt;Site Logs for last 30 days:&lt;/h2&gt;&lt;br&gt;&lt;/nav&gt;&lt;/p&gt;
&lt;article class=&quot;galog&quot;&gt;&lt;br&gt;  &lt;ul class=&quot;article-list&quot;&gt;&lt;br&gt;    &lt;li class=&quot;post overall&quot;&gt;&lt;br&gt;      &lt;h4&gt;overall analyzed requests&lt;/h4&gt;&lt;br&gt;      &lt;summary&gt;&lt;br&gt;      &lt;/summary&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li class=&quot;post Path&quot;&gt;&lt;br&gt;      &lt;h4&gt;Top requests&lt;/h4&gt;&lt;br&gt;      &lt;summary&gt;&lt;br&gt;      &lt;table class=&quot;pure-table&quot;&gt;&lt;br&gt;        &lt;thead&gt;&lt;br&gt;        &lt;/thead&gt;&lt;br&gt;        &lt;tbody&gt;&lt;br&gt;        &lt;/tbody&gt;&lt;br&gt;      &lt;/table&gt;&lt;br&gt;     &lt;/summary&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li class=&quot;post Referer&quot;&gt;&lt;br&gt;      &lt;h4&gt;Top referers&lt;/h4&gt;&lt;br&gt;      &lt;summary&gt;&lt;br&gt;        &lt;table class=&quot;pure-table&quot;&gt;&lt;br&gt;          &lt;thead&gt;&lt;br&gt;          &lt;/thead&gt;&lt;br&gt;          &lt;tbody&gt;&lt;br&gt;          &lt;/tbody&gt;&lt;br&gt;        &lt;/table&gt;&lt;br&gt;     &lt;/summary&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li class=&quot;post OS&quot;&gt;&lt;br&gt;      &lt;h4&gt;Top Operating Systems&lt;/h4&gt;&lt;br&gt;      &lt;summary&gt;&lt;br&gt;        &lt;table class=&quot;pure-table&quot;&gt;&lt;br&gt;          &lt;thead&gt;&lt;br&gt;          &lt;/thead&gt;&lt;br&gt;          &lt;tbody&gt;&lt;br&gt;          &lt;/tbody&gt;&lt;br&gt;        &lt;/table&gt;&lt;br&gt;     &lt;/summary&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li class=&quot;post Browser&quot;&gt;&lt;br&gt;      &lt;h4&gt;Top Browsers&lt;/h4&gt;&lt;br&gt;      &lt;summary&gt;&lt;br&gt;        &lt;table class=&quot;pure-table&quot;&gt;&lt;br&gt;          &lt;thead&gt;&lt;br&gt;          &lt;/thead&gt;&lt;br&gt;          &lt;tbody&gt;&lt;br&gt;          &lt;/tbody&gt;&lt;br&gt;        &lt;/table&gt;&lt;br&gt;     &lt;/summary&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li class=&quot;post Country&quot;&gt;&lt;br&gt;      &lt;h4&gt;Top Countries&lt;/h4&gt;&lt;br&gt;      &lt;summary&gt;&lt;br&gt;        &lt;table class=&quot;pure-table&quot;&gt;&lt;br&gt;          &lt;thead&gt;&lt;br&gt;          &lt;/thead&gt;&lt;br&gt;          &lt;tbody&gt;&lt;br&gt;          &lt;/tbody&gt;&lt;br&gt;        &lt;/table&gt;&lt;br&gt;     &lt;/summary&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;br&gt;&lt;/article&gt;
</summary></url><url><title>Blur on Background</title><loc>http://taoalpha.me/blog/2015/12/31/tech-blur-on-background/</loc><publish>2015-12-31T08:09:10.000Z</publish><summary>&lt;p&gt;Today I finally made my first angularJS app which is a simple todo app connected with my &lt;a href=&quot;/blog/2015/12/07/tech-my-first-cli-tool-with-nodejs/&quot;&gt;First nodejs cli tool: baby&lt;/a&gt;. They share the same data set, so you can think it as the UI for baby todo part (I will build the UI for other nice features, one by one).&lt;/p&gt;
&lt;p&gt;I really like the interface of the &lt;a href=&quot;https://papaly.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papaly&lt;/a&gt;, especially the speed dial dashboard !! So I also use a large image and the crystal blur block on my design, here I just want to share something with you :)&lt;/p&gt;
&lt;h2 id=&quot;Blur&quot;&gt;&lt;a href=&quot;#Blur&quot; class=&quot;headerlink&quot; title=&quot;Blur&quot;&gt;&lt;/a&gt;Blur&lt;/h2&gt;&lt;p&gt;Blur is quite popular in Web Design, you can see them all the time. But how we do that from the point of coding part ? Before CSS3 introduced the filter, people just modify the images manually and make them blur before actually use them in the design, and now we have CSS3, we can just use filter.&lt;/p&gt;
&lt;p&gt;We all know make a image blur is pretty simple, but how we make part of image blur, and even more, how we make part of image blur be dynamic ? This is what I gonna talk about today :)&lt;/p&gt;
&lt;h3 id=&quot;Without_CSS3&quot;&gt;&lt;a href=&quot;#Without_CSS3&quot; class=&quot;headerlink&quot; title=&quot;Without CSS3&quot;&gt;&lt;/a&gt;Without CSS3&lt;/h3&gt;&lt;p&gt;Let’s do it old fashion first. You want create a box within which all background image should be blur, and also the box may move to any place or even can be moved by users. How to do that? Quite simple, we can use two images, one is normal, the other is blur one. &lt;/p&gt;
&lt;p&gt;Then what you should know is &lt;code&gt;background-attachment&lt;/code&gt; which adds the magic.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* background-attachment can specify the position of the background image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * fixed : the background is fixed with regard to the viewport, so it won't move with the element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * background-attachment: fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * background-size:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * keep size 100% to fit the viewprot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html,body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin:0px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.imgBlur&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin:auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-image:url(&quot;http://www166.lunapic.com/editor/premade/o-blur.gif&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// image without blur&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-size:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div.blurBox&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width:50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin:auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height:200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color:white;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  padding:30px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  text-align:center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display:table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div.blurBox.withoutcss3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-attachment:fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-size:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-image:url(http://www166.lunapic.com/editor/premade/blur.gif);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// image with blur &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display:none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.blurBox span&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display:table-cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  vertical-align:middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;With_CSS3&quot;&gt;&lt;a href=&quot;#With_CSS3&quot; class=&quot;headerlink&quot; title=&quot;With CSS3&quot;&gt;&lt;/a&gt;With CSS3&lt;/h3&gt;&lt;p&gt;With CSS3, we don’t need the second image, we can just use blur.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* z-index is to make sure the content of the box won't be blur */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div.blurBox.withcss3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  z-index:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div.blurBox.withcss3:before&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display:block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content:&quot; &quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-image:url(http://www166.lunapic.com/editor/premade/o-blur.gif);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // now we don't need blur image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-attachment:fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // still need this since we need use the blur on the image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-size:100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   -webkit-filter: blur(3px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  filter:blur(3px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  z-index:-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Here is the demo I made with &lt;a href=&quot;http://codepen.io/taoalpha/pen/LGbajd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codepen&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;LGbajd&quot; data-default-tab=&quot;result&quot; data-user=&quot;taoalpha&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/taoalpha/pen/LGbajd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LGbajd&lt;/a&gt; by taoalpha (&lt;a href=&quot;http://codepen.io/taoalpha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@taoalpha&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;Advance_Skills&quot;&gt;&lt;a href=&quot;#Advance_Skills&quot; class=&quot;headerlink&quot; title=&quot;Advance Skills&quot;&gt;&lt;/a&gt;Advance Skills&lt;/h2&gt;&lt;p&gt;Pretty cool ha! Combine with &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; and other cool stuffs,  you can achieve a lot amazing effects, even this one : &lt;a href=&quot;http://codepen.io/vcurd/pen/caFxz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth of field effect with SVG filters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;caFxz&quot; data-default-tab=&quot;result&quot; data-user=&quot;vcurd&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/vcurd/pen/caFxz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth of field effect with SVG filters&lt;/a&gt; by Vaughan Curd (&lt;a href=&quot;http://codepen.io/vcurd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@vcurd&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</summary></url><url><title>Related Articles and generate API files in Hexo</title><loc>http://taoalpha.me/blog/2015/12/27/tech-related-articles-and-generate-api-files-in-hexo/</loc><publish>2015-12-28T01:54:43.000Z</publish><summary>&lt;h2 id=&quot;Why_3F&quot;&gt;&lt;a href=&quot;#Why_3F&quot; class=&quot;headerlink&quot; title=&quot;Why?&quot;&gt;&lt;/a&gt;Why?&lt;/h2&gt;&lt;p&gt;Since I have migrated my entire blog to hexo, so I need to rewrite a lot modules :) Today we talk about related articles and how to generate api files in your hexo blog.&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;h3 id=&quot;Related_Articles&quot;&gt;&lt;a href=&quot;#Related_Articles&quot; class=&quot;headerlink&quot; title=&quot;Related Articles&quot;&gt;&lt;/a&gt;Related Articles&lt;/h3&gt;&lt;p&gt;Unlike jekyll, hexo doesn’t have a built-in module to populate the related articles (meanwhile, jekyll’s built-in related articles are sucks, so many people build themselves, I did once before, you can check this &lt;a href=&quot;/blog/2015/06/06/tech-jekyll-related-posts-optimization/&quot;&gt;Optimize jekyll(in chinese)&lt;/a&gt; if you want.), so I have to write one for myself.&lt;/p&gt;
&lt;p&gt;The idea is pretty simple and similiar with last one I did for jekyll, use the tag to compare different posts, it they have some common tags, they should be similiar, or related.&lt;/p&gt;
&lt;p&gt;So I query the post according to current post’s category and get all posts with same category as current one, then for each post, I compared its tags with current post’s, if there is some intersect between them, I will count it as a related article to current post.&lt;/p&gt;
&lt;p&gt;The code is simple too(written in jade):&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- var posts = []&amp;#10;- if(page.categories)&amp;#123;&amp;#10;-   var cat = page.categories.toArray()[0].name&amp;#10;-   var existTags = page.tags.toArray().map(function(v)&amp;#123;return v.name&amp;#125;)&amp;#10;-   var prePosts = site.categories.findOne(&amp;#123;name: cat&amp;#125;).posts&amp;#10;-   if(prePosts.toArray().length&amp;#62;0)&amp;#123;&amp;#10;-     var someCatPosts = prePosts.sort(&amp;#39;date&amp;#39;, -1).toArray()&amp;#10;-     someCatPosts.forEach(function(v)&amp;#123;&amp;#10;-       var tags = v.tags.toArray().map(function(t)&amp;#123;return t.name&amp;#125;).filter(function(n)&amp;#123;return existTags.indexOf(n)!=-1&amp;#125;)&amp;#10;-       if(tags.length&amp;#62;0 &amp;#38;&amp;#38; posts.length &amp;#60; 5 &amp;#38;&amp;#38; v.permalink != page.permalink)&amp;#123;&amp;#10;-         posts.push(v)&amp;#10;-       &amp;#125;&amp;#10;-     &amp;#125;)&amp;#10;-   &amp;#125;&amp;#10;- &amp;#125;&amp;#10;if posts.length &amp;#62; 0&amp;#10;  div.relatedposts.sidenav&amp;#10;    h2= &amp;#34;Related Posts:&amp;#34;&amp;#10;    ul.article-list&amp;#10;      each post in posts&amp;#10;        li&amp;#10;          a(href=url_for(post.permalink))= post.title&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;API_Generator&quot;&gt;&lt;a href=&quot;#API_Generator&quot; class=&quot;headerlink&quot; title=&quot;API Generator&quot;&gt;&lt;/a&gt;API Generator&lt;/h3&gt;&lt;p&gt;Since I use static blog, I don’t have any tools or modules like php to deal with post and get request, but what I can do is I can host json files with data I want to put in and treat it as a API(since most API just return a json with proper content), like I have &lt;code&gt;latest.json&lt;/code&gt; to show the latest 10 posts of my blog, you can view it through &lt;a href=&quot;http://taoalpha.me/blog/api/latest.json&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yup. This is the basic idea, and how to do it? We need build a plugin for hexo :)&lt;/p&gt;
&lt;p&gt;A plugin for hexo is a normal module for node, so you need to define the package.json and the index.js, its totally fine that you only have one js file if you don’t need to deal with complicated logic things. But this time, I use two js files, the &lt;code&gt;index.js&lt;/code&gt; would load the config from the hexo and assing the task to different generators. :)&lt;/p&gt;
&lt;p&gt;And this is modified from the source code of &lt;a href=&quot;https://github.com/hexojs/hexo-generator-sitemap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-generator-sitemap&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;Since they are using pretty much the same logic, I just remove the built-in modules: sitemap and feed generator, and combine them into one.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this is the index.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; merge = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'utils-merge'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pathFn = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'path'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// load the config from the hexo.config and combine them with some default configurations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; config = hexo.config.api = merge(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sitemap:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    src: &lt;span class=&quot;string&quot;&gt;&quot;sitemap.jade&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    desc: &lt;span class=&quot;string&quot;&gt;&quot;sitemap&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: &lt;span class=&quot;string&quot;&gt;&quot;sitemap.xml&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  feed:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    src: &lt;span class=&quot;string&quot;&gt;&quot;feed.jade&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    desc: &lt;span class=&quot;string&quot;&gt;&quot;feed&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: &lt;span class=&quot;string&quot;&gt;&quot;feed.xml&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, hexo.config.api);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gen = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./lib/generator'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// assign them to different generators&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; config)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;&amp;#123;hexo.extend.generator.register(item, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;locals&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gen(item,hexo.config,locals)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this is the ./lib/generator.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jade = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'jade'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pathFn = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'path'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main functions, current only deal with the latest posts if it is a json file task :)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if it is xml task, then it will render the default template ( sitemap.jade, feed.jade)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item,config,locals&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; api = config.api&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(api[item].path.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; posts = locals.posts.toArray()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b.updated - a.updated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = [],count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    posts.forEach( (post) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(count &amp;gt; (api[item].limit || &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      post.date = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(post.date).toLocaleDateString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      api[item].attr.forEach( (v)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(v == &lt;span class=&quot;string&quot;&gt;&quot;summary&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          temp[v] = post.content.replace(&lt;span class=&quot;regexp&quot;&gt;/(&amp;lt;([^&amp;gt;]+)&amp;gt;)/ig&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          temp[v] = post[v]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      count ++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      data.push(temp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// for xml(now only support sitemap, feed since I only these two templates :)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; templateSrc= pathFn.join(__dirname, &lt;span class=&quot;string&quot;&gt;'../'&lt;/span&gt;+api[item].src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmpl = jade.compile(fs.readFileSync(templateSrc, &lt;span class=&quot;string&quot;&gt;'utf8'&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; posts = [].concat(locals.posts.toArray(), locals.pages.toArray())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;post&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; post.sitemap !== &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b.updated - a.updated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data= tmpl(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config: config,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      posts: posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: api[item].path,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That’s it.&lt;/p&gt;
&lt;p&gt;I love hexo!! I love JS!!! :)&lt;/p&gt;
</summary></url><url><title>Start SS邀请码抢码活动</title><loc>http://taoalpha.me/blog/2015/05/06/tech-startss-invitation-code/</loc><publish>2015-05-06T12:00:39.000Z</publish><summary>&lt;p&gt;五一回来后面临的一大问题就是翻墙… 好久不翻的结果是发现了不少新的翻墙服务… &lt;/p&gt;
&lt;p&gt;无论是依然坚挺的&lt;a href=&quot;http://www.hongxingchajian.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;红杏&lt;/a&gt;还是后来出现颇有好名的&lt;a href=&quot;http://www.hongxingchajian.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;曲径&lt;/a&gt;(update:已停止接受新用户), 以后最近出现的&lt;a href=&quot;https://tuxingsun.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;土行孙&lt;/a&gt;都算是不错的选择, 你要是觉得这些方法都不够高达上, 不够体现你的逼格, 你也可以搜索shadowsocks+vps自建一个翻墙代理, 自己一人享受~ 当然你要是觉得自己实在经济困难, 也可以用一些最近出现的Shadowsocks免费服务, 其中startss就是其中很不错的一个~&lt;br&gt;(其前辈同SSnode已经被墙…恭喜…).&lt;/p&gt;
&lt;p&gt;startss目前采用邀请码注册的方式, 新用户会自动分配5G的流量, 基本上上网页, 一个月还是够用的~ 但是想要看看视频啥的… 那就铁定不够了.. 那么, 怎么获得更多的流量呢? startss目前开展的一个邀请码加油活动就是很好的渠道, 它有个独立的页面每隔30分钟就会放出一个邀请码(update: 这里的码已经不能用于注册了, 纯加油), 输入这个码到加油页面即可. 当然, 一个码只有一次加油机会, 所以一定要眼明手快哦~&lt;/p&gt;
&lt;p&gt;当然 对于我们这种眼不明手不快的人… 为了抢到码, 就只能在自己还算擅长的领域做做小弊了… 以下为本次作弊实录:&lt;/p&gt;
&lt;p&gt;5.4-1: 发现这一活动, 手抢两次失败…&lt;br&gt;5.4-2: 查看了下页面, 发现码是直接写到页面中的, 可以用脚本轻易的获取, 于是写了第一个版本的油猴脚本, 大概5行左右… 唯一的功能就是发现新码后弹框提示;&lt;br&gt;5.4-3: 发现还是抢不到!!! 复制这一步耗费的时间太多… 于是干脆不复制了… 直接发现新码后自动提交到加油…&lt;br&gt;5.4-4: 终于抢到了… 但是这样刷是不是太频繁了呢,别被禁了.. 恩, 做个时间限制.. 只在放码的时间刷… 每次手动更新旧码太蠢了, 直接上cookie吧, 这个alert弹出框太捣乱了, 直接重写alert不让它弹出了;&lt;br&gt;5.5-1: 哈哈, 连抢了好多次~ 赞!&lt;br&gt;5.5-2: 咦, 怎么最近一直没抢到? 原来站长修改了验证码格式… 增加了扰乱字符… 此处经历了两次扰乱方式, 第一种是增加随机扰乱符号, 比如//这种, 之后更是加上了隐藏的字符.. 直接干掉了我们这种直接用js获取text的人… 但两种方式都很容易破解, 不够犀利… 这个时候我已经不在意抢码了.. 我更好奇的是站长下一步的防刷方法会是什么…&lt;br&gt;5.6-1: 一天没更新, 我间隔着抢了几个充了充流量;&lt;br&gt;5.6-2: 站长祭出大杀器… 竟然把码转成图片了… 正巧记得以前看过js的ocr… 试之… 倒是可以识别, 不过准确率非常低, 数字和字母的字体都是非主流的, 所以识别起来不够给力, 基本很难一次识别正确..&lt;/p&gt;
&lt;p&gt;至此, 告一段落. 不晓得目前还在坚持刷码的人是如何操作的, 不过我后来实验了下手填图片码, 基本时间够快也是能抢到的, 而且从目前来看没有垄断性刷码的id出现, 八成应该是手刷了都~&lt;/p&gt;
&lt;p&gt;附上代码:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ==UserScript==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @name         get code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @namespace    http://code.chenjie.info/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @version      0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @description  enter something useful&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @author       You&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @match        http://code.chenjie.info*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @grant        none&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @require http://code.jquery.com/jquery-latest.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @require http://code.jquery.com/jquery-latest.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @require http://antimatter15.com/ocrad.js/ocrad.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ==/UserScript==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;懒得require了, 很短就直接嵌入了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * jQuery Cookie Plugin v1.4.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * https://github.com/carhartl/jquery-cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Copyright 2006, 2014 Klaus Hartl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Released under the MIT license&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 我就省略了.... 防止此处展现太长... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oldcode = $.cookie(&lt;span class=&quot;string&quot;&gt;'codenumber'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;check&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kk = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 做了简单的时间判定, 防止刷的过于频繁...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(kk.getMinutes()-&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(kk.getMinutes()-&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || kk.getMinutes()&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 最开始码是写入文本的, 直接获取即可~ 后来的骚扰也只是多了几步替换而已&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//code = $('tr.success td').find(&quot;span&quot;).remove().end().text().replace(&quot;专属加油码:&quot;,&quot;&quot;).replace(/[\/, ,^,&amp;amp;,*,!,@,#,$,%,_,+,-,=,(,)]/g,&quot;&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 尝试了下OCR识别码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; image = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Image();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        image.src = &lt;span class=&quot;string&quot;&gt;'vcode.php'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp.width = image.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp.height = image.height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctx = tmp.getContext(&lt;span class=&quot;string&quot;&gt;&quot;2d&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx.drawImage(image,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; image_data = ctx.getImageData(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,tmp.width,tmp.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(image_data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        code = OCRAD(image_data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;newcode: &quot;&lt;/span&gt;+code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 下面这部分就是通过比对新旧码来实现自动跳转加油页&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//if (code != oldcode &amp;amp;&amp;amp; code)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//    $.cookie('codenumber',code);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//prompt(&quot;new code&quot;,code);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//    window.open(&quot;http://startss.net/user/add_transfer.php?code=&quot;+code,&quot;_self&quot;,&quot;&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 构造了一个url参数从而可以另写一个油猴脚本在加油页获取它, 这里不用cookie的原因是跨域名了...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 加油页的脚本做一个提交后的自动重定向到这一页面就可以实现全自动了...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//&amp;#125;else&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//    location.reload()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设定校验间隔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setInterval(check,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重写alert的代码:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;._alert = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.alert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.alert = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;msg, showItNow&lt;/span&gt;) &lt;/span&gt;&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (showItNow) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;._alert(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;恩~ 就这样~ 哈哈~ &lt;/p&gt;
&lt;p&gt;PS: 为了防止被喷… 我必须申明下… 这种刷的行为并不值得提倡… 我本身也并没有使劲刷… 抢了几次后就会断掉的~ 毕竟我本身有自己的一个vps, 所以这里主要是觉得好玩, 试验了下, 后来被不断的改版新花样搞兴奋了~哈哈 &lt;/p&gt;
</summary></url><url><title>网页渲染过程简介</title><loc>http://taoalpha.me/blog/2015/07/01/tech-rendering-a-web-page-step-by-step/</loc><publish>2015-07-01T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;做web开发尤其是性能优化, 首先要明了的就是web渲染逻辑. 只有知道了浏览器是如何渲染页面的, 你才能更有针对性的去优化你的网页. 今天就来详细的说一下web的渲染步骤.&lt;/p&gt;
&lt;h2 id=&quot;u6D4F_u89C8_u5668_u7684_u7EC4_u6210&quot;&gt;&lt;a href=&quot;#u6D4F_u89C8_u5668_u7684_u7EC4_u6210&quot; class=&quot;headerlink&quot; title=&quot;浏览器的组成&quot;&gt;&lt;/a&gt;浏览器的组成&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;UI: 指浏览器的外在表现样式;&lt;/li&gt;
&lt;li&gt;Browser Engine: 连接UI和渲染引擎;&lt;/li&gt;
&lt;li&gt;Rendering Engine: 渲染引擎, 根据请求内容的不同进行不同的渲染, 比如html的话就是渲染HTML和CSS(使用的就是HTML和CSS的Parser) (我们常说的webkit就是rendering engine);&lt;/li&gt;
&lt;li&gt;Networking: 网络, 用以处理网络请求, 比如HTTP请求的;&lt;/li&gt;
&lt;li&gt;UI backend: 用来生成一些基础控件的, 比如窗口等, 这些控件都是跨平台的, 其会调用系统本身的界面方法来生成对应的控件;&lt;/li&gt;
&lt;li&gt;JavaScript Interpreter: 用以解析以及执行JS代码的;&lt;/li&gt;
&lt;li&gt;Data Storage: 用以存储数据, 包含存储本地的cookies以及类似localstorage等这种存储机制;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Webkit redering engine main flow&lt;img src=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/webkitflow.png&quot; title=&quot;title=Figure : WebKit main flow alt=Figure : WebKit main flow&quot;&gt;&lt;/li&gt;
&lt;li&gt;Gecko redering engine main flow&lt;img src=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/image008.jpg&quot; title=&quot;title=Figure : Mozilla&quot; alt=&quot;s Gecko rendering engine main flow alt=Figure : Mozilla&quot;&gt;&lt;/li&gt;
&lt;li&gt;Parser Compilation Flow&lt;img src=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/image013.png&quot; title=&quot;title=figure: Parser Compilation Flow alt=figure:Parser Compilation Flow&quot;&gt;&lt;/li&gt;
&lt;li&gt;CSS Parser Flow&lt;img src=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/image023.png&quot; title=&quot;title=Figure : parsing CSS alt=Figure : parsing CSS&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u5982_u4F55_u6E32_u67D3_u4E00_u4E2A_u7F51_u9875&quot;&gt;&lt;a href=&quot;#u5982_u4F55_u6E32_u67D3_u4E00_u4E2A_u7F51_u9875&quot; class=&quot;headerlink&quot; title=&quot;如何渲染一个网页&quot;&gt;&lt;/a&gt;如何渲染一个网页&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在浏览器中输入要访问网页的url;&lt;/li&gt;
&lt;li&gt;浏览器开始解析url, 找寻其所属的协议, 主机所在, 所用端口以及对应的路径;&lt;/li&gt;
&lt;li&gt;浏览器通过进行DNS查询将域名转为IP地址;&lt;/li&gt;
&lt;li&gt;浏览器开启对应的通信端口并与解析出来的IP地址相连(通常会使用80端口);&lt;/li&gt;
&lt;li&gt;当建立链接后, 就会向主机地址发送一个HTTP请求, 包含了一些浏览器的基本属性和网页参数等;&lt;/li&gt;
&lt;li&gt;主机将请求接收并转发给监听对应端口的服务器, 比如Apache或者Nginx等;&lt;/li&gt;
&lt;li&gt;服务器解析请求路径, 并根据设定的配置将其转交给对应的处理器处理(具体会因不同语言而有所区别: PHP, Pyhton等);&lt;/li&gt;
&lt;li&gt;处理器接收请求, 并着手准备回应请求;&lt;/li&gt;
&lt;li&gt;根据具体情况, 处理器可能会需要链接数据库获取数据来构建回应内容(链接数据库-&amp;gt;执行查询-&amp;gt;获取并解析数据-&amp;gt;关闭数据库链接);&lt;/li&gt;
&lt;li&gt;将所有数据整合构成回应主体(对于网页而言多数是html字符串), 加上必须要的元信息(HTTP的Header), 以同样的协议返回给用户的浏览器;&lt;/li&gt;
&lt;li&gt;浏览器接收回应内容, 根据回应的状态, 如果有错误则进行错误处理, 若无则进行解析;&lt;/li&gt;
&lt;li&gt;浏览器首先根据获得的内容(多数情况下为HTML)生成一个DOM树;&lt;/li&gt;
&lt;li&gt;然后针对其内引用的外部资源逐个发起请求获取, 比如图片, 样式, js等, 此刻重复上述请求步骤;&lt;/li&gt;
&lt;li&gt;浏览器获得返回的样式后开始解析其内容, 将css构建CSSOM, 而根据具体的属性来执行js的解析和执行;&lt;/li&gt;
&lt;li&gt;针对更新后的DOM和CSSOM, 生成render tree, 即包含了视觉展现信息的树, 浏览器根据render tree来进行渲染, 即你看到的页面;&lt;/li&gt;
&lt;li&gt;根据css来对render tree进行layout - 定位, 然后再对定位好的部分进行Painting, 然后你就看到了呈现在你眼前的页面;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;css_u548Cjs_u7684_u52A0_u8F7D_u987A_u5E8F&quot;&gt;&lt;a href=&quot;#css_u548Cjs_u7684_u52A0_u8F7D_u987A_u5E8F&quot; class=&quot;headerlink&quot; title=&quot;css和js的加载顺序&quot;&gt;&lt;/a&gt;css和js的加载顺序&lt;/h3&gt;&lt;h4 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;默认下, js的加载是同步的, 即遇到&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签后立刻就会开始解析js, 如果js本身是外部资源, 则还会先去请求获取后再解析, 同时Dom的解析也会因此而暂停,一直等待js解析执行后才会继续;&lt;/li&gt;
&lt;li&gt;对于外部引用的js(不是直接写到html里的),开发者可以通过给script标签增加&lt;code&gt;defer&lt;/code&gt;属性来使js滞后加载, 这样就不会影响到Dom的解析了, 其也会在Dom解析后执行, 但这种情况下, 务必要保证js中不会用到&lt;code&gt;document.write()&lt;/code&gt;这种直接创建Dom Node的语句;&lt;/li&gt;
&lt;li&gt;除了&lt;code&gt;defer&lt;/code&gt;,H5中新引入了&lt;code&gt;async&lt;/code&gt;属性, 可以让js保持异步加载, 如此js的解析执行就是在另一个线程中进行的了, 就和Dom的解析互不影响了, 当然同样的, 这种情况下, js中也不能有类似&lt;code&gt;document.write()&lt;/code&gt;的函数;&lt;/li&gt;
&lt;li&gt;同时引擎方面目前也有一定的优化, 一般来说, webkit或者firefox所用的引擎都会在执行某个脚本的同时, 开启另一个线程继续处理下面的文档并请求所需的外部资源(images,css,js);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用一张图总结&lt;code&gt;defer&lt;/code&gt;和&lt;code&gt;async&lt;/code&gt;的区别就是:&lt;/p&gt;
&lt;img src=&quot;http://khan4019.github.io/MakeWebFaster/images/asyncVsDefer.jpg&quot; title=&quot;title=Async Vs Defer alt=Async Vs Defer&quot;&gt;
&lt;p&gt;通常来说, 对于互不依赖的模块而言, 用async比较好, 因为不会占据整体的时间, 而如果js之间互相有所依赖, 则需要根据具体情况来看, 这个时候很不推荐滥用&lt;code&gt;async&lt;/code&gt;, 因为无法保证模块的执行先后顺序;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;async&lt;/code&gt;依然会block掉Dom的ready事件, 即&lt;code&gt;async&lt;/code&gt;的js执行完之前dom是不会变为&lt;code&gt;complete&lt;/code&gt;的&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h4&gt;&lt;p&gt;虽然css不会影响Dom的结构, 但是因为js对css有获取权限, 所以css的加载也会因为js的不同而有所不同.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox会在保证css加载后才会加载js;&lt;/li&gt;
&lt;li&gt;Webkit则智能一些, 它只会延缓加载那些会因为css未加载而受到影响的js;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即css的执行要优先于js&lt;/p&gt;
&lt;h2 id=&quot;u7ED3_u8BED&quot;&gt;&lt;a href=&quot;#u7ED3_u8BED&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Browsers Work&lt;/a&gt;中, 作者详细描述了很多&lt;code&gt;parse&lt;/code&gt;,&lt;code&gt;render&lt;/code&gt;,&lt;code&gt;layout&lt;/code&gt;,和&lt;code&gt;painting&lt;/code&gt;的细节, 如果有兴趣的话, 可移步详细阅读.&lt;/p&gt;
&lt;p&gt;浏览器可以说是人类21世纪最伟大的发明之一, 其蕴藏了很多技术细节, 也正是其不断的优化, 才能让我们今天看到如此绚丽多彩的网页. 而WebKit的出现则让浏览器赤裸的展现在了开发者的面前, 也为前端开发带来了性能优化的领域.&lt;/p&gt;
&lt;p&gt;有兴趣了解更多WebKit的技术, 可以阅读&lt;a href=&quot;http://book.douban.com/subject/25910556/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebKit技术内幕&lt;/a&gt;一书.&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://friendlybit.com/css/rendering-a-web-page-step-by-step/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rendering a web page - step by step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Browsers Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Strict Mode in JavaScript</title><loc>http://taoalpha.me/blog/2015/11/11/tech-use-strict-in-js/</loc><publish>2015-11-11T08:00:00.000Z</publish><summary>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;#39;use strict&amp;#39;&lt;/code&gt; is a new feature introduced from ECMAScript 5, it is not a subset of js, it has some different semantics from normal code. So be careful to use it.&lt;/p&gt;
&lt;h2 id=&quot;What_is_the_difference_3F&quot;&gt;&lt;a href=&quot;#What_is_the_difference_3F&quot; class=&quot;headerlink&quot; title=&quot;What is the difference?&quot;&gt;&lt;/a&gt;What is the difference?&lt;/h2&gt;&lt;p&gt;After you insert the &lt;code&gt;&amp;#39;use strict&amp;#39;&lt;/code&gt; into the head of your entire code or in the beginning of the function code.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Whole-script strict mode syntax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v = &lt;span class=&quot;string&quot;&gt;&quot;Hi!  I'm a strict mode script!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// function-level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;strict&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Function-level strict mode syntax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;  'use strict'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nested&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;And so am I!&quot;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hi!  I'm a strict mode function!  &quot;&lt;/span&gt; + nested();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notStrict&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I'm not strict.&quot;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And since “use strict” only validate when you insert it into the head of the script when you want to do whole-script strict mode, so be careful to concatenate scripts if you are using strict mode since concatenate strict mode with non-strict mode scripts will be strict and concatenate non-stricct with strict will be non-strict.&lt;/p&gt;
&lt;h3 id=&quot;Fail_aloud&quot;&gt;&lt;a href=&quot;#Fail_aloud&quot; class=&quot;headerlink&quot; title=&quot;Fail aloud&quot;&gt;&lt;/a&gt;Fail aloud&lt;/h3&gt;&lt;p&gt;We all know javascript is a really nice language that it will fail silently in most of times not breaking the interaction. But it will also cause some troubles for debugging… Now we have strict mode which will convert all mistakes into errors, so your javascript will not fail silently in strict mode.&lt;/p&gt;
&lt;p&gt;So what kind of mistakes will be converted into errors in strict mode?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declare variable first - in strict mode, you can’t use assignment without &lt;code&gt;var&lt;/code&gt; to create a global varibale anymore;&lt;/li&gt;
&lt;li&gt;Assign value to non-writable variable or a getter-only property, non-extensible object..etc, will throw an error;&lt;/li&gt;
&lt;li&gt;Delete an undeletable property will throw an error;&lt;/li&gt;
&lt;li&gt;All property name in an object must be unique;&lt;/li&gt;
&lt;li&gt;Parameters in a function can not be duplicate;&lt;/li&gt;
&lt;li&gt;ECMAScript 5 fobids the octal syntax(starts with 0), but ES6 brings it back with prefix: ‘0o’;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Simplifying_variable_uses&quot;&gt;&lt;a href=&quot;#Simplifying_variable_uses&quot; class=&quot;headerlink&quot; title=&quot;Simplifying variable uses&quot;&gt;&lt;/a&gt;Simplifying variable uses&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Prohibit &lt;code&gt;with&lt;/code&gt; - because you could never know the properties in it is mapped to which object until you run the code;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; with strict mode will not introduct variables in it to the surrounding scope;&lt;/li&gt;
&lt;li&gt;Forbid deleting on plain names(most are primitive variables);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; can not be overwrite with assignment;&lt;/li&gt;
&lt;li&gt;no alias for &lt;code&gt;arguments&lt;/code&gt;, so the arguments in a function can only be changed by assigning to &lt;code&gt;arguments[i]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments.callee&lt;/code&gt; is no longer supported;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Relatedly, if the function eval is invoked by an expression of the form eval(…) in strict mode code, the code will be evaluated as strict mode code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I remembered someone told me a golden rule about eval in strict mode before : Don’t use it. :)&lt;/p&gt;
&lt;h3 id=&quot;u201CSecuring_u201D_JavaScript&quot;&gt;&lt;a href=&quot;#u201CSecuring_u201D_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;“Securing” JavaScript&quot;&gt;&lt;/a&gt;“Securing” JavaScript&lt;/h3&gt;&lt;p&gt;Since before and in normal mode, all functions declared will has the global (window in browser) as &lt;code&gt;this&lt;/code&gt; by default if they are not invoked by an object.&lt;/p&gt;
&lt;p&gt;But in strict mode, functions invoked without an object will have a default &lt;code&gt;this&lt;/code&gt; as undefined or null;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this will be undefined in strict mode, but in normal mode, it will be the global this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;But you still can use &lt;code&gt;call()&lt;/code&gt;,&lt;code&gt;apply()&lt;/code&gt;,&lt;code&gt;bind()&lt;/code&gt; to specify a particular this.&lt;/p&gt;
&lt;p&gt;And you can not use function.caller and function.arguments to refer the function itself or its arguments within the function code anymore. (actually in normal code in advance browsers, you can not use these either)&lt;/p&gt;
&lt;h3 id=&quot;Reserved_Keywords&quot;&gt;&lt;a href=&quot;#Reserved_Keywords&quot; class=&quot;headerlink&quot; title=&quot;Reserved Keywords&quot;&gt;&lt;/a&gt;Reserved Keywords&lt;/h3&gt;&lt;p&gt;In strict mode, you will have some reserved keywords that maybe implemented in future js. Here is a list of them:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;implements, interface, let, package, private, protected, public, static, and yield&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So don’t use them in strict mode to be names of your variables.&lt;/p&gt;
&lt;h3 id=&quot;Others&quot;&gt;&lt;a href=&quot;#Others&quot; class=&quot;headerlink&quot; title=&quot;Others&quot;&gt;&lt;/a&gt;Others&lt;/h3&gt;&lt;p&gt;In strict mode, a function statements has to be the top level of a script or function.(in normal mode, functions statements are permitted everywhere..)&lt;/p&gt;
&lt;p&gt;So you can not declare a function within a if statements or for loop…&lt;/p&gt;
&lt;h2 id=&quot;Referrence&quot;&gt;&lt;a href=&quot;#Referrence&quot; class=&quot;headerlink&quot; title=&quot;Referrence&quot;&gt;&lt;/a&gt;Referrence&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Strict mode - MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Raspberry Pi Setup</title><loc>http://taoalpha.me/blog/2015/07/05/tech-raspberry-pi-setup/</loc><publish>2015-07-05T11:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;今天介绍下如何配置一个树莓派, 主要是一些树莓派的基本配置, 多数大家google以下也是可以找到的, 这里算是汇总了一下.&lt;/p&gt;
&lt;p&gt;内容主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树莓派系统安装;&lt;/li&gt;
&lt;li&gt;初始化配置;&lt;/li&gt;
&lt;li&gt;nodejs环境配置;&lt;/li&gt;
&lt;li&gt;python环境配置;&lt;/li&gt;
&lt;li&gt;wifi环境配置;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u6811_u8393_u6D3E_u7684_u57FA_u7840_u8BBE_u5B9A&quot;&gt;&lt;a href=&quot;#u6811_u8393_u6D3E_u7684_u57FA_u7840_u8BBE_u5B9A&quot; class=&quot;headerlink&quot; title=&quot;树莓派的基础设定&quot;&gt;&lt;/a&gt;树莓派的基础设定&lt;/h2&gt;&lt;h3 id=&quot;u6811_u8393_u6D3E_u7CFB_u7EDF_u5B89_u88C5&quot;&gt;&lt;a href=&quot;#u6811_u8393_u6D3E_u7CFB_u7EDF_u5B89_u88C5&quot; class=&quot;headerlink&quot; title=&quot;树莓派系统安装&quot;&gt;&lt;/a&gt;树莓派系统安装&lt;/h3&gt;&lt;p&gt;目前在&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;树莓派的官网&lt;/a&gt;主要提供了两种安装系统的方式, 一种是直接烧制, 通过将已下载的img文件利用对应的工具烧制到格式化好的SD卡中, 制作出直接可用的启动盘; 另一种则是通过官方发布的&lt;a href=&quot;https://www.raspberrypi.org/help/noobs-setup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NOOBS&lt;/a&gt;来进行启动安装.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接制作法:&lt;/p&gt;
&lt;p&gt;有过制作系统经验的朋友都应该了解这种方法, 不同平台也有不同的工具可以用以制作, 这里就没啥好说的了. mac下可以按照&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/mac.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网的Guide&lt;/a&gt;逐步操作即可.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NOOBS法:&lt;/p&gt;
&lt;p&gt;NOOBS法其实并不是直接烧制一个好的系统进去, 而是一个类似winpe, 而且更简易的启动程序. NOOBS法分为2个版本, 一个是包含了十个左右的预装系统, 另一个则是单纯的NOOBS, 需要联网下载选择的系统进行安装; 通常做启动化设定的话, 用离线版的肯定比较省事~&lt;/p&gt;
&lt;p&gt;下载完NOOBS后, 直接将NOOBS压缩包解压到你已经格式化好的SD卡上, 然后插入树莓派启动就能进入下面的就界面了:&lt;/p&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/07e4a6e82b21e1acefb69b6058af7b4f0dec17e9/687474703a2f2f646f776e6c6f6164732e72617370626572727970692e6f72672f4e4f4f42532f73637265656e73686f74732f6f735f73656c65637465642e706e67&quot;&gt;
&lt;p&gt;选择你想要安装的系统, 选择install即可(此处可以选择多系统, 根据你的SD卡等具体情况即可).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么如何选择呢? 对我而言, 很简单, 第一次安装的时候, 手头没有HDMI线, 那么没有屏幕的话, 用NOOBS的话无法操作, 所以就直接烧的系统, 这样就可以直接启动, 然后通过ssh配置即可; 后来因为玩坏了python, 怎么改都没改好,于是就决定重装, 而手头正好有HDMI线了, 所以这次就试用了下NOOBS, 觉得也很省事, 尤其是可以直接装多系统(我装了标准R和Arch)~&lt;/p&gt;
&lt;h3 id=&quot;u521D_u59CB_u5316_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#u521D_u59CB_u5316_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;初始化配置&quot;&gt;&lt;/a&gt;初始化配置&lt;/h3&gt;&lt;p&gt;一旦你安装好系统后, 就可以开始启动系统了. 插上电源, 插上SD卡即可. 因为无屏的情况居多, 所以下面就以无屏作为基本环境, 目前pi基本都默认开启了SSH, 所以我们可以直接通过ssh登录设定.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先的首先, 你需要一个网线… 可以直接链接你的树莓派和路由器或者你的电脑;&lt;/li&gt;
&lt;li&gt;首先, 你需要你pi的ip, 如此才能进行ssh登录: 这个很简单, 登录到你的路由器管理页面, 通过客户端列表查看你的树莓派被分配到的ip地址(如果你是直连笔记本的话, 记得设定你的笔记本网络分享,然后通过&lt;code&gt;arp -a&lt;/code&gt;, windows下, 扫描出你的树莓派的分配ip即可);&lt;/li&gt;
&lt;li&gt;连接, 找到ip后, 就可以通过ssh登录了, 默认的初始用户名和密码是: pi -&amp;gt; raspberry;&lt;/li&gt;
&lt;li&gt;基本配置: 通过&lt;code&gt;raspi-config&lt;/code&gt;命令就可以对树莓派做一些基本的配置, 比如内存分配啊, 超频啊, 修改密码,设定主机名啊等等, 其中超频(overclock)这部分大家要谨慎一些处理, 可以从低到高的逐步超频, 目前亲测B+下超频到turbo 1000的话基本还是毫无压力的, 而如果你不需要图形界面的话, 那么可以把GUI的内存分配到最低: 16;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nodejs_u4EE5_u53CApython_u73AF_u5883_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#nodejs_u4EE5_u53CApython_u73AF_u5883_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;nodejs以及python环境配置&quot;&gt;&lt;/a&gt;nodejs以及python环境配置&lt;/h3&gt;&lt;p&gt;因为个人属性, 所以还是比较集中在node和python中, 像java等环境我就基本不管了. 下面介绍下node和Python在pi里面的配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nodejs&lt;/p&gt;
&lt;p&gt;目前RASPBIAN 3.18下node还是不默认支持的, 需要我们手动安装, 主要有下面几个安装方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;源码编译:&lt;/p&gt;
&lt;p&gt;这种方法最为简单, 而且通常可以直接安装到最新版本, 从&lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;下载到源码包解压后自己&lt;code&gt;./configure``make``make install&lt;/code&gt;就是漫长的等待了…至少半天吧… 毫不夸张..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预编译安装:&lt;/p&gt;
&lt;p&gt;主要是因为node的编译时间太长…所以有人发布了编译好的版本可以直接下载使用, 具体可以&lt;a href=&quot;http://conoroneill.net/download-compiled-version-of-nodejs-0120-stable-for-raspberry-pi-here&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考此文: Download compiled version of Node.js 0.12.0 Stable for Raspberry Pi here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包管理安装:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node官网&lt;/a&gt;还提供了如何通过包管理的方式来安装node, 详细的区分不同系统的可以看&lt;a href=&quot;https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Installing Node.js via package manager&lt;/a&gt;~ RASPBIAN是基于debian的, 所以我们参考 debian 的话即可;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过deb包安装:&lt;/p&gt;
&lt;p&gt;此种方法也是个人比较推荐的, 简单易行. 目前&lt;a href=&quot;http://node-arm.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-arm&lt;/a&gt;中更新的最新deb包是0.12.1的版本. 基本也够用了~ 下载deb包后直接&lt;code&gt;dpkg -i 包&lt;/code&gt;即可;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能会出现的问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本过低: 默认通过apt-get获取的node版本似乎只到0.6吧, 记不清了, 反正最多不过0.10, 此种情况下, 可以先执行&lt;code&gt;apt-get update &amp;amp; apt-get upgrade&lt;/code&gt;等或者通过&lt;a href=&quot;https://github.com/nodesource/distributions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodesource&lt;/a&gt;更新以下源;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;illegal instruction&lt;/code&gt;: 有时候你安装了node之后, 可能会发现输入&lt;code&gt;node&lt;/code&gt;命令都会提示&lt;code&gt;illegal instruction&lt;/code&gt;, 此种问题主要是因为树莓派的cpu所致, 而且是V8的问题, 并非nodejs的问题, 具体的细节大家可以google了解下, 具体的解决办法呢, 我也不确定, 只知道我&lt;code&gt;apt-get upgrade&lt;/code&gt;了以下后重启了下就ok了…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python&lt;/p&gt;
&lt;p&gt;RASPBIAN 目前的python版本是多版本的, 包含了2.7.3和3.2, 而因为我通常的开发环境是2.7.6, 所以这里介绍下如何替换python的方法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;源码编译:&lt;/p&gt;
&lt;p&gt;python相比nodejs而言要省时很多… 不过也很慢… 不推荐;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pythonbrew:&lt;/p&gt;
&lt;p&gt;这里介绍一个很赞的办法: pythonbrew. 这是一个python管理工具, 它可以帮助你在多版本python下进行转换. 安装方法很简单: &lt;a href=&quot;https://github.com/utahta/pythonbrew&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pythonbrew Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;其中可能出现环境配置问题导致找不到&lt;code&gt;bin/pythonbrew&lt;/code&gt;文件, 你可以通过手动将&lt;code&gt;/usr/local/pythonbrew&lt;/code&gt;拷贝一份到&lt;code&gt;~/.pythonbrew&lt;/code&gt;中即可解决;&lt;/p&gt;
&lt;p&gt;安装后的使用非常便捷, 只需要利用&lt;code&gt;pythonbrew install 版本号&lt;/code&gt;以及&lt;code&gt;pythonbrew switch 版本号&lt;/code&gt;就能切换python版本了~&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: 除非迫不得已, 不要乱动系统的python版本;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结合virtualenv和pythonbrew, 你就可以实现独立的版本环境了~哈哈&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;wifi_u73AF_u5883_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#wifi_u73AF_u5883_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;wifi环境配置&quot;&gt;&lt;/a&gt;wifi环境配置&lt;/h3&gt;&lt;p&gt;树莓派本身是没有无线网卡的, 所以如果想要让其支持无线上网的话, 你需要自己购买一个无线网卡接入, 并且安装对应的驱动.本人用的是realtek的无线网卡, 插入后通过&lt;code&gt;lsusb&lt;/code&gt;查看到已经检测到设备后, 就可以通过&lt;code&gt;apt-get install firmware-realtek&lt;/code&gt;安装配套的驱动.&lt;/p&gt;
&lt;p&gt;当你通过&lt;code&gt;ifconfig&lt;/code&gt;查看到&lt;code&gt;wlan0&lt;/code&gt;的时候, 就证明你的无线网络支持已经可以了, 接下来就需要配置对应的无线属性了:&lt;/p&gt;
&lt;p&gt;打开&lt;code&gt;/etc/network/interfaces&lt;/code&gt;, 如果你喜欢&lt;code&gt;vim&lt;/code&gt;, 可以通过&lt;code&gt;apt-get install vim&lt;/code&gt;安装vim, 打开根据你的需要修改对应的属性: 比如&lt;code&gt;wlan&lt;/code&gt;的ip分配是&lt;code&gt;manual&lt;/code&gt;or&lt;code&gt;dhcp&lt;/code&gt;或者是&lt;code&gt;static&lt;/code&gt;. 然后在对应wpa-conf的设定文件中添加对应的network即可:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;network=&amp;#123;&amp;#10;    ssid=&amp;#34;SCHOOLS NETWORK NAME&amp;#34;&amp;#10;    psk=&amp;#34;SCHOOLS PASSWORD&amp;#34;&amp;#10;    id_str=&amp;#34;school&amp;#34;&amp;#10;&amp;#125;&amp;#10;&amp;#10;network=&amp;#123;&amp;#10;    ssid=&amp;#34;HOME NETWORK NAME&amp;#34;&amp;#10;    psk=&amp;#34;HOME PASSWORD&amp;#34;&amp;#10;    id_str=&amp;#34;home&amp;#34;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你有多个无线网需要支持的话, 可以在其中添加多个network块即可;&lt;/p&gt;
&lt;h3 id=&quot;u5F00_u542Froot&quot;&gt;&lt;a href=&quot;#u5F00_u542Froot&quot; class=&quot;headerlink&quot; title=&quot;开启root&quot;&gt;&lt;/a&gt;开启root&lt;/h3&gt;&lt;p&gt;在上述命令中你会发现很多都需要&lt;code&gt;sodu&lt;/code&gt;执行, 这是因为你默认使用的是pi账户, 而非root. 默认情况下root账户是关闭的, 需要你重新开启:&lt;/p&gt;
&lt;p&gt;很简单, 给root设定一个密码即可:&lt;code&gt;sudo passwd root&lt;/code&gt;, 同时如果你需要用root登录ssh的话, 请确保&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;中的&lt;code&gt;PermitRootLogin yes&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;u603B_u7ED3&quot;&gt;&lt;a href=&quot;#u603B_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;树莓派可谓是极佳的学习硬件的工具, 其开放性极强, 扩展性极强, 它能做什么完全由你决定. 这里分享国内外几个不错的社区给大家:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geekfan.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;极客范儿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://piweekly.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PiWeekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://raspi.tv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RasPi Tv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/RaspberryPiBeginners&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi Beginner - Youtube Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;树莓派的官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/help/noobs-setup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NOOBS GUIDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Installing Node.js via package manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://conoroneill.net/download-compiled-version-of-nodejs-0120-stable-for-raspberry-pi-here&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download compiled version of Node.js 0.12.0 Stable for Raspberry Pi here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://node-arm.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/utahta/pythonbrew&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pythonbrew Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weworkweplay.com/play/automatically-connect-a-raspberry-pi-to-a-wifi-network/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Automatically connect a Raspberry Pi to a Wifi network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SETTING WIFI UP VIA THE COMMAND LINE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Restore your database in Raspberry Pi from kernel panic error</title><loc>http://taoalpha.me/blog/2015/10/14/tech-raspberry-pi-kernel-panic-data-restore/</loc><publish>2015-10-14T13:00:00.000Z</publish><summary>&lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;My Raspberry Pi suddenly stopped running(connection lost when I was connecting with my pi through ssh) when I was doing something really normal(like modifying a file…) And then I tried to connect my pi with a screen and it showed the mysterious Kernel Panic error…&lt;/p&gt;
&lt;h2 id=&quot;Possible_Solutions&quot;&gt;&lt;a href=&quot;#Possible_Solutions&quot; class=&quot;headerlink&quot; title=&quot;Possible Solutions&quot;&gt;&lt;/a&gt;Possible Solutions&lt;/h2&gt;&lt;h3 id=&quot;From_the_community&quot;&gt;&lt;a href=&quot;#From_the_community&quot; class=&quot;headerlink&quot; title=&quot;From the community&quot;&gt;&lt;/a&gt;From the community&lt;/h3&gt;&lt;p&gt;I did some search on google and found some people already met this problem before. And there was some answers mentioned about using &lt;code&gt;fsck&lt;/code&gt; to repaire the boot partition.&lt;/p&gt;
&lt;p&gt;You need run the fsck in a linux environment which means you need another linux system and load your Pi system sd-card as an external USB and run the command as follow:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# first you need find the right partition - you can use&amp;#10;# sudo fdisk -l&amp;#10;sudo fsck.ext4 -v /dev/xxx&amp;#10;# replace the xxx with the name of your Pi partition&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Unfortunately, this method didn’t work on my situation… ಥ_ಥ&lt;/p&gt;
&lt;h3 id=&quot;From_the_StackOverFlow&quot;&gt;&lt;a href=&quot;#From_the_StackOverFlow&quot; class=&quot;headerlink&quot; title=&quot;From the StackOverFlow&quot;&gt;&lt;/a&gt;From the StackOverFlow&lt;/h3&gt;&lt;p&gt;There is a similar method like the one above with more details on &lt;a href=&quot;http://raspberrypi.stackexchange.com/questions/4331/kernel-panic-unable-to-mount-root-fs-on-unknown-block-after-restart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kernel panic, unable to mount root fs on unknown-block after restart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apparently.. it didn’t work either…&lt;/p&gt;
&lt;h3 id=&quot;From_you_3F&quot;&gt;&lt;a href=&quot;#From_you_3F&quot; class=&quot;headerlink&quot; title=&quot;From you?&quot;&gt;&lt;/a&gt;From you?&lt;/h3&gt;&lt;h2 id=&quot;Data_Restore&quot;&gt;&lt;a href=&quot;#Data_Restore&quot; class=&quot;headerlink&quot; title=&quot;Data Restore&quot;&gt;&lt;/a&gt;Data Restore&lt;/h2&gt;&lt;p&gt;Finally I gave up recovering my pi… but I hoped I can get my data back at least since I have near 6~7 million data in my database… And I definitely don’t want to re-crawl them again…&lt;/p&gt;
&lt;p&gt;I found it was pretty easy.&lt;/p&gt;
&lt;h3 id=&quot;Mount_the_Pi_in_your_another_linux_system&quot;&gt;&lt;a href=&quot;#Mount_the_Pi_in_your_another_linux_system&quot; class=&quot;headerlink&quot; title=&quot;Mount the Pi in your another linux system&quot;&gt;&lt;/a&gt;Mount the Pi in your another linux system&lt;/h3&gt;&lt;p&gt;First, like before, you need another linux system to mount the system partition of your Pi and copy paste your important data.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir any_path_you_want&amp;#10;# this is your mount point&amp;#10;sudo mount /dev/xxx path-to-your-mount-point&amp;#10;# now you can access the files in your old pi system&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Permission&quot;&gt;&lt;a href=&quot;#Permission&quot; class=&quot;headerlink&quot; title=&quot;Permission&quot;&gt;&lt;/a&gt;Permission&lt;/h3&gt;&lt;p&gt;Remember to run every command as root since you need the permission to do that.&lt;/p&gt;
&lt;p&gt;Normally, you just need to copy paste all data you want to save. If the files are too many and large, you may need to use &lt;code&gt;tar -zcvf tar_ball_name path_to_files_or_folders&lt;/code&gt; to compress them.&lt;/p&gt;
&lt;h3 id=&quot;Database&quot;&gt;&lt;a href=&quot;#Database&quot; class=&quot;headerlink&quot; title=&quot;Database&quot;&gt;&lt;/a&gt;Database&lt;/h3&gt;&lt;p&gt;Since I use mysql as my primary database, and mysql always saves all data under &lt;code&gt;/var/lib/mysql&lt;/code&gt;, I just need to compress the entire folder and move it to another backup hard drive.&lt;/p&gt;
&lt;p&gt;You will find there is a really big file, ibdata1, which saves all your data and indexes… Don’t delete it!!!&lt;/p&gt;
&lt;h3 id=&quot;Restore_Database&quot;&gt;&lt;a href=&quot;#Restore_Database&quot; class=&quot;headerlink&quot; title=&quot;Restore Database&quot;&gt;&lt;/a&gt;Restore Database&lt;/h3&gt;&lt;p&gt;After you backup all you need, you can format your sd card now and re-install a system for your pi. After you install the mysql-server, you will find the &lt;code&gt;/var/lib/mysql&lt;/code&gt; like before. Now just decompress the tar file you compressed before.&lt;/p&gt;
&lt;p&gt;Before you jump into mysql and see whether your data has restored or not, you need change the owner and permission for your ‘new files’ under the mysql folder.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chown -R mysql:mysql /var/lib/mysql&amp;#10;sudo find /var/lib/mysql/ -type d -exec chmod 700 &amp;#123;&amp;#125; \;&amp;#10;sudo find /var/lib/mysql/ -type f -exec chmod 660 &amp;#123;&amp;#125; \;&amp;#10;sudo chmod 644 /var/lib/mysql/debian-5.5.flag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;All these are to give your current mysql the right permission to all the files.&lt;/p&gt;
&lt;p&gt;Now you are all set. Go and enjoy your data back in one piece!&lt;/p&gt;
&lt;h3 id=&quot;ibdata1&quot;&gt;&lt;a href=&quot;#ibdata1&quot; class=&quot;headerlink&quot; title=&quot;ibdata1&quot;&gt;&lt;/a&gt;ibdata1&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The file ibdata1 is the system tablespace for the InnoDB infrastructure.&lt;br&gt;It contains several classes for information vital for InnoDB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Table Data Pages&lt;/li&gt;
&lt;li&gt;Table Index Pages&lt;/li&gt;
&lt;li&gt;Data Dictionary&lt;/li&gt;
&lt;li&gt;MVCC Control Data&lt;/li&gt;
&lt;li&gt;Undo Space&lt;/li&gt;
&lt;li&gt;Rollback Segments&lt;/li&gt;
&lt;li&gt;Double Write Buffer (Pages Written in the Background to avoid OS caching)&lt;/li&gt;
&lt;li&gt;Insert Buffer (Changes to Secondary Indexes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://serverfault.com/questions/487159/what-is-the-ibdata1-file-in-my-var-lib-mysql-directory&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Click to check more details : What is the ibdata1 file in my /var/lib/mysql directory?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is a wonderful answer on StackOverFlow about reducing the size of ibdata1 : &lt;a href=&quot;http://dba.stackexchange.com/questions/8982/what-is-the-best-way-to-reduce-the-size-of-ibdata-in-mysql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the best way to reduce the size of ibdata in mysql?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have some unicode characters in your database and you find them become “question marks” after you restore your database, don’t panic ^_^. Just change the default character set for your database:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# /etc/mysql/my.cnf&amp;#10;[client]&amp;#10;# ...&amp;#10;default-character-set=utf8&amp;#10;&amp;#10;[mysqld]&amp;#10;# ...&amp;#10;character-set-server=utf8&amp;#10;collation-server=utf8_general_ci&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</summary></url><url><title>用 Raspberry Pi 做 NAS 和 采集器</title><loc>http://taoalpha.me/blog/2015/08/20/tech-raspberry-pi-as-nas-and-crawlers/</loc><publish>2015-08-20T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u5F15_u5B50&quot;&gt;&lt;a href=&quot;#u5F15_u5B50&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;在之前&lt;br&gt;&lt;a href=&quot;/blog/2015/07/05/tech-raspberry-pi-setup/&quot;&gt;Raspberry Pi Setup&lt;/a&gt;一文中介绍了树莓派的初始配置. 这几天乘着还没开学, 就赶紧把树莓派重新跑起来, 虽然悲催的因为网络设定导致我的树莓派无法联网只能强制重刷了… 好在之前在家里就一直用 samba 把重要的脚本都存在了外置盘上, 而已抓取的数据也有早起的备份, 丢失的数据就没办法了..&lt;/p&gt;
&lt;p&gt;所以正好相当于重新设定了一遍 NAS 和 diango , 本文做简单介绍, 方便后续查看.&lt;/p&gt;
&lt;h2 id=&quot;NAS&quot;&gt;&lt;a href=&quot;#NAS&quot; class=&quot;headerlink&quot; title=&quot;NAS&quot;&gt;&lt;/a&gt;NAS&lt;/h2&gt;&lt;p&gt;NAS 全称是: Network-attached Storage. 简单说就是在一个网络组中用来存储数据的地方, 而在这个网路组的所有用户都可以在相应的权限下查看, 编辑.&lt;/p&gt;
&lt;p&gt;通常一个低配的 NAS 也要差不多100多刀左右, 当然其读写速度, 性能都是很棒的, 买来即用~ 不过作为穷屌丝一枚, 手头又有几个闲置的移动硬盘和 U 盘. 于是就参考网上的教程用树莓派做个简易的 NAS , 供个人和室友使用还是绰绰有余了~&lt;/p&gt;
&lt;h3 id=&quot;Samba&quot;&gt;&lt;a href=&quot;#Samba&quot; class=&quot;headerlink&quot; title=&quot;Samba&quot;&gt;&lt;/a&gt;Samba&lt;/h3&gt;&lt;p&gt;想要实现自用的 NAS, 主要依赖的就是 Samba 这个服务了. Samba 是基于 SMB 协议的一个服务. 利用它多平台的特性可以方便的在多平台上进行数据交换. 而自建 NAS 的核心即是: 以树莓派为搭载平台, 将链接其上的闲置硬盘作为共用存储器.&lt;/p&gt;
&lt;p&gt;Samba 的安装和配置都很简单:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install samba samba-common-bin&amp;#10;# &amp;#20462;&amp;#25913; /etc/samba/smb.conf &amp;#24320;&amp;#21551;&amp;#23433;&amp;#20840;&amp;#26435;&amp;#38480;, &amp;#21462;&amp;#28040; `security = user`&amp;#30340;&amp;#27880;&amp;#37322;&amp;#21363;&amp;#21487;&amp;#10;# &amp;#36825;&amp;#37324;&amp;#20027;&amp;#35201;&amp;#26159;&amp;#30830;&amp;#20445;samba &amp;#30340;&amp;#29992;&amp;#25143;&amp;#24517;&amp;#39035;&amp;#26159;&amp;#31995;&amp;#32479;&amp;#30340;&amp;#29992;&amp;#25143;&amp;#20043;&amp;#19968;&amp;#10;&amp;#10;# &amp;#28982;&amp;#21518;&amp;#28155;&amp;#21152;&amp;#19979;&amp;#38754;&amp;#20869;&amp;#23481;&amp;#21040; /etc/samba/smb.conf &amp;#20013;&amp;#10;#[public]&amp;#10;#&amp;#27492;&amp;#22788;&amp;#25226;&amp;#20844;&amp;#20849;&amp;#30424;&amp;#30340;&amp;#21517;&amp;#23383;&amp;#35774;&amp;#23450;&amp;#20026;&amp;#20102; public, &amp;#21487;&amp;#20197;&amp;#20462;&amp;#25913;&amp;#10;#  comment = Public Storage&amp;#10;#  &amp;#22791;&amp;#27880;&amp;#21517;&amp;#10;#  path = /nas&amp;#10;#  path &amp;#36873;&amp;#25321;&amp;#33258;&amp;#24049;&amp;#25346;&amp;#36733;&amp;#30828;&amp;#30424;&amp;#30340;&amp;#20301;&amp;#32622;, &amp;#21021;&amp;#22987;&amp;#24212;&amp;#35813;&amp;#26159;/dev/sdan &amp;#36825;&amp;#31181;&amp;#26684;&amp;#24335;&amp;#30340;, &amp;#21487;&amp;#20197;&amp;#36890;&amp;#36807; `mount /dev/sdan /newpath`&amp;#26469;&amp;#20462;&amp;#25913;;&amp;#10;#  valid users = pi nas&amp;#10;#  &amp;#20998;&amp;#37197;&amp;#29992;&amp;#25143;&amp;#26435;&amp;#38480;, &amp;#36825;&amp;#37324;&amp;#32473;&amp;#20104;&amp;#20102; pi &amp;#21644; nas &amp;#20004;&amp;#20010;&amp;#29992;&amp;#25143;&amp;#30340;&amp;#35775;&amp;#38382;&amp;#26435;&amp;#38480;&amp;#10;#  read only = no&amp;#10;#  create mask = 0777&amp;#10;#  public = yes&amp;#10;#  writable = yes&amp;#10;#  directory mask = 0777&amp;#10;#  guest ok = yes&amp;#10;#  browseable = yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中, 如果希望每次开机自动挂载硬盘到自定义位置, 可以通过修改&lt;code&gt;/etc/fstab&lt;/code&gt;文件来实现:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&amp;#22312;&amp;#21407;&amp;#26377;&amp;#22522;&amp;#30784;&amp;#19978;&amp;#28155;&amp;#21152;(&amp;#20462;&amp;#25913; `/sda1` &amp;#20026;&amp;#20320;&amp;#30340;&amp;#30828;&amp;#30424;&amp;#21021;&amp;#22987;&amp;#25346;&amp;#36733;&amp;#20301;&amp;#32622;):&amp;#10;/dev/sda1       /nas            ext4    defaults          0       0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在完成设定后, 就需要重启 samba 服务并添加对应用户了. 因为我们开启了&lt;code&gt;security = user&lt;/code&gt;, 所以这里需要给 samba 添加系统用户, 比如默认的 pi 用户, 或者 root. 当然你可以通过&lt;code&gt;useradd&lt;/code&gt;来给系统创建新用户.&lt;/p&gt;
&lt;p&gt;创建用户后, 就可以给 samba 添加用户了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;smbpasswd -a username&lt;/code&gt; 即可添加用户, &lt;code&gt;smbpasswd -e nas&lt;/code&gt; 则启用此用户.&lt;/p&gt;
&lt;p&gt;设定好对应用户的 samba 密码后即可通过你的电脑访问你的共享盘了, 你可以通过 connect 到 &lt;code&gt;smb://192.168.x.x&lt;/code&gt;(你的 pi 地址), 然后输入对应的用户名密码即可~&lt;/p&gt;
&lt;p&gt;PS. 如果你是用的 NTFS 的硬盘, 那么还需要安装&lt;code&gt;ntfs-3g&lt;/code&gt;来实现对硬盘的读写功能, 如果你用的是 mac 的盘, 那么还需要安装&lt;code&gt;hfsplus&lt;/code&gt;和&lt;code&gt;hfsutils&lt;/code&gt;来实现同样的目的~ 上述都可以通过&lt;code&gt;apt-get&lt;/code&gt;直接安装.&lt;/p&gt;
&lt;p&gt;到此, 你的简易 nas 就算是完成了~ 可以享受喽~&lt;/p&gt;
&lt;h2 id=&quot;u91C7_u96C6_u5668&quot;&gt;&lt;a href=&quot;#u91C7_u96C6_u5668&quot; class=&quot;headerlink&quot; title=&quot;采集器&quot;&gt;&lt;/a&gt;采集器&lt;/h2&gt;&lt;p&gt;玩 python, 怎么能不写爬虫呢? 哈哈 因为树莓派低功耗, 全天候运行的特性, 作为爬虫可谓是绝佳的好平台 ^_^&lt;/p&gt;
&lt;h3 id=&quot;u652F_u6301_u5E93_u5B89_u88C5&quot;&gt;&lt;a href=&quot;#u652F_u6301_u5E93_u5B89_u88C5&quot; class=&quot;headerlink&quot; title=&quot;支持库安装&quot;&gt;&lt;/a&gt;支持库安装&lt;/h3&gt;&lt;p&gt;首先为了跟随时代潮流, 我选择3.4作为 python 主版本~ 2.7.6作为辅助. 这里可以通过&lt;a href=&quot;https://github.com/utahta/pythonbrew&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pythonbrew&lt;/a&gt;来实现轻松管理 python 版本的目的. (注: pythonbrew 安装3.4的时候要使用3.4.0这种具体到小版本号的名称安装, 不然会找不到 package 的)&lt;/p&gt;
&lt;p&gt;3.4已经自带了pip, 所以就可以不用自己安装了~ 接下来利用 pip 来安装支持库.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install django&amp;#10;# &amp;#25105;&amp;#27604;&amp;#36739;&amp;#20064;&amp;#24815;django &amp;#30340;&amp;#26694;&amp;#26550;&amp;#20102;, &amp;#22914;&amp;#26524;&amp;#20320;&amp;#21916;&amp;#27426; flask &amp;#20063;&amp;#21487;&amp;#20197;&amp;#26681;&amp;#25454;&amp;#33258;&amp;#24049;&amp;#30340;&amp;#21916;&amp;#22909;&amp;#35843;&amp;#25972;&amp;#10;pip install beautifulsoup4&amp;#10;# html &amp;#35299;&amp;#26512;&amp;#24211;, &amp;#24403;&amp;#28982;, &amp;#20320;&amp;#20063;&amp;#21487;&amp;#20197;&amp;#21033;&amp;#29992; xpath &amp;#26469;&amp;#30828;&amp;#35299;~&amp;#10;pip install mysqlclient&amp;#10;# &amp;#36825;&amp;#20010;&amp;#26159; MySQLdb&amp;#30340;&amp;#19968;&amp;#20010; fork, &amp;#20294;&amp;#26159;&amp;#25552;&amp;#20379;&amp;#20102; python3&amp;#30340;&amp;#25903;&amp;#25345;, &amp;#29992;&amp;#26469;&amp;#20462;&amp;#22797;&amp;#25903;&amp;#25345; p3 &amp;#19979; django &amp;#20351;&amp;#29992; mysql .&amp;#10;# &amp;#22914;&amp;#26524;&amp;#19978;&amp;#36848;&amp;#25253;mysql &amp;#30340;&amp;#38169;&amp;#35823;&amp;#25110;&amp;#32773;mysql_config not found, &amp;#35831;&amp;#30830;&amp;#20445;&amp;#20320;&amp;#24050;&amp;#32463;&amp;#23433;&amp;#35013;&amp;#20102; mysql &amp;#20197;&amp;#21450; libmysqlclient-dev&amp;#10;pip install pymysql&amp;#10;# &amp;#20064;&amp;#24815;&amp;#29992;&amp;#36825;&amp;#20010;&amp;#20570;&amp;#25235;&amp;#21435;&amp;#25554;&amp;#20837;&amp;#20102;... &amp;#21487;&amp;#20197;&amp;#29992; MySQLdb &amp;#30340;~&amp;#10;pip install git+ssh://git@github.com/Supervisor/supervisor.git&amp;#10;# &amp;#22240;&amp;#20026; supervisor &amp;#22312; pip &amp;#30340;&amp;#29256;&amp;#26412;&amp;#19981;&amp;#25903;&amp;#25345; p3, &amp;#25152;&amp;#20197;&amp;#38656;&amp;#35201;&amp;#33258;&amp;#24049;&amp;#30452;&amp;#25509;&amp;#21033;&amp;#29992; pip &amp;#23433;&amp;#35013; git &amp;#19978;&amp;#30340;&amp;#29256;&amp;#26412;.&amp;#10;# &amp;#38656;&amp;#35201;&amp;#20808;&amp;#28155;&amp;#21152; sshkey &amp;#21040; github &amp;#19978;, &amp;#19981;&amp;#28982;&amp;#26080;&amp;#27861; clone &amp;#30340;~ &amp;#30456;&amp;#20851;&amp;#35831;&amp;#26597;&amp;#30475; github &amp;#23448;&amp;#26041;&amp;#20171;&amp;#32461;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此, 基本库就算是差不多全了.&lt;/p&gt;
&lt;h3 id=&quot;django&quot;&gt;&lt;a href=&quot;#django&quot; class=&quot;headerlink&quot; title=&quot;django&quot;&gt;&lt;/a&gt;django&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;django-admin startproject PROJECT_NAME&amp;#10;# &amp;#21019;&amp;#24314;&amp;#26032;&amp;#39033;&amp;#30446;&amp;#10;django-admin startapp APP_NAME&amp;#10;# &amp;#21019;&amp;#24314;&amp;#26032; app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改 project 里的 &lt;code&gt;settings.py&lt;/code&gt;, 替换 database 的配置(根据你是用的 db 库修改), 添加 APP_NAME 到 INSTALLED_APPS 里.&lt;/p&gt;
&lt;h3 id=&quot;u91C7_u96C6APP&quot;&gt;&lt;a href=&quot;#u91C7_u96C6APP&quot; class=&quot;headerlink&quot; title=&quot;采集APP&quot;&gt;&lt;/a&gt;采集APP&lt;/h3&gt;&lt;p&gt;根据自己的情况修改 APP 的 &lt;code&gt;models.py&lt;/code&gt; 创建表结构.&lt;/p&gt;
&lt;p&gt;同步数据库:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python manage.py migrate&amp;#10;# &amp;#21516;&amp;#27493; django &amp;#30340;&amp;#25968;&amp;#25454;&amp;#24211;&amp;#10;python manage.py makemigrations APP_NAME&amp;#10;# APP &amp;#34920;&amp;#32467;&amp;#26500;&amp;#36801;&amp;#31227;&amp;#10;python manage.py sqlmigrate crawlers 000x&amp;#10;# APP SQL &amp;#36801;&amp;#31227;(&amp;#21487;&amp;#20197;&amp;#39044;&amp;#35272;&amp;#19979; SQL). &amp;#36825;&amp;#37324;&amp;#30340;000x &amp;#26159;&amp;#26681;&amp;#25454;&amp;#19978;&amp;#19968;&amp;#27493; makemigrations &amp;#24471;&amp;#21040;&amp;#30340; version &amp;#32534;&amp;#30721;, &amp;#19968;&amp;#33268;&amp;#21363;&amp;#21487;&amp;#10;python manage.py migrate&amp;#10;# &amp;#21516;&amp;#27493;&amp;#25968;&amp;#25454;&amp;#24211;, &amp;#27491;&amp;#24335;&amp;#29983;&amp;#25928;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外, 记得创建一个 admin user 并且把 admin 的静态文件转移过来~ (需要在 project 的 settings.py 中设定&lt;code&gt;STATIC_ROOT&lt;/code&gt;路径)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py collectstatic&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过这个就可以登录 django 的 admin 后台了~&lt;/p&gt;
&lt;h3 id=&quot;u91C7_u96C6_u811A_u672C&quot;&gt;&lt;a href=&quot;#u91C7_u96C6_u811A_u672C&quot; class=&quot;headerlink&quot; title=&quot;采集脚本&quot;&gt;&lt;/a&gt;采集脚本&lt;/h3&gt;&lt;p&gt;接下来就是数据库的填充了~ 这里就得根据自己的情况来写爬虫喽~&lt;/p&gt;
&lt;h3 id=&quot;supervisor__u81EA_u542F_u52A8&quot;&gt;&lt;a href=&quot;#supervisor__u81EA_u542F_u52A8&quot; class=&quot;headerlink&quot; title=&quot;supervisor 自启动&quot;&gt;&lt;/a&gt;supervisor 自启动&lt;/h3&gt;&lt;p&gt;supervisor 是很好的系统任务管理工具. 利用它可以更方便的管理我们的 django 以及其他的项目, 如果有的话.&lt;/p&gt;
&lt;p&gt;上面安装支持库中已经成功的为 python 3 安装了 supervisor, 所以这里我们就可以直接进入到配置环节了:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[supervisord]&amp;#10;[program:pragram_name]&amp;#10;directory=path_to_django_project&amp;#10;command=python manage.py runserver&amp;#10;autorestart=true&amp;#10;autostart=true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;DONE! 保存这一配置文件到你的任意目录中, 只要记得启动&lt;code&gt;supervisord&lt;/code&gt;的时候利用&lt;code&gt;-c&lt;/code&gt;指定到这一配置文件即可.&lt;/p&gt;
&lt;h3 id=&quot;nginx__u6620_u5C04&quot;&gt;&lt;a href=&quot;#nginx__u6620_u5C04&quot; class=&quot;headerlink&quot; title=&quot;nginx 映射&quot;&gt;&lt;/a&gt;nginx 映射&lt;/h3&gt;&lt;p&gt;为了让我们能够在局域网的其他机器上直接访问我们的 django, 我们需要把 nginx 映射到我们的 django 去~&lt;/p&gt;
&lt;p&gt;最简单的方法就是, 利用&lt;code&gt;proxy_pass http://127.0.0.1:8000;&lt;/code&gt;将80端口直接导向我们的 django server 所在.&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;server&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;listen&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;server_name&lt;/span&gt; localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;access_log&lt;/span&gt;  /var/log/nginx/access.log;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;error_log&lt;/span&gt; /var/log/nginx/error.log &lt;span class=&quot;built_in&quot;&gt;debug&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;rewrite_log&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;on&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;location&lt;/span&gt; / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;url&quot;&gt;http://127.0.0.1:8000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;proxy_redirect&lt;/span&gt;  &lt;span class=&quot;built_in&quot;&gt;off&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;title&quot;&gt;proxy_set_header&lt;/span&gt; Host &lt;span class=&quot;variable&quot;&gt;$host&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;title&quot;&gt;proxy_set_header&lt;/span&gt; X-Real-IP &lt;span class=&quot;variable&quot;&gt;$remote_addr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;title&quot;&gt;proxy_set_header&lt;/span&gt; X-Forwarded-For &lt;span class=&quot;variable&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;location&lt;/span&gt; /static/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;title&quot;&gt;root&lt;/span&gt; path_to_project;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 如此, 通过 &lt;code&gt;supervisord -c path_to_supervisor_conf&lt;/code&gt; 就可以启动你的 django 了~ 稍等片刻, 你就可以通过访问你的树莓派 ip 看到成功搭建的 django 欢迎页面了~&lt;/p&gt;
&lt;p&gt;PS. 如果不喜欢手动加载 supervisor 配置, 也可以把配置文件放到 supervisor 的系统配置目录中, 然后就可以通过&lt;code&gt;supervisord  start supervisor_program_name&lt;/code&gt;来启动了~&lt;/p&gt;
&lt;p&gt;恩, 就到这里了~ 下一步就是在我的树莓派上搭建一个每天任务跟踪的服务了~ 这个还需要好好想想~ ^_^&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003&quot;&gt;&lt;a href=&quot;#u53C2_u8003&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.8/intro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;django Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/PyMySQL/mysqlclient-python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL database connector for Python (with Python 3 support)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4830856/is-it-possible-to-use-pip-to-install-a-package-from-a-private-github-repository&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip install from git repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7475223/mysql-config-not-found-when-installing-mysqldb-python-interface&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mysql_config not found when installing mysqldb python interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>A simple python script to analyse all ips in nginx access log</title><loc>http://taoalpha.me/blog/2015/06/20/tech-python-script-analyse-ips-in-nginx-access-log/</loc><publish>2015-06-20T05:00:00.000Z</publish><summary>&lt;p&gt;I wrote this script and this post several months ago on my &lt;a href=&quot;http://callmet.zzgary.info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;previous blog&lt;/a&gt;, mainly used during my application. And I think it is pretty useful. So I move it in and hope it can help you in some way.&lt;/p&gt;
&lt;p&gt;=============The Origin==============&lt;/p&gt;
&lt;p&gt;As time gets closer to the March, I feel more and more nervous… And since most of HCI programs I submitted require you submit your portfolio website, I want to keep watching my nginx access log and get a summary about where all the accesses come from. So I wrote a simple python script to get all the ips from the nginx-access.log and analyse the ip with the json API provided by ipinfo.io.&lt;/p&gt;
&lt;p&gt;Here is the script, anyone who want to get more information about your access ip and also don’t want or don’t know how to use the google analysis maybe can give a try:&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/fe3934f7ffc7c095ab40.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;before you run this script, you should create two empty output files: ipdetails.txt, errorips.txt in this example. you can change the filename if you want, just remember to change the name in script too.&lt;/p&gt;
&lt;p&gt;Hope this script can help you! Thanks. Have a nice day!&lt;/p&gt;
&lt;p&gt;=================PS==================&lt;/p&gt;
&lt;p&gt;You can find some spamips from the internet, and almost most of them are pretty large, maybe 30-50 megabytes~ And according to my experience, I think it would be alright if you don’t import the spamips file~&lt;/p&gt;
</summary></url><url><title>preventDefault and stopPropagation in JS</title><loc>http://taoalpha.me/blog/2015/11/19/tech-preventDefault-and-stopPropagation-in-JS/</loc><publish>2015-11-19T09:00:00.000Z</publish><summary>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;When we deal with event on DOM, jQuery always very helpful. But javascript has this mechanic called event bubbling is quite annoying. So be careful when you deal with them.&lt;/p&gt;
&lt;h2 id=&quot;Event_Bubbling&quot;&gt;&lt;a href=&quot;#Event_Bubbling&quot; class=&quot;headerlink&quot; title=&quot;Event Bubbling&quot;&gt;&lt;/a&gt;Event Bubbling&lt;/h2&gt;&lt;p&gt;We all know DOM elements can be nested inside each other which is great for structure. But it causes some troubles when you want to deal with the event on the children and parent separately. Because if we do nothing with that, the event like ‘click’ happened on children will trigger the same event for parents too, which is event bubbling.&lt;/p&gt;
&lt;h2 id=&quot;Event_Capturing&quot;&gt;&lt;a href=&quot;#Event_Capturing&quot; class=&quot;headerlink&quot; title=&quot;Event Capturing&quot;&gt;&lt;/a&gt;Event Capturing&lt;/h2&gt;&lt;p&gt;All browsers except IE&amp;lt;9, there are two stages of event processing, one is event bubbling, another is event capturing. Opposite with event bubbling, the event capturing will go down along the html structure and trigger the corresponding event. And by default: All methods of event handling ignore the caputiring phase. Using addEventListener with last argument true is only the way to catch the event at capturing.&lt;/p&gt;
&lt;h2 id=&quot;How_to_deal_with_them&quot;&gt;&lt;a href=&quot;#How_to_deal_with_them&quot; class=&quot;headerlink&quot; title=&quot;How to deal with them&quot;&gt;&lt;/a&gt;How to deal with them&lt;/h2&gt;&lt;p&gt;In JavaScript, we have two handy fucntions called stopPropagation() and preventDefault() can help us deal with the event bubbling and event capturing. Former one can stop the event bubbling so click or other events happened on children won’t affect parents events. Latter one can prevent default event handlers defined in this element so you can rewrite the event handlers by youself.&lt;/p&gt;
&lt;h2 id=&quot;When_you_need_deal_with_them&quot;&gt;&lt;a href=&quot;#When_you_need_deal_with_them&quot; class=&quot;headerlink&quot; title=&quot;When you need deal with them&quot;&gt;&lt;/a&gt;When you need deal with them&lt;/h2&gt;&lt;p&gt;When you need deal with event bubbling? It depends, but most times, you will deal with that when you want to assign events on an area instead of a specific elements.&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Event bubbling and capturing are really cool stuffs and let you do some fantastic things. But also they are pretty annoying that may cause a lot troubles when you want to detect the bugs in your code…&lt;/p&gt;
</summary></url><url><title>First CLI tool with NodeJS</title><loc>http://taoalpha.me/blog/2015/12/07/tech-my-first-cli-tool-with-nodejs/</loc><publish>2015-12-07T06:00:00.000Z</publish><summary>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Briefly speaking, NodeJS is like using JS on back-end stuff. Its really cooooooool and exctied for every JS developer !!!&lt;/p&gt;
&lt;p&gt;I just started to learn Node, and in order to learn it better, I made a small cli tool for myself, it’s quit helpful actually.&lt;/p&gt;
&lt;h2 id=&quot;Meet_Baby&quot;&gt;&lt;a href=&quot;#Meet_Baby&quot; class=&quot;headerlink&quot; title=&quot;Meet Baby&quot;&gt;&lt;/a&gt;Meet Baby&lt;/h2&gt;&lt;p&gt;I named this tool as ‘baby’ with a lot of reasons… :)&lt;/p&gt;
&lt;p&gt;What it can do ? It can do a lot and also the power of it is increasing everyday :) since I always put my repeatly work together and build a command for that :)&lt;/p&gt;
&lt;p&gt;Here list a few of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;edit&lt;/strong&gt;: you can set your favorite editor in the config file, and then you can use &lt;code&gt;baby e file_name&lt;/code&gt; to edit it, why you want to do that? why not just use my favorite editor? Because baby can monitor your changes!!! And if you enable the ‘global summary’, it can record all you modifications and tell you how many changes you made in total :);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ssh&lt;/strong&gt;: this is just for myself, since I always need to log in my aws server or digital ocean server with a pem file a secret settings, so I wrote this and made it simple(with short names);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt;: I love npm! And also I use yeoman to build my webapp workflow, one thing is that as time goes on, you will find that all you modules will become outdated or not the latest version, so I used a script to loop over all outdated packages and updated them to wanted version or to latest version;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tool&lt;/strong&gt;: this is a collection of small commands, like the only one I have now is print the structure of the files under the current path;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;todo&lt;/strong&gt;: I always made a todo app when I first learn some new languages or frameworks, so I did again for node, you can add, edit, mark as done or mark as undone and also clean or empty the tasks list, next I will make a webpage for it using angularJS since I am learning that now :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;serve&lt;/strong&gt;: will create a server with current path and look for the index.html file by default;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cdn&lt;/strong&gt;: since I am a web developer, so I always need to search the JS modules or plugins, so I download all the names and links from the cdnjs, and build a trie tree for the names, now I can just use &lt;code&gt;baby cdn name&lt;/code&gt; to show the matches and links;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;….&lt;/p&gt;
&lt;p&gt;There are and will be a lot new features added to my baby, you can check it out from &lt;a href=&quot;https://github.com/taoalpha/baby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;my github - baby&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Bye&quot;&gt;&lt;a href=&quot;#Bye&quot; class=&quot;headerlink&quot; title=&quot;Bye&quot;&gt;&lt;/a&gt;Bye&lt;/h2&gt;&lt;p&gt;Next post I will talk about how to make a cli tool for yourself with nodejs. :)&lt;/p&gt;
</summary></url><url><title>JS实现中文日期的方法</title><loc>http://taoalpha.me/blog/2015/05/12/tech-js-date-to-chinese/</loc><publish>2015-05-12T09:00:00.000Z</publish><summary>&lt;p&gt;这是一篇草稿转正的文章, 一直忘记发布了.&lt;/p&gt;
&lt;p&gt;当时为了让blog左侧随机图不至于太空, 所以加入了天气预报的彩蛋. 目前还没做太复杂的地理位置判定, 所以按照我所在位置给予的北京天气, 之后会考虑修改成地理位置相关的天气.&lt;/p&gt;
&lt;p&gt;因为要显示天气和日期, 英文的比较好说, 只需要用默认的&lt;code&gt;toDateString()&lt;/code&gt;函数转换即可. 中文的则需要做一个简单的转换, 下述是我所使用的方法, 其实就是把日期数字和中文汉字对等起来而已~&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; day = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(dt).getDate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; month = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(dt).getMonth()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Dcharacters = [&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;一&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;二&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;三&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;四&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;五&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;六&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;七&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;八&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;九&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;十&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Mcharacters = [&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;十&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;二十&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;三十&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 汉字对应的版本, 因为日月转换规则一致, 所以可以共用的~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设计的规则是分成十位和个位进行分别转换, 所以因为考虑到都有没有(十位/个位)的情况, 首个元素都给予的是空值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ZdataM = Mcharacters[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(month/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)]+Dcharacters[month % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 月份的转换, 十位+个位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ZdataD = Mcharacters[&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(day/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)]+Dcharacters[day % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 日子转换: 十位+个位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;没有做全部日期测试, 所以如果您发现任何问题请及时告诉我哈~&lt;/p&gt;
</summary></url><url><title>Jekyll 筛选 tag 的实现</title><loc>http://taoalpha.me/blog/2015/05/07/tech-jekyll-tips-2/</loc><publish>2015-05-07T11:00:00.000Z</publish><summary>&lt;p&gt;对于blog而言, 利用categories和tags的筛选是非常方便的, 而在jekyll部署的静态博客中也能轻松的实现这一点的. 本文(也即本博客)中效果主要模仿&lt;a href=&quot;http://jianshu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;u5C55_u73B0categories_u4EE5_u53CAtags&quot;&gt;&lt;a href=&quot;#u5C55_u73B0categories_u4EE5_u53CAtags&quot; class=&quot;headerlink&quot; title=&quot;展现categories以及tags&quot;&gt;&lt;/a&gt;展现categories以及tags&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先我们需要设定了tags的post… 这样你的&lt;code&gt;site.tags&lt;/code&gt;才会有数据~ 具体的tags设定方法可以参照 &lt;a href=&quot;/blog/2015/05/07/tech-jekyll-tips-1/&quot;&gt;心得(1)&lt;/a&gt;&lt;br&gt;接着就是如何展现tags数据了~ 以本文为例, 我总计有三个category, 因为要实现不同category下的tag只出现在自己的category页面下方, 所以在展现tags的时候需要做一个category的判定.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% assign tags = &amp;#34;all&amp;#34; %&amp;#125;&amp;#10;// &amp;#35774;&amp;#32622;&amp;#21464;&amp;#37327;, &amp;#36825;&amp;#37324;&amp;#29992;all&amp;#26469;&amp;#34920;&amp;#31034;&amp;#40664;&amp;#35748;&amp;#30340;&amp;#31532;&amp;#19968;&amp;#20010;tag, &amp;#20195;&amp;#34920;&amp;#20840;&amp;#37096;tags&amp;#30340;&amp;#24773;&amp;#20917;&amp;#10;&amp;#123;% for post in site.posts %&amp;#125;&amp;#10;    // &amp;#21462;&amp;#25152;&amp;#26377;&amp;#30340;post&amp;#20986;&amp;#26469;&amp;#36880;&amp;#19968;&amp;#21028;&amp;#23450;, &amp;#36825;&amp;#37324;&amp;#26410;&amp;#26469;post&amp;#24456;&amp;#22810;&amp;#30340;&amp;#35805;, &amp;#20250;&amp;#36827;&amp;#34892;&amp;#25968;&amp;#37327;&amp;#38480;&amp;#21046;, &amp;#30446;&amp;#21069;&amp;#25968;&amp;#37327;&amp;#22826;&amp;#23569;, &amp;#23601;&amp;#31961;&amp;#30528;&amp;#29992;&amp;#21862;&amp;#10;    &amp;#123;% for tag in post.tags %&amp;#125;&amp;#10;        // &amp;#21462;post&amp;#33258;&amp;#24049;&amp;#30340;tags&amp;#20986;&amp;#26469;, &amp;#36880;&amp;#19968;&amp;#36827;&amp;#34892;&amp;#21028;&amp;#23450;&amp;#26159;&amp;#21542;&amp;#24050;&amp;#32463;&amp;#22312;tags&amp;#25968;&amp;#32452;&amp;#21015;&amp;#34920;&amp;#20013;&amp;#20102;&amp;#10;        &amp;#123;% unless tags contains tag %&amp;#125;&amp;#10;            // &amp;#20026;&amp;#20102;&amp;#21435;&amp;#25481;&amp;#37325;&amp;#22797;&amp;#30340;tag~&amp;#10;            &amp;#123;% capture tags %&amp;#125;&amp;#123;&amp;#123; tags &amp;#125;&amp;#125;|&amp;#123;&amp;#123; tag &amp;#125;&amp;#125;&amp;#123;% endcapture %&amp;#125;&amp;#10;            // &amp;#25226;&amp;#25152;&amp;#26377;&amp;#19981;&amp;#22312;tags&amp;#25968;&amp;#32452;&amp;#20013;&amp;#30340;tag&amp;#37117;&amp;#21152;&amp;#21040;tags&amp;#20013;&amp;#10;        &amp;#123;% endunless %&amp;#125;&amp;#10;    &amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#123;% assign alltags = tags | split: &amp;#39;|&amp;#39; %&amp;#125;&amp;#10;// &amp;#29983;&amp;#25104;&amp;#19968;&amp;#20010;&amp;#26032;&amp;#30340;&amp;#25968;&amp;#32452;, &amp;#20284;&amp;#20046;&amp;#26412;&amp;#36523;liquid&amp;#20013;&amp;#27809;&amp;#26377;&amp;#30452;&amp;#25509;append&amp;#25968;&amp;#32452;&amp;#30340;&amp;#26041;&amp;#27861;... &amp;#30475;&amp;#21040;&amp;#27492;&amp;#22788;&amp;#30340;&amp;#26379;&amp;#21451;&amp;#26377;&amp;#30693;&amp;#36947;&amp;#30340;&amp;#35831;&amp;#19981;&amp;#21533;&amp;#21578;&amp;#30693;~&amp;#10;&amp;#60;ul class=&amp;#34;tags&amp;#34;&amp;#62;&amp;#10;&amp;#123;% for tag in alltags %&amp;#125;&amp;#10;// &amp;#23637;&amp;#29616;tag&amp;#10;&amp;#60;a href=&amp;#34;javascript:;&amp;#34; data-rel=&amp;#34;&amp;#123;&amp;#123; tag &amp;#125;&amp;#125;&amp;#34; class=&amp;#34;filter tag &amp;#123;% if tag == &amp;#39;all&amp;#39;  %&amp;#125;active&amp;#123;% endif %&amp;#125;&amp;#34; &amp;#62;&amp;#123;&amp;#123; tag &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#10;// &amp;#36825;&amp;#37324;&amp;#30340;data-rel&amp;#26159;&amp;#20026;&amp;#20102;&amp;#31579;&amp;#36873;&amp;#20570;&amp;#30340;&amp;#20934;&amp;#22791;, &amp;#21518;&amp;#25991;&amp;#20250;&amp;#20171;&amp;#32461;&amp;#10;&amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#60;/ul&amp;#62;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此基本就实现了tags在特定category下的展现.&lt;/p&gt;
&lt;h2 id=&quot;u6839_u636Etag_u8FDB_u884C_u7B5B_u9009&quot;&gt;&lt;a href=&quot;#u6839_u636Etag_u8FDB_u884C_u7B5B_u9009&quot; class=&quot;headerlink&quot; title=&quot;根据tag进行筛选&quot;&gt;&lt;/a&gt;根据tag进行筛选&lt;/h2&gt;&lt;p&gt;有了tags之后, 就可以进一步做筛选了. 基本的思路是在不考虑分页的情况下, 筛选基本就是针对当前展现出来的文章列表做对应的展现隐藏控制.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用&lt;code&gt;data-rel&lt;/code&gt;(随意指定data后面的名称即可)存储要筛选的tag, 如上;&lt;br&gt;在post中加上tags的数据标签:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#60;li class=&amp;#34;post&amp;#34; data-filter=&amp;#34;&amp;#123;&amp;#123; post.tags|join:&amp;#39; &amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#10;// &amp;#22240;&amp;#20026;post.tags&amp;#26412;&amp;#36523;&amp;#23601;&amp;#26159;&amp;#19968;&amp;#20010;array&amp;#31867;&amp;#22411;, &amp;#25152;&amp;#20197;&amp;#36825;&amp;#37324;&amp;#30452;&amp;#25509;&amp;#29992;&amp;#31354;&amp;#26684;&amp;#38142;&amp;#25509;&amp;#22635;&amp;#20837;&amp;#19968;&amp;#20010;`data-filter`&amp;#20013;&amp;#21363;&amp;#21487;;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;利用js实现点击筛选的控制:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;.filter&quot;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 由tag点击事件出发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !$&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.hasClass(&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;) ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 排除当前已选tag, 新tag标记active&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&lt;span class=&quot;string&quot;&gt;&quot;.filter&quot;&lt;/span&gt;).removeClass(&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addClass(&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// set the active tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $filter = $&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.data(&lt;span class=&quot;string&quot;&gt;&quot;rel&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获得要筛选的tag名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $filter == &lt;span class=&quot;string&quot;&gt;'all'&lt;/span&gt; ? &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 对all做单独判断, 基本就是全展现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.post&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .not(&lt;span class=&quot;string&quot;&gt;&quot;:visible&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .fadeIn() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : &lt;span class=&quot;comment&quot;&gt;// 否则的话, 利用filter进行tag匹配的判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.post&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .fadeOut(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 判断post中是否包含此tag, 这里用array来判断而不是直接文本判断就是为了防止出现类似tag和tags这种局部包含的误判&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).data(&lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;).indexOf($filter)!=-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .fadeIn(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;comment&quot;&gt;// endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// endon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里都用的是fadeIn,fadeOut的动效, 你当然可以修改成自己的~ 这里的实现主要参照了&lt;a href=&quot;http://www.jqueryrain.com/?http://www.picssel.com/demos/fboxfilteredgallery.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery filter with fancybox&lt;/a&gt;, 不过原理其实很简单的~&lt;/p&gt;
&lt;h2 id=&quot;tags_u9650_u5236&quot;&gt;&lt;a href=&quot;#tags_u9650_u5236&quot; class=&quot;headerlink&quot; title=&quot;tags限制&quot;&gt;&lt;/a&gt;tags限制&lt;/h2&gt;&lt;p&gt;随着post的增多, 你会发现自己的tags也越来越庞大, 如果全部展现的话, 一是太多, 二呢, 展现也不方便, 毕竟我目前的css样式只考虑了两行的情况, 所以呢, 还是需要对tags的展现做一些限制的.&lt;/p&gt;
&lt;p&gt;有两种思路:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;利用jekyll的plugin直接在生成层控制, 每次随机出一些tag就行了;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用js在展现层控制, 所有tag都生成出来, 但是由js控制随机展现一部分;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终我用的还是第二种思路, 第一种思路主要缺点是在编译生成的时候控制的话, 只有每次重新编译才会重新生成, 和我希望的访问随机需求不符合.&lt;/p&gt;
&lt;p&gt;实现方法也很容易, 基本就是利用Math.random()来生成随机数即可.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;randomTags&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; originArray = $(&lt;span class=&quot;string&quot;&gt;'ul.tags'&lt;/span&gt;).find(&lt;span class=&quot;string&quot;&gt;'a.tag'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    originArray.eq(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 确保 all 每次都展现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*originArray.length)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 没有做虑重处理, 所以很可能展现出来的tag没有10个; 想做的话也容易, 循环过程中加个是否显示了的判断即可, 这里就不做了~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        originArray.eq(index).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上, 对于jekyll的tags和categories的探索就先这样了~ 以后有什么更加有趣的想法或者发现了再补充~&lt;/p&gt;
&lt;p&gt;See ya.&lt;/p&gt;
</summary></url><url><title>Jekyll 简介</title><loc>http://taoalpha.me/blog/2015/05/07/tech-jekyll-tips-1/</loc><publish>2015-05-07T16:00:00.000Z</publish><summary>&lt;h2 id=&quot;u73AF_u5883_u90E8_u7F72&quot;&gt;&lt;a href=&quot;#u73AF_u5883_u90E8_u7F72&quot; class=&quot;headerlink&quot; title=&quot;环境部署&quot;&gt;&lt;/a&gt;环境部署&lt;/h2&gt;&lt;p&gt; Jekyll作为静态博客, 以简单易部署而出名, 尤其是随着github对于静态博客的支持, 更是发展势头极为良好, 很多人都从大而繁杂的wordpress转移到了小而轻巧的Jekyll, 也有很多人选择了另一款小而精的静态博客:&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;, 至于他们之间的好坏, 孰优孰劣, 可以参考&lt;a href=&quot;http://www.zhihu.com/question/21981094&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎原文:arBox、Jekyll、Octopress、ghost、marboo、Hexo、Medium、Logdown、prose.io，这些博客程序有什么特点？&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; 这里就简单介绍下github下如何部署Jekyll.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先, 你得有个github帐号…(废话)… 然后你需要新建一个yourname.github.com(或者io结尾也可以)的repo, 并且在设置中开启github pages;&lt;/li&gt;
&lt;li&gt;接下来就是组织Jekyll的文件结构了, 这部分推荐在本地环境中操作, 因为你可以在本地的jekyll环境下随时测试预览调整, 不用每次都上传到github上在线查看; 一般来说, 你不需要完全从头进行的, 完全可以在&lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/Sites&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll的示例网站&lt;/a&gt;中寻找自己喜欢的主题样式, 然后clone到本地后, 在其基础上修改完成, 比如我现在这个就是在我自己的设定基础上融合了&lt;a href=&quot;http://beiyuu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;beiyuu&lt;/a&gt;的一些结构和设置, 然后参照&lt;a href=&quot;http://www.jianshu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;修改的;&lt;/li&gt;
&lt;li&gt;Jekyll是基于Ruby的, 所以如果想要搭建本地环境, 请确保你已经安装了Ruby~ 有了Ruby后, 你就可以参照&lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网的安装指南&lt;/a&gt;一步步操作了;&lt;/li&gt;
&lt;li&gt;在本地测试通过后, 你只需要push到github中, github就会自动帮你编译, 你就可以通过你的github page网址进行访问了;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u6587_u4EF6_u7ED3_u6784_u5173_u7CFB&quot;&gt;&lt;a href=&quot;#u6587_u4EF6_u7ED3_u6784_u5173_u7CFB&quot; class=&quot;headerlink&quot; title=&quot;文件结构关系&quot;&gt;&lt;/a&gt;文件结构关系&lt;/h2&gt;&lt;p&gt; Jekyll的文档结构是非常简单的, Jekyll是基于Ruby的, 所以如果想要搭建本地环境, 请确保你已经安装了Ruby~ 有了Ruby后, 你就可以参照&lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网的安装指南&lt;/a&gt;一步步操作了;&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _drafts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   ├── begin-with-the-crazy-ideas.textile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   └── on-simplicity-in-technology.markdown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _includes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   ├── footer.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   └── header.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _layouts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   ├── default.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   └── post.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   └── 2009-04-26-barcamp-boston-4-roundup.textile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|   └── members.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .jekyll-metadata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── index.html   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// from Jekyll documentation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如上, 一个完整而又基础的jekyll文档结构基本就是这样了. 其中&lt;code&gt;_config.yml&lt;/code&gt;是全局的配置文件, 你可以在这里配置你的固定链接, 插件, 高亮以及设定很多的默认值等等;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_drafts和&lt;/code&gt;_posts&lt;code&gt;文件夹都是博文所在地, 区别在于&lt;/code&gt;_drafts&lt;code&gt;是存放草稿的地方, 除非在测试环境下加上&lt;/code&gt;–watch`的参数是不会出现在blog中的;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_layouts&lt;/code&gt;以及&lt;code&gt;_includes&lt;/code&gt;分别是模板以及复用代码块所在, 基本上重复性代码都可以视情况放在这两个当中, 整页性的复用(模板)就放在&lt;code&gt;_layouts&lt;/code&gt;中, 块结构的复用则放在&lt;code&gt;_includes&lt;/code&gt;中;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_site&lt;/code&gt;基本不用管, 因为它是jekyll编译后的产物, 也基本就是你所看到的网站的正常版本;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_data&lt;/code&gt;, 这个涉及比较高端的用法… 我目前都没有开始接触, 所以放在以后的系列中介绍吧;&lt;/li&gt;
&lt;li&gt;index.html, 作为blog的首页;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的事情是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;和正常的网站文件结构类似, jekyll对文件夹的解析也是类似的, 我们可以在根目录下随意的建立文件夹, 从而创造二级路径;&lt;/li&gt;
&lt;li&gt;如果你像我一样把blog整个放到二级路径下, 建立一个独立的首页的话, 请注意记得在&lt;code&gt;_config.yml&lt;/code&gt;中配好你的post页面地址(如果你希望所有的post页面都在你的&lt;code&gt;yoursite/blog/your-post&lt;/code&gt;的话), 且把&lt;code&gt;_posts&lt;/code&gt;转移到blog文件夹中, 但是诸如&lt;code&gt;_layouts&lt;/code&gt;等则不需要调整;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Tags__u4EE5_u53CA_Categories&quot;&gt;&lt;a href=&quot;#Tags__u4EE5_u53CA_Categories&quot; class=&quot;headerlink&quot; title=&quot;Tags 以及 Categories&quot;&gt;&lt;/a&gt;Tags 以及 Categories&lt;/h2&gt;&lt;p&gt; 作为blog, 即便是简单的静态博客, 如果没有category和tag系统的, 也绝对不能算是一个好的博客系统,jekyll当然是一个好的博客系统啦~&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Categories:&lt;/strong&gt; Jekyll的category关键字是内置的, 只需要在post的顶部定义号对应的category关键字, 多个的话用array的方式定义即可, 比如category: [cat1,cat2], 而在liquid语法中, 则完全可以通过 &lt;code&gt;site.categories.cat1&lt;/code&gt; 来访问对应的分类;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tags:&lt;/strong&gt; 基本和categories一样, 关键字是tags, 同样可以支持多个tag, 一样使用&lt;code&gt;site.tags.tagname&lt;/code&gt;来访问; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Liquid_u8BED_u6CD5&quot;&gt;&lt;a href=&quot;#Liquid_u8BED_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;Liquid语法&quot;&gt;&lt;/a&gt;Liquid语法&lt;/h2&gt;&lt;p&gt; Liquid Template Language是一种非常常用的模板语言, 它的语法很有特点, 粗糙理解的话, 就是一种简单的替换语法, 识别特定的结构和模式, 做特定的行为.&lt;/p&gt;
&lt;p&gt; Liquid 来自于shopify, 其代码也是由&lt;a href=&quot;https://github.com/Shopify/liquid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shopify在github上维护&lt;/a&gt;的, 如果想要详细了解其中的语法和用法, 以及Liquid目前的广泛用途, 都可以前往&lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;其github上的wiki&lt;/a&gt;查看.&lt;/p&gt;
&lt;p&gt; 一些常用的语法:&lt;br&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if : &amp;#123;% if statement %&amp;#125; &amp;#123;% elsif %&amp;#125; &amp;#123;% endif %&amp;#125;&amp;#10;for : &amp;#123;% for statement %&amp;#125; &amp;#123;% endfor %&amp;#125;&amp;#10;unless : &amp;#123;% unless statement %&amp;#125; &amp;#123;% endunless %&amp;#125;&amp;#10;assign : &amp;#123;% assign statement %&amp;#125; (&amp;#36171;&amp;#20540;)&amp;#10;capture : &amp;#123;% capture %&amp;#125; &amp;#123;% endcapture %&amp;#125; (&amp;#25429;&amp;#33719;&amp;#36171;&amp;#20540;)&amp;#10;case : &amp;#123;% case condition %&amp;#125; &amp;#123;% when 1 %&amp;#125; &amp;#123;% when 2 or 3 %&amp;#125; &amp;#123;% else %&amp;#125; &amp;#123;% endcase %&amp;#125;&amp;#10;comment : &amp;#123;% comment %&amp;#125; &amp;#123;% endcomment %&amp;#125;&amp;#10;raw : &amp;#123;% raw %&amp;#125; &amp;#20197;&amp;#21450; endraw&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 常用的管道用法:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#21464;&amp;#37327;&amp;#24341;&amp;#29992;&amp;#31526;&amp;#21495; : &amp;#123;&amp;#123; variable_name &amp;#125;&amp;#125;&amp;#10;&amp;#22823;|&amp;#23567;|&amp;#39318;&amp;#23383;&amp;#27597;&amp;#22823;&amp;#20889; : &amp;#123;&amp;#123; v_name | upcase | downcase | capitalize &amp;#125;&amp;#125;&amp;#10;&amp;#25490;&amp;#24207;|&amp;#36830;&amp;#25509;|&amp;#20999;&amp;#20998;|&amp;#26367;&amp;#25442; : &amp;#123;&amp;#123; v_name | sort | join:&amp;#34;join-symbol&amp;#34; | split: &amp;#34;split-symbol&amp;#34; | replace: &amp;#34;replace-char&amp;#34; &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</summary></url><url><title>Jekyll 添加 tag 专属页面</title><loc>http://taoalpha.me/blog/2015/06/01/tech-jekyll-tag-page/</loc><publish>2015-06-01T05:00:00.000Z</publish><summary>&lt;h2 id=&quot;Tag_u7684_u8FD0_u7528&quot;&gt;&lt;a href=&quot;#Tag_u7684_u8FD0_u7528&quot; class=&quot;headerlink&quot; title=&quot;Tag的运用&quot;&gt;&lt;/a&gt;Tag的运用&lt;/h2&gt;&lt;p&gt;Tag可以算是blog的标配了, 借用tag我们才能够让blog更好的归档, 既丰富了博客的内容体系, 也更便于筛选.而jekyll默认虽然给了tag的域, 但是却并不会自动开启tag的专属页面, 这个页面还需要我们自己来创建的. 建立tag专属页面的方法也有几种, 考虑到很多人都用github page作为自己jekyll的博客, 那么这里就按照有无插件辅助来区分以下方法吧(github page不支持插件~ 想要了解&lt;a href=&quot;/blog/2015/05/29/tech-use-jekyll-plugin-with-github-page/&quot;&gt;如何在github page中使用jekyll插件&lt;/a&gt;?)&lt;/p&gt;
&lt;h2 id=&quot;u65E0_u63D2_u4EF6_u5B9E_u73B0_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u65E0_u63D2_u4EF6_u5B9E_u73B0_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;无插件实现方法&quot;&gt;&lt;/a&gt;无插件实现方法&lt;/h2&gt;&lt;p&gt;如果不使用插件的话, 其实基本思路就和之前不使用插件建立&lt;a href=&quot;/blog/tech&quot;&gt;tech&lt;/a&gt;, &lt;a href=&quot;/blog/dandp&quot;&gt;dandp&lt;/a&gt;两个分类页是一样的, 通过创建对应的tagpage template, 以及对应的tag单页引用相应的模板即可.&lt;/p&gt;
&lt;h3 id=&quot;u521B_u5EFAtagpage_template&quot;&gt;&lt;a href=&quot;#u521B_u5EFAtagpage_template&quot; class=&quot;headerlink&quot; title=&quot;创建tagpage template&quot;&gt;&lt;/a&gt;创建tagpage template&lt;/h3&gt;&lt;p&gt;首先我们需要根据具体的需求创建一个tag页面的模板, 以我自己的为例:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;---&amp;#10;layout: home_base&amp;#10;---&amp;#10;&amp;#10;&amp;#60;nav id=&amp;#34;bread&amp;#34;&amp;#62;&amp;#10;  &amp;#60;h2&amp;#62;&amp;#60;a href=&amp;#34;/blog&amp;#34;&amp;#62;All Posts&amp;#60;/a&amp;#62; &amp;#62;&amp;#62; Posts with tag: &amp;#123;&amp;#123; page.tag &amp;#125;&amp;#125;&amp;#60;/h2&amp;#62;&amp;#10;&amp;#60;/nav&amp;#62;&amp;#10;&amp;#123;% assign cposts = site.tags[page.tag] %&amp;#125;&amp;#10;&amp;#60;article&amp;#62;&amp;#10;  &amp;#60;ul class=&amp;#34;article-list&amp;#34;&amp;#62;&amp;#10;    &amp;#123;% for post in cposts %&amp;#125;&amp;#10;    ... &amp;#60;!-- &amp;#22635;&amp;#20805;&amp;#23637;&amp;#31034;&amp;#20869;&amp;#23481; --&amp;#62;&amp;#10;    &amp;#123;% endfor %&amp;#125;&amp;#10;  &amp;#60;/ul&amp;#62;&amp;#10;&amp;#60;/article&amp;#62;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述就创建了一个非常简单的tag单页模板.&lt;/p&gt;
&lt;h3 id=&quot;u521B_u5EFAtagpage__u5355_u9875&quot;&gt;&lt;a href=&quot;#u521B_u5EFAtagpage__u5355_u9875&quot; class=&quot;headerlink&quot; title=&quot;创建tagpage 单页&quot;&gt;&lt;/a&gt;创建tagpage 单页&lt;/h3&gt;&lt;p&gt;留意上述的模板代码, 你就会发现我们是通过&lt;code&gt;site.tags&lt;/code&gt;来筛选所有博文, 从而实现筛出特定tag的博文的目的的. 那么如果我们需要创建tag的专属页, 我们就需要在单页上指定tag, 所以单页的内容很简单:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;---&amp;#10;layout: tagpage&amp;#10;tag: jekyll&amp;#10;---&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此就创建了一个jekyll的tag单页, 那么访问路径设定呢? 有两种方法(都以&lt;code&gt;/tag/jekyll&lt;/code&gt;为例):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过新建文件夹tag, 然后在其中再新建jekyll文件夹, 在jekyll文件夹下创建index.html或者index.md文件, 填写上述代码即可;&lt;/li&gt;
&lt;li&gt;在根目录下创建jekyll.md文件, 然后在上述代码的基础上加上&lt;code&gt;permalink: /tag/jekyll&lt;/code&gt;即可;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此就算是实现了不用插件的情况下对特定tag创建的tag专属页了.&lt;/p&gt;
&lt;blockquote class=&quot;special update&quot; markdown=&quot;1&quot; data-flag=&quot;gotsomeupdateshere&quot;&gt;&lt;br&gt;## Update&lt;br&gt;&lt;br&gt;更新一种无插件创建tag页的方法: 思路是展现全部post在一个页面, 加上tag属性, 然后通过js借助url的parameter来实现过滤tag的功能;&lt;br&gt;&lt;br&gt;### 创建全部post的单页&lt;br&gt;&lt;br&gt;这一点基本和上述模板一致, 只需要将&lt;code&gt;site.tags.TAGNAME&lt;/code&gt;换成&lt;code&gt;site.posts&lt;/code&gt;就行, 然后将&lt;code&gt;post.tags&lt;/code&gt;数据写到对应的li的class或者&lt;code&gt;data-&lt;/code&gt;中. 这一点类似我之前&lt;a href=&quot;/blog/2015/05/07/tech-jekyll-tips-2/&quot;&gt;给目录页加tag筛选功能&lt;/a&gt;的做法. 只是控制部分转移到url的参数了.&lt;br&gt;&lt;br&gt;&lt;br&gt;### 筛选过滤&lt;br&gt;&lt;br&gt;接下来就是获取url参数以及控制筛选的过程了.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUrlParameter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sParam&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 默认你是通过&quot;xxxx?tag=xxx&quot;的结构传递tag的, 当然你可以根据具体的情况(比如#)修改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// location.search可以自动返回?及之后的字串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rParams= &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.search.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aParams = rParams.split(&lt;span class=&quot;string&quot;&gt;'&amp;amp;'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; aParams.length; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sParameterName = aParams[i].split(&lt;span class=&quot;string&quot;&gt;'='&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sParameterName[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == sParam) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sParameterName[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;获取后则是针对所有posts的一个遍历筛选了. 当然如果你前期模板建立的时候就按照tag把blog聚合成块的话, 那么此时筛选甚至可以做的更简单一些, 如下:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tag = getUrlParameter(&lt;span class=&quot;string&quot;&gt;'tag'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tag &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'tag-'&lt;/span&gt; + tag)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'tag-'&lt;/span&gt; + tag).style.display = &lt;span class=&quot;string&quot;&gt;'block'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'tagTitle'&lt;/span&gt;).innerHTML = tag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'tagTitle'&lt;/span&gt;).innerHTML = &lt;span class=&quot;string&quot;&gt;'Illegal Tag Query'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如上需要你模板定义是按照tag将博文提前聚合成块~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;Inspired by: &lt;a href=&quot;http://zhangwenli.com/blog/2014/05/18/jekyll-tag-searching/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wenli Zhang - Jekyll Tag Searching &lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;u63D2_u4EF6_u81EA_u52A8_u751F_u6210&quot;&gt;&lt;a href=&quot;#u63D2_u4EF6_u81EA_u52A8_u751F_u6210&quot; class=&quot;headerlink&quot; title=&quot;插件自动生成&quot;&gt;&lt;/a&gt;插件自动生成&lt;/h2&gt;&lt;p&gt;不用插件的方法的劣势显而易见. 而引入插件就是帮助我们客服这种缺点的. 既然我们不想要手动的去维护tag数据, 而是希望比较一劳永逸的每次build时自动创建. 那么如何操作呢? 其实也很简单:&lt;/p&gt;
&lt;p&gt;首先我们需要以下几个材料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_plugins&lt;/code&gt;文件夹, 位于根目录下;&lt;/li&gt;
&lt;li&gt;tagpage template文件, 同无插件法;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了上述基本材料, 我们就可以开始写我们的标签页生成插件了.&lt;/p&gt;
&lt;p&gt;jekyll是基于ruby的, 所以jekyll的插件也都是ruby来写的, 有兴趣的朋友可以自行学习以下, 没兴趣的朋友可以直接那我下面的代码用, 按照我备注的部分修改下即可:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module Jekyll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class TagIndex &amp;lt; Page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def initialize(site, base, dir, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @site = site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @base = base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @dir = dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @name = 'index.html'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.process(@name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.read_yaml(File.join(base, '_layouts'), 'tagpage.html')&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // _layouts和tagpage.html即是我们的tagpage template所在了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.data['tag'] = tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tag_title_prefix = site.config['tag_title_prefix'] || 'Posts Tagged &amp;amp;ldquo;'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tag_title_suffix = site.config['tag_title_suffix'] || '&amp;amp;rdquo;'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 写在单页里面title域的部分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.data['title'] = &quot;#&amp;#123;tag_title_prefix&amp;#125;#&amp;#123;tag&amp;#125;#&amp;#123;tag_title_suffix&amp;#125;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class TagGenerator &amp;lt; Generator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    safe true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def generate(site)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if site.layouts.key? 'tagpage'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 如果你用的模板名称不是&quot;tagpage.html&quot;的话, 记得修改这里的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dir = site.config['tag_dir'] || 'tag'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果你想要自己定义tag单页存储的路径, 或者说是访问路径中的tag前缀, 可以在config里面设定 tag_dir 的值, 或者是直接改这里也行~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        site.tags.keys.each do |tag|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          write_tag_index(site, File.join(dir, tag), tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def write_tag_index(site, dir, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index = TagIndex.new(site, site.source, dir, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index.render(site.layouts, site.site_payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index.write(site.dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      site.pages &amp;lt;&amp;lt; index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述的插件就可以帮助你自行给每一个tag都创建一个目录和对应的&lt;code&gt;index.html&lt;/code&gt;文件, 你就可以通过对应的路径访问了.&lt;/p&gt;
&lt;h2 id=&quot;u603B_u7ED3&quot;&gt;&lt;a href=&quot;#u603B_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;ruby的插件体系真的很赞啊! 哈哈 上述就是如何折腾出tag专属页的方法啦, 你可以通过点击我blog首页每条博文下方的标签就能查看效果了~&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://christianspecht.de/2014/10/25/separate-pages-per-tag-category-with-jekyll-without-plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Separate pages per tag/category with Jekyll (without plugins)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/charliepark/charliepark.github.com/blob/master/_plugins/tag_gen.rb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;charliepark tag_gen.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>优化 Jekyll 的相关文章列表</title><loc>http://taoalpha.me/blog/2015/06/06/tech-jekyll-related-posts-optimization/</loc><publish>2015-06-06T07:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;相关文章这个模块一直算是博客的一个标配组件之一, jekyll默认也是有着&lt;code&gt;site.related_posts&lt;/code&gt;这个函数的, 可以调用jekyll帮助你生成的相关博文列表. 不过其准确性和相关性都很让人不放心… 从其&lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/related_posts.rb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;来看, 在默认关闭&lt;code&gt;lsi&lt;/code&gt;的情况下, related_post产出的其实就是简单的最近文章列表… &lt;/p&gt;
&lt;p&gt;这样当然不可以! 于是, 本文就是我在针对&lt;code&gt;related_post&lt;/code&gt;这部分做了一些优化后的产物~ 请君品鉴 ^_^&lt;/p&gt;
&lt;h2 id=&quot;u65E0_u63D2_u4EF6_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u65E0_u63D2_u4EF6_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;无插件方法&quot;&gt;&lt;/a&gt;无插件方法&lt;/h2&gt;&lt;p&gt;首先当然是希望能在不使用插件的情况下实现, 于是就看到了&lt;a href=&quot;http://zhangwenli.com/blog/2014/07/15/jekyll-related-posts-without-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll Related Posts without Plugin - 羡辙杂俎&lt;/a&gt; 这个大神级妹子的博文~ 很有启发性嘛 基本上我要做的她都做过啦…哈哈&lt;/p&gt;
&lt;p&gt;不过我稍微简化了以下代码以及结构, 所以可能会更易懂一些喽~哈&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#21033;&amp;#29992;split &amp;#26469;&amp;#24418;&amp;#25104;&amp;#19968;&amp;#20010;&amp;#31354;&amp;#25968;&amp;#32452;, &amp;#36825;&amp;#37324;&amp;#20027;&amp;#35201;&amp;#26159;&amp;#25105;&amp;#19981;&amp;#30693;&amp;#36947;liquid&amp;#22914;&amp;#20309;&amp;#30452;&amp;#25509;&amp;#20889;array... &amp;#123;% endcomment %&amp;#125; &amp;#10;&amp;#123;% assign postsAfterFilter = &amp;#39;-&amp;#39; | split: &amp;#34;-&amp;#34; %&amp;#125;&amp;#10;&amp;#123;% for post in site.related_posts %&amp;#125;&amp;#10;  &amp;#123;% assign commonTagCount = 0 %&amp;#125;&amp;#10;  &amp;#123;% if post.title != page.title and post.series != page.series %&amp;#125;&amp;#10;    &amp;#123;% for tag in post.tags %&amp;#125; &amp;#10;      &amp;#123;% if page.tags contains tag %&amp;#125;&amp;#10;&amp;#10;        &amp;#123;% comment %&amp;#125; &amp;#32479;&amp;#35745;&amp;#20849;&amp;#21516;&amp;#30340;tag&amp;#30340;&amp;#25968;&amp;#30446;, &amp;#29992;&amp;#26469;&amp;#21518;&amp;#38754;&amp;#30340;&amp;#31579;&amp;#36873;&amp;#20197;&amp;#21450;&amp;#25490;&amp;#24207;&amp;#29992; &amp;#123;% endcomment %&amp;#125; &amp;#10;        &amp;#123;% assign commonTagCount = commonTagCount | plus: 1 %&amp;#125;&amp;#10;      &amp;#123;% endif %&amp;#125;&amp;#10;    &amp;#123;% endfor %&amp;#125;&amp;#10;    &amp;#123;% if commonTagCount &amp;#62; 0 %&amp;#125;&amp;#10;&amp;#10;      &amp;#123;% comment %&amp;#125; &amp;#23558;&amp;#31526;&amp;#21512;&amp;#26465;&amp;#20214;&amp;#30340;post&amp;#25918;&amp;#20837;&amp;#19968;&amp;#20010;&amp;#26032;&amp;#30340;&amp;#25968;&amp;#32452;&amp;#20043;&amp;#20013; &amp;#123;% endcomment %&amp;#125; &amp;#10;      &amp;#123;% assign postsAfterFilter = postsAfterFilter | push: post %&amp;#125;&amp;#10;    &amp;#123;% endif %&amp;#125;&amp;#10;  &amp;#123;% endif %&amp;#125;&amp;#10;&amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#23481;&amp;#38169;&amp;#21028;&amp;#26029;, &amp;#30830;&amp;#20445;&amp;#26377;&amp;#30456;&amp;#20851;&amp;#25991;&amp;#31456;&amp;#30340;&amp;#26102;&amp;#20505;&amp;#20877;&amp;#23637;&amp;#31034;&amp;#30456;&amp;#20851;&amp;#25991;&amp;#31456; &amp;#123;% endcomment %&amp;#125; &amp;#10;&amp;#123;% if postsAfterFilter.size &amp;#62; 0 %&amp;#125;&amp;#10;&amp;#60;div class=&amp;#34;relatedposts&amp;#34;&amp;#62;&amp;#10;  &amp;#60;h2&amp;#62;Related Posts:&amp;#60;/h2&amp;#62;&amp;#10;  &amp;#60;ul class=&amp;#34;article-list&amp;#34;&amp;#62;&amp;#10;  &amp;#123;% for post in postsAfterFilter limit: 5 %&amp;#125;&amp;#10;    &amp;#60;li&amp;#62;&amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; site.baseurl &amp;#125;&amp;#125;&amp;#123;&amp;#123; post.url &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#123;&amp;#123; post.title &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#60;/li&amp;#62;&amp;#10;  &amp;#123;% endfor %&amp;#125;&amp;#10;  &amp;#60;/ul&amp;#62;&amp;#10;&amp;#60;/div&amp;#62;&amp;#10;&amp;#123;% endif %&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;思路很简单, 确保其具有共同tag, 在无相关文章的情况下就不展示此模块了. 因为本身liquid的语法非常有限, 不借助插件的情况下, 想要实现更多功能的话, 就比较麻烦了. 如果有哪位XDJM有不借助插件的排序, 求务必告知我哦~&lt;/p&gt;
&lt;blockquote class=&quot;special update&quot; markdown=&quot;1&quot; data-flag=&quot;gotsomeupdateshere&quot;&gt;&lt;br&gt;&lt;br&gt;### Update&lt;br&gt;&lt;br&gt;哈哈, 和朋友@小田讨论了下, 终于想到一个不用插件实现排序的方法了~ 代码如下:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#19968;&amp;#33268;&amp;#21040;&amp;#33719;&amp;#21462;postsAfterFilter&amp;#20197;&amp;#21450;tagCountEachPost&amp;#30340;&amp;#37096;&amp;#20998;&amp;#37117;&amp;#27809;&amp;#26377;&amp;#21464;&amp;#21270;&amp;#123;% endcomment %&amp;#125;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#19979;&amp;#38754;&amp;#21017;&amp;#20351;&amp;#29992;&amp;#20102;&amp;#19968;&amp;#20010;&amp;#21472;&amp;#21152;for&amp;#24490;&amp;#29615;&amp;#26469;&amp;#36880;&amp;#27425;&amp;#23547;&amp;#25214;&amp;#26368;&amp;#22823;&amp;#30340;tagcount, &amp;#28982;&amp;#21518;&amp;#21516;&amp;#27493;&amp;#36755;&amp;#20986;&amp;#23545;&amp;#24212;postsAfterFilter&amp;#30340;&amp;#20540;&amp;#123;% endcomment %&amp;#125;&amp;#10;&amp;#123;% if postsAfterFilter.size &amp;#62; 0 %&amp;#125;&amp;#10;&amp;#60;div class=&amp;#34;relatedposts&amp;#34;&amp;#62;&amp;#10;  &amp;#60;h2&amp;#62;Related Posts:&amp;#60;/h2&amp;#62;&amp;#10;  &amp;#60;ul class=&amp;#34;article-list&amp;#34;&amp;#62;&amp;#10;&amp;#123;% assign j = tagCountEachPost | size | minus: 1 %&amp;#125;&amp;#10;&amp;#123;% assign maxIndex = 0 %&amp;#125;&amp;#10;&amp;#123;% assign getFirstNumber = true %&amp;#125;&amp;#10;&amp;#123;% assign selectedIndex = &amp;#34;-&amp;#34;|split: &amp;#34;-&amp;#34; %&amp;#125;&amp;#10;&amp;#123;% for p in (0..j) %&amp;#125;&amp;#10;  &amp;#123;% for i in (0..j) %&amp;#125;&amp;#10;    &amp;#123;% unless selectedIndex contains i %&amp;#125;&amp;#10;      &amp;#123;% if getFirstNumber %&amp;#125;&amp;#10;        &amp;#123;% assign firstNumber = tagCountEachPost[i] %&amp;#125;&amp;#10;        &amp;#123;% assign getFirstNumber = false %&amp;#125;&amp;#10;      &amp;#123;% endif %&amp;#125;&amp;#10;      &amp;#123;% if tagCountEachPost[i] &amp;#62;= firstNumber %&amp;#125;&amp;#10;        &amp;#123;% assign firstNumber = tagCountEachPost[i] %&amp;#125;&amp;#10;        &amp;#123;% assign maxIndex = i %&amp;#125;&amp;#10;      &amp;#123;% endif %&amp;#125;&amp;#10;    &amp;#123;% endunless %&amp;#125;&amp;#10;  &amp;#123;% endfor %&amp;#125;&amp;#10;  &amp;#123;% assign getFirstNumber = true %&amp;#125;&amp;#10;  &amp;#123;% assign selectedIndex = selectedIndex | push: maxIndex %&amp;#125;&amp;#10;  &amp;#123;% if selectedIndex.size &amp;#60; 6 %&amp;#125;&amp;#10;    &amp;#60;li&amp;#62;&amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; site.baseurl &amp;#125;&amp;#125;&amp;#123;&amp;#123; postsAfterFilter[maxIndex][&amp;#39;url&amp;#39;] &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#123;&amp;#123; postsAfterFilter[maxIndex][&amp;#39;title&amp;#39;] &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#60;/li&amp;#62;&amp;#10;  &amp;#123;% endif %&amp;#125;&amp;#10;&amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#60;/ul&amp;#62;&amp;#10;&amp;#60;/div&amp;#62;&amp;#10;&amp;#123;% endif %&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;思路也很简单, 就是利用for循环写出一个找最大元素的方法, 然后每次记录下最大元素的index, 就能同步输出对应的post了~ 需要注意的就是&lt;strong&gt;为了保证index的一一对应, 需要单独保存每次找到的最大值的index, 然后在下一次遍历中跳过&lt;/strong&gt;&lt;br&gt;&lt;br&gt;赞!&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;u6709_u63D2_u4EF6_u4E0B_u589E_u52A0_u6392_u5E8F_u529F_u80FD&quot;&gt;&lt;a href=&quot;#u6709_u63D2_u4EF6_u4E0B_u589E_u52A0_u6392_u5E8F_u529F_u80FD&quot; class=&quot;headerlink&quot; title=&quot;有插件下增加排序功能&quot;&gt;&lt;/a&gt;有插件下增加排序功能&lt;/h2&gt;&lt;h3 id=&quot;liquid__u90E8_u5206&quot;&gt;&lt;a href=&quot;#liquid__u90E8_u5206&quot; class=&quot;headerlink&quot; title=&quot;liquid 部分&quot;&gt;&lt;/a&gt;liquid 部分&lt;/h3&gt;&lt;p&gt;在上面的基础上(在update之前的基础上), 首先我们需要在liquid中添加几行代码:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#39318;&amp;#20808;&amp;#38656;&amp;#35201;&amp;#23450;&amp;#20041;&amp;#19968;&amp;#20010;&amp;#26032;&amp;#30340;&amp;#21464;&amp;#37327;, &amp;#29992;&amp;#26469;&amp;#35760;&amp;#24405;&amp;#20849;&amp;#21516;&amp;#30340;tag&amp;#25968;&amp;#30446; &amp;#123;% endcomment %&amp;#125; &amp;#10;&amp;#123;% assign tagCountEachPost = &amp;#39;-&amp;#39; | split: &amp;#34;-&amp;#34; %&amp;#125;&amp;#10;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#22312;&amp;#36825;&amp;#19968;&amp;#27493;&amp;#31867;&amp;#20284;&amp;#28155;&amp;#21152;&amp;#30340;post&amp;#30340;&amp;#26041;&amp;#24335;, &amp;#25226;&amp;#23545;&amp;#24212;&amp;#30340;&amp;#20849;&amp;#21516;tag&amp;#25968;&amp;#30446;&amp;#20063;&amp;#32452;&amp;#25104;&amp;#19968;&amp;#20010;&amp;#32467;&amp;#26500;&amp;#19968;&amp;#26679;&amp;#30340;&amp;#23545;&amp;#24212;&amp;#25968;&amp;#32452;&amp;#123;% endcomment %&amp;#125; &amp;#10;&amp;#123;% if commonTagCount &amp;#62; 0 %&amp;#125;&amp;#10;  &amp;#123;% assign postsAfterFilter = postsAfterFilter | push: post %&amp;#125;&amp;#10;  &amp;#123;% assign tagCountEachPost = tagCountEachPost | push: commonTagCount %&amp;#125;&amp;#10;&amp;#123;% endif %&amp;#125;&amp;#10;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#36825;&amp;#37324;&amp;#23545;&amp;#25991;&amp;#31456;&amp;#36827;&amp;#34892;&amp;#23545;&amp;#24212;&amp;#30340;&amp;#31579;&amp;#36873;, &amp;#38656;&amp;#35201;&amp;#20511;&amp;#21161;&amp;#25105;&amp;#20204;&amp;#33258;&amp;#23450;&amp;#20041;&amp;#30340;filter&amp;#23454;&amp;#29616; &amp;#123;% endcomment %&amp;#125; &amp;#10;&amp;#123;% assign postsAfterFilter = postsAfterFilter | sort_by_array: &amp;#123;&amp;#123;tagCountEachPost&amp;#125;&amp;#125; %&amp;#125;&amp;#10;      &amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面就是插件环节~&lt;/p&gt;
&lt;h3 id=&quot;u63D2_u4EF6_u90E8_u5206&quot;&gt;&lt;a href=&quot;#u63D2_u4EF6_u90E8_u5206&quot; class=&quot;headerlink&quot; title=&quot;插件部分&quot;&gt;&lt;/a&gt;插件部分&lt;/h3&gt;&lt;p&gt;Jekyll 的插件都是&lt;code&gt;.rb&lt;/code&gt;结尾的文件, 放在&lt;code&gt;_plugins&lt;/code&gt;路径下即可. 这里&lt;code&gt;filters.rb&lt;/code&gt;是我用来专门放置我自己定制的filter的:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# filters.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Jekyll&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomizeFilter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort_by_array&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fArray,sArray)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      newObj = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      newArray = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sArray.each_index &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |x|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newObj[x] = sArray[x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      newObj.sort_by&amp;#123;|_key, value| value &amp;#125;.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |x,y|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newArray.push(fArray[x])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      newArray.reverse!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Liquid::Template&lt;/span&gt;.register_filter(&lt;span class=&quot;constant&quot;&gt;Jekyll::CustomizeFilter&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此基本就算搞定啦~&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangwenli.com/blog/2014/07/15/jekyll-related-posts-without-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll Related Posts without Plugin - 羡辙杂俎 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://melandri.net/Custom-Jekyll-filter-for-tags/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Custom Jekyll filter for tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2540435/how-to-sort-a-ruby-hash-by-number-value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to sort a Ruby Hash by number value?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Jekyll 添加翻页部分(包含分类页,标签页)</title><loc>http://taoalpha.me/blog/2015/06/02/tech-jekyll-paginator-for-all-page/</loc><publish>2015-06-02T13:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;随着博文数量正式达到15篇以上, 我寻思着也是时候给blog增加一个翻页的部分了.  首先当然是研究&lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll的官方文档&lt;/a&gt;, 然后再结合我们自己的需求进行修改. 因为考虑到blog的通常结构都会有category和tag, 而且昨天刚刚增加了 &lt;a href=&quot;/blog/2015/06/01/tech-jekyll-tag-page/&quot;&gt;tag专属页&lt;/a&gt;, 所以就希望能够在category和tag页下都增加一个翻页的模块. 而目前jekyll的默认paginator尚无法支持这样的需求, 我们只能自己动手喽~&lt;/p&gt;
&lt;h2 id=&quot;jekyll_paginator&quot;&gt;&lt;a href=&quot;#jekyll_paginator&quot; class=&quot;headerlink&quot; title=&quot;jekyll paginator&quot;&gt;&lt;/a&gt;jekyll paginator&lt;/h2&gt;&lt;h3 id=&quot;u5F00_u542F_u7FFB_u9875_u6A21_u5757&quot;&gt;&lt;a href=&quot;#u5F00_u542F_u7FFB_u9875_u6A21_u5757&quot; class=&quot;headerlink&quot; title=&quot;开启翻页模块&quot;&gt;&lt;/a&gt;开启翻页模块&lt;/h3&gt;&lt;p&gt;jekyll有默认的paginator, 可以非常简单的开启. 只需要在_config.yml中加入下面这行行即可:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;paginate: 2&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里的paginate表示是单页显示的博文条数. 这里设置2也是为了方便测试, 具体数值大家根据需要自行调整即可.&lt;/p&gt;
&lt;p&gt;通过设定paginate后, 就可以重新build一下jekyll, 你就会发现在&lt;code&gt;_site/blog&lt;/code&gt;路径下多出了一些&lt;code&gt;pageX&lt;/code&gt;的文件夹了~ 这些就是生成的分页了.&lt;/p&gt;
&lt;h3 id=&quot;u6DFB_u52A0_u7FFB_u9875_u5BFC_u822A_u6A21_u5757&quot;&gt;&lt;a href=&quot;#u6DFB_u52A0_u7FFB_u9875_u5BFC_u822A_u6A21_u5757&quot; class=&quot;headerlink&quot; title=&quot;添加翻页导航模块&quot;&gt;&lt;/a&gt;添加翻页导航模块&lt;/h3&gt;&lt;p&gt;开启翻页后, 就需要我们自行在页面上添加上翻页导航组件了. 这里需要借助&lt;code&gt;paginator&lt;/code&gt;这个对象, 其包含了当前页面下分页的一些基本属性. 具体参照下面的代码即可.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% if paginator.total_pages &amp;#62; 1 %&amp;#125;&amp;#10;&amp;#60;div class=&amp;#34;pagination&amp;#34;&amp;#62;&amp;#10;  &amp;#123;% if paginator.previous_page %&amp;#125;&amp;#10;    &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; paginator.previous_page_path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#38;laquo; Prev&amp;#60;/a&amp;#62;&amp;#10;  &amp;#123;% else %&amp;#125;&amp;#10;    &amp;#60;span&amp;#62;&amp;#38;laquo; Prev&amp;#60;/span&amp;#62;&amp;#10;  &amp;#123;% endif %&amp;#125;&amp;#10;&amp;#10;  &amp;#123;% for page in (1..paginator.total_pages) %&amp;#125;&amp;#10;    &amp;#123;% if page == paginator.page %&amp;#125;&amp;#10;      &amp;#60;em&amp;#62;&amp;#123;&amp;#123; page &amp;#125;&amp;#125;&amp;#60;/em&amp;#62;&amp;#10;    &amp;#123;% elsif page == 1 %&amp;#125;&amp;#10;      &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; &amp;#39;/&amp;#39; | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#123;&amp;#123; page &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#10;    &amp;#123;% else %&amp;#125;&amp;#10;      &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; site.paginate_path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; | replace: &amp;#39;:num&amp;#39;, page &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#123;&amp;#123; page &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#10;    &amp;#123;% endif %&amp;#125;&amp;#10;  &amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#10;  &amp;#123;% if paginator.next_page %&amp;#125;&amp;#10;    &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; paginator.next_page_path | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;Next &amp;#38;raquo;&amp;#60;/a&amp;#62;&amp;#10;  &amp;#123;% else %&amp;#125;&amp;#10;    &amp;#60;span&amp;#62;Next &amp;#38;raquo;&amp;#60;/span&amp;#62;&amp;#10;  &amp;#123;% endif %&amp;#125;&amp;#10;&amp;#60;/div&amp;#62;&amp;#10;&amp;#123;% endif %&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然, 对应的页码显示样式就要看大家自己设定喽~&lt;/p&gt;
&lt;h2 id=&quot;u5B9A_u5236_u7FFB_u9875_u63D2_u4EF6&quot;&gt;&lt;a href=&quot;#u5B9A_u5236_u7FFB_u9875_u63D2_u4EF6&quot; class=&quot;headerlink&quot; title=&quot;定制翻页插件&quot;&gt;&lt;/a&gt;定制翻页插件&lt;/h2&gt;&lt;h3 id=&quot;u63D2_u4EF6_u90E8_u5206&quot;&gt;&lt;a href=&quot;#u63D2_u4EF6_u90E8_u5206&quot; class=&quot;headerlink&quot; title=&quot;插件部分&quot;&gt;&lt;/a&gt;插件部分&lt;/h3&gt;&lt;p&gt;如果只需要在首页开启翻页的话, 如此倒也是足够了. 但是如果想要在category以及tag分页上都加上翻页导航的话, 就需要在上述基础上自行定制了.&lt;/p&gt;
&lt;p&gt;首先我们可以学习以下默认的pagination是如何做的, 这一点我们可以在&lt;a href=&quot;https://github.com/jekyll/jekyll-paginate/blob/master/lib/jekyll-paginate/pager.rb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github上jekyll-paginate的主页&lt;/a&gt;查看其源码.&lt;/p&gt;
&lt;p&gt;可以看到基本方法是完全可以通用的, 只是默认情况下的pager这个包含了翻页信息的对象只包含在了首页的创建上. 我们完全可以在生成tag页和category页的时候也同时生成一个对应的pager对象. 接下来我们就可以在原来的 &lt;a href=&quot;/blog/2015/06/01/tech-jekyll-tag-page/&quot;&gt;jekyll生成tag页&lt;/a&gt;中的示例代码基础上加上pager.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module Jekyll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class TagIndex &amp;lt; Page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def initialize(site, base, dir, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @site = site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @base = base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @dir = dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @name = 'index.html'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.process(@name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.read_yaml(File.join(base, '_layouts'), 'tagpage.html')&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.data['tag'] = tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tag_title_prefix = site.config['tag_title_prefix'] || 'Posts Tagged &amp;amp;ldquo;'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tag_title_suffix = site.config['tag_title_suffix'] || '&amp;amp;rdquo;'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.data['title'] = &quot;#&amp;#123;tag_title_prefix&amp;#125;#&amp;#123;tag&amp;#125;#&amp;#123;tag_title_suffix&amp;#125;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.data['pname'] = &quot;tag/#&amp;#123;tag&amp;#125;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 自定义的一个页面标识, 同时也为了后面修改tag单页增加一个url前缀用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class TagGenerator &amp;lt; Generator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    safe true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def generate(site)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if site.layouts.key? 'tagpage'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dir = site.config['tag_dir'] || 'tag'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        site.tags.keys.each do |tag|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          write_tag_index(site, File.join(dir, tag), tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          #write_tag_index(site, File.join(dir, tag.split.map(&amp;amp;:capitalize).join(&quot;-&quot;)), tag.split.map(&amp;amp;:capitalize).join(&quot;-&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def write_tag_index(site, dir, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 下述代码有所修改, 注意!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tag_posts = site.posts.find_all &amp;#123;|post| post.tags.include?(tag)&amp;#125;.sort_by &amp;#123;|post| -post.date.to_f&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 当前tag的所有post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      num_pages = TagPager.calculate_pages(tag_posts, site.config['paginate'].to_i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 所有post分出的页数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (1..num_pages).each do |page|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pager = TagPager.new(site, page, tag_posts, tag, num_pages)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index = TagIndex.new(site, site.source, dir, tag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index.pager = pager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index.dir = dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if page != 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          index.dir = File.join(dir, &quot;page#&amp;#123;page&amp;#125;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          // 生成page路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index.render(site.layouts, site.site_payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index.write(site.dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        site.pages &amp;lt;&amp;lt; index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  class TagPager &amp;lt; Jekyll::Paginate::Pager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 继承paginate::pager的类, 直接使用了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attr_reader :tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def initialize(site, page, all_posts, tag, num_pages = nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @tag = tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      super site, page, all_posts, num_pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias_method :original_to_liquid, :to_liquid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def to_liquid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liquid = original_to_liquid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liquid['tag'] = @tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      liquid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上, 基本插件部分就没啥事了~ 当然, category的部分几乎可以说是完全一样的, 只需要把对应tag的部分全部替换为category的相应属性就行啦. 这里就不占位的贴代码了.&lt;/p&gt;
&lt;h3 id=&quot;u9875_u9762_u5BFC_u822A_u7EC4_u4EF6_u663E_u793A_u90E8_u5206&quot;&gt;&lt;a href=&quot;#u9875_u9762_u5BFC_u822A_u7EC4_u4EF6_u663E_u793A_u90E8_u5206&quot; class=&quot;headerlink&quot; title=&quot;页面导航组件显示部分&quot;&gt;&lt;/a&gt;页面导航组件显示部分&lt;/h3&gt;&lt;p&gt;页面级的改动也不多, 因为我的category, 首页, tag页用的是同一个模板, 所以修改起来相对容易~ 只是针对不同的页码调整了以下翻页导航的url构成~ 如下:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% if paginator.total_pages &amp;#62; 1 %&amp;#125;&amp;#10;&amp;#123;% assign pname = page.pname %&amp;#125;&amp;#10;&amp;#123;% if page.pname == &amp;#34;blog&amp;#34; %&amp;#125;&amp;#10;  &amp;#123;% assign pname = &amp;#34;&amp;#34; %&amp;#125;&amp;#10;&amp;#123;% endif %&amp;#125;&amp;#10;&amp;#60;!-- pname&amp;#23601;&amp;#26159;&amp;#25105;&amp;#20043;&amp;#21069;&amp;#25554;&amp;#20214;&amp;#20013;&amp;#21152;&amp;#20837;&amp;#30340;&amp;#37027;&amp;#20010;&amp;#29992;&amp;#26469;&amp;#34920;&amp;#26126;&amp;#25152;&amp;#23646;&amp;#39029;&amp;#38754;&amp;#23646;&amp;#24615;&amp;#30340;, &amp;#39034;&amp;#24102;&amp;#20063;&amp;#25925;&amp;#24847;&amp;#20889;&amp;#25104;&amp;#20102;&amp;#26041;&amp;#20415;&amp;#28155;&amp;#21152;url&amp;#30340;&amp;#36335;&amp;#24452;&amp;#26684;&amp;#24335;, &amp;#19988;&amp;#19979;&amp;#38754;&amp;#36825;&amp;#20123;&amp;#36335;&amp;#24452;&amp;#36824;&amp;#38656;&amp;#35201;&amp;#26681;&amp;#25454;&amp;#20855;&amp;#20307;&amp;#24773;&amp;#20917;&amp;#33258;&amp;#34892;&amp;#35843;&amp;#25972;~ --&amp;#62;&amp;#10;&amp;#60;div class=&amp;#34;pagination&amp;#34;&amp;#62;&amp;#10;  &amp;#123;% if paginator.previous_page %&amp;#125;&amp;#10;    &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; paginator.previous_page_path | prepend: &amp;#34;/&amp;#34; | prepend: pname | prepend: &amp;#34;/&amp;#34; | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#38;laquo; Prev&amp;#60;/a&amp;#62;&amp;#10;  &amp;#123;% else %&amp;#125;&amp;#10;    &amp;#60;span&amp;#62;&amp;#38;laquo; Prev&amp;#60;/span&amp;#62;&amp;#10;  &amp;#123;% endif %&amp;#125;&amp;#10;&amp;#10;  &amp;#123;% for page in (1..paginator.total_pages) %&amp;#125;&amp;#10;    &amp;#123;% if page == paginator.page %&amp;#125;&amp;#10;      &amp;#60;em&amp;#62;&amp;#123;&amp;#123; page &amp;#125;&amp;#125;&amp;#60;/em&amp;#62;&amp;#10;    &amp;#123;% elsif page == 1 %&amp;#125;&amp;#10;      &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; &amp;#39;/&amp;#39; | prepend: pname |prepend: &amp;#34;/&amp;#34;| prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#123;&amp;#123; page &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#10;    &amp;#123;% else %&amp;#125;&amp;#10;      &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; site.paginate_path | prepend: &amp;#34;/&amp;#34; | prepend: pname | prepend: &amp;#34;/&amp;#34; | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; | replace: &amp;#39;:num&amp;#39;, page &amp;#125;&amp;#125;&amp;#34;&amp;#62;&amp;#123;&amp;#123; page &amp;#125;&amp;#125;&amp;#60;/a&amp;#62;&amp;#10;    &amp;#123;% endif %&amp;#125;&amp;#10;  &amp;#123;% endfor %&amp;#125;&amp;#10;&amp;#10;  &amp;#123;% if paginator.next_page %&amp;#125;&amp;#10;    &amp;#60;a href=&amp;#34;&amp;#123;&amp;#123; paginator.next_page_path | prepend: &amp;#34;/&amp;#34; | prepend: pname | prepend: &amp;#34;/&amp;#34; | prepend: site.baseurl | replace: &amp;#39;//&amp;#39;, &amp;#39;/&amp;#39; &amp;#125;&amp;#125;&amp;#34;&amp;#62;Next &amp;#38;raquo;&amp;#60;/a&amp;#62;&amp;#10;  &amp;#123;% else %&amp;#125;&amp;#10;    &amp;#60;span&amp;#62;Next &amp;#38;raquo;&amp;#60;/span&amp;#62;&amp;#10;  &amp;#123;% endif %&amp;#125;&amp;#10;&amp;#60;/div&amp;#62;&amp;#10;&amp;#123;% endif %&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;恩, 完事! 剩下的就是大家根据自己的需要来赋予翻页组件合适的样式喽~&lt;/p&gt;
&lt;h2 id=&quot;u7ED3_u8BBA&quot;&gt;&lt;a href=&quot;#u7ED3_u8BBA&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;本人的ruby属于初学, 所以代码基本是我参照源码和前人的经验修改而来的~ 也算是学习的过程, 基本参照对象都会列在下面的&lt;code&gt;参考资料&lt;/code&gt;中~ 尽请翻看~&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll-paginate/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll-paginate github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicoespeon/nicoespeon.github.io/blob/develop/_plugins/category_pagination.rb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nicoespeon category_pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll pagination 官方说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Jekyll 中如何做中文字数统计</title><loc>http://taoalpha.me/blog/2015/05/21/tech-jekyll-count-of-chinese-characters/</loc><publish>2015-05-21T07:00:00.000Z</publish><summary>&lt;p&gt;这两天又优化了以下blog, 首先是给天气部分加上了cookie和定位控制, 这样一方面能减少对openweather的请求次数, 同时优化加载的速度, 另一方面也能更加智能化的显示天气. 当然, 为了防止定位错误的问题, 我也同时增加了自定义位置的功能, 同样给予了cookie记录. 具体的实现方法, 这里就不多说了, 也很简单.&lt;/p&gt;
&lt;p&gt;本文主要是介绍下jekyll中如何实现中文的字数统计. 为什么要做字数统计呢? 还是来源于&lt;a href=&quot;http://www.jianshu.com/p/613916eea37f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书-文章页&lt;/a&gt;, 里面详细的记录了作者的信息以及当前文章的字数. 再加上一个实时统计的阅读次数, 当然对我而言, 这个实时阅读次数意义不大, 我就顺着字数统计改成了阅读时间估计. 恩, 没错, 又是模仿&lt;a href=&quot;https://medium.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;medium&lt;/a&gt;的~ ಥ_ಥ&lt;/p&gt;
&lt;h2 id=&quot;u5B57_u6570_u7EDF_u8BA1_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u5B57_u6570_u7EDF_u8BA1_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;字数统计方法&quot;&gt;&lt;/a&gt;字数统计方法&lt;/h2&gt;&lt;p&gt;如何统计一段文本的字数是有很多种方法的, 但是因为语言文字的不同, 很多时候, 不同的方法对不同的语言文字适用性是不一样的. 目前来说, 通常有以下几种字数统计方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据常规的一个中文字符等于两个英文字母的概念, 通过获取整个文本的长度(比如js中的length), 除以2就可以获得一个粗略的值了, 如果要精确些, 可以在上述方法的基础上加入&lt;code&gt;charCodeAt()&lt;/code&gt;来判断字符属性是中文还是英文字母, 然后区分计算;&lt;/li&gt;
&lt;li&gt;如果是纯英文, 通常统计的都是词数而非字数, 而英文天然的空格分词, 也让统计其词数非常容易, 只需要按照空格切分获取长度即可;&lt;/li&gt;
&lt;li&gt;如果是纯中文, 我们统计的则多数是字数, 这种情况下, 因为中文缺少类似英文空格这种天然的切分符号, 就不能单纯的使用切分法来获取字数了, 可以借鉴第一种方法所述, 通过去除换行以及标签符号, 然后获取最后的数组大小来实现;&lt;/li&gt;
&lt;li&gt;如果是中英文混杂, 那么同样可以使用上述方法获得粗略数值, 当然, 如果你需要精确的话, 也需要对文本字符属性做判断来区分处理;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jekyll_u4E2D_u7684_u8BCD_u6570_u7EDF_u8BA1&quot;&gt;&lt;a href=&quot;#jekyll_u4E2D_u7684_u8BCD_u6570_u7EDF_u8BA1&quot; class=&quot;headerlink&quot; title=&quot;jekyll中的词数统计&quot;&gt;&lt;/a&gt;jekyll中的词数统计&lt;/h3&gt;&lt;p&gt;&lt;code&gt;number_of_words&lt;/code&gt;是jekyll中已有的一个词数统计过滤器, 可以很方便的统计出文本的英文词数, 但对中文就不适用了… 因为它本身是根据空格, 标点符号等来切分统计的, 有的时候甚至连英文都可能不准确… &lt;/p&gt;
&lt;h3 id=&quot;u53D6_u5DE7_u7684_u7EDF_u8BA1_u65B9_u5F0F&quot;&gt;&lt;a href=&quot;#u53D6_u5DE7_u7684_u7EDF_u8BA1_u65B9_u5F0F&quot; class=&quot;headerlink&quot; title=&quot;取巧的统计方式&quot;&gt;&lt;/a&gt;取巧的统计方式&lt;/h3&gt;&lt;p&gt;jekyll支持的众多filter中, 有这么一个&lt;code&gt;size&lt;/code&gt;, 是可以返回一个数组的大小的, 而且能够正确的理解类似中文GBK的编码的. 于是我们可以使用类似:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;Approximate number of English words: &amp;#123;&amp;#123; text | split: &amp;#34; &amp;#34; | size &amp;#125;&amp;#125;&amp;#10;Approximate number of Chinese words: &amp;#123;&amp;#123; text | split: &amp;#34;&amp;#34; | size &amp;#125;&amp;#125;&amp;#10;// &amp;#21487;&amp;#20197;&amp;#30475;&amp;#21040;&amp;#37117;&amp;#26159;&amp;#36817;&amp;#20284;&amp;#20540;~ &amp;#22914;&amp;#26524;&amp;#20320;&amp;#23545;&amp;#31934;&amp;#24230;&amp;#35201;&amp;#27714;&amp;#27809;&amp;#37027;&amp;#20040;&amp;#39640;, &amp;#37027;&amp;#20040;&amp;#22522;&amp;#26412;&amp;#26159;&amp;#22815;&amp;#29992;&amp;#20102;~&amp;#10;// &amp;#23454;&amp;#38469;&amp;#19978;, &amp;#22240;&amp;#20026;&amp;#26412;&amp;#36523;size&amp;#25903;&amp;#25345;&amp;#25991;&amp;#26412;, &amp;#25152;&amp;#20197;&amp;#23545;&amp;#20013;&amp;#25991;&amp;#36825;&amp;#37324;&amp;#21487;&amp;#20197;&amp;#19981;&amp;#29992;split: &amp;#34;&amp;#34;&amp;#30340;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么回过头, 我们如果要统计content里面的中文字数就可以利用&lt;code&gt;size&lt;/code&gt;这个方法了. 不过考虑到content里面有很多html的tag, 我们为了更加接近真实数值, 可以借用&lt;code&gt;strip_html&lt;/code&gt;以及&lt;code&gt;strip_newlines&lt;/code&gt;两个过滤器来去除所有的html tag和空行. 那么最终的代码就是:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123; &amp;#123; content | strip_html | strip_newlines | size &amp;#125; &amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实在jekyll的github issue中有人已经问过类似的问题&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/1921&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll的中文切分问题&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u901F_u5EA6_u95EE_u9898&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u901F_u5EA6_u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;阅读速度问题&quot;&gt;&lt;/a&gt;阅读速度问题&lt;/h2&gt;&lt;p&gt;既然获得了字数, 那么想要获得阅读时间就很容易了, 通常英文单词的阅读速度在350wpm(词每分钟), 而中文也是基本接近的350字每分钟左右. 那么这次利用&lt;code&gt;divided_by&lt;/code&gt;以及&lt;code&gt;round&lt;/code&gt;两个函数就可以获得一个大致的分钟数了:&lt;br&gt;(有兴趣的可以前往参考来源的第二条中看关于中文, 英文阅读速度的一篇文章)&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123; content | strip_html | strip_newlines | size | divided_by:350 | round&amp;#125;&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u53C2_u8003_u6765_u6E90&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u6765_u6E90&quot; class=&quot;headerlink&quot; title=&quot;参考来源&quot;&gt;&lt;/a&gt;参考来源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/1921&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll的中文切分问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://persquaremile.com/2011/12/21/which-reads-faster-chinese-or-english/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Which reads faster, Chinese or English?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Sorting Algorithm in JavaScript - Bubble Sort and Merge Sort</title><loc>http://taoalpha.me/blog/2015/10/29/tech-javascript-sorting-algorithm-2/</loc><publish>2015-10-29T08:00:00.000Z</publish><summary>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Bubble sort is really cool but not so useful, it seems that you will never use it… But merge sort is really cool since it is really fast.&lt;/p&gt;
&lt;h2 id=&quot;Bubble_Sort&quot;&gt;&lt;a href=&quot;#Bubble_Sort&quot; class=&quot;headerlink&quot; title=&quot;Bubble Sort&quot;&gt;&lt;/a&gt;Bubble Sort&lt;/h2&gt;&lt;p&gt;So what is bubble sort, according to wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The whole process of sorting is like the bigger element “bubble” to the end of the list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; A list of numbers with random order&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Procedures:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Start from the head of the list, and compare every two adjacent numbers and swap them if they are in wrong order;&lt;/li&gt;
&lt;li&gt;Record whether you did any swaps or not, if no, your list has been sorted, otherwise, you need to step 1 again;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; A sorted list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you like, you can do a small optimization to the procedures above: since every iteration we will make sure the bigger element will “bubble” to the end of the list, so everytime we don’t need to check the last elements(they are already in ordered), and we will reduce the length for each iteration.&lt;/p&gt;
&lt;p&gt;Here is a nice gif from wikipedia: &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif&quot; alt=&quot;bubble sort&quot;&gt;&lt;/p&gt;
&lt;p&gt;The time complexity for bubble sort would be : O(n^2) for worst case, O(n) for best case, and O(n^2) on average.&lt;/p&gt;
&lt;p&gt;The space complexity for bubble sort would be O(1) since we only need one space used to do the swap.&lt;/p&gt;
&lt;p&gt;Now lets do the code:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bubbleSort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bubbleSort&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;list&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; swapped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; len = list.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    swapped = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt; len-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      reads += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(list[j]&amp;gt;list[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.swap(list,j,j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swapped = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writes += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    len = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// since everytime we will move the largest element to the end of the list, we can reduce the number of iteration without considering the last element every iteration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(swapped)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Merge_Sort&quot;&gt;&lt;a href=&quot;#Merge_Sort&quot; class=&quot;headerlink&quot; title=&quot;Merge Sort&quot;&gt;&lt;/a&gt;Merge Sort&lt;/h2&gt;&lt;p&gt;Now we met all three different kinds of sorting, all of them have a O(n^2) of time complexity on average.&lt;/p&gt;
&lt;p&gt;Lets do something faster: Merge Sort.&lt;/p&gt;
&lt;p&gt;Imagine you separate your list into several really small lists with only one element or zero element in each of them. Then you merge every two small lists into one sorted list, and keep doing it repeatly.(it’s easy because you are merging two sorted lists)&lt;/p&gt;
&lt;p&gt;The whole procedures will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split the list recursively;&lt;/li&gt;
&lt;li&gt;Merge the small lists until you merge them all;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we always split by half, the number of small lists we will have would be log(n), and the total cost would be close to (n / 2 * log(n)) on average(since we have at least 1 element list to merge with zero one, at most n/2 elements list to merge with n/2 elements). So the time complexity would be O(nlog(n)) all the time, and the space complexity would be O(n) since we will save origin input list with n small lists.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mergeSort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeSort&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;list&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(list.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mid = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(list.length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; merge(mergeSort(list.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,mid)),mergeSort(list.slice(mid)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;left,right&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nl = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; il = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ir = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(il&amp;lt;left.length &amp;amp;&amp;amp; ir&amp;lt;right.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(left[il] &amp;lt; right[ir])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nl.push(left[il++])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nl.push(right[ir++])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// don't use shift because shift will actually cause a lot I/Os &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nl = nl.concat(left.slice(il)).concat(right.slice(ir))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Merge sort is kind useful, and if we don’t have quick sort which I will talk about next post, it would be a really good choice to do sorting. And even we have quick sort, merge sort still exists in many languages as part of their default sorting algorithm.&lt;/p&gt;
&lt;p&gt;And also there are several optimizations for merge sort, if you are interested in, you can search it on google.&lt;/p&gt;
&lt;p&gt;That’s all for today. Good night!&lt;/p&gt;
</summary></url><url><title>Sorting Algorithm in JavaScript - Insertion Sort and Selection Sort</title><loc>http://taoalpha.me/blog/2015/10/29/tech-javascript-sorting-algorithm-1/</loc><publish>2015-10-29T08:00:00.000Z</publish><summary>&lt;h2 id=&quot;Sorting_Algorithm&quot;&gt;&lt;a href=&quot;#Sorting_Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Sorting Algorithm&quot;&gt;&lt;/a&gt;Sorting Algorithm&lt;/h2&gt;&lt;p&gt;As the most important and fundamental algorithm, sorting algorithm is always the best start to learn algorithm.&lt;/p&gt;
&lt;p&gt;Among all the different sorting algorithms, we have 10 algorithms which are used a lot in practice, and I will introduce all these ten algorithms one by one. &lt;/p&gt;
&lt;p&gt;Today we will talk about: Selection Sort and Insertion Sort.&lt;/p&gt;
&lt;h2 id=&quot;Selection_Sort&quot;&gt;&lt;a href=&quot;#Selection_Sort&quot; class=&quot;headerlink&quot; title=&quot;Selection Sort&quot;&gt;&lt;/a&gt;Selection Sort&lt;/h2&gt;&lt;p&gt;Selection Sort is one of the most fundamental sort algorithms you would learn from any book about algorithm. The method and theory based on is really easy and clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input:&lt;/strong&gt; a list of numbers need to be sorted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;procedures:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;create a new list to save the sorted elements&lt;/li&gt;
&lt;li&gt;select the minimum element from the input list and push it into the new list, and remove it from the input list&lt;/li&gt;
&lt;li&gt;repeat the second step until we don’t have any more elements in input list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output:&lt;/strong&gt; the list you created to save the sorted elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Easy, huh ? Let’s calculate the cost: the average time complexity would be n^2/2 which would be O(n^2), since we need check the input list n times with n/2 elements to check every time; and since we are using a new list to save the output, it would be O(n) space.&lt;/p&gt;
&lt;p&gt;Can we optimize it ? Yes and no. For time complexity, we can not do any optimization since it is the theory that selection sort is using, we have nothing to do with that. But for space complexity, we can do something.&lt;/p&gt;
&lt;p&gt;We can actually do the sort in-place which means we can sort the list within the list and return the same list as the input except it is sorted.&lt;/p&gt;
&lt;p&gt;In order to do that, we can change the procedures to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input:&lt;/strong&gt; a list of numbers need to be sorted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;procedures:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;start from the first element, we loop over the list from it to the end of the list and select the minimum element from the input list and swap it with it(start element);&lt;/li&gt;
&lt;li&gt;repeat it until we reach the last element of the input list(now the start element and the end element would all be the last element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output:&lt;/strong&gt; the input list &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By doing this way, we just need two spaces, one is used to save the index of the minimum element, another is used during the swap to save the one of the value that need to be swapped later. The space complexity would be O(1).&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;selectionSort&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;list&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; list.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; min = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;list.length; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(list[min]&amp;gt;list[j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          min = j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = list[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list[i] = list[min]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list[min] = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Selection Sort is easy but not efficient, since it always costs O(n^2) even your input list is sorted when you pass it in.&lt;/p&gt;
&lt;h2 id=&quot;Insertion_Sort&quot;&gt;&lt;a href=&quot;#Insertion_Sort&quot; class=&quot;headerlink&quot; title=&quot;Insertion Sort&quot;&gt;&lt;/a&gt;Insertion Sort&lt;/h2&gt;&lt;p&gt;Now we come to insertion sort which would a little more efficient than selection sort.&lt;/p&gt;
&lt;p&gt;The theory is: consider the left part of the input list as sorted, and insert the new element into the proper position, since if one element always means it is sorted, so we always can do that by starting from the second element.&lt;/p&gt;
&lt;p&gt;The procedures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start from the second element(if you don’t have second element, you are done);&lt;/li&gt;
&lt;li&gt;compare every element in the left(sorted part), if it is greater than your start element, shift it to the right by 1, if it is less than your start element, insert your start element before it;&lt;/li&gt;
&lt;li&gt;repeat until the end of the list;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Time Complexity: O(n) in the best case(the list is sorted already), O(n^2) in the worst case, on average, it would be similiar to selection sort with O(n^2).&lt;/p&gt;
&lt;p&gt;Space Complexity: O(1)&lt;/p&gt;
&lt;p&gt;Lets implement it into real code:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertionSort&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;list&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; list.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = list[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(j&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; list[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;gt;temp)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list[j] = list[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      j--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list[j] = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// use shift instead of swap can reduce the cost of writing -- nearly 50%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if you use swap, it will slower than selectionSort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Some people may be used to achieve insertion sort by using the swap too. You can, you just need compare and swap it with previous one until it reaches the right position. But the cost would be high since you will double your writes with swap.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I actually calculate the time cost in javascript, most of time, if you use swap, your insertion sort would be slower than selection sort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Special_Note&quot;&gt;&lt;a href=&quot;#Special_Note&quot; class=&quot;headerlink&quot; title=&quot;Special Note&quot;&gt;&lt;/a&gt;Special Note&lt;/h2&gt;&lt;p&gt;In general, insertion sort would be faster than selection sort if you implement it in right way. But in some special cases, you may find selection sort is faster.&lt;/p&gt;
&lt;p&gt;The different between selection sort and insertion sort:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;selection sort reads the list a lot(n &lt;em&gt; (n+1) / 2, n is the length of the list) but only writes into the list a few times(= 2 &lt;/em&gt; (the length of your list));&lt;/li&gt;
&lt;li&gt;insertion sort reads the list a lot too, but fewer than the selection sort(the worst case would be same with selection, best case would be equal to the length of the list), and meantime, it will write into the list much more times than selection sort(nearly the same with reading times);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if it costs much more on reading instead of writing, you may consider choosing selection sort instead of insertion sort.&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;That’s all I think you should know about selection sort and insertion sort. Next post I will discuss about bubble sort and merge sort with you. See ya!&lt;/p&gt;
</summary></url><url><title>JavaScript 重载函数实现探究</title><loc>http://taoalpha.me/blog/2015/07/11/tech-javascript-overload/</loc><publish>2015-07-11T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;今天看&lt;a href=&quot;http://book.douban.com/subject/3176860/&quot; title=&quot;Secrets of the JavaScript Ninja&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secrets of the JavaScript Ninja&lt;/a&gt;看到js中如何实现重载函数的部分, 然后对着一个只有7,8行代码的函数范例研究了2个多小时… 掩面羞愧难当ing… 为了让记忆更加深刻些, 特意记录下心得以防止以后再次跌在同一个坑里…&lt;/p&gt;
&lt;h2 id=&quot;JS_u7684_u91CD_u8F7D&quot;&gt;&lt;a href=&quot;#JS_u7684_u91CD_u8F7D&quot; class=&quot;headerlink&quot; title=&quot;JS的重载&quot;&gt;&lt;/a&gt;JS的重载&lt;/h2&gt;&lt;h3 id=&quot;u91CD_u8F7D_u51FD_u6570&quot;&gt;&lt;a href=&quot;#u91CD_u8F7D_u51FD_u6570&quot; class=&quot;headerlink&quot; title=&quot;重载函数&quot;&gt;&lt;/a&gt;重载函数&lt;/h3&gt;&lt;p&gt;重载函数的概念在很多OOP(面向对象的编程), 尤其是C系的语言中是很基本的, 其允许在同一范围中声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同，从而实现同一个函数可以执行不同的逻辑.&lt;/p&gt;
&lt;p&gt;但是, javascript中是不存在重载函数这个概念的, 不过其松散的函数(比如参数传递的数量和类型等限制), 变量尤其是其变量类型的自动判断的特点都让我们通常选择在函数的主体逻辑上实现根据参数的不同而执行不同的逻辑. 但是js中能模拟出真正的重载函数吗?&lt;/p&gt;
&lt;p&gt;答案是肯定的, 而且很简单, 真的很简答…&lt;/p&gt;
&lt;h3 id=&quot;JS_u4E2D_u7684_u5B9E_u73B0_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#JS_u4E2D_u7684_u5B9E_u73B0_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;JS中的实现方法&quot;&gt;&lt;/a&gt;JS中的实现方法&lt;/h3&gt;&lt;p&gt;首先我们来看源码:&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;addMethod&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(object, name, fn)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  old = object[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  object[name] = &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# console.log fn  # 通过调用fn来了解其每一步的逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fn.length == arguments.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fn.apply(@, arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; old == &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      old.apply(@, arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  values : [&lt;span class=&quot;string&quot;&gt;&quot;Dean Edwards&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Sam Stephenson&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Alex Russell&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addMethod example, &lt;span class=&quot;string&quot;&gt;&quot;find&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addMethod example, &lt;span class=&quot;string&quot;&gt;&quot;find&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ret.push(&lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;[i]) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;[i].indexOf(name) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addMethod example, &lt;span class=&quot;string&quot;&gt;&quot;find&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(first, last)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ret.push(&lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;[i]) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@values&lt;/span&gt;[i] == first + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + last&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log example.find()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [&quot;Dean Edwards&quot;, &quot;Sam Stephenson&quot;, &quot;Alex Russell&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log example.find(&lt;span class=&quot;string&quot;&gt;&quot;Sam&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [&quot;Sam Stephenson&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log example.find(&lt;span class=&quot;string&quot;&gt;&quot;Alex&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Russell&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [&quot;Alex Russell&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到我们通过&lt;code&gt;addMethod&lt;/code&gt;给example连续三次添加了一个&lt;code&gt;find&lt;/code&gt;函数, 三个函数之间首要区别就是接受参数的个数不同. 而通过后面的调用发现, 我们成功的实现了不同个数传参对不同&lt;code&gt;find&lt;/code&gt;的调用.&lt;/p&gt;
&lt;p&gt;下面具体来探讨下, 这是如何实现的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;首先是添加部分:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三次添加的&lt;code&gt;find&lt;/code&gt;所指向的函数逻辑是相同的, 区别在于其&lt;code&gt;old&lt;/code&gt;的指向是不同的, 第一次添加时没有&lt;code&gt;old&lt;/code&gt;, &lt;code&gt;old&lt;/code&gt;是undefined, 而第二次添加的时候&lt;code&gt;old&lt;/code&gt;是指向第一次添加时的&lt;code&gt;find&lt;/code&gt;的, 而第三次添加的时候&lt;code&gt;old&lt;/code&gt;是指向第二次的&lt;code&gt;find&lt;/code&gt;的;&lt;/li&gt;
&lt;li&gt;需要注意的是, 因为&lt;code&gt;old&lt;/code&gt;的存在, &lt;code&gt;fn&lt;/code&gt;这个变量在&lt;code&gt;addMethod&lt;/code&gt;域内和&lt;code&gt;old&lt;/code&gt;域内都是一直存在的(这里包含了一个闭包的实现 Closure):&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;addMethod&lt;/code&gt;域内因为每次其都会被调用更新, 所以三次添加后, 其指向的就是最后添加的那个函数, 本例中即两个参数的find;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;old&lt;/code&gt;域内, 则会指向前一次的find, 本例中第三次添加的&lt;code&gt;old&lt;/code&gt;的fn指向的就是第二次添加时&lt;code&gt;addMethod&lt;/code&gt;传入的find函数, 即一个参数的;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此外, 要记得&lt;code&gt;arguments.length&lt;/code&gt;是我们传入的参数个数, &lt;code&gt;fn.length&lt;/code&gt;则代表函数接受的参数个数;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;下面我们看下三次执行:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;example.find()&lt;/code&gt;:  毫无悬念, 因为此时&lt;code&gt;fn.length&lt;/code&gt;为2(&lt;code&gt;first&lt;/code&gt;,&lt;code&gt;last&lt;/code&gt;), 但是我们调用传入的&lt;code&gt;arguments&lt;/code&gt;长度为0, 所以需要调用&lt;code&gt;old&lt;/code&gt;, 即第二次添加的find函数, 此时&lt;code&gt;fn&lt;/code&gt;也顺势切换到一个参数的函数, 但还是和&lt;code&gt;arguments.length&lt;/code&gt;不同, 所以需要再次调用当前的&lt;code&gt;old&lt;/code&gt;, 此时&lt;code&gt;old&lt;/code&gt;指向的是第一次执行的&lt;code&gt;addMethod&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;变为0参数,和&lt;code&gt;arguments.length&lt;/code&gt;相同了, 我们就可以执行此时的&lt;code&gt;fn&lt;/code&gt;了, 即返回example中的全部values的函数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.find(&amp;quot;Sam&amp;quot;)&lt;/code&gt;:  同上, 我们还是需要从&lt;code&gt;fn.length&lt;/code&gt;为2的情况开始, 上溯到前一次, &lt;code&gt;fn.length&lt;/code&gt;为1时, 符合条件, 执行此时的&lt;code&gt;fn&lt;/code&gt;, 即根据&lt;code&gt;name&lt;/code&gt;查询;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.find(&amp;quot;Alex&amp;quot;,&amp;quot;Russell&amp;quot;)&lt;/code&gt;:  同理, 不过这一次就不用上溯了, 直接可以执行&lt;code&gt;fn&lt;/code&gt;了;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过在&lt;code&gt;addMethod&lt;/code&gt;的赋值函数中加入&lt;code&gt;console.log&lt;/code&gt;输出&lt;code&gt;fn&lt;/code&gt;, 你会把这一过程理解的更为清晰.&lt;/p&gt;
&lt;h2 id=&quot;u603B_u7ED3&quot;&gt;&lt;a href=&quot;#u603B_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;随着对JS的逐步深入, 越发觉得JS是一个很了不起的语言, 其兼容了Function Programming和OOP. 对开发者有一种极强的普适性, 可以很简单的写函数调用, 也可以实现很复杂的功能. 了不起!&lt;/p&gt;
&lt;p&gt;为了缩短文章的长度, 我选择coffeescript来展示源码(可以省掉很多空间), 其实coffeescript真的很简单, 记住几个基本的规则, 理解起来很容易, 逻辑都还是js的逻辑. 有兴趣的可以查看我之前写的 &lt;a href=&quot;/blog/2015/06/28/book-coffeescript-programming-with-jquery-rails-and-nodejs/&quot;&gt;CoffeeScript Programming with jQuery, Rails and Nodejs读书笔记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u6587_u732E&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u6587_u732E&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3176860/&quot; title=&quot;Secrets of the JavaScript Ninja&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secrets of the JavaScript Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coffeescript.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoffeeScript - 在线调试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Implement LRU Cache in JavaScript</title><loc>http://taoalpha.me/blog/2015/11/03/tech-javascript-lru-cache/</loc><publish>2015-11-03T05:00:00.000Z</publish><summary>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;LRU which is short for least recently used is a popular algorithm in cache. The basic idea is always put your items in order of used time, and when you insert new item into the fullfilled chache,remove the least recently used item in your memory.&lt;/p&gt;
&lt;h2 id=&quot;Implementation&quot;&gt;&lt;a href=&quot;#Implementation&quot; class=&quot;headerlink&quot; title=&quot;Implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;h3 id=&quot;O_28n_29&quot;&gt;&lt;a href=&quot;#O_28n_29&quot; class=&quot;headerlink&quot; title=&quot;O(n)&quot;&gt;&lt;/a&gt;O(n)&lt;/h3&gt;&lt;p&gt;At first, I plan to use a hashtable and a list with all keys to achieve it, and I did, but the time cost apparently too large: O(n) since I have to search the list to get the key and then get the value from the hashtable.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; LRUCache = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;capacity&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// save all key-value pairs in this hashtable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// save all keys in the stack with the order of last used time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.capacity = capacity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.updateKey = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// update the position of this key in keys &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; keyIndex = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys.indexOf(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys[keyIndex] = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// update the key to the head of the stack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys.push(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.get = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket.hasOwnProperty(key))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateKey(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.set = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key,value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.capacity &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;no memory to save 1 item&quot;&lt;/span&gt;);&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// update exist item &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket.hasOwnProperty(key))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket[key] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateKey(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// if the bucket is fullfilled, remove the least recently used item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length &amp;gt;= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.capacity)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dKey = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys.shift()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!dKey)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// if the dKey is undefined, shift() again&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dKey = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys.shift()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket[dKey]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// add new item and update the length&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bucket[key] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.keys.push(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length ++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Can we do better ? Definitely. We can optimize it to O(1) if we use double linked list to achieve the same function.&lt;/p&gt;
&lt;h3 id=&quot;O_281_29&quot;&gt;&lt;a href=&quot;#O_281_29&quot; class=&quot;headerlink&quot; title=&quot;O(1)&quot;&gt;&lt;/a&gt;O(1)&lt;/h3&gt;&lt;p&gt;If we reconstruct the LRUCache with a map and a bunch of nodes, we can implement the LRUCache with O(1).(Since we need to get the value by key, so it has to be a hashtable)&lt;/p&gt;
&lt;p&gt;Why? Since we can save the key and value in the node, and save all key-node pairs in the hashtable, and now we can get the value by key using hashtable, and we also have a list of nodes with order of last used time and the update on a linked list can be O(1).&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Illustration of the design:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       entry             entry             entry             entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *       ______            ______            ______            ______&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *      | tail |.newer =&amp;gt; |      |.newer =&amp;gt; |      |.newer =&amp;gt; | head |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *      |  A   |          |  B   |          |  C   |          |  D   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *      |______| &amp;lt;= older.|______| &amp;lt;= older.|______| &amp;lt;= older.|______|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; LRUCache = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;capacity&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.capacity = capacity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// save the head and tail so we can update it easily&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.node = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key,value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.val = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.newer = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.older = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.get = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map.hasOwnProperty(key))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateKey(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map[key].val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.updateKey = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; node = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// break the chain and reconnect with newer and older&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.newer)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node.newer.older= node.older&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head = node.older&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.older)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node.older.newer = node.newer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail = node.newer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// replace the node into head - newest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.older = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.newer = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head.newer = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// if no items in the bucket, set the tail to node too.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LRUCache.prototype.set = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key,value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; node = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.node(key,value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// update the value for exist entries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map.hasOwnProperty(key))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map[key].val = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateKey(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length &amp;gt;= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.capacity)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// remove the least recently used item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dKey = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail.newer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail.older = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map[dKey]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length --&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// insert node into the head&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.older = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// if have head, we need re-connect node with other nodes older than head&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head.newer = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.head = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// if no tail which means first insert, set the tail to node too&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tail = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map[key] = node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length ++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we can achieve set, get both with O(1).&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Here is some other implementations from others, if you are interested in it, check it yourself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chrisrng.svbtle.com/lru-cache-in-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LRU by Chrisr NG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rsms/js-lru/blob/master/lru.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LRU by rsms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript 闭包(Closure)初探</title><loc>http://taoalpha.me/blog/2015/07/12/tech-javascript-closure/</loc><publish>2015-07-12T07:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt; 在上篇重载的介绍中提到了Closure的概念, 正好今天看到Ninja中介绍Closure的这部分, 所以今天梳理记录下. Closure作为JS的高级用法之一, 对于JS开发而言有着极为重要的作用.&lt;/p&gt;
&lt;h2 id=&quot;Closure&quot;&gt;&lt;a href=&quot;#Closure&quot; class=&quot;headerlink&quot; title=&quot;Closure&quot;&gt;&lt;/a&gt;Closure&lt;/h2&gt;&lt;h3 id=&quot;Closure_u7684_u7ED3_u6784&quot;&gt;&lt;a href=&quot;#Closure_u7684_u7ED3_u6784&quot; class=&quot;headerlink&quot; title=&quot;Closure的结构&quot;&gt;&lt;/a&gt;Closure的结构&lt;/h3&gt;&lt;p&gt;什么是Closure? 更精确的说: 什么是JavaScript里面的Closure? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a closure is the scope created when a function is declared that allows the function to access and manipulate variables that are external to that function. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面是Ninja一书中对Closure的定义. 难懂吗? 应该不算难懂, 核心关键词就是: scope, function, access, manipulate, variables, external&lt;/p&gt;
&lt;p&gt;即一个Closure代指的是一个scope, 一个js的小型工作环境, 这一环境是随着一个函数的声明而出现的. 但是所有函数都会伴随着closure吗? 当然不是, 对于这种函数有特定的要求, 就是这个函数本身可以访问并且修改该函数外部的变量. 只有具备此性质的函数才伴随着Closure的出现.&lt;/p&gt;
&lt;p&gt;还是很难懂? 举几个例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;在浏览其中, 我们定义的一个单纯的全局函数, 会伴随closure的出现吗?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 答案是肯定的, 根据上述定义, 我们的全局函数是可以获取并操作其之外的变量的, 通常我们称为全局变量(定义在window对象中的变量);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;那有啥函数不伴随Closure出现吗?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 有, 我们可以认为window顶层是一个函数, 这个函数本身就没有外部的函数了, 自然也就没有Closure了.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如此一来, Closure岂不是随处可见? 那还有什么意义?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Closure确实随处可见. 但也正因为随处可见, 我们就会在clsore发现closure的嵌套, 我们可以在全局closure下, 定义我们自己的closure, 而利用closure的性质形成一个个小型的scope, 如此就可以构建并指定甚至操作我们的函数执行环境, 从而实现很多非常了不起的功能了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u5982_u4F55_u7406_u89E3Closure&quot;&gt;&lt;a href=&quot;#u5982_u4F55_u7406_u89E3Closure&quot; class=&quot;headerlink&quot; title=&quot;如何理解Closure&quot;&gt;&lt;/a&gt;如何理解Closure&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Closure 相当于一个保护罩, 其会在closure声明的那一刻为当前的scope(即此刻scope下所有的变量, 函数等, 即便他们是在closure之后声明或者是closure接受的参数)创建一个特殊的环境而不会收到垃圾回收的回收, 其存活周期完全依赖于closure自身的寿命;&lt;/li&gt;
&lt;li&gt;在浏览器环境下, 即便是全局定义的函数其实也是在一个大的closure之中的, window则是这个closure中的核心对象;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Closure_u7684_u7528_u6CD5&quot;&gt;&lt;a href=&quot;#Closure_u7684_u7528_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;Closure的用法&quot;&gt;&lt;/a&gt;Closure的用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Closure 通常的用法:&lt;ul&gt;
&lt;li&gt;封装私有变量: 一个函数内部定义的变量, 只有内部才能访问, 所以一个函数内部的函数(closure)就可以访问这个函数定义的局部变量;&lt;/li&gt;
&lt;li&gt;callback和timer函数中的应用: 对于嵌套在函数中的callback以及timers函数, 都可以访问函数内部定义的变量的, 虽然他们的context(this)通常都指向的是window全局对象或者某个特殊对象(比如jQuery.ajax的callback的this就是ajax构成的对象); 同时利用这一特点将变量定义在函数内来避免污染全局变量;&lt;/li&gt;
&lt;li&gt;改变函数工作环境(context), 在一定程度上它和&lt;code&gt;apply&lt;/code&gt;,&lt;code&gt;call&lt;/code&gt;的逻辑一致, 典型应用即Prototypt库中的bind函数(JS1.8.5以后就默认添加了bind函数), 详见下文;&lt;/li&gt;
&lt;li&gt;部分传参: 和上述中介绍的bind同理, 区别在于对参数的处理上, 部分传参的时候, 第一次传参可以传递部分参数, 希望之后补充的参数可以预置为undefined, 而在返回函数中, 也不是单纯的合并两次参数, 而是递归之前的传参, 将undefined的参数补上;&lt;/li&gt;
&lt;li&gt;重写函数: 利用closure可以对一些函数进行新的重写, 比如下例中的&lt;code&gt;memoize&lt;/code&gt;函数;&lt;/li&gt;
&lt;li&gt;结合匿名自触发函数: Closure和&lt;code&gt;(function(){})()&lt;/code&gt;的结合自然可以带来更多的想象力;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $.ajax &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://taoalpha.me/blog/api/latest.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;dataType&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'json'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .done (data)-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cc = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timer = setInterval -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cc &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;cc&lt;span class=&quot;subst&quot;&gt;#&amp;#123;cc&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;);&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;this&lt;span class=&quot;subst&quot;&gt;#&amp;#123;@&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;);cc++ &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; clearInterval timer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Function&lt;/span&gt;::bind -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# console.log arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fn = @; args = &lt;span class=&quot;attribute&quot;&gt;Array&lt;/span&gt;::slice.call(arguments);object = args.shift()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 此处将传入参数拆解, 默认第一个为要绑定的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# console.log arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn.apply object,args.concat Array.prototype.slice.call(arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 这里返回一个新的函数, 新函数唯一的功能调用绑定函数(fn), 并传入绑定中除了object以外的参数(args)和调用传入的参数(这次的arguments)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 部分传参中这里需要做参数处理:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# arg = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# for i in [0..args.length] when arg &amp;lt; arguments.length&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#   if args[i] == undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#     args[i] = arguments[arg++]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# fn.apply @, args&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 利用Closure包装缓存函数 memoized &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Function&lt;/span&gt;::memoized = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(key)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;property&quot;&gt;@_values&lt;/span&gt; = &lt;span class=&quot;property&quot;&gt;@_values&lt;/span&gt; || &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@_values&lt;/span&gt;[key]? &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@_values&lt;/span&gt;[key] &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;@_values&lt;/span&gt;[key] = @.apply(@,arguments)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Function&lt;/span&gt;::memoize = &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fn = @&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn.memoized.apply fn,arguments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;isPrime&lt;/span&gt; = (&lt;span class=&quot;params&quot;&gt;(key)&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prime = num != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;..num] &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; num % i ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prime = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ).memoize()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 利用自触发函数和closure来处理closure中的递归指数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;divs = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;'div'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;..divs.length]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  divs[i].addEventListener &lt;span class=&quot;string&quot;&gt;'click'&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert &lt;span class=&quot;string&quot;&gt;&quot;divs #&lt;span class=&quot;subst&quot;&gt;#&amp;#123;i&amp;#125;&lt;/span&gt; was clicked&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ,fasle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 如此执行的结果就是无路你点击哪个div, 都会显示的是 &quot;divs #&amp;#123;divs.length&amp;#125; was clicked&quot;,因为这里的i被保存了, 始终指向最后一个循环值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;..divs.length]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    divs[i].addEventListener &lt;span class=&quot;string&quot;&gt;'click'&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      alert &lt;span class=&quot;string&quot;&gt;&quot;divs #&lt;span class=&quot;subst&quot;&gt;#&amp;#123;i&amp;#125;&lt;/span&gt; was clicked&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ,fasle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过closure, 我们把每次传入的i都单独用另一个私有变量n存储起来, 这样每个div对应的指数就是唯一的了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u8C1C_u9898&quot;&gt;&lt;a href=&quot;#u8C1C_u9898&quot; class=&quot;headerlink&quot; title=&quot;谜题&quot;&gt;&lt;/a&gt;谜题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q:&lt;/strong&gt; 那么bind和call,apply的区别又是什么呢? 与其使用&lt;code&gt;fn.bind(object)&lt;/code&gt;, 为什么我不是用&lt;code&gt;fn.apply(object)&lt;/code&gt;或者&lt;code&gt;fn.call(object)&lt;/code&gt;呢?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bind returns a function which will act like the original function but with this predefined. It is usually used when you want to pass a function to an event handler or other async callback.&lt;/li&gt;
&lt;li&gt;call and apply will call a function immediately letting you specify both the value of this and any arguments the function will receive.&lt;/li&gt;
&lt;li&gt;bind和apply,call最大的区别就在于bind返回一个函数, 而apply, call则是执行一个函数. 所以bind通常用在一些异步事件处理中;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3176860/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secrets of the JavaScript Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coffeescript.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoffeeScript - 在线调试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/15677738/whats-the-difference-between-call-apply-and-bind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what’s the difference between ‘call/apply’ and ‘bind’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript callback学习笔记</title><loc>http://taoalpha.me/blog/2015/06/11/tech-javascript-callback-notes/</loc><publish>2015-06-11T11:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;今天帮朋友做一个网站, 涉及到js请求并且渲染数据. 因为js语言的特点使得其代码是由上至下依次执行的, 有一个比较恶心的问题在于这一执行顺序并不等同于其先后顺序, 如果中间有一步或者几步的后续执行比较耗费时间, js本身是不会等待其执行完再去执行下面的语句的. 如此就会出现一些因为执行时间而导致的问题, 尤其是请求和渲染数据的时候. 如果你分开来写, 顺次执行的时候, 请求这一步花费的时间比较多, 那么很可能渲染环节都不会得到执行…&lt;/p&gt;
&lt;p&gt;比如下述代码:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmpVar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeItOne();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpVar = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeItTwo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Second output: &quot;&lt;/span&gt;+tmpVar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeItOne&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tmpVar = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Output: &quot;&lt;/span&gt;+tmpVar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeItTwo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// setTimeout(changeItOne,100);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tmpVar = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Output of changeItTwo: &quot;&lt;/span&gt;+tmpVar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output of changeItTwo: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// second output: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 加上延时后输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Second output: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;callback&quot;&gt;&lt;a href=&quot;#callback&quot; class=&quot;headerlink&quot; title=&quot;callback&quot;&gt;&lt;/a&gt;callback&lt;/h2&gt;&lt;p&gt;那么, 我们如何确保这种情况下的执行顺序呢? callback.&lt;/p&gt;
&lt;p&gt;回调说白了就是在某个函数执行过程中在指定的情况下调用另一个函数的过程.&lt;/p&gt;
&lt;p&gt;基本调用方法:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;params,callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 主函数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 调用函数, 可以加上一些对应的限制条件来做调用判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  callback(anything_you_want_to_send_with);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;funOne&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;c&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;para = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 传参调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomething(para,funOne); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 隐式调用 - 利用匿名函数调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomething(para,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// data就是doSomething里面的callback()传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 调用函数内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然, 回调函数可以应用到很多地方, 甚至可以结合class, prototype以及apply,call从而模拟出私有函数, 私有变量等等~ 一切等你去挖掘! 哈哈&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weirss.me/new&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WeiRSS - 我在其search.js中就用到了多层回调函数的调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/53027.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javascript 回调函数笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Array Operation Cost in JavaScript</title><loc>http://taoalpha.me/blog/2015/10/30/tech-javascript-array-operation-cost/</loc><publish>2015-10-30T11:00:00.000Z</publish><summary>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;code&gt;concat()&lt;/code&gt;,&lt;code&gt;splice()&lt;/code&gt;,&lt;code&gt;slice()&lt;/code&gt;,&lt;code&gt;push()&lt;/code&gt;,&lt;code&gt;pop()&lt;/code&gt;,&lt;code&gt;shift()&lt;/code&gt;,&lt;code&gt;unshift()&lt;/code&gt;… all these handy functions belong to Array. We are using them everyday, but do you really know about them ? Time cost of a function in language like JavaScript is not easy to measurement, since different browsers use different javascript engine which will cause different implementation on same functions. But, normally, the basic operations will be the same.&lt;/p&gt;
&lt;p&gt;So today, I will test some basic array operations on NodeJS and compare the time cost between these operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST ENVIRONMENT:&lt;/strong&gt; Mac Air, iTerm, NodeJS v4.1.1&lt;/p&gt;
&lt;h2 id=&quot;Constructor&quot;&gt;&lt;a href=&quot;#Constructor&quot; class=&quot;headerlink&quot; title=&quot;Constructor&quot;&gt;&lt;/a&gt;Constructor&lt;/h2&gt;&lt;p&gt;We all know that we have several different ways to construct an array, the most frequently used are two methods I list below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Literal notation : &lt;code&gt;[ele1,ele2,...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; function : &lt;code&gt;new Array(ele1,ele2,...)&lt;/code&gt; or &lt;code&gt;new Array(length_of_array)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally there are no difference between these two methods. But if you are dealing with some real big datasets and you know exactly how long your array is and want to save a few time for some basic operations, you may should continue reading.&lt;/p&gt;
&lt;p&gt;The fundamental difference between these two methods is : literal notation declare an array with elements in it, &lt;code&gt;new Array(ele1,ele2,...)&lt;/code&gt; will do exactly the same, but &lt;code&gt;new Array(length_of_array)&lt;/code&gt; will only declare a length of a array(and create or allocate a memory for this array with its length).&lt;/p&gt;
&lt;p&gt;Here is a gif about the memory allocation will give you a clear understanding about it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gamealchemist.files.wordpress.com/2013/05/array.png&quot; alt=&quot;bad allocate&quot;&gt;&lt;/p&gt;
&lt;p&gt;The advantage of declaring with allocating is that it can improve the speed of constructing an array.&lt;/p&gt;
&lt;p&gt;As test I did, to construct a 100000 array with 0-99999 (average time cost):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use literal notation with push(): 8ms&lt;/li&gt;
&lt;li&gt;Use literal notation with unshift(): 2230ms&lt;/li&gt;
&lt;li&gt;Use literal notation with assigning directly by index: 5ms &lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;new Array(100000)&lt;/code&gt; with assigning directly by index: 2ms&lt;/li&gt;
&lt;li&gt;Use literal notation with assigning length first then assigning directly by index : 2ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apparently, it would save you some time if you declare the length before you assign the values.And if you don’t like to use the &lt;code&gt;new&lt;/code&gt;, you can still use literal notation and set the length manually.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// time cost for array constructing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ar = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with assigning directly&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;=&lt;span class=&quot;number&quot;&gt;99999&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ar[i] = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with assigning directly&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ar = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with push()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;=&lt;span class=&quot;number&quot;&gt;99999&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ar.push(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with push()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ar = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with unshift()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ar.unshift(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i --&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with unshift()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ar = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ar.length = &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with declaring length first&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;=&lt;span class=&quot;number&quot;&gt;99999&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ar[i] = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&quot;Literal notation with declaring length first&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Using new with length defined&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;=&lt;span class=&quot;number&quot;&gt;99999&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  arr[i] = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&quot;Using new with length defined&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;delete_and_remove&quot;&gt;&lt;a href=&quot;#delete_and_remove&quot; class=&quot;headerlink&quot; title=&quot;delete and remove&quot;&gt;&lt;/a&gt;delete and remove&lt;/h2&gt;&lt;p&gt;JavaScript does have a keyword for deleting: delete. For array, when you use &lt;code&gt;delete ar[i]&lt;/code&gt;, you actually assign &lt;code&gt;ar[i] = undefined&lt;/code&gt;. I recommend you to use the second method since it is a little faster.&lt;/p&gt;
&lt;p&gt;Test on 100000-length list (delete all elements):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete with “delete” keyword: 11ms&lt;/li&gt;
&lt;li&gt;Delete with assigning “undefined” to the value: 2ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of the two methods would not change the length of the array, but we can also use “pop()”, “shift()” to empty an array.&lt;/p&gt;
&lt;p&gt;Test on 100000-length list (remove all elements):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remove with “pop()”: 5ms &lt;/li&gt;
&lt;li&gt;remove with “shift()”: 18ms&lt;/li&gt;
&lt;li&gt;remove with splice() : 25ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the shift() will cost near 3 times of pop() and splice() even slower. &lt;/p&gt;
&lt;p&gt;Of course, under different conditions, you will choose different methods to achieve what you want.&lt;/p&gt;
&lt;h2 id=&quot;other_native_functions&quot;&gt;&lt;a href=&quot;#other_native_functions&quot; class=&quot;headerlink&quot; title=&quot;other native functions&quot;&gt;&lt;/a&gt;other native functions&lt;/h2&gt;&lt;p&gt;I did some tests on other basic native functions too. Here are the results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;splice() to insert 1000 elements into a 100000-length list : 60ms &lt;/li&gt;
&lt;li&gt;concat() two 100000-length lists : 1ms&lt;/li&gt;
&lt;li&gt;Use while loop and push to concat two 100000-length lists : 8ms&lt;/li&gt;
&lt;li&gt;slice() to hard copy one 100000-length list : 1ms&lt;/li&gt;
&lt;li&gt;Use while loop and push to hard copy one 100000-length list : 8ms&lt;/li&gt;
&lt;li&gt;Use while loop and assign value with predefined length to copy one 100000-length list : 2 (same as constructing part)&lt;/li&gt;
&lt;li&gt;indexOf() to search every element in a 100000-length list (the smaller the index is, the sooner it will be): 4600ms &lt;/li&gt;
&lt;li&gt;Use while loop to achieve the search : 7300ms&lt;/li&gt;
&lt;li&gt;Reverse (ordered list like 0 - 99999) : 1ms&lt;/li&gt;
&lt;li&gt;Reverse (ordered list like 99999 - 0) : 100ms (this is weird…)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of time, the native functions are the best methods to do the operation since the engine already done a lot to optimize them.&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Sometimes you will think these small difference between different methods is not important, since the technology is growing so fast, the difference will become so small that we can just ignore them. That’s 100% correct!&lt;/p&gt;
&lt;p&gt;I did these just because I am curious and sometimes, if you are dealing with a really large dataset, then maybe the nanoseconds count and you may want to use some small changes to optimize your code. Why don’t you always keep your code optimized all the time?&lt;/p&gt;
&lt;p&gt;That’s all!&lt;/p&gt;
</summary></url><url><title>修复rake aborted以及lsi warning问题</title><loc>http://taoalpha.me/blog/2015/06/10/tech-fix-rake-aborted-and-lsi-warning-problem/</loc><publish>2015-06-10T05:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;昨天升级了下ruby, 从2.0.0到2.2.2, 升级完jekyll, bundle等均完好无损, 当打包完一些更改push到github后, 想要用rake自动发布的时候发现rake不工作了…&lt;/p&gt;
&lt;h2 id=&quot;u4FEE_u590DRake&quot;&gt;&lt;a href=&quot;#u4FEE_u590DRake&quot; class=&quot;headerlink&quot; title=&quot;修复Rake&quot;&gt;&lt;/a&gt;修复Rake&lt;/h2&gt;&lt;h3 id=&quot;u9519_u8BEF_u4FE1_u606F&quot;&gt;&lt;a href=&quot;#u9519_u8BEF_u4FE1_u606F&quot; class=&quot;headerlink&quot; title=&quot;错误信息&quot;&gt;&lt;/a&gt;错误信息&lt;/h3&gt;&lt;p&gt;在jekyll跟目录运行rake后出现:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rake aborted!&lt;br&gt;require: cannot load such file – jekyll&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;错误代码指示在Rakefile的require “Jekyll” 一行.&lt;/p&gt;
&lt;h3 id=&quot;u9519_u8BEF_u539F_u56E0_u731C_u6D4B&quot;&gt;&lt;a href=&quot;#u9519_u8BEF_u539F_u56E0_u731C_u6D4B&quot; class=&quot;headerlink&quot; title=&quot;错误原因猜测&quot;&gt;&lt;/a&gt;错误原因猜测&lt;/h3&gt;&lt;p&gt;回忆了以下之前所有设计到jekyll和rake的操作就是ruby的升级了. 所以猜测应该是ruby升级所致. Google后没有找到合适的解答. 于是就自己折腾分析了一下, 猜测主要可能在与:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ruby版本号已经从2.0.0提升到2.2.2, 但是&lt;code&gt;bundle show jekyll&lt;/code&gt;的时候还是提示的是2.0.0的目录;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u4FEE_u590D_u65B9_u5F0F&quot;&gt;&lt;a href=&quot;#u4FEE_u590D_u65B9_u5F0F&quot; class=&quot;headerlink&quot; title=&quot;修复方式&quot;&gt;&lt;/a&gt;修复方式&lt;/h3&gt;&lt;p&gt;我首先尝试了利用gem重新安装jekyll, 然后利用其路径验证问题是否是版本号的原因, 但是发现&lt;code&gt;gem install jekyll&lt;/code&gt;命令一直处于卡死状态. 无论我切换&lt;a href=&quot;https://ruby.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝ruby源&lt;/a&gt;还是自有源都无效. 猜测gem也出了一些问题.&lt;/p&gt;
&lt;p&gt;接下来我尝试重新安装ruby 2.0.0, 试图恢复升级前的环境, 结果依然失败…&lt;/p&gt;
&lt;p&gt;于是我又彻底卸载了ruby, 重新用homebrew安装了ruby最新的2.2.2版本, 并且清楚了bundle的gems目录(里面那个2.0.0的目录), 然后重新安装了bundler, 再用bundler去恢复了所有的gems.&lt;/p&gt;
&lt;p&gt;成功!! 具体原因真心不知, Google没有找到解答, 只能自己瞎分析了, 如果有哪位知道原因, 记得告诉我哦&lt;/p&gt;
&lt;h2 id=&quot;jekyll_lsi_warning_u95EE_u9898&quot;&gt;&lt;a href=&quot;#jekyll_lsi_warning_u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;jekyll lsi warning问题&quot;&gt;&lt;/a&gt;jekyll lsi warning问题&lt;/h2&gt;&lt;h3 id=&quot;u95EE_u9898_u63CF_u8FF0&quot;&gt;&lt;a href=&quot;#u95EE_u9898_u63CF_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;成功修复了rake后, 心情大好, 再次开启jekyll准备记录以下这一过程~ 结果就发现build的时候出现大量的warning信息… 发现是lsi建立索引的那一步出的问题, 问题如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;warning: Comparable#== will no more rescue exceptions of #&amp;lt;=&amp;gt; in the next release.&lt;br&gt;warning: Return nil in #&amp;lt;=&amp;gt; if the comparison is inappropriate or avoid such comparison.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前环境:&lt;/p&gt;
&lt;p&gt;jekyll (2.5.3)&lt;br&gt;classifier-reborn (2.0.3)&lt;br&gt;rb-gsl (1.16.0.4)&lt;/p&gt;
&lt;h3 id=&quot;u4FEE_u590D_u95EE_u9898&quot;&gt;&lt;a href=&quot;#u4FEE_u590D_u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;修复问题&quot;&gt;&lt;/a&gt;修复问题&lt;/h3&gt;&lt;p&gt;这次Google了下找到了一个遭遇相同的兄弟! 哈哈&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/classifier-reborn/pull/33&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fix lsi.rb Comparable#== warning #33&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据解答, 大意就是需要替换出错行(237行)的&lt;code&gt;pair[0] == doc&lt;/code&gt;判断为 &lt;code&gt;pair[0].eql? doc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;why? 于是我查了下ruby中&lt;code&gt;eql?&lt;/code&gt;和&lt;code&gt;==&lt;/code&gt;的区别:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;3D_3D__u2014_generic__u201Cequality_u201D&quot;&gt;&lt;a href=&quot;#3D_3D__u2014_generic__u201Cequality_u201D&quot; class=&quot;headerlink&quot; title=&quot;== — generic “equality”&quot;&gt;&lt;/a&gt;== — generic “equality”&lt;/h4&gt;&lt;p&gt;最常用的相等判断, 属于值判断;&lt;/p&gt;
&lt;h4 id=&quot;eql_3F__u2014_Hash_equality&quot;&gt;&lt;a href=&quot;#eql_3F__u2014_Hash_equality&quot; class=&quot;headerlink&quot; title=&quot;eql? — Hash equality&quot;&gt;&lt;/a&gt;eql? — Hash equality&lt;/h4&gt;&lt;p&gt;The eql? method returns true if obj and other refer to the same hash key. 一般Hash对象都会使用eql?来判断其成员之间的相等与否. 当然此外, 在数字判断上, &lt;code&gt;==&lt;/code&gt;与&lt;code&gt;eql?&lt;/code&gt;的区别也有点像严格判断(1 和 1.0, 后者就会判断为false);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然稀里糊涂, 但感觉很有道理的样子.. 传说中的不明觉厉吗…&lt;/p&gt;
</summary></url><url><title>ES6 General Summary</title><loc>http://taoalpha.me/blog/2015/11/06/tech-es6-general-summary/</loc><publish>2015-11-06T05:00:00.000Z</publish><summary>&lt;blockquote&gt;
&lt;p&gt;This post is a copy of &lt;a href=&quot;https://github.com/lukehoban/es6features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Luke Hoban - ES6Features repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard.  ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is &lt;a href=&quot;http://kangax.github.io/es5-compat-table/es6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;underway now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 standard&lt;/a&gt; for full specification of the ECMAScript 6 language.&lt;/p&gt;
&lt;h2 id=&quot;ECMAScript_6_Features&quot;&gt;&lt;a href=&quot;#ECMAScript_6_Features&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6 Features&quot;&gt;&lt;/a&gt;ECMAScript 6 Features&lt;/h2&gt;&lt;h3 id=&quot;Arrows&quot;&gt;&lt;a href=&quot;#Arrows&quot; class=&quot;headerlink&quot; title=&quot;Arrows&quot;&gt;&lt;/a&gt;Arrows&lt;/h3&gt;&lt;p&gt;Arrows are a function shorthand using the &lt;code&gt;=&amp;gt;&lt;/code&gt; syntax.  They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript.  They support both statement block bodies as well as expression bodies which return the value of the expression.  Unlike functions, arrows share the same lexical &lt;code&gt;this&lt;/code&gt; as their surrounding code.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Expression bodies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; odds = evens.map(v =&amp;gt; v + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = evens.map((v, i) =&amp;gt; v + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pairs = evens.map(v =&amp;gt; (&amp;#123;even: v, odd: v + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Statement bodies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums.forEach(v =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v % &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fives.push(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Lexical this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bob = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _name: &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _friends: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  printFriends() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._friends.forEach(f =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._name + &lt;span class=&quot;string&quot;&gt;&quot; knows &quot;&lt;/span&gt; + f));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Classes&quot;&gt;&lt;a href=&quot;#Classes&quot; class=&quot;headerlink&quot; title=&quot;Classes&quot;&gt;&lt;/a&gt;Classes&lt;/h3&gt;&lt;p&gt;ES6 classes are a simple sugar over the prototype-based OO pattern.  Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability.  Classes support prototype-based inheritance, super calls, instance and static methods and constructors.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SkinnedMesh&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;THREE&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Mesh&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(geometry, materials) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(geometry, materials);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.idMatrix = SkinnedMesh.defaultMatrix();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bones = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.boneMatrices = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  update(camera) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  get boneCount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bones.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set matrixType(matrixType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.idMatrix = SkinnedMesh[matrixType]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  static defaultMatrix() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Matrix4();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Enhanced_Object_Literals&quot;&gt;&lt;a href=&quot;#Enhanced_Object_Literals&quot; class=&quot;headerlink&quot; title=&quot;Enhanced Object Literals&quot;&gt;&lt;/a&gt;Enhanced Object Literals&lt;/h3&gt;&lt;p&gt;Object literals are extended to support setting the prototype at construction, shorthand for &lt;code&gt;foo: foo&lt;/code&gt; assignments, defining methods, making super calls, and computing property names with expressions.  Together, these also bring object literals and class declarations closer together, and let object-based design benefit from some of the same conveniences.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// __proto__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __proto__: theProtoObj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Shorthand for ‘handler: handler’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    toString() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Super calls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;d &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Computed (dynamic) property names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ &lt;span class=&quot;string&quot;&gt;'prop_'&lt;/span&gt; + (() =&amp;gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)() ]: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Template_Strings&quot;&gt;&lt;a href=&quot;#Template_Strings&quot; class=&quot;headerlink&quot; title=&quot;Template Strings&quot;&gt;&lt;/a&gt;Template Strings&lt;/h3&gt;&lt;p&gt;Template strings provide syntactic sugar for constructing strings.  This is similar to string interpolation features in Perl, Python and more.  Optionally, a tag can be added to allow the string construction to be customized, avoiding injection attacks or constructing higher level data structures from string contents.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Basic literal string creation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`In JavaScript '\n' is a line-feed.`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Multiline strings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`In JavaScript this is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; not legal.`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// String interpolation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, time = &lt;span class=&quot;string&quot;&gt;&quot;today&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;, how are you &lt;span class=&quot;subst&quot;&gt;$&amp;#123;time&amp;#125;&lt;/span&gt;?`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Construct an HTTP request prefix is used to interpret the replacements and construction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST&lt;span class=&quot;string&quot;&gt;`http://foo.org/bar?a=&lt;span class=&quot;subst&quot;&gt;$&amp;#123;a&amp;#125;&lt;/span&gt;&amp;amp;b=&lt;span class=&quot;subst&quot;&gt;$&amp;#123;b&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Content-Type: application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     X-Credentials: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;credentials&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#123; &quot;foo&quot;: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;foo&amp;#125;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &quot;bar&quot;: &lt;span class=&quot;subst&quot;&gt;$&amp;#123;bar&amp;#125;&lt;/span&gt;&amp;#125;`&lt;/span&gt;(myOnReadyStateChangeHandler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Destructuring&quot;&gt;&lt;a href=&quot;#Destructuring&quot; class=&quot;headerlink&quot; title=&quot;Destructuring&quot;&gt;&lt;/a&gt;Destructuring&lt;/h3&gt;&lt;p&gt;Destructuring allows binding using pattern matching, with support for matching arrays and objects.  Destructuring is fail-soft, similar to standard object lookup &lt;code&gt;foo[&amp;quot;bar&amp;quot;]&lt;/code&gt;, producing &lt;code&gt;undefined&lt;/code&gt; values when not found.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// list matching&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [a, , b] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// object matching&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; op: a, lhs: &amp;#123; op: b &amp;#125;, rhs: c &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       = getASTNode()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// object matching shorthand&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// binds `op`, `lhs` and `rhs` in scope&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;op, lhs, rhs&amp;#125; = getASTNode()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Can be used in parameter position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123;name: x&amp;#125;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g(&amp;#123;name: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fail-soft destructuring&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [a] = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fail-soft destructuring with defaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Default_+_Rest_+_Spread&quot;&gt;&lt;a href=&quot;#Default_+_Rest_+_Spread&quot; class=&quot;headerlink&quot; title=&quot;Default + Rest + Spread&quot;&gt;&lt;/a&gt;Default + Rest + Spread&lt;/h3&gt;&lt;p&gt;Callee-evaluated default parameter values.  Turn an array into consecutive arguments in a function call.  Bind trailing parameters to an array.  Rest replaces the need for &lt;code&gt;arguments&lt;/code&gt; and addresses common cases more directly.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y=12&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// y is 12 if not passed (or passed as undefined)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, ...y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// y is an Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x * y.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y, z&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Pass each elem of array as argument&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(...[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) == &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Let_+_Const&quot;&gt;&lt;a href=&quot;#Let_+_Const&quot; class=&quot;headerlink&quot; title=&quot;Let + Const&quot;&gt;&lt;/a&gt;Let + Const&lt;/h3&gt;&lt;p&gt;Block-scoped binding constructs.  &lt;code&gt;let&lt;/code&gt; is the new &lt;code&gt;var&lt;/code&gt;.  &lt;code&gt;const&lt;/code&gt; is single-assignment.  Static restrictions prevent use before assignment.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// okay, block scoped name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = &lt;span class=&quot;string&quot;&gt;&quot;sneaky&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// error, const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      x = &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// error, already declared in block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x = &lt;span class=&quot;string&quot;&gt;&quot;inner&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Iterators_+_For-Of&quot;&gt;&lt;a href=&quot;#Iterators_+_For-Of&quot; class=&quot;headerlink&quot; title=&quot;Iterators + For..Of&quot;&gt;&lt;/a&gt;Iterators + For..Of&lt;/h3&gt;&lt;p&gt;Iterator objects enable custom iteration like CLR IEnumerable or Java Iterable.  Generalize &lt;code&gt;for..in&lt;/code&gt; to custom iterator-based iteration with &lt;code&gt;for..of&lt;/code&gt;.  Don’t require realizing an array, enabling lazy design patterns like LINQ.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fibonacci = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;.iterator]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pre = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, cur = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [pre, cur] = [cur, pre + cur];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; done: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, value: cur &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; fibonacci) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// truncate the sequence at 1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Iteration is based on these duck-typed interfaces (using &lt;a href=&quot;http://typescriptlang.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt; type syntax for exposition only):&lt;br&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;interface&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; IteratorResult &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  done: &lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;interface&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Iterator &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  next(): IteratorResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;interface&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Iterable &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [Symbol.iterator](): Iterator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generators&quot;&gt;&lt;a href=&quot;#Generators&quot; class=&quot;headerlink&quot; title=&quot;Generators&quot;&gt;&lt;/a&gt;Generators&lt;/h3&gt;&lt;p&gt;Generators simplify iterator-authoring using &lt;code&gt;function*&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;.  A function declared as function* returns a Generator instance.  Generators are subtypes of iterators which include additional  &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt;.  These enable values to flow back into the generator, so &lt;code&gt;yield&lt;/code&gt; is an expression form which returns a value (or throws).&lt;/p&gt;
&lt;p&gt;Note: Can also be used to enable ‘await’-like async programming, see also ES7 &lt;code&gt;await&lt;/code&gt; proposal.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fibonacci = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;.iterator]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;*(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pre = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, cur = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = pre;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pre = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cur += temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; fibonacci) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// truncate the sequence at 1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The generator interface is (using &lt;a href=&quot;http://typescriptlang.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt; type syntax for exposition only):&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;interface&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Generator &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; Iterator &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next(value?: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;): IteratorResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;(exception: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Unicode&quot;&gt;&lt;a href=&quot;#Unicode&quot; class=&quot;headerlink&quot; title=&quot;Unicode&quot;&gt;&lt;/a&gt;Unicode&lt;/h3&gt;&lt;p&gt;Non-breaking additions to support full Unicode, including new Unicode literal form in strings and new RegExp &lt;code&gt;u&lt;/code&gt; mode to handle code points, as well as new APIs to process strings at the 21bit code points level.  These additions support building global apps in JavaScript.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// same as ES5.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;𠮷&quot;&lt;/span&gt;.length == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// new RegExp behaviour, opt-in ‘u’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;𠮷&quot;&lt;/span&gt;.match(&lt;span class=&quot;regexp&quot;&gt;/./u&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// new form&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;\u&amp;#123;20BB7&amp;#125;&quot;&lt;/span&gt;==&lt;span class=&quot;string&quot;&gt;&quot;𠮷&quot;&lt;/span&gt;==&lt;span class=&quot;string&quot;&gt;&quot;\uD842\uDFB7&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// new String ops&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;𠮷&quot;&lt;/span&gt;.codePointAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0x20BB7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for-of iterates code points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;𠮷&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Modules&quot;&gt;&lt;a href=&quot;#Modules&quot; class=&quot;headerlink&quot; title=&quot;Modules&quot;&gt;&lt;/a&gt;Modules&lt;/h3&gt;&lt;p&gt;Language-level support for modules for component definition.  Codifies patterns from popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour defined by a host-defined default loader.  Implicitly async model – no code executes until requested modules are available and processed.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// lib/math.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pi = &lt;span class=&quot;number&quot;&gt;3.141593&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// app.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; math &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;lib/math&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;2π = &quot;&lt;/span&gt; + math.sum(math.pi, math.pi));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// otherApp.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;sum, pi&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;lib/math&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;2π = &quot;&lt;/span&gt; + sum(pi, pi));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Some additional features include &lt;code&gt;export default&lt;/code&gt; and &lt;code&gt;export *&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// lib/mathplusplus.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; * from &lt;span class=&quot;string&quot;&gt;&quot;lib/math&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; e = &lt;span class=&quot;number&quot;&gt;2.71828182846&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// app.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ln, &amp;#123;pi, e&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;lib/mathplusplus&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;2π = &quot;&lt;/span&gt; + ln(e)*pi*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Module_Loaders&quot;&gt;&lt;a href=&quot;#Module_Loaders&quot; class=&quot;headerlink&quot; title=&quot;Module Loaders&quot;&gt;&lt;/a&gt;Module Loaders&lt;/h3&gt;&lt;p&gt;Module loaders support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic loading&lt;/li&gt;
&lt;li&gt;State isolation&lt;/li&gt;
&lt;li&gt;Global namespace isolation&lt;/li&gt;
&lt;li&gt;Compilation hooks&lt;/li&gt;
&lt;li&gt;Nested virtualization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default module loader can be configured, and new loaders can be constructed to evaluate and load code in isolated or constrained contexts.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Dynamic loading – ‘System’ is default loader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.import(&lt;span class=&quot;string&quot;&gt;'lib/math'&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;m&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&lt;span class=&quot;string&quot;&gt;&quot;2π = &quot;&lt;/span&gt; + m.sum(m.pi, m.pi));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create execution sandboxes – new Loaders&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; loader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Loader(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  global: fixup(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// replace ‘console.log’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.eval(&lt;span class=&quot;string&quot;&gt;&quot;console.log('hello world!');&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Directly manipulate module cache&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.get(&lt;span class=&quot;string&quot;&gt;'jquery'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.set(&lt;span class=&quot;string&quot;&gt;'jquery'&lt;/span&gt;, Module(&amp;#123;$: $&amp;#125;)); &lt;span class=&quot;comment&quot;&gt;// WARNING: not yet finalized&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Map_+_Set_+_WeakMap_+_WeakSet&quot;&gt;&lt;a href=&quot;#Map_+_Set_+_WeakMap_+_WeakSet&quot; class=&quot;headerlink&quot; title=&quot;Map + Set + WeakMap + WeakSet&quot;&gt;&lt;/a&gt;Map + Set + WeakMap + WeakSet&lt;/h3&gt;&lt;p&gt;Efficient data structures for common algorithms.  WeakMaps provides leak-free object-key’d side tables.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Sets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.add(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;).add(&lt;span class=&quot;string&quot;&gt;&quot;goodbye&quot;&lt;/span&gt;).add(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.size === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.has(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;) === &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Maps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Map&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.set(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.set(s, &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.get(s) == &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Weak Maps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;WeakMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wm.set(s, &amp;#123; extra: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wm.size === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Weak Sets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ws = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;WeakSet&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ws.add(&amp;#123; data: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Because the added object has no other references, it will not be held in the set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Proxies&quot;&gt;&lt;a href=&quot;#Proxies&quot; class=&quot;headerlink&quot; title=&quot;Proxies&quot;&gt;&lt;/a&gt;Proxies&lt;/h3&gt;&lt;p&gt;Proxies enable creation of objects with the full range of behaviors available to host objects.  Can be used for interception, object virtualization, logging/profiling, etc.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Proxying a normal object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handler = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;receiver, name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`Hello, &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;!`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;(target, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.world === &lt;span class=&quot;string&quot;&gt;'Hello, world!'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Proxying a function object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'I am the target'&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handler = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apply: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;receiver, ...args&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'I am the proxy'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;(target, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p() === &lt;span class=&quot;string&quot;&gt;'I am the proxy'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There are traps available for all of the runtime-level meta-operations:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handler =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  get:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  has:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  deleteProperty:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apply:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  construct:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getOwnPropertyDescriptor:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  defineProperty:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getPrototypeOf:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setPrototypeOf:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enumerate:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ownKeys:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  preventExtensions:...,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  isExtensible:...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Symbols&quot;&gt;&lt;a href=&quot;#Symbols&quot; class=&quot;headerlink&quot; title=&quot;Symbols&quot;&gt;&lt;/a&gt;Symbols&lt;/h3&gt;&lt;p&gt;Symbols enable access control for object state.  Symbols allow properties to be keyed by either &lt;code&gt;string&lt;/code&gt; (as in ES5) or &lt;code&gt;symbol&lt;/code&gt;.  Symbols are a new primitive type. Optional &lt;code&gt;description&lt;/code&gt; parameter used in debugging - but is not part of identity.  Symbols are unique (like gensym), but not private since they are exposed via reflection features like &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyClass = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// module scoped symbol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;privateData&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[key] = privateData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MyClass.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doStuff: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ... &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[key] ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MyClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyClass(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c[&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;] === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Subclassable_Built-ins&quot;&gt;&lt;a href=&quot;#Subclassable_Built-ins&quot; class=&quot;headerlink&quot; title=&quot;Subclassable Built-ins&quot;&gt;&lt;/a&gt;Subclassable Built-ins&lt;/h3&gt;&lt;p&gt;In ES6, built-ins like &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; and DOM &lt;code&gt;Element&lt;/code&gt;s can be subclassed.&lt;/p&gt;
&lt;p&gt;Object construction for a function named &lt;code&gt;Ctor&lt;/code&gt; now uses two-phases (both virtually dispatched):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;Ctor[@@create]&lt;/code&gt; to allocate the object, installing any special behavior&lt;/li&gt;
&lt;li&gt;Invoke constructor on new instance to initialize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The known &lt;code&gt;@@create&lt;/code&gt; symbol is available via &lt;code&gt;Symbol.create&lt;/code&gt;.  Built-ins now expose their &lt;code&gt;@@create&lt;/code&gt; explicitly.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Pseudo-code of Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor(...args) &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static [&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;.create]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Install special [[DefineOwnProperty]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// to magically update 'length'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// User code of Array subclass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyArray&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor(...args) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(...args); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Two-phase 'new':&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1) Call @@create to allocate object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2) Invoke constructor on new instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.length == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Math_+_Number_+_String_+_Array_+_Object_APIs&quot;&gt;&lt;a href=&quot;#Math_+_Number_+_String_+_Array_+_Object_APIs&quot; class=&quot;headerlink&quot; title=&quot;Math + Number + String + Array + Object APIs&quot;&gt;&lt;/a&gt;Math + Number + String + Array + Object APIs&lt;/h3&gt;&lt;p&gt;Many new library additions, including core Math libraries, Array conversion helpers, String helpers, and Object.assign for copying.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.EPSILON&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isInteger(&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.isNaN(&lt;span class=&quot;string&quot;&gt;&quot;NaN&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.acosh(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1.762747174039086&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.hypot(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.imul(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;abcde&quot;&lt;/span&gt;.includes(&lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;.repeat(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;abcabcabc&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'*'&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// Returns a real Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Similar to new Array(...), but without special one-arg behavior&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].fill(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// [0,7,7]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].find(x =&amp;gt; x == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].findIndex(x =&amp;gt; x == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;].copyWithin(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 1, 2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;].entries() &lt;span class=&quot;comment&quot;&gt;// iterator [0, &quot;a&quot;], [1,&quot;b&quot;], [2,&quot;c&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;].keys() &lt;span class=&quot;comment&quot;&gt;// iterator 0, 1, 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;].values() &lt;span class=&quot;comment&quot;&gt;// iterator &quot;a&quot;, &quot;b&quot;, &quot;c&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(Point, &amp;#123; origin: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Point(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Binary_and_Octal_Literals&quot;&gt;&lt;a href=&quot;#Binary_and_Octal_Literals&quot; class=&quot;headerlink&quot; title=&quot;Binary and Octal Literals&quot;&gt;&lt;/a&gt;Binary and Octal Literals&lt;/h3&gt;&lt;p&gt;Two new numeric literal forms are added for binary (&lt;code&gt;b&lt;/code&gt;) and octal (&lt;code&gt;o&lt;/code&gt;).&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0b111110111&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0o767&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Promises&quot;&gt;&lt;a href=&quot;#Promises&quot; class=&quot;headerlink&quot; title=&quot;Promises&quot;&gt;&lt;/a&gt;Promises&lt;/h3&gt;&lt;p&gt;Promises are a library for asynchronous programming.  Promises are a first class representation of a value that may be made available in the future.  Promises are used in many existing JavaScript libraries.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeout&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;duration = 0&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(resolve, duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = timeout(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;).then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; timeout(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hmm&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(err =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all([timeout(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), timeout(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Reflect_API&quot;&gt;&lt;a href=&quot;#Reflect_API&quot; class=&quot;headerlink&quot; title=&quot;Reflect API&quot;&gt;&lt;/a&gt;Reflect API&lt;/h3&gt;&lt;p&gt;Full reflection API exposing the runtime-level meta-operations on objects.  This is effectively the inverse of the Proxy API, and allows making calls corresponding to the same meta-operations as the proxy traps.  Especially useful for implementing proxies.&lt;/p&gt;
&lt;h3 id=&quot;Tail_Calls&quot;&gt;&lt;a href=&quot;#Tail_Calls&quot; class=&quot;headerlink&quot; title=&quot;Tail Calls&quot;&gt;&lt;/a&gt;Tail Calls&lt;/h3&gt;&lt;p&gt;Calls in tail-position are guaranteed to not grow the stack unboundedly.  Makes recursive algorithms safe in the face of unbounded inputs.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;factorial&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n, acc = 1&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;    'use strict'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; acc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; factorial(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n * acc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Stack overflow in most implementations today,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// but safe on arbitrary inputs in ES6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Referrence&quot;&gt;&lt;a href=&quot;#Referrence&quot; class=&quot;headerlink&quot; title=&quot;Referrence&quot;&gt;&lt;/a&gt;Referrence&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lukehoban/es6features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Use Django with Bower and Pipeline</title><loc>http://taoalpha.me/blog/2015/09/07/tech-django-with-bower-and-pipeline/</loc><publish>2015-09-07T08:00:00.000Z</publish><summary>&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Since I decided to focus on python and JS, I started to dig into these two babies.&lt;/p&gt;
&lt;p&gt;I use django as my web framework in python, so how to build a website easier is what I most concerned. I used yeoman for a while, pretty amazing and convenient, especially the bower and compressor, compiler.&lt;/p&gt;
&lt;p&gt;So I did some search and study, trying to integrate the bower and compressor, compiler into django since I am getting used to the yeoman workflow.&lt;/p&gt;
&lt;h2 id=&quot;How_to_do_that&quot;&gt;&lt;a href=&quot;#How_to_do_that&quot; class=&quot;headerlink&quot; title=&quot;How to do that&quot;&gt;&lt;/a&gt;How to do that&lt;/h2&gt;&lt;p&gt;Python is great for extensions. It has so many modules you can find and build for it. So in order to integrate the bower and compressor, compiler into django, we need two modules:&lt;/p&gt;
&lt;h3 id=&quot;django-bower&quot;&gt;&lt;a href=&quot;#django-bower&quot; class=&quot;headerlink&quot; title=&quot;django-bower&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nvbn/django-bower&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;django-bower&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Just like other modules, you can install django-bower easily through &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install django-bower&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After you installed , you need add it into your &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in your project settings with the name is ‘djangobower’. And If you don’t want to add the component file path by youself, you can use &lt;code&gt;djangobower.finders.BowerFinder&lt;/code&gt; to do that for you. Just add it into your &lt;code&gt;INSTALLED_FINDERS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also set the &lt;code&gt;BOWER_COMPONENTS_ROOT&lt;/code&gt; to put all your packages into one place. And if you want, you can set the path to bower manually: &lt;code&gt;BOWER_PATH=path_to_bower&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So after these, how to use it?&lt;/p&gt;
&lt;p&gt;Easy, you can manage your packages in your project settings with &lt;code&gt;BOWER_INSTALLED_APPS=(&amp;#39;jquery&amp;#39;,&amp;#39;bootstrap#4.0.0-alpha&amp;#39;,)&lt;/code&gt;, and put all your packages names into it. Just similar to what you did in &lt;code&gt;bower.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And for installing all the packages, you just need to run &lt;code&gt;python manage.py bower_install -- --allow-root&lt;/code&gt;(you can get rid of the &lt;code&gt;-- --allow-root&lt;/code&gt; if you don’t receive the sudo error)&lt;/p&gt;
&lt;p&gt;And it will install all the packages you have listed in your settings.&lt;/p&gt;
&lt;p&gt;The last step and most important step, you need to collect all your static files into your static folder. Just run:&lt;br&gt;&lt;code&gt;python manage.py collectstatic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can just put&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% load static %&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;in the top of your template files and use&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% static &amp;#39;static_path_to_you_modlue_file&amp;#39; %&amp;#125; &amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;anywhere you want.&lt;/p&gt;
&lt;p&gt;That’s it. Pretty much all about &lt;code&gt;django-bower&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;django-pipeline&quot;&gt;&lt;a href=&quot;#django-pipeline&quot; class=&quot;headerlink&quot; title=&quot;django-pipeline&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/cyberdelia/django-pipeline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;django-pipeline&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we got bower, so next step we need to get the compressor and compiler.&lt;/p&gt;
&lt;p&gt;I use coffee-script as my pre-processor for JS. It’s easy and super cool!!! Strongly recommended!&lt;/p&gt;
&lt;p&gt;Bower is a pretty cool package manager, but it has nothing to do with your own scripts or stylesheets or html files. So in order to compress the files to minimize the size of files and to use coffee-script, sass in django. You can install &lt;code&gt;django-pipeline&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Just like &lt;code&gt;django-bower&lt;/code&gt;, you can also install &lt;code&gt;django-pipeline&lt;/code&gt; with pip:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install django-pipeline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Same as &lt;code&gt;django-bower&lt;/code&gt;, you need put some essentials into your project setting file.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APPS = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;'pipeline'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STATICFILES_STORAGE = &lt;span class=&quot;string&quot;&gt;'pipeline.storage.PipelineCachedStorage'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# if you don't want the version files, you can just use `PipelineStorage` instead of `PipelineCachedStorage`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STATICFILES_FINDERS = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;'django.contrib.staticfiles.finders.FileSystemFinder'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;'django.contrib.staticfiles.finders.AppDirectoriesFinder'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;'pipeline.finders.PipelineFinder'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STATICFILES_DIRS = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;'absolute_path_to_your_static_folder'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# this will tell finders to find static files in these folders&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STATICFILES_STORAGE = &lt;span class=&quot;string&quot;&gt;'pipeline.storage.PipelineStorage'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIPELINE_ENABLED = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This will enable the compress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIPELINE_CSS = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;'group_name'&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'source_filenames'&lt;/span&gt;: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;'relative_path_to_your_files'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'output_filename'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'relative_path_to_your_output_file'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'extra_context'&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;'media'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'screen,projection'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# in source_filenames, the path of your files is relative to your static file dirs, the Finders will look for each folder you set in the STATICFILES_DIRS.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# in output_filename, the path is relative to the STATIC_ROOT you set in your settings.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIPELINE_JS = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;'group_name'&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'source_filenames'&lt;/span&gt;: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;'relative_path_to_your_files'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'output_filename'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'relative_path_to_your_output_file'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# same with css&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIPELINE_COMPILERS = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;'pipeline.compilers.coffee.CoffeeScriptCompiler'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;'pipeline.compilers.sass.SASSCompiler'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# in order to use these compilers, you need install them first !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After finish the configuration, we can use it. In my case, I create a &lt;code&gt;customize&lt;/code&gt; folder to store all the customized styles and scripts. So i put this folder into my &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; and create a simple group in &lt;code&gt;PIPELINE_CSS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, just run the &lt;code&gt;python manage.py collectstatic&lt;/code&gt;. All your file will be copying and moving to your &lt;code&gt;STATIC_ROOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Same with &lt;code&gt;django-bower&lt;/code&gt;, you can set the path to &lt;code&gt;sass&lt;/code&gt; or &lt;code&gt;coffee-script&lt;/code&gt; manually if you want (like &lt;code&gt;PIPEPLINE_SASS_BINARY=&amp;#39;&amp;#39;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In your template, you can either load the file like what you did in &lt;code&gt;django-bower&lt;/code&gt;(or default way, precisely), or you can load it using &lt;code&gt;pipeline&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;put&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% load pipeline %&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;into the top of your template files, and use &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;&amp;#123;% stylesheet &amp;#39;group_name&amp;#39;&amp;#125;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; to import the stylesheet, same for javascript with &lt;code&gt;javascript&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;All done.&lt;/p&gt;
&lt;h2 id=&quot;Enjoy_it&quot;&gt;&lt;a href=&quot;#Enjoy_it&quot; class=&quot;headerlink&quot; title=&quot;Enjoy it&quot;&gt;&lt;/a&gt;Enjoy it&lt;/h2&gt;&lt;p&gt;Now you have bower, coffee-script, sass in your django. Enjoy the modern web coding style!!&lt;/p&gt;
&lt;p&gt;Thanks &amp;amp; Best!&lt;/p&gt;
</summary></url><url><title>HTML5以及CSS3兼容方法</title><loc>http://taoalpha.me/blog/2015/05/30/tech-css3-support-test/</loc><publish>2015-05-30T12:00:00.000Z</publish><summary>&lt;h2 id=&quot;u4E3A_u4EC0_u4E48_u505A_u517C_u5BB9_u6027&quot;&gt;&lt;a href=&quot;#u4E3A_u4EC0_u4E48_u505A_u517C_u5BB9_u6027&quot; class=&quot;headerlink&quot; title=&quot;为什么做兼容性&quot;&gt;&lt;/a&gt;为什么做兼容性&lt;/h2&gt;&lt;p&gt;H5和CSS3的出现可以说是广大网页开发者的福音啊, 但是依然有一些浏览器中的顽固分子对两者的支持不够, 而用户的选择又不是我们所能决定的, 所以我们只能默默的想办法来检测用户的浏览器对新属性的支持.&lt;/p&gt;
&lt;p&gt;coding有个很重要的环节就是fallback. 你不能为了用新特性就不管老版本了~ 所以无论是软件开发还是网站开发, 都讲究向下或者向前的兼容性. 那么, 我们在使用html5和css3的时候, 如何做fallback呢?&lt;/p&gt;
&lt;h2 id=&quot;u5982_u4F55_u505A_u517C_u5BB9_u6027_u68C0_u6D4B&quot;&gt;&lt;a href=&quot;#u5982_u4F55_u505A_u517C_u5BB9_u6027_u68C0_u6D4B&quot; class=&quot;headerlink&quot; title=&quot;如何做兼容性检测&quot;&gt;&lt;/a&gt;如何做兼容性检测&lt;/h2&gt;&lt;p&gt;基本思路都一样: 增加检测代码来预判浏览器对属性的支持度. 而具体的实现方法呢, 则有以下几种:&lt;/p&gt;
&lt;h3 id=&quot;u73B0_u6210_u7684_u4E09_u65B9_u5E93Modernizr_3A&quot;&gt;&lt;a href=&quot;#u73B0_u6210_u7684_u4E09_u65B9_u5E93Modernizr_3A&quot; class=&quot;headerlink&quot; title=&quot;现成的三方库Modernizr:&quot;&gt;&lt;/a&gt;现成的三方库&lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Modernizr Homepage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;:&lt;/h3&gt;&lt;p&gt;  写代码有个好习惯就是除了自己研究目的之外, 很多时候遇到问题都可以先Google以下, 很多问题很多人都遇到过并且有了对应的解决方法, 我们就不用再造轮子了~ 当然, 如果你看了轮子以后觉得可以造一个更好的, 那自然是另一回事了~&lt;/p&gt;
&lt;p&gt;  H5和CSS3的兼容性也是如此, 已经有一些现成的库可以满足我们的需求了, 为了省事, 你完全可以拿来直接用. 比如下面这个目前最流行的检测库:&lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Modernizr Homepage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Modernizr Homepage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;的功能就是检测当前浏览器对HTML5和CSS3各个特性的支持情况, 你可以通过[Modernizr的Doc]查看其检测属性的列表以及使用方法. 当然, 如果你想更进一步的理解&lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Modernizr Homepage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;的运行原理, 还可以去&lt;a href=&quot;https://github.com/Modernizr/Modernizr&quot; title=&quot;Modernizr Github Page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github/Modernizr&lt;/a&gt;上查看其源码~ 当然, Modernizr主要提供的兼容性的检测, 其可以输出一个Modernizr的Object, 其中包含了其对所有属性的检测结果. 比如我在chromium下的检测结果为(部分):&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;touch&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;postmessage&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;history&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;multiplebgs&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;boxshadow&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;cssanimations&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;csscolumns&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;cssgradients&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;csstransforms&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;csstransitions&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;fontface&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;localstorage&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;sessionstorage&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;svg&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;inlinesvg&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;_version&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;2.6.1&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;_prefixes&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-webkit-&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-moz-&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-o-&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-ms-&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;_domPrefixes&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;webkit&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;moz&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ms&quot;&lt;/span&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;_cssomPrefixes&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;Webkit&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Moz&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;O&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ms&quot;&lt;/span&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;blobbuilder&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;blob&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;bloburls&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;download&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;formdata&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u81EA_u5B9A_u4E49_u68C0_u6D4B_3A&quot;&gt;&lt;a href=&quot;#u81EA_u5B9A_u4E49_u68C0_u6D4B_3A&quot; class=&quot;headerlink&quot; title=&quot;自定义检测:&quot;&gt;&lt;/a&gt;自定义检测:&lt;/h3&gt;&lt;p&gt;  有时候我们不需要Modernizr这么齐全的检测结果, 我们可能代码中只用到了某些属性, 所以我们只需要针对这些属性的检测即可, 如何做呢? 其实很简单, 只是因为不同的属性的检测方法不一样, 所以具体情况需要对应的改变, 这里以颜色选择器为例:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 检测是否支持html5的新input类型,以颜色为例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hasColorSupport&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;); input.setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;color&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasColorType = (input.type !== &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// handle Safari/Chrome partial implementation if(hasColorType)&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testString = &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;; input.value=testString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hasColorType = (input.value != testString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(hasColorType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 选自&amp;lt;&amp;lt;HTML5 and CSS3 &amp;gt;&amp;gt;一书&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实所有检测的原理是一样的, 就是利用js来创建对应的元素给予对应的属性, 然后检测对应应该生效的项目即可.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;哈, 有个好消息就是&lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Modernizr Homepage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;最新的3.0.0版本开始支持自定义了~ 你可以在其&lt;a href=&quot;http://v3.modernizr.com/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网页面&lt;/a&gt;选择自己需要的属性和扩展函数, 然后就能生成你需要的Modernizr了&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;u517C_u5BB9_u6027_u652F_u6301&quot;&gt;&lt;a href=&quot;#u517C_u5BB9_u6027_u652F_u6301&quot; class=&quot;headerlink&quot; title=&quot;兼容性支持&quot;&gt;&lt;/a&gt;兼容性支持&lt;/h2&gt;&lt;p&gt;  既然检测了兼容性, 那么下一步就是兼容性的支持了. 其实对这一点, 有一个专有的名词描述的: Polyfills.&lt;/p&gt;
&lt;h3 id=&quot;Polyfill&quot;&gt;&lt;a href=&quot;#Polyfill&quot; class=&quot;headerlink&quot; title=&quot;Polyfill&quot;&gt;&lt;/a&gt;Polyfill&lt;/h3&gt;&lt;p&gt;  Polyfill是专门用来形容用来替代原生API函数以支持跨平台的函数. 目前基本现有的H5,CSS3的各个属性差不多都有人写了对应的Polyfill, 有的还不止一个呢~哈哈 而&lt;a href=&quot;http://modernizr.com/&quot; title=&quot;Modernizr Homepage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modernizr&lt;/a&gt;和Polyfills的结合就能够让你不止检测浏览器对新属性的支持, 甚至还能在不支持的情况下调用对应的Polyfills来给予支持. 赞!&lt;/p&gt;
&lt;p&gt;  在&lt;a href=&quot;https://github.com/Modernizr/Modernizr&quot; title=&quot;Modernizr Github Page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github/Modernizr&lt;/a&gt;的&lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki&lt;/a&gt;中详细的介绍和目前主流的一些polyfills, 尽情享用吧~哈哈&lt;/p&gt;
&lt;h3 id=&quot;u8303_u4F8B_u4ECB_u7ECD&quot;&gt;&lt;a href=&quot;#u8303_u4F8B_u4ECB_u7ECD&quot; class=&quot;headerlink&quot; title=&quot;范例介绍&quot;&gt;&lt;/a&gt;范例介绍&lt;/h3&gt;&lt;p&gt;  像&lt;a href=&quot;http://flashcanvas.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlashCanvas&lt;/a&gt;就是专门针对canvas元素的Polyfill. 除了这种专门针对一个元素的polyfill, 其实也存在如&lt;a href=&quot;https://github.com/afarkas/html5shiv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html5shiv&lt;/a&gt;这种支持整个html5主要元素的大库. 当然, 同样的, 请根据你自己的需求来选择使用~&lt;/p&gt;
&lt;p&gt;哈哈, 最近刚把blog的html部分修改了下, 将原来的div尽可能的用诸如section, nav, header, footer等semantic tags替换掉了, 准备逐步的彻底进入H5时代哈哈~ 下一步是研究CSS3的一些新属性, 会逐步应用在&lt;a href=&quot;/blog/404&quot;&gt;404&lt;/a&gt;或者&lt;a href=&quot;/blog/css3lab&quot;&gt;CSS3-Lab&lt;/a&gt;中~&lt;/p&gt;
&lt;p&gt;That’s all!&lt;/p&gt;
</summary></url><url><title>利用KindleEar定制属于你自己的RSS推送服务</title><loc>http://taoalpha.me/blog/2015/06/13/tech-create-a-kindle4rss-by-yourself/</loc><publish>2015-06-13T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;正巧最近Kindle4RSS会员到期, 本来计划续费的. 不过正巧有朋友推荐了&lt;a href=&quot;https://github.com/cdhigh/KindleEar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KindleEar&lt;/a&gt;, 而我又恰好之前因为 &lt;a href=&quot;/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/&quot;&gt;给博文添加GA的pageview&lt;/a&gt;, 用到了GAE, 而从我从GoAgent转移到Shadowsocks之后, 空出来了不少GAE的帐号, 于是就干脆拿来用喽~&lt;/p&gt;
&lt;h2 id=&quot;u642D_u5EFA_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u642D_u5EFA_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;搭建方法&quot;&gt;&lt;/a&gt;搭建方法&lt;/h2&gt;&lt;p&gt;搭建方法其实&lt;a href=&quot;https://github.com/cdhigh/KindleEar/blob/master/readme.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KindleEar-Readme&lt;/a&gt;中已经描述的比较清楚了, 我简单根据自己的搭建流程概括如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请GAE帐号创建app, 搭建本地的GAE SDK, KindleEar也是Python写成的, 所以依然用Python的SDK即可, 创建好了之后就可以了, 因为这一次没有用到google的api服务, 所以不需要我们申请api权限之类的了;&lt;/li&gt;
&lt;li&gt;下载&lt;a href=&quot;https://github.com/cdhigh/KindleEar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KindleEar&lt;/a&gt;, 你直接&lt;code&gt;git clone&lt;/code&gt;到本地即可;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;app.yaml&lt;/code&gt;, &lt;code&gt;module-worker.yaml&lt;/code&gt;两个文件中第一行的appid为你创建的appid,&lt;code&gt;config.py&lt;/code&gt;中的email修改为你GAE的邮箱以及应用的域名:&lt;code&gt;appid.appspot.com&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;基本上你需要修改的就这些喽, 剩下的就是通过SDK的&lt;code&gt;appcfg.py&lt;/code&gt;命令来部署了, 如果你已经建立了symbol link, 那么你应该可以直接执行appcfg.py的命令, 否则的话, 你需要到SDK安装目录去执行&lt;code&gt;python appcfg.py&lt;/code&gt;(即此文件所在地址);&lt;/li&gt;
&lt;li&gt;因为其使用了两个yaml配置文件, 包含了两个模块, 所以我们需要部署的时候将两个yaml都update一下, 即&lt;code&gt;appcfg.py update path_to_file/app.yaml path_to_file/module-worker.yaml&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;部署成功后, 需要再次执行&lt;code&gt;appcfg.py update path_of_kindleear&lt;/code&gt;来更新&lt;code&gt;cron, queue&lt;/code&gt;等, 因为随着GAE的升级, 目前更新yaml的过程不会自动更新这些了;&lt;/li&gt;
&lt;li&gt;如此基本就ok了, 接下来你只需要打开你的app域名&lt;code&gt;appid.appspot.com&lt;/code&gt;就能使用了~ 默认的登录用户和密码都是admin!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前来说KindleEar支持自定义RSS的添加, 多账户, 你完全可以把服务分享给你的朋友们, 也完全支持定时推送, 这个很实用! &lt;/p&gt;
&lt;p&gt;最为牛叉的扩展在于, 你完全可以自己修改其python代码来优化对应的环节, 比如它自身开发支持的&lt;code&gt;自定义RSS采集&lt;/code&gt;, 你就可以通过参照其books下的文件来自己编写自己的python采集文件!!!&lt;/p&gt;
&lt;p&gt;亲身体验下来, 推送还是很到位的, 立即推送的同步时间大概也只有2-3分钟的延迟, 很赞!&lt;/p&gt;
&lt;h2 id=&quot;u4E00_u4E9BIssue_u89E3_u51B3_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u4E00_u4E9BIssue_u89E3_u51B3_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;一些Issue解决方法&quot;&gt;&lt;/a&gt;一些Issue解决方法&lt;/h2&gt;&lt;p&gt;部署过程遇到了几个问题, 不过基本都在&lt;a href=&quot;https://github.com/cdhigh/KindleEar/blob/master/static/faq.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KindleEar- FAQ&lt;/a&gt;上或者&lt;a href=&quot;https://github.com/cdhigh/KindleEar/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KindleEar - Issues&lt;/a&gt;上解决了~ 列举如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;刚部署后发现登录后的&lt;code&gt;/my&lt;/code&gt;页面无法展示, 出现interval error:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题原因以及解决方案:&lt;/strong&gt; 因为KindleEar需要使用GAE的数据库, 所以其部署后需要创建数据库, 而这一步需要一点时间的~ 你可以在&lt;a href=&quot;https://console.developers.google.com/project/zzgary92/datastore/stats&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GAE Console Database&lt;/a&gt;里面查看其创建的进展, 等到由building变到serving就说明创建完成了~ 如果显示没有创建的话, 你可以手动执行:&lt;code&gt;appcfg.py update_indexes KindleEar&lt;/code&gt; 或者&lt;code&gt;update KindleEar&lt;/code&gt;即可;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署后点击deliver now现实interval error:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题原因以及解决方案:&lt;/strong&gt; 类似上面的问题, 如果你去log面板看日志的话, 也会发现其提示UnknowQueueError, 原因在于你可能没有部署&lt;code&gt;queue&lt;/code&gt;的部分, 同样的, 你只需要执行&lt;code&gt;appcfg.py update KindleEar&lt;/code&gt;就可;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恩~ 根据GAE的免费配置, 基本上可以支持10-20个人左右的同时使用~ 快去分享给自己的朋友吧!! &lt;/p&gt;
&lt;p&gt;Tips: 为了你更好的使用RSS, 请不要泛滥订阅… 要量力而行… 提倡精品阅读! 做有质量的阅读人~&lt;/p&gt;
</summary></url><url><title>Add Swiftype as my default internal search engine</title><loc>http://taoalpha.me/blog/2015/07/09/tech-change-internal-search-to-swiftype/</loc><publish>2015-07-09T13:00:00.000Z</publish><summary>&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Since I imported some old articles from my old blog, &lt;a href=&quot;/blog/2015/06/21/tech-add-internal-search-to-jekyll-blog/&quot;&gt;the internal search I built using javascript and json datas&lt;/a&gt; last time got slower and slower. So I decided to add a third-part search engine for my blog. Like I recommended in my &lt;a href=&quot;/blog/2015/06/21/tech-add-internal-search-to-jekyll-blog/&quot;&gt;last post&lt;/a&gt;, &lt;a href=&quot;https://swiftype.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swiftype&lt;/a&gt; is a really nice choice.&lt;/p&gt;
&lt;h2 id=&quot;How_to_add_swiftype_in_your_blog&quot;&gt;&lt;a href=&quot;#How_to_add_swiftype_in_your_blog&quot; class=&quot;headerlink&quot; title=&quot;How to add swiftype in your blog&quot;&gt;&lt;/a&gt;How to add swiftype in your blog&lt;/h2&gt;&lt;h3 id=&quot;Before_Sign_Up&quot;&gt;&lt;a href=&quot;#Before_Sign_Up&quot; class=&quot;headerlink&quot; title=&quot;Before Sign Up&quot;&gt;&lt;/a&gt;Before Sign Up&lt;/h3&gt;&lt;p&gt;Before you open the &lt;a href=&quot;https://swiftype.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swiftype website&lt;/a&gt; and sign up, you should do some work to check whether your website is friendly to search engine.&lt;/p&gt;
&lt;h4 id=&quot;robots-txt&quot;&gt;&lt;a href=&quot;#robots-txt&quot; class=&quot;headerlink&quot; title=&quot;robots.txt&quot;&gt;&lt;/a&gt;robots.txt&lt;/h4&gt;&lt;p&gt;If you have some subdirectories or subdomains you don’t want to be crawled by some search engines, you need to set the rules in robots.txt.&lt;/p&gt;
&lt;p&gt;As an example, I want to hide all my &lt;code&gt;api/&lt;/code&gt; pages to all search engines, I can add this line into my robots.txt:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;User-agent: *&amp;#10;Disallow: /api/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You can just put the robots.txt in the root directory of your domain and it will work.&lt;/p&gt;
&lt;h4 id=&quot;sitemap-xml&quot;&gt;&lt;a href=&quot;#sitemap-xml&quot; class=&quot;headerlink&quot; title=&quot;sitemap.xml&quot;&gt;&lt;/a&gt;sitemap.xml&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;A site map (or sitemap) is a list of pages of a web site accessible to crawlers or users. It can be either a document in any form used as a planning tool for Web design, or a Web page that lists the pages on a Web site, typically organized in hierarchical fashion. – from wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if you have a sitemap, it can help search engines like google crawl your site better.&lt;/p&gt;
&lt;p&gt;You can just put the sitemap.xml in your root directory with robots.txt, or you can specify it in your robots.txt using this one line code: &lt;code&gt;Sitemap: http://taoalpha.me/blog/sitemap.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can have multiple sitemap.xml files, of course.&lt;/p&gt;
&lt;p&gt;Don’t know how to create a sitemap.xml ? &lt;a href=&quot;https://www.xml-sitemaps.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check this!&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Sign_Up_and_Build_your_engine&quot;&gt;&lt;a href=&quot;#Sign_Up_and_Build_your_engine&quot; class=&quot;headerlink&quot; title=&quot;Sign Up and Build your engine&quot;&gt;&lt;/a&gt;Sign Up and Build your engine&lt;/h3&gt;&lt;p&gt;After you finished optimizing your site for search engines. Now you can sign up on the &lt;a href=&quot;https://swiftype.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swiftype website&lt;/a&gt; and build your engine.&lt;/p&gt;
&lt;p&gt;The free plan of swiftype has some limits for using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Total Documents    500&lt;/li&gt;
&lt;li&gt;Monthly Queries    1,000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if your blog is really big and you have a lot of users using your search, you may need to change to a pro plan~&lt;/p&gt;
&lt;p&gt;Just find a nice plan for yourself on the swiftype.&lt;/p&gt;
&lt;h3 id=&quot;Add_your_domain_and_rules&quot;&gt;&lt;a href=&quot;#Add_your_domain_and_rules&quot; class=&quot;headerlink&quot; title=&quot;Add your domain and rules&quot;&gt;&lt;/a&gt;Add your domain and rules&lt;/h3&gt;&lt;p&gt;After you build your search engine. Now you can add your domain into your engine. Or if you start with the tutorial on the homepage of swiftype, maybe you have already done this.&lt;/p&gt;
&lt;p&gt;You can go to &lt;code&gt;your dashboard -&amp;gt; manage -&amp;gt; domain&lt;/code&gt; to check the domain you have added into your engine. And also you can set the rules for you domain.&lt;/p&gt;
&lt;h4 id=&quot;WHITELIST_RULES&quot;&gt;&lt;a href=&quot;#WHITELIST_RULES&quot; class=&quot;headerlink&quot; title=&quot;WHITELIST RULES&quot;&gt;&lt;/a&gt;WHITELIST RULES&lt;/h4&gt;&lt;p&gt;Only pages matching these rules will be included in your index.&lt;/p&gt;
&lt;h4 id=&quot;BLACKLIST_RULES&quot;&gt;&lt;a href=&quot;#BLACKLIST_RULES&quot; class=&quot;headerlink&quot; title=&quot;BLACKLIST RULES&quot;&gt;&lt;/a&gt;BLACKLIST RULES&lt;/h4&gt;&lt;p&gt;All Pages matching any of these rules will be excluded. So like my blog, I want to remove all the tag pages and category pages from my index in order to empty the room for the real post page. I can just add &lt;code&gt;/blog/tag/&lt;/code&gt;,&lt;code&gt;/blog/user/&lt;/code&gt;,&lt;code&gt;/blog/page&lt;/code&gt; into my BLACKLIST rules.&lt;/p&gt;
&lt;h3 id=&quot;Install_the_Search_into_your_site&quot;&gt;&lt;a href=&quot;#Install_the_Search_into_your_site&quot; class=&quot;headerlink&quot; title=&quot;Install the Search into your site&quot;&gt;&lt;/a&gt;Install the Search into your site&lt;/h3&gt;&lt;p&gt;Swiftype has a real good instruction to help you install the search into your website. You can just follow the integrate instruction step by step and customize the color and style of your result-page.&lt;/p&gt;
&lt;p&gt;After all settings, you will get a javascript code and you just need to add this code into all the page you want  your search box to be viewed by your users.&lt;/p&gt;
&lt;p&gt;And according to your settings for the input field for searching, you will need do a little work to add the input into your website with the default class.&lt;/p&gt;
&lt;p&gt;Just remember to activate the search after that.&lt;/p&gt;
&lt;h3 id=&quot;After_installed&quot;&gt;&lt;a href=&quot;#After_installed&quot; class=&quot;headerlink&quot; title=&quot;After installed&quot;&gt;&lt;/a&gt;After installed&lt;/h3&gt;&lt;h4 id=&quot;Manage_your_content&quot;&gt;&lt;a href=&quot;#Manage_your_content&quot; class=&quot;headerlink&quot; title=&quot;Manage your content&quot;&gt;&lt;/a&gt;Manage your content&lt;/h4&gt;&lt;p&gt;Besides domains and the rules, you can also view the details of the pages crawled by the swiftype in &lt;code&gt;your dashboard -&amp;gt; manage -&amp;gt; content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here list all the pages included in your search engine, and even better, it will also record some click-data and referring-suggest-data to help you optimize your posts.&lt;/p&gt;
&lt;h4 id=&quot;Customize_the_engine&quot;&gt;&lt;a href=&quot;#Customize_the_engine&quot; class=&quot;headerlink&quot; title=&quot;Customize the engine&quot;&gt;&lt;/a&gt;Customize the engine&lt;/h4&gt;&lt;p&gt;Besides all the normal functions, you can also customize your swiftype engine, like re-order the search results customize your relevance algorithm, define your Synonym list…etc.&lt;/p&gt;
&lt;p&gt;Of course, it has some limits for free plan.&lt;/p&gt;
&lt;h4 id=&quot;Analytics&quot;&gt;&lt;a href=&quot;#Analytics&quot; class=&quot;headerlink&quot; title=&quot;Analytics&quot;&gt;&lt;/a&gt;Analytics&lt;/h4&gt;&lt;p&gt;Swiftype will record some information related to the search part, like top queries,top auto-completions, top searches with no result…etc&lt;/p&gt;
&lt;h2 id=&quot;Tips_3A&quot;&gt;&lt;a href=&quot;#Tips_3A&quot; class=&quot;headerlink&quot; title=&quot;Tips:&quot;&gt;&lt;/a&gt;Tips:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Be patient. You need to wait a while before any pages included in your engine;&lt;/li&gt;
&lt;li&gt;Remember to activate your engine. If you have added the js code and input field into your website, and still can not use the engine, maybe that’s because you forget to activate your engine;&lt;/li&gt;
&lt;li&gt;Customize. If you want the search box fit into your content more naturally , you should customize the style for it;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>自动化WHV申请工具</title><loc>http://taoalpha.me/blog/2015/05/20/tech-automated-script-for-whv/</loc><publish>2015-05-20T11:00:00.000Z</publish><summary>&lt;h2 id=&quot;u5927_u4F53_u601D_u8DEF&quot;&gt;&lt;a href=&quot;#u5927_u4F53_u601D_u8DEF&quot; class=&quot;headerlink&quot; title=&quot;大体思路&quot;&gt;&lt;/a&gt;大体思路&lt;/h2&gt;&lt;p&gt;对于WHV新西兰的申请官网而言, 想要试图利用程序来实现自动申请的话, 主要需要攻克几个问题, 分步如下:&lt;/p&gt;
&lt;h4 id=&quot;u767B_u5F55&quot;&gt;&lt;a href=&quot;#u767B_u5F55&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h4&gt;&lt;p&gt;我曾经试过很多种登录方式来试图登录whv的申请官网, 比如用常规的post请求, 以及后来使用mechanize, 甚至尝试过selenium+chrome的组合. 但最终都因为各种原因或失败或放弃了… &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;常规的post解包分析法:&lt;/p&gt;
&lt;p&gt;  这个的主要难点在于登录. 因为不知道是不是因为asp的原因, 每次通过模拟post获取的cookie都是无效的… 无法用于登录;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mechanize:&lt;/p&gt;
&lt;p&gt;  mechanize是个很不错的python module, 对于常规的网站而言绝对足够, 其对表格提交的天然支持更是很多人脚本登录的最佳选择之一. 可惜此次依然不试用… 因为官网的form提交会经过一个js的函数验证, 而mechanize最悲剧的一点就是不支持js…ಥ_ಥ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;selenium + chrome:&lt;/p&gt;
&lt;p&gt;  可行. 但是非常慢! 不得不说, selenium和chrome的组合不愧是网页产品的自动化脚本测试神器啊. 写好运行然后就可以端碗饭在电脑前面坐等了哈哈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;selenium + phantomjs:&lt;/p&gt;
&lt;p&gt;  考虑到chrome在天朝的情况, 以及速度本身的恶心.. 我在了解selenium的时候发现了phantomjs, 这个没有界面的浏览器后台模拟器. 而selenium和phantomjs的合并就让我看到了突破登录的希望.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;u53D6cookie&quot;&gt;&lt;a href=&quot;#u53D6cookie&quot; class=&quot;headerlink&quot; title=&quot;取cookie&quot;&gt;&lt;/a&gt;取cookie&lt;/h4&gt;&lt;p&gt;如上所说, 我通过selenium和phantomjs的结合, 利用其自带的webdriver的&lt;code&gt;get_cookies()&lt;/code&gt;函数成功的将登录后的cookie提取出来保存到了文件之中.  而通过这样”真实”的访问获取到的cookie也如愿以偿的让我成功实现了后来的环节.&lt;/p&gt;
&lt;p&gt;这里的大体思路很简单, 就是通过phantomjs来模拟浏览器行为, 修改其自带的headers为chrome的标准headers来增加混淆程度. 因为selenium和phantomjs的易上手性, 基本这里也就5行代码搞定的节奏…&lt;/p&gt;
&lt;h4 id=&quot;u5E26cookie_u586B_u8868_u53D1post&quot;&gt;&lt;a href=&quot;#u5E26cookie_u586B_u8868_u53D1post&quot; class=&quot;headerlink&quot; title=&quot;带cookie填表发post&quot;&gt;&lt;/a&gt;带cookie填表发post&lt;/h4&gt;&lt;p&gt;获取到cookie后, 为了节省时间, 我并没有继续选用selenium和phantomjs的组合来填表. 毕竟他们真的太慢了… 而是换用了带cookie直接post的方式. 主要思路和步骤如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用urllib2,cookielib来制作opener并装上cookie;&lt;/li&gt;
&lt;li&gt;首先进行一次试探性访问, 获取到页面状态值:viewstate,viewstategenerator,eventvalidation; 有些页面存在只有两个或者更多个的情况, 可以根据页面进行修正;&lt;/li&gt;
&lt;li&gt;组合页面状态参数以及需要post的信息数据, 进行post;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本来说, 只要确保post的时候key-value对好,那么, 在cookie有效期内是不会有啥问题的. 而想要做的更好更流畅, 在面对各种错误的情况下更抗压, 就得看容错这一步的做法了.&lt;/p&gt;
&lt;h4 id=&quot;u5BB9_u9519&quot;&gt;&lt;a href=&quot;#u5BB9_u9519&quot; class=&quot;headerlink&quot; title=&quot;容错&quot;&gt;&lt;/a&gt;容错&lt;/h4&gt;&lt;p&gt;一旦实现了cookie的获取和post, 那么想让工具正式能够使用就基本靠细心的容错了. 毕竟无论是页面超时, post失败, 是否已经有表格, 表格完整性验证等等, 都需要根据具体情况逐步完善, 下面也主要介绍下我的思路.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie有无以及是否失效问题;&lt;/li&gt;
&lt;li&gt;登录失败重试问题;&lt;/li&gt;
&lt;li&gt;流畅填表和中断单表填写(区分了正常情况下一张张表填和单独填某张表的情况, whv一共6个信息表要填写的);&lt;/li&gt;
&lt;li&gt;有无表格(无表格创建表格, 有表格获取表格id);&lt;/li&gt;
&lt;li&gt;表格完整性检验;&lt;/li&gt;
&lt;li&gt;表格所处状态检验(提交以及付款状态);&lt;/li&gt;
&lt;li&gt;表格post失败重试问题;&lt;/li&gt;
&lt;li&gt;超时问题;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本以上就构成了一个基本完整, 有着自动重试功能的自动化whv脚本了. &lt;/p&gt;
&lt;h2 id=&quot;u6D4B_u8BD5_u60C5_u51B5&quot;&gt;&lt;a href=&quot;#u6D4B_u8BD5_u60C5_u51B5&quot; class=&quot;headerlink&quot; title=&quot;测试情况&quot;&gt;&lt;/a&gt;测试情况&lt;/h2&gt;&lt;p&gt;在名额开放前使用ireland名额测试情况如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;无cookie文件:&lt;/p&gt;
&lt;p&gt;  登录获取cookie耗时: normal: 20s, min:13s, max: time-out;&lt;br&gt;  填表时间: normal: 5s-10s/表, min: 5s/表, max: time-out;&lt;br&gt;  全程时间: normal: 100s, min: 90s, max: time-out;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有cookie文件:&lt;/p&gt;
&lt;p&gt;  登录获取cookie耗时: normal: 0.000003s;&lt;br&gt;  填表时间: normal: 5s-10s/表, min: 5s/表, max: time-out;&lt;br&gt;  全程时间: normal: 80, min: 60s, max: time-out;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u7EC6_u8282_u8865_u5145&quot;&gt;&lt;a href=&quot;#u7EC6_u8282_u8865_u5145&quot; class=&quot;headerlink&quot; title=&quot;细节补充&quot;&gt;&lt;/a&gt;细节补充&lt;/h2&gt;&lt;p&gt;看起来还是很简单的, 不过真的写起来挺恶心的… 尤其是你在测试中会遇到各种奇葩问题… &lt;/p&gt;
&lt;p&gt;因为本文本来是10号写的, 但是后来一直拖到了20号才写完.. 昨天用脚本实况演练了下.. 发现真正开放名额这一天, 还是太恐怖… 登录都无法登录不上去… 一直处于不断重试的过程中… 居然还没我浏览器手动来的快… 最后把浏览器登录后的cookie放进去试了下,&lt;br&gt;因为本文本来是10号写的, 但是后来一直拖到了20号才写完.. 昨天用脚本实况演练了下.. 发现真正开放名额这一天, 还是太恐怖… 登录都无法登录不上去… 一直处于不断重试的过程中… 居然还没我浏览器手动来的快… 最后把浏览器登录后的cookie放进去试了下, 发现后面,&lt;br&gt;因为本文本来是10号写的, 但是后来一直拖到了20号才写完.. 昨天用脚本实况演练了下.. 发现真正开放名额这一天, 还是太恐怖… 登录都无法登录不上去… 一直处于不断重试的过程中… 居然还没我浏览器手动来的快… 最后把浏览器登录后的cookie放进去试了下&lt;br&gt;看起来还是很简单的, 不过真的写起来挺恶心的… 尤其是你在测试中会遇到各种奇葩问题… &lt;/p&gt;
&lt;p&gt;看起来还是很简单的, 不过真的写起来挺恶心的… 尤其是你在测试中会遇到各种奇葩问题…&lt;br&gt;,&lt;br&gt;因为本文本来是10号写的, 但是后来一直拖到了20号才写完.. 昨天用脚本实况演练了下.. 发现真正开放名额这一天, 还是太恐怖… 登录都无法登录不上去… 一直处于不断重试的过程中… 居然还没我浏览器手动来的快… 最后把浏览器登录后的cookie放进去试了下, 发现后面的容错做的还算可以, 基本能保证程序不会意外退出… 不过因为体检的原因, 我也没等到程序跑完就走了…&lt;/p&gt;
&lt;p&gt;和朋友讨论说到似乎cookie是可以计算出来的, 而计算方法在页面的js里面可以看到, 以后有时间可以去看看.&lt;/p&gt;
&lt;h2 id=&quot;Module_u5217_u8868&quot;&gt;&lt;a href=&quot;#Module_u5217_u8868&quot; class=&quot;headerlink&quot; title=&quot;Module列表&quot;&gt;&lt;/a&gt;Module列表&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; webdriver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cookielib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以及需要把phantomjs的二进制文件放入到合适的路径中去, 为了便于移植, 我是放到了当前路径下…&lt;/p&gt;
&lt;h2 id=&quot;u7ED3_u8BED&quot;&gt;&lt;a href=&quot;#u7ED3_u8BED&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;如上, 基本就能实现一个较为完整的自动脚本了~ 不过不解决cookie问题的话, 实际使用不会有多大帮助的… 毕竟那一天的网络太可怕…&lt;/p&gt;
</summary></url><url><title>如何获取豆瓣图书的&quot;想读&quot;列表</title><loc>http://taoalpha.me/blog/2015/06/10/tech-add-wish-books-from-douban/</loc><publish>2015-06-10T08:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;之前给博客增加了一个打赏页面, 也算是试图筹集资金做些小项目的途径之一. 今天丰富了以下&lt;a href=&quot;/blog/tipme&quot;&gt;打赏页面&lt;/a&gt;, 增加了一个书目的模块, 您也可以给我买书或者把自己看过的我想看的二手书送给我 ^_^&lt;/p&gt;
&lt;p&gt;本文则是主要介绍下如何利用豆瓣的图书API获取”想读”列表.&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u8C46_u74E3API_u6587_u6863&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u8C46_u74E3API_u6587_u6863&quot; class=&quot;headerlink&quot; title=&quot;阅读豆瓣API文档&quot;&gt;&lt;/a&gt;阅读豆瓣API文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developers.douban.com/wiki/?title=api_v2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;豆瓣API&lt;/a&gt;豆瓣作为UGC的大户, 其内容价值含量极高, 所以起API的呼声也极大, 而一直以来, 豆瓣的API都是很多其他产品的一大内容来源. 所以这次考虑在我的页面上加入书目列表时, 第一个想到的也是豆瓣! &lt;/p&gt;
&lt;p&gt;首先我们确定下思路, 如果我们想要拉取一个”愿望清单”一样的书目, 最好的方法应该是建立一个豆列, 然后在豆瓣维护这个豆列即可. 这应该也是最直接的方法, 可惜的是, 豆瓣目前尚未开放和豆列有关的API接口, 这样就让我们无法获取豆列的信息了. &lt;/p&gt;
&lt;p&gt;那么, 退而求其次, 如果拿不到特定豆列, 我们就只能从我的全部图书方面找突破了. 在众多的图书接口中, &lt;a href=&quot;http://developers.douban.com/wiki/?title=book_v2#get_user_collections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;获取某个用户的所有图书收藏信息&lt;/a&gt;这个接口可以说是最为接近的了, 而且它提供了status和tag的筛选, 这样就让我们近似模拟一个豆列成为可能.&lt;/p&gt;
&lt;p&gt;如何做呢? 首先我们需要把本来计划添加到”愿望清单”豆列的书都放到我们的想读中(愿望清单嘛), 并加上一个特定, 比如”MyWish”的标签, 如此, 我们就可以利用这两个纬度对我们的书目进行过滤, 抽取到我们需要的东西.&lt;/p&gt;
&lt;h2 id=&quot;u6784_u9020API_u94FE_u63A5_u83B7_u53D6API_u6570_u636E&quot;&gt;&lt;a href=&quot;#u6784_u9020API_u94FE_u63A5_u83B7_u53D6API_u6570_u636E&quot; class=&quot;headerlink&quot; title=&quot;构造API链接获取API数据&quot;&gt;&lt;/a&gt;构造API链接获取API数据&lt;/h2&gt;&lt;p&gt;根据&lt;a href=&quot;http://developers.douban.com/wiki/?title=book_v2#get_user_collections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;获取某个用户的所有图书收藏信息&lt;/a&gt;的说明, 我们需要三个参数就能实现我们的目的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user id: 指定用户;&lt;/li&gt;
&lt;li&gt;status: wish - 代表”想读”&lt;/li&gt;
&lt;li&gt;tag: MyWish - 或者你指定的某个tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此我们的api接口地址就构造完成了: “&lt;a href=&quot;https://api.douban.com/v2/book/user/129154019/collections?status=wish&amp;amp;tag=MyWish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.douban.com/v2/book/user/129154019/collections?status=wish&amp;amp;tag=MyWish&lt;/a&gt;“ - 就是我的”愿望清单”列表.&lt;/p&gt;
&lt;p&gt;通过最简单的get请求就能获得这一json格式的数据了, 这里我们几乎可以完全复用 &lt;a href=&quot;/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/&quot;&gt;给jekyll添加google analytics的pageview一文&lt;/a&gt;的函数:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showMyWishBooks&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bookapi = &lt;span class=&quot;string&quot;&gt;&quot;https://api.douban.com/v2/book/user/129154019/collections?status=wish&amp;amp;tag=MyWish&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: bookapi, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataType: &lt;span class=&quot;string&quot;&gt;'jsonp'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeout: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 3 sec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      parseBookDatas(data.collections);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// if fail to get up-to-date data from douban, get cached local version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Failed to get pageview from Douban!'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          url: &lt;span class=&quot;string&quot;&gt;'/blog/doubanbooks.json'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          dataType: &lt;span class=&quot;string&quot;&gt;'json'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Local mybooks.data backup file.'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parseBookDatas(data.collections);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u89E3_u6790API_u6570_u636E_u4EE5_u53CA_u5C55_u73B0&quot;&gt;&lt;a href=&quot;#u89E3_u6790API_u6570_u636E_u4EE5_u53CA_u5C55_u73B0&quot; class=&quot;headerlink&quot; title=&quot;解析API数据以及展现&quot;&gt;&lt;/a&gt;解析API数据以及展现&lt;/h2&gt;&lt;p&gt;拿到数据后自然就要解析应用, 这部分的话主要是因人而异, 根据自己的设计方式来, 我目前也只是简单的列举出来, 加了简单的hover图层效果. &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parseBookDatas&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; template = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;li class='book_item'&amp;gt;&amp;lt;a href='__book_url__' alt='__book_alt_title__'&amp;gt;&amp;lt;img src='__book_img__'&amp;gt;&amp;lt;span&amp;gt;__book_title__&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.each(data,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key,item&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bookitem = template.replace(&lt;span class=&quot;string&quot;&gt;&quot;__book_url__&quot;&lt;/span&gt;,item.book.alt).replace(&lt;span class=&quot;string&quot;&gt;&quot;__book_alt_title__&quot;&lt;/span&gt;,item.book.alt_title).replace(&lt;span class=&quot;string&quot;&gt;&quot;__book_title__&quot;&lt;/span&gt;,item.book.title).replace(&lt;span class=&quot;string&quot;&gt;&quot;__book_img__&quot;&lt;/span&gt;,item.book.images.large);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;'.books'&lt;/span&gt;).append(bookitem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述采用静态模板替换的方式来构造每个条目, 如果你喜欢liquid tempalte的话, 想要用&lt;a href=&quot;https://mustache.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mustache&lt;/a&gt; 或者 &lt;a href=&quot;http://handlebarsjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hanldrbars&lt;/a&gt;的话, 也是完全可以的~ 具体实现方法对应的官网都说的很清楚了, 我就不多说喽~&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599_3A&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599_3A&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developers.douban.com/wiki/?title=book_v2#get_user_collections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;豆瓣API文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>自建倒排, 为 Jekyll 博客添加搜索功能</title><loc>http://taoalpha.me/blog/2015/06/21/tech-add-internal-search-to-jekyll-blog/</loc><publish>2015-06-21T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;作为博客, 搜索功能一般来说都算是标配之一了. 而Jekyll作为静态博客, 则很难实现这种动态的实时的搜索请求. 所以通常来说, Jekyll 博客想要添加搜索功能的话, 无外乎以下几种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google/Baidu自定义搜索或者更简单的”site”限定域搜索, 简单易行, 一个链接搞定, 主要适用于内容较多,搜索引擎友好收录较多的站点;&lt;/li&gt;
&lt;li&gt;接入第三方服务, 目前博主知道的做这种博客全文搜索服务的有两家: &lt;a href=&quot;http://www.searchify.com/documentation/api#searching&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IndexTank&lt;/a&gt; 以及 &lt;a href=&quot;https://swiftype.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiftype&lt;/a&gt;. 这两种的接入方式也略有不同, 后面我会分别介绍以下;&lt;/li&gt;
&lt;li&gt;自建: 这种比较费力不讨好, 目前也没什么人用的感觉… 当然, 博主这次就简单尝试了下…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u81EA_u5EFA&quot;&gt;&lt;a href=&quot;#u81EA_u5EFA&quot; class=&quot;headerlink&quot; title=&quot;自建&quot;&gt;&lt;/a&gt;自建&lt;/h2&gt;&lt;p&gt;想要给jekyll自建一个内部搜索的话, 需要先清楚以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jekyll是静态博客, 静态就导致其所有页面都是编译好的, 没有复杂的数据库更没有和数据库交互的功能, 同时其一旦编译, 那么所有支持的功能都只能由JavaScript实现了;&lt;/li&gt;
&lt;li&gt;搜索通常发生的几个环节为: &lt;ul&gt;
&lt;li&gt;准备工作: 分词-&amp;gt;索引-&amp;gt;倒排索引&lt;/li&gt;
&lt;li&gt;查询过程: Query查询-&amp;gt;Query分词-&amp;gt;比对倒排-&amp;gt;获取匹配结果-&amp;gt;展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因为静态的原因, 所以我计划的搜索的工作流为: 本地编译的过程中建立一份倒排索引, 前端查询则使用js, 根据query匹配倒排, 用js解析处理展示结果;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面具体介绍下各个环节:&lt;/p&gt;
&lt;h3 id=&quot;u5206_u8BCD&quot;&gt;&lt;a href=&quot;#u5206_u8BCD&quot; class=&quot;headerlink&quot; title=&quot;分词&quot;&gt;&lt;/a&gt;分词&lt;/h3&gt;&lt;p&gt;分词可以说是搜索的根本, 没有好的分词, 一切都免谈. 目前流行的分词, 尤其是中文分词也有不少, 但考虑到我们需要结合jekyll使用, 所以尽量找有现成ruby的. 所幸在&lt;a href=&quot;http://rubygems.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RubyGems&lt;/a&gt;里面找到了”jieba_rb”模块, 正好”结巴分词”也可以说是目前开源中做的很不错的一个中文分词了~ &lt;a href=&quot;https://github.com/altkatz/jieba_rb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jieba_Rb Github&lt;/a&gt;是其项目所在地址, 有兴趣的可以围观之. 而且最好的是它不仅支持分词, 还支持关键字提取, 而这个对jekyll的自建搜索而言是至关重要的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 因为如果全文分词做倒排的话, 倒排文档会很庞大, 这样对于js前端处理倒排的时候压力就会很大, 所以如果每个博文都只用其关键字来做倒排, 那么就能在保证一定的质量的同时, 确保不会产生太大的性能问题. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;jieba_rb&lt;/code&gt;是非常容易的, 你可以根据自己的情况利用&lt;code&gt;bundle&lt;/code&gt;或者&lt;code&gt;gem&lt;/code&gt;直接安装~&lt;/p&gt;
&lt;h3 id=&quot;u5012_u6392_u7D22_u5F15&quot;&gt;&lt;a href=&quot;#u5012_u6392_u7D22_u5F15&quot; class=&quot;headerlink&quot; title=&quot;倒排索引&quot;&gt;&lt;/a&gt;倒排索引&lt;/h3&gt;&lt;p&gt;选好的分词库, 我们就可以正式开始制作倒排了, 有了 &lt;a href=&quot;/blog/2015/06/01/tech-jekyll-tag-page/&quot;&gt;建立Tag专属页&lt;/a&gt;的经验, 我们可以采用类似的方法来创建一个建立search页的插件:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# file: _plugins/search.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;jieba_rb&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 引入'jieba_rb'和'json'两个库. 后者主要是为了将Hash值转为string的时候用的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Jekyll&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SearchPage&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(site, base, dir,h,l)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 初始化page的设定, 因为考虑到写入json文件的二次请求, 不如直接写入到页面内, 这样可以保证搜索的速度, 同时文本本身请求压力比较小, 也就不用增加多次请求了.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable&quot;&gt;@site&lt;/span&gt; = site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable&quot;&gt;@base&lt;/span&gt; = base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable&quot;&gt;@dir&lt;/span&gt; = dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable&quot;&gt;@name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;'index.html'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.process(&lt;span class=&quot;variable&quot;&gt;@name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.read_yaml(&lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(base, &lt;span class=&quot;string&quot;&gt;'_layouts'&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;'search.html'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.data[&lt;span class=&quot;string&quot;&gt;'title'&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Internal Search&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.data[&lt;span class=&quot;string&quot;&gt;'index'&lt;/span&gt;] = h.to_json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.data[&lt;span class=&quot;string&quot;&gt;'worddict'&lt;/span&gt;] = l.join(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 将倒排索引和倒排词目录写入到page属性中, 从而可以在模板文件中直接写入到html页面中去.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SearchGenerator&lt;/span&gt;&lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;span class=&quot;parent&quot;&gt;Generator&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    safe &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(site)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 类似tag页面, 这里也把search的这个页面放在了search目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; site.layouts.key? &lt;span class=&quot;string&quot;&gt;'search'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dir = site.config[&lt;span class=&quot;string&quot;&gt;'search_dir'&lt;/span&gt;] || &lt;span class=&quot;string&quot;&gt;'search'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write_search_index(site, &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(dir, &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write_search_index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(site, dir)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      h = &lt;span class=&quot;constant&quot;&gt;Hash&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nh = &lt;span class=&quot;constant&quot;&gt;Hash&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      po = &lt;span class=&quot;constant&quot;&gt;Hash&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 三个hash值分别用来存储索引,倒排索引和博文文档信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tlist = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 一个array用来存储倒排词表, 这个主要是用来给js做分词词典使用的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      keyword = &lt;span class=&quot;constant&quot;&gt;JiebaRb::Keyword&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 因为jibe的keyword模块, 因为只用到了关键字提取部分 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      site.posts.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |post|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 逐文提取关键词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alist = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keywords_weights = keyword.extract post.content,&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 目前只给了35的限制, 其实可以放的更宽些, 目前我20来篇的博文, 基本几秒内就建好了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keywords_weights.each&amp;#123;|k,v|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          alist.push(k.downcase)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;# 将关键词归一化处理存放到列表中 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata = &lt;span class=&quot;constant&quot;&gt;Hash&lt;/span&gt;.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 存放post相关的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_id'&lt;/span&gt;] = post.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_url'&lt;/span&gt;] = post.url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_title'&lt;/span&gt;] = post.title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; post[&lt;span class=&quot;string&quot;&gt;&quot;language&quot;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          postdata[&lt;span class=&quot;string&quot;&gt;'post_content'&lt;/span&gt;] = post.content[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;].gsub!(&lt;span class=&quot;regexp&quot;&gt;/(&amp;lt;[^&amp;gt;]*&amp;gt;)|&amp;#123;%|%&amp;#125;|\s|\n|([#]+)|\t/&lt;/span&gt;) &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          postdata[&lt;span class=&quot;string&quot;&gt;'post_content'&lt;/span&gt;] = post.content[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;].gsub!(&lt;span class=&quot;regexp&quot;&gt;/(&amp;lt;[^&amp;gt;]*&amp;gt;)|&amp;#123;%|%&amp;#125;|\s|\n|([#]+)|\t/&lt;/span&gt;) &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 截断正文取摘要, 这里加了个中英文区分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_author'&lt;/span&gt;] = post[&lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_category'&lt;/span&gt;] = post.categories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_tags'&lt;/span&gt;] = post.tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postdata[&lt;span class=&quot;string&quot;&gt;'post_date'&lt;/span&gt;] = post.date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        h[post.url] = alist.uniq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 生成的索引h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 将关键词去重处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        po[post.url] = postdata&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tlist = tlist | alist.uniq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 创建倒排索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tlist.each&amp;#123;|k|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        klist = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        h.each&amp;#123;|k2,v|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;? k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            klist.push(po[k2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nh[k] = klist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 输出页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index = &lt;span class=&quot;constant&quot;&gt;SearchPage&lt;/span&gt;.new(site, site.source, dir, nh, tlist)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index.dir = dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index.render(site.layouts, site.site_payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index.write(site.dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      site.pages &amp;lt;&amp;lt; index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们将生成的倒排索引和倒排词表输出到页面后, 就可以着手写页面模板了.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% raw %&amp;#125;&amp;#10;---&amp;#10;layout: home_base&amp;#10;function: search&amp;#10;---&amp;#10;&amp;#10;&amp;#60;nav id=&amp;#34;bread&amp;#34;&amp;#62;&amp;#10;  &amp;#60;h2&amp;#62;&amp;#60;a href=&amp;#34;/blog&amp;#34;&amp;#62;All Posts&amp;#60;/a&amp;#62; &amp;#62;&amp;#62; Search: &amp;#60;/h2&amp;#62;&amp;#10;&amp;#60;/nav&amp;#62;&amp;#10;&amp;#10;&amp;#60;p style=&amp;#34;display:none;&amp;#34; id=&amp;#34;indexdata&amp;#34;&amp;#62;&amp;#123;&amp;#123; page.index &amp;#125;&amp;#125;&amp;#60;/p&amp;#62;&amp;#10;&amp;#60;p style=&amp;#34;display:none;&amp;#34; id=&amp;#34;worddicts&amp;#34;&amp;#62;&amp;#123;&amp;#123; page.worddict &amp;#125;&amp;#125;&amp;#60;/p&amp;#62;&amp;#10;&amp;#123;% comment %&amp;#125; &amp;#23558;&amp;#25554;&amp;#20214;&amp;#20013;&amp;#29983;&amp;#25104;&amp;#30340;&amp;#20498;&amp;#25490;&amp;#25968;&amp;#25454;&amp;#21644;&amp;#20498;&amp;#25490;&amp;#35789;&amp;#34920;&amp;#23384;&amp;#25918;&amp;#21040;&amp;#38544;&amp;#34255;p&amp;#20803;&amp;#32032;&amp;#20869;, &amp;#21152;&amp;#20197;id&amp;#26041;&amp;#20415;js&amp;#25552;&amp;#21462; &amp;#123;% endcomment %&amp;#125;&amp;#10;&amp;#10;&amp;#60;form action=&amp;#34;&amp;#34; class=&amp;#34;search&amp;#34;&amp;#62;&amp;#10;&amp;#60;input id=&amp;#34;search&amp;#34; type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Enter to search.&amp;#34;&amp;#62;&amp;#10;&amp;#60;button id=&amp;#34;gosearch&amp;#34; type=&amp;#34;button&amp;#34;&amp;#62;Go&amp;#60;/button&amp;#62;&amp;#10;&amp;#60;/form&amp;#62;&amp;#10;&amp;#10;&amp;#60;article&amp;#62;&amp;#10;  &amp;#60;ul class=&amp;#34;article-list&amp;#34;&amp;#62;&amp;#10; &amp;#60;/ul&amp;#62;&amp;#10;&amp;#60;/article&amp;#62;&amp;#10;&amp;#10;&amp;#60;script type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;#62;&amp;#10;  $(&amp;#39;form.search&amp;#39;).submit(function(e)&amp;#123;&amp;#10;    e.preventDefault();&amp;#10;    e.stopPropagation();&amp;#10;    $(&amp;#39;button#gosearch&amp;#39;).trigger(&amp;#39;click&amp;#39;);&amp;#10;  &amp;#125;)&amp;#10;&amp;#10;  $(&amp;#39;button#gosearch&amp;#39;).on(&amp;#39;click&amp;#39;,function()&amp;#123;&amp;#10;    var query = $(&amp;#39;input#search&amp;#39;).val();&amp;#10;    search(query);&amp;#10;  &amp;#125;)&amp;#10;&amp;#60;/script&amp;#62;&amp;#10;&amp;#123;% endraw %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;模板的话, 主要根据自己的需要来设置了, 主要是为了将输出的倒排和倒排词表写入文档之中.&lt;/p&gt;
&lt;p&gt;那么这一切做好了之后, 我们的&lt;strong&gt;准备工作&lt;/strong&gt;部分算是基本完成了. 当你编译后去查看你的search页面时就能看到页面里面已经出现了类似:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&quot;代码&quot;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_id&quot;: &quot;/2015/05/06/new-blog&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_url&quot;: &quot;/2015/05/06/new-blog.html&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_title&quot;: &quot;My New Blog&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_content&quot;: &quot;在回国前最后一天的时候, 我在BBH列了下回国后要做的几件事, 其中之一就是迁移我的Blog中技术和HCI的部分到github page上来. 到今天终于算是做完了. 内容还没有完全迁移, 也可能不准备迁移内容了... 以后的技术更新和HCI的翻译等等都准备直接发到这里了.    这个blog的设计和结构主要借鉴了[简书](http://www.jianshu.com/), 代码是在我之前的那个b&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_author&quot;: &quot;taoalpha&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_category&quot;: [&quot;blog&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_tags&quot;: [&quot;介绍&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_date&quot;: &quot;2015-05-06 00:00:00 +0800&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_id&quot;: &quot;/2015/05/29/use-jekyll-plugin-with-github-page&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_url&quot;: &quot;/2015/05/29/use-jekyll-plugin-with-github-page.html&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_title&quot;: &quot;在 Github Pages 中使用Jekyll插件&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_content&quot;: &quot;  Github Page的jekyll      Github Page对jekyll的支持是很到位的, 唯一的不足可能也是其本身基于安全考虑而使得jekyll始终都是运行在safe模式, 目前[放开的插件列表非常有限], 所以很多jekyll的插件都无法使用. 当然, 单纯支持的几个插件或者不用插件也是完全可以做出很好的效果的, 不过个人比较喜欢折腾, 所以虽然目前只有一个可有可无的压缩需求&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_author&quot;: &quot;taoalpha&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_category&quot;: [&quot;tech&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_tags&quot;: [&quot;jekyll&quot;, &quot;plugin&quot;, &quot;github page&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_date&quot;: &quot;2015-05-29 00:00:00 +0800&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_id&quot;: &quot;/2015/06/11/javascript-callback-notes&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_url&quot;: &quot;/2015/06/11/javascript-callback-notes.html&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_title&quot;: &quot;JavaScript callback学习笔记&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_content&quot;: &quot;  缘起    今天帮朋友做一个网站, 涉及到js请求并且渲染数据. 因为js语言的特点使得其代码是由上至下依次执行的, 有一个比较恶心的问题在于这一执行顺序并不等同于其先后顺序, 如果中间有一步或者几步的后续执行比较耗费时间, js本身是不会等待其执行完再去执行下面的语句的. 如此就会出现一些因为执行时间而导致的问题, 尤其是请求和渲染数据的时候. 如果你分开来写, 顺次执行的时候, 请求这一&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_author&quot;: &quot;taoalpha&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_category&quot;: [&quot;tech&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_tags&quot;: [&quot;js&quot;, &quot;callback&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;post_date&quot;: &quot;2015-06-11 00:00:00 +0800&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这其实就是你的倒排文档啦~&lt;/p&gt;
&lt;h3 id=&quot;query_u5206_u8BCD&quot;&gt;&lt;a href=&quot;#query_u5206_u8BCD&quot; class=&quot;headerlink&quot; title=&quot;query分词&quot;&gt;&lt;/a&gt;query分词&lt;/h3&gt;&lt;p&gt;编译部分的工作做完后, 我们就需要开始进行查询部分了. 首当其冲的还是分词.&lt;/p&gt;
&lt;p&gt;针对查询这部分的分词方法也有几种不同的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;借助第三方API, 目前博主知道的有&lt;a href=&quot;http://pullword.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pullword&lt;/a&gt;, &lt;a href=&quot;http://jiebademo.ap01.aws.af.cm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jieba-demo&lt;/a&gt;, &lt;a href=&quot;http://simonfenci.sinaapp.com/index.php?key=simon&amp;amp;wd=你好世界&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SAE 搭建&lt;/a&gt;. 上述三个博主都试了下… 结果无一例外遇到了跨域问题… 而三者都不是json格式返回, 所以常用的jsonp跨域无法解决…;&lt;/li&gt;
&lt;li&gt;手写js实现: 有好有坏, 有的简单有的复杂, 视个人情况而定… 比如博主是因为也没别的法子了…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然决定了自己写, 那么怎么写呢? 首先, 目前主流的中文的分词方法都是&lt;a href=&quot;http://www.cnblogs.com/flish/archive/2011/08/08/2131031.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字典法&lt;/a&gt;, 匹配抽取即可; 也比较容易实现. 而正好我们拥有倒排词表(实际上正是因为要手写需要词典, 所以才导出倒排词表的), 所以可以将倒排词表作为词典文件来切词. 具体的做法简要概述即是:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以倒排词表为词典, 对传入query进行逐个匹配抽取;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是采用简单的暴力抽取法:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;query&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; inverted_index = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse($(&lt;span class=&quot;string&quot;&gt;'p#indexdata'&lt;/span&gt;).text());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 拿倒排并且恢复为json格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dict = $(&lt;span class=&quot;string&quot;&gt;'p#worddicts'&lt;/span&gt;).text().split(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 拿倒排词表,并且恢复为array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  query = query.toLowerCase().replace(&lt;span class=&quot;regexp&quot;&gt;/[(^\s+)(\s+$)]/g&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 归一化query... 绝对暴力归一化, 去除所有空格..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; splitwords = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.each(dict,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;k,v&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(query.indexOf(v)&amp;gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      splitwords.push(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 逐个遍历, 不匹配的干掉, 匹配抽取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(splitwords.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 准备合并倒排, 这里如果没有抽取出来关键词的话, 就直接pass返回无结果啦哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $.each(splitwords,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;k,v&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      result = result.concat(inverted_index[v]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 合并倒排, 这里使用的是并集, 是因为目前博客文章不多, 所以取交集... 空结果太多..哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showSearchResult(result.getObjectUnique(&lt;span class=&quot;string&quot;&gt;'post_url'&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 无结果提醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;'ul.article-list'&lt;/span&gt;).empty().append(&lt;span class=&quot;string&quot;&gt;'&amp;lt;li class=&quot;post&quot;&amp;gt;&amp;lt;h2&amp;gt;无结果, 请更换查询词&amp;lt;/h2&amp;gt;&amp;lt;/li&amp;gt;'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showSearchResult&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这里主要是沿用了我之前首页的结构~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;'ul.article-list'&lt;/span&gt;).empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 记得每次查询前要清掉上次查询结构哦~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; template = &lt;span class=&quot;string&quot;&gt;'&amp;lt;li class=&quot;post&quot;&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;a href=&quot;__post_url__&quot;&amp;gt;__post_title__&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;summary class=&quot;title-excerpt&quot;&amp;gt;__post_desc__&amp;lt;/summary&amp;gt;&amp;lt;div class=&quot;post-info&quot;&amp;gt;&amp;lt;span class=&quot;author&quot;&amp;gt;&amp;lt;i class=&quot;fa fa-user&quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;a href=&quot;__post_author_url__&quot;&amp;gt;__post_author__&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;category&quot;&amp;gt;&amp;lt;i class=&quot;fa fa-briefcase&quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;a href=&quot;__post_category_url__&quot;&amp;gt;__post_category__&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;postdate&quot;&amp;gt;&amp;lt;i class=&quot;fa fa-history&quot;&amp;gt;&amp;lt;/i&amp;gt;__post_date__&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;viewcount&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.each(data,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;k,v&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child = template.replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_url__&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;/blog&quot;&lt;/span&gt;+v.post_url).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_title__&quot;&lt;/span&gt;,v.post_title).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_desc__&quot;&lt;/span&gt;,v.post_content+&lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_author_url__&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;/blog/author/&quot;&lt;/span&gt;+v.post_author).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_author__&quot;&lt;/span&gt;,v.post_author).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_category_url__&quot;&lt;/span&gt;,v.post_category == &lt;span class=&quot;string&quot;&gt;&quot;blog&quot;&lt;/span&gt;? &lt;span class=&quot;string&quot;&gt;&quot;/blog&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;/blog/&quot;&lt;/span&gt;+v.post_category).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_category__&quot;&lt;/span&gt;,v.post_category).replace(&lt;span class=&quot;string&quot;&gt;&quot;__post_date__&quot;&lt;/span&gt;,v.post_date.replace(&lt;span class=&quot;string&quot;&gt;'00:00:00 +0800'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;'ul.article-list'&lt;/span&gt;).append(child);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此, 基本算是完事了~  如果你想要尝试下我的搜索效果, &lt;a href=&quot;/blog/search/&quot;&gt;请点此&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;u7B2C_u4E09_u65B9_u670D_u52A1&quot;&gt;&lt;a href=&quot;#u7B2C_u4E09_u65B9_u670D_u52A1&quot; class=&quot;headerlink&quot; title=&quot;第三方服务&quot;&gt;&lt;/a&gt;第三方服务&lt;/h2&gt;&lt;p&gt;第三方服务的话, 肯定都比我做的这个要精细多了哈哈. 因为博主只了解了下面两个提供此类服务的服务, 所以就简单介绍下这两个:&lt;a href=&quot;http://www.searchify.com/documentation/api#searching&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IndexTank&lt;/a&gt; 以及 &lt;a href=&quot;https://swiftype.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiftype&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;先说下共同点吧:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是&lt;code&gt;full-text-search&lt;/code&gt;, 不想我这种是关键词… 而且不一定准确…哈哈&lt;/li&gt;
&lt;li&gt;省事, 都是宣称的实时收录~ 给力!&lt;/li&gt;
&lt;li&gt;方便, 都是有现成的接口, 比如&lt;code&gt;IndexTank&lt;/code&gt;有一个配套的jekyll插件, 可以直接安装调用; &lt;code&gt;swiftype&lt;/code&gt;则是代码嵌入型的, 更省事;&lt;/li&gt;
&lt;li&gt;都支持中文…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恩, 在介绍下不同点:&lt;/p&gt;
&lt;h3 id=&quot;IndexTank&quot;&gt;&lt;a href=&quot;#IndexTank&quot; class=&quot;headerlink&quot; title=&quot;IndexTank&quot;&gt;&lt;/a&gt;IndexTank&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开源: 赞! 应该是从被&lt;strong&gt;linkedin&lt;/strong&gt;收购后就开源了, 名字也改成了searchify~哈哈&lt;/li&gt;
&lt;li&gt;30天免费试用; 之后标配是$59/month, doc限制在50w份(写50w的blog也够牛逼了…);&lt;/li&gt;
&lt;li&gt;api齐全, &lt;a href=&quot;http://www.searchify.com/documentation/api#searching&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IndexTank API&lt;/a&gt;, 定制性比较好;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Swiftype&quot;&gt;&lt;a href=&quot;#Swiftype&quot; class=&quot;headerlink&quot; title=&quot;Swiftype&quot;&gt;&lt;/a&gt;Swiftype&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;半开源: &lt;a href=&quot;https://github.com/swiftype&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiftype Github&lt;/a&gt;, 基本都是其在各个语言下的支持库;&lt;/li&gt;
&lt;li&gt;有免费服务: 只支持一个服务, 文档更新不如付费版本来的及时, 也不提供搜索数据分析等等, 不过, 绝对够用…&lt;/li&gt;
&lt;li&gt;可少量定制: 可以做轻微的定制;&lt;/li&gt;
&lt;li&gt;超省事儿: 基本可以说几行代码搞定的节奏…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从某种程度上说, swiftype算是个轻量级的Google CSE(自定义搜索引擎). 恩, Google的CSE其实可以算是博主知道的第三个…&lt;/p&gt;
&lt;p&gt;PS. 这里有个使用了swiftype服务的hexo博客, 有兴趣的可以看看: &lt;a href=&quot;http://notes.iissnan.com/#stq=%E6%B5%8B%E8%AF%95&amp;amp;stp=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IIssNan’s Notes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/altkatz/jieba_rb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jieba_rb Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/goal/blog/201674&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 实现简单的中文分词&lt;/a&gt; 很赞, 但是我没用.. 主要是我的太明显了.. 简单暴力就可以搞定了…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/olivernn/lunr.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lunr.js Github&lt;/a&gt; js搜索的前辈级产品, 可惜最后也没用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/flish/archive/2011/08/08/2131031.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文分词技术介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>如何给 Jekyll 博文添加阅读数显示</title><loc>http://taoalpha.me/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/</loc><publish>2015-06-07T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;受&lt;a href=&quot;http://zhangwenli.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;羡辙杂俎&lt;/a&gt;启发, 看到她的页面上有着pageviews的显示, 于是就果断看了下对应的代码, 发现是从google的appspot下拿到的json数据, 于是就开始Google了以下GA的api, 然后就看到了这个&lt;a href=&quot;https://developers.google.com/analytics/solutions/google-analytics-super-proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;superProxy&lt;/a&gt;, 下面的事情就非常顺理成章了~&lt;/p&gt;
&lt;h2 id=&quot;u65E0_u63D2_u4EF6_u5B9E_u73B0_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u65E0_u63D2_u4EF6_u5B9E_u73B0_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;无插件实现方法&quot;&gt;&lt;/a&gt;无插件实现方法&lt;/h2&gt;&lt;p&gt;亦如之前, 我们还是从无插件方法说起, 大体思路为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过Google App Engine搭建superProxy, 开启其GA权限;&lt;/li&gt;
&lt;li&gt;设置对应查询query以及更新频率;&lt;/li&gt;
&lt;li&gt;获取json结果生成地址;&lt;/li&gt;
&lt;li&gt;通过js请求获取json数据, 解析展现;&lt;/li&gt;
&lt;li&gt;加入本地pageview文件备份容错;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那我们一步步来:&lt;/p&gt;
&lt;h3 id=&quot;u5728GAP_u4E0A_u521B_u5EFAApp&quot;&gt;&lt;a href=&quot;#u5728GAP_u4E0A_u521B_u5EFAApp&quot; class=&quot;headerlink&quot; title=&quot;在GAP上创建App&quot;&gt;&lt;/a&gt;在GAP上创建App&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先, 你需要一个Google帐号… 哈哈(恩.. 更前提的是你能够&lt;a href=&quot;http://www.jianshu.com/collection/b6b16295fc83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;科学上网&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;接下来, 在&lt;a href=&quot;https://appengine.google.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Engine Administration Console&lt;/a&gt;上创建app, 因为主要用来防止superProxy, 所以名字上随便起, 基本也没什么直接访问的可能;&lt;/li&gt;
&lt;li&gt;在&lt;a href=&quot;https://code.google.com/apis/console/#:services&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Services pane&lt;/a&gt;中开启Google Analytics的权限, 搜索到GA然后enable即可;&lt;/li&gt;
&lt;li&gt;在&lt;a href=&quot;https://code.google.com/apis/console/#:access&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API Access pane&lt;/a&gt;中创建一个OAuth验证, 如果你有多个app, 选择用来放superProxy的那个, 其中&lt;code&gt;Authorized Redirect URIs&lt;/code&gt;中填写上”&lt;a href=&quot;http://your-app-id.appspot.com/admin/auth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://your-app-id.appspot.com/admin/auth&lt;/a&gt;“, 如果你需要本地测试的话, 也加上”&lt;a href=&quot;http://localhost:8080/admin/auth&amp;quot;即可&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/admin/auth&amp;quot;即可&lt;/a&gt;, 如此创建后即可获得一个Client ID和Secret Key了;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u5B89_u88C5superProxy&quot;&gt;&lt;a href=&quot;#u5B89_u88C5superProxy&quot; class=&quot;headerlink&quot; title=&quot;安装superProxy&quot;&gt;&lt;/a&gt;安装superProxy&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先你需要安装GAE的SDK, 用python版本即可, 所以请确保环境中有python 2.7以上~ &lt;a href=&quot;https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python - GAE SDK&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;在&lt;a href=&quot;https://github.com/googleanalytics/google-analytics-super-proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Analytics superProxy - Github&lt;/a&gt;上download整个源代码, 你直接&lt;code&gt;clone&lt;/code&gt;以下就行;&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;src&lt;/code&gt;路径下&lt;code&gt;app.yaml&lt;/code&gt;文件, 将对应的your-app-id填入: &lt;code&gt;application: your-application-id&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;还是在&lt;code&gt;src&lt;/code&gt;中, 修改&lt;code&gt;config.py&lt;/code&gt;, 将上一环节生成的&lt;code&gt;OAUTH_CLIENT_ID&lt;/code&gt;, &lt;code&gt;OAUTH_CLIENT_SECRET&lt;/code&gt;, 以及对应的&lt;code&gt;OAUTH_REDIRECT_URI&lt;/code&gt;都填入进去(如果本地测试的话, 就用localhost的那个);&lt;/li&gt;
&lt;li&gt;安装下载好的GAE SDK, 再提示安装命令行工具的时候选择&lt;code&gt;安装&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;src&lt;/code&gt;路径下, 使用&lt;code&gt;appcfg.py&lt;/code&gt;命令将我们的代码发布到GAE上, 如果你要本地测试, 请用&lt;code&gt;dev_appserver.py&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u8BBE_u7F6EQuery_u4EE5_u53CA_u66F4_u65B0_u9891_u7387_u5E76_u83B7_u53D6json_u5730_u5740&quot;&gt;&lt;a href=&quot;#u8BBE_u7F6EQuery_u4EE5_u53CA_u66F4_u65B0_u9891_u7387_u5E76_u83B7_u53D6json_u5730_u5740&quot; class=&quot;headerlink&quot; title=&quot;设置Query以及更新频率并获取json地址&quot;&gt;&lt;/a&gt;设置Query以及更新频率并获取json地址&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在我们成功deploy我们的superProxy后, 就可以通过&lt;code&gt;http://your-app-id.appspot.com&lt;/code&gt;来访问了, 不过第一步请先访问&lt;code&gt;https://your-app-id.appspot.com/admin&lt;/code&gt;, 登录授权完成验证;&lt;/li&gt;
&lt;li&gt;成功验证后你就能看到一个有着”Google Analytics superProxy”大标题的页面啦, 点击&lt;code&gt;Create Query&lt;/code&gt;即创建你的Query了, 当然, 这里直接填写的就是query, 如果你不知道如何写, 可以在&lt;a href=&quot;http://ga-dev-tools.appspot.com/explorer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Analytics Query Explorer&lt;/a&gt;中进行测试, 然后复制贴回来就行;&lt;/li&gt;
&lt;li&gt;创建后会提示你设定更新的频率, 视情况设定即可, 然后你就可以看到对应的&lt;code&gt;formats&lt;/code&gt;里面看到支持的众多输出格式了, 默认的公共地址就是json的, 获取其他格式也是利用&lt;code&gt;&amp;amp;format=&lt;/code&gt;, 所以这里我们使用公共地址即可;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###并添加本地获取代码&lt;/p&gt;
&lt;p&gt;恩, 说了半天都没说到jekyll呢哈哈, 因为需要向appspot发请求获取数据, 所以这里肯定就使用js了~ 代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load pageview counts from Google Analytics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPageViewCount&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;dataurl&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dataurl === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataurl = &lt;span class=&quot;string&quot;&gt;'https://taoalpha-github-page.appspot.com/query?id=ahZzfnRhb2FscGhhLWdpdGh1Yi1wYWdlchULEghBcGlRdWVyeRiAgICAgICACgw'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 防止我们有时候需要更换url, 这里给了一个url作为参数, 不过默认给了当前的;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: dataurl,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataType: &lt;span class=&quot;string&quot;&gt;'jsonp'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeout: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 3 sec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      parsePageViewData(data.rows);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 解析数据部分, 见下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 容错环节, 如果失败的话, 就获取本地数据, 这个数据基本每次push的时候会更新一次~ 写到Rakefile里哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Failed to get pageview from GAE!'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          url: &lt;span class=&quot;string&quot;&gt;'/blog/pageview.json'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          dataType: &lt;span class=&quot;string&quot;&gt;'json'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Local page view backup file.'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parsePageViewData(data.rows);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u89E3_u6790json_u6570_u636E_2C_u5C55_u793Apv_u6570_u636E&quot;&gt;&lt;a href=&quot;#u89E3_u6790json_u6570_u636E_2C_u5C55_u793Apv_u6570_u636E&quot; class=&quot;headerlink&quot; title=&quot;解析json数据,展示pv数据&quot;&gt;&lt;/a&gt;解析json数据,展示pv数据&lt;/h3&gt;&lt;p&gt;解析部分主要要结合获取的数据来写, 因为我们url的使用有时候不够规范, 所以会出现不同条目同一url的现象, 所以这里需要做简单的统一.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parsePageViewData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;rows&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rows === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;'.post'&lt;/span&gt;).each(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历我们的文章列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myPath = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).children(&lt;span class=&quot;string&quot;&gt;'h2'&lt;/span&gt;).children(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;'href'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取我们文章页的url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myPath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//myPath = myPath.slice('http://taoalpha.github.io'.length);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 这里根据具体情况, 如果你的href中包含了baseurl的话, 这里要记得去掉baseurl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pageview = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; rows.length; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gPath = rows[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hashIndex = gPath.indexOf(&lt;span class=&quot;string&quot;&gt;'#'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gPathFilter = hashIndex &amp;gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ? gPath.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,hashIndex) : gPath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 因为当前post有哥大纲, 所以会出现#menuID2的尾缀, 这种也需要合并到该博文的统计中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 暂时没涉及到文章详情页的阅读数展示, 所以这里可以先这么处理着哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gPath === myPath || myPath === mainPath + &lt;span class=&quot;string&quot;&gt;'index.html'&lt;/span&gt; || gPathFilter === myPath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pageview += &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(rows[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pageview)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 只对有pv数据的博文显示阅读书, 虽然目前有数据也基本是我点的哈哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).find(&lt;span class=&quot;string&quot;&gt;'span.viewcount'&lt;/span&gt;).html(&lt;span class=&quot;string&quot;&gt;'&amp;lt;i class=&quot;fa fa-eye&quot;&amp;gt;&amp;lt;/i&amp;gt;'&lt;/span&gt;+pageview);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上, 只需要在对应的页面调用&lt;code&gt;getPageViewCount()&lt;/code&gt;即可~ 效果可见&lt;a href=&quot;/blog&quot;&gt;blog首页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jekyll-GA_u63D2_u4EF6&quot;&gt;&lt;a href=&quot;#Jekyll-GA_u63D2_u4EF6&quot; class=&quot;headerlink&quot; title=&quot;Jekyll-GA插件&quot;&gt;&lt;/a&gt;Jekyll-GA插件&lt;/h2&gt;&lt;p&gt;不用插件虽然也能解决, 不过如果有现成插件的话, 自然能够事半功倍嘛~ 在Github上一搜就找到了: &lt;a href=&quot;https://github.com/developmentseed/jekyll-ga&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;developmentseed/jekyll-ga - Github&lt;/a&gt;~ &lt;/p&gt;
&lt;p&gt;看了下, 发现原理其实差不多, 不过与其创建app间接获取GA数据, 这个插件直接使用了&lt;code&gt;google-api-client&lt;/code&gt;这个ruby插件从而直接在插件层面获取数据了~ 具体的方法等, &lt;code&gt;readme&lt;/code&gt;里面也都写的很详细, 大家可以按部就班使用喽~&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/analytics/solutions/google-analytics-super-proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Analytics superProxy&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/googleanalytics/google-analytics-super-proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Analytics superProxy - Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developmentseed.org/blog/google-analytics-jekyll-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A plugin for loading Google Analytics data into Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhangwenli.com/blog/2014/08/05/page-view-from-google-analytics-for-your-blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pageview from Google Analytics for Your Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说了也有趣, 我是从&lt;a href=&quot;http://zhangwenli.com/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WenLi&lt;/a&gt;代码中获取的灵感, 然后google折腾出的解决方案, 结果写到一半就发现她也有一篇相近的博文哈哈&lt;/p&gt;
</summary></url><url><title>给你的 Jekyll 博客添加日志汇总展示页面</title><loc>http://taoalpha.me/blog/2015/07/09/tech-add-goaccess-like-log-page-for-your-jekyll/</loc><publish>2015-07-09T07:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://goaccess.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Goaccess&lt;/a&gt; 是一个非常简单而有齐全的日志分析工具, 其&lt;a href=&quot;http://goaccess.io/goaccess_html_report.html?201507052200&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;生成的html页面&lt;/a&gt;非常精细全面, 可以让你更好的查看日志, 今天就利用上次获取PV的方法来介绍下如何给 Jekyll 添加一个类似goaccess的日志页面.&lt;/p&gt;
&lt;h2 id=&quot;u51C6_u5907_u5DE5_u4F5C&quot;&gt;&lt;a href=&quot;#u51C6_u5907_u5DE5_u4F5C&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;如果你了解&lt;a href=&quot;https://github.com/googleanalytics/google-analytics-super-proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; google-analytics-super-proxy &lt;/a&gt; 或者你看过我之前写的 &lt;a href=&quot;/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/&quot;&gt;如何给jekyll博文添加阅读数&lt;/a&gt;, 那么你就可以进行下面的准备工作了, 如果没有的话, 请先阅读相关内容后再继续 ^_^&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;a href=&quot;https://ga-dev-tools.appspot.com/query-explorer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GA Query Explorer&lt;/a&gt;中测试构建你需要的Query API, 比如我根据Goaccess的日志内容和GA本身的统计情况选取了: &lt;code&gt;ga:fullReferrer&lt;/code&gt;,&lt;code&gt;ga:browser&lt;/code&gt;,&lt;code&gt;ga:operatingSystem&lt;/code&gt;,&lt;code&gt;ga:country&lt;/code&gt;,&lt;code&gt;ga:pagePath&lt;/code&gt;作为我的dimensions, 然后将&lt;code&gt;ga:pageviews&lt;/code&gt;和&lt;code&gt;ga:uniquePageviews&lt;/code&gt;作为我的metrics, 而且因为之前测试没有关闭ga, 所以存在一些干扰数据, 可以通过filters中设置&lt;code&gt;ga:hostname!~127*&lt;/code&gt;来过滤掉;&lt;/li&gt;
&lt;li&gt;在我们建立好的GAE上添加一个新的Query, 并设定其更新频率;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u89E3_u6790_u548C_u5C55_u793A&quot;&gt;&lt;a href=&quot;#u89E3_u6790_u548C_u5C55_u793A&quot; class=&quot;headerlink&quot; title=&quot;解析和展示&quot;&gt;&lt;/a&gt;解析和展示&lt;/h2&gt;&lt;h3 id=&quot;u83B7_u53D6json&quot;&gt;&lt;a href=&quot;#u83B7_u53D6json&quot; class=&quot;headerlink&quot; title=&quot;获取json&quot;&gt;&lt;/a&gt;获取json&lt;/h3&gt;&lt;p&gt;这一步和 &lt;a href=&quot;/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/&quot;&gt;如何给jekyll博文添加阅读数&lt;/a&gt;基本一样, 区别的就在于我们这次不是直接处理&lt;code&gt;responseData.rows&lt;/code&gt;了, 我们直接把&lt;code&gt;responseData&lt;/code&gt;传给解析函数, 因为我们需要除了rows以外的一些属性.&lt;/p&gt;
&lt;h3 id=&quot;u89E3_u6790_u5C55_u793A&quot;&gt;&lt;a href=&quot;#u89E3_u6790_u5C55_u793A&quot; class=&quot;headerlink&quot; title=&quot;解析展示&quot;&gt;&lt;/a&gt;解析展示&lt;/h3&gt;&lt;p&gt;主要的目的是模拟Goaccess的形式展示访客在浏览器, refer, 国家, 系统以及访问页面几个纬度的分布情况; 主要思路就是通过解析返回的数据, 然后根据各个纬度的属性将对应的pv,uv加以统计后展示出来即可.&lt;/p&gt;
&lt;p&gt;js解析部分的代码如下(展示部分我主要参照了goaccess自身的样式设计, 这里就直接略过了~ 有兴趣的可以&lt;a href=&quot;!--￼3--&amp;gt;/galog/&quot;&gt;点此查看效果&lt;/a&gt;):&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;property&quot;&gt;@parseGALog&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  overalldata = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  overalldata.tpv = data[&lt;span class=&quot;string&quot;&gt;&quot;totalsForAllResults&quot;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&quot;ga:pageviews&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  overalldata.tuv = data[&lt;span class=&quot;string&quot;&gt;&quot;totalsForAllResults&quot;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&quot;ga:uniquePageviews&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  overalldata.datasize = parseFloat(JSON.stringify(data).length/&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  overalldata.referer = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  overalldata[&lt;span class=&quot;string&quot;&gt;'404'&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  requestdata = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  refererdata = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  osdata = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  browserdata = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  countrydata = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  temp_data = data.rows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.each temp_data,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(k,v)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overalldata.referer.push(v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; overalldata.referer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overalldata[&lt;span class=&quot;string&quot;&gt;'404'&lt;/span&gt;] += parseInt(v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;/blog/404&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !requestdata[v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      requestdata[v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]] = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      requestdata[v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] = parseInt(v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      requestdata[v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      requestdata[v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      requestdata[v[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !countrydata[v[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countrydata[v[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]] = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countrydata[v[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countrydata[v[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countrydata[v[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      countrydata[v[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !refererdata[v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      refererdata[v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      refererdata[v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      refererdata[v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      refererdata[v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      refererdata[v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !osdata[v[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      osdata[v[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]] = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      osdata[v[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      osdata[v[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      osdata[v[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      osdata[v[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !browserdata[v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      browserdata[v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      browserdata[v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      browserdata[v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] = parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      browserdata[v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;pv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      browserdata[v[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]][&lt;span class=&quot;string&quot;&gt;&quot;uv&quot;&lt;/span&gt;] += parseInt v[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# render overall part&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;'li.overall'&lt;/span&gt;).find(&lt;span class=&quot;string&quot;&gt;'summary'&lt;/span&gt;).html &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;span class='itemname'&amp;gt;&amp;lt;i class='fa fa-bar-chart'&amp;gt;&amp;lt;/i&amp;gt;total pageviews&amp;lt;/span&amp;gt; &amp;lt;span class='count'&amp;gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;overalldata.tpv&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;span class='itemname'&amp;gt;&amp;lt;i class='fa fa-bar-chart'&amp;gt;&amp;lt;/i&amp;gt;total unique visitors&amp;lt;/span&amp;gt; &amp;lt;span class='count'&amp;gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;overalldata.tuv&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;span class='itemname'&amp;gt;&amp;lt;i class='fa fa-bar-chart'&amp;gt;&amp;lt;/i&amp;gt;referrers&amp;lt;/span&amp;gt; &amp;lt;span class='count'&amp;gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;overalldata.referer.length&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;span class='itemname'&amp;gt;&amp;lt;i class='fa fa-bar-chart'&amp;gt;&amp;lt;/i&amp;gt;total 404&amp;lt;/span&amp;gt; &amp;lt;span class='count'&amp;gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;overalldata[&lt;span class=&quot;string&quot;&gt;'404'&lt;/span&gt;]&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;span class='itemname'&amp;gt;&amp;lt;i class='fa fa-bar-chart'&amp;gt;&amp;lt;/i&amp;gt;log size&amp;lt;/span&amp;gt; &amp;lt;span class='count'&amp;gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;overalldata.datasize&amp;#125;&lt;/span&gt;kb&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;span class='itemname'&amp;gt;&amp;lt;i class='fa fa-bar-chart'&amp;gt;&amp;lt;/i&amp;gt;log source&amp;lt;/span&amp;gt; &amp;lt;span class='count'&amp;gt;ga&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  showLogData(requestdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),&lt;span class=&quot;string&quot;&gt;'Path'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  showLogData(refererdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),&lt;span class=&quot;string&quot;&gt;'Referer'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  showLogData(osdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),&lt;span class=&quot;string&quot;&gt;'OS'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  showLogData(browserdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),&lt;span class=&quot;string&quot;&gt;'Browser'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  showLogData(countrydata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),&lt;span class=&quot;string&quot;&gt;'Country'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;property&quot;&gt;@showLogData&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(rq,ptotal,utotal,id)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  thead = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;PageViews&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;%&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Unique PageViews&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;%&amp;lt;/th&amp;gt;&amp;lt;th class=''&amp;gt;__title__&amp;lt;span onclick='if($(this).hasClass('expanded'))&amp;#123;$(this).removeClass('expanded').closest('thead').next('tbody').find('tr:nth-of-type(n+10)').hide();&amp;#125;else&amp;#123;$(this).addClass('expanded').closest('thead').next('tbody').find('tr').show()&amp;#125;'&amp;gt;&amp;lt;i class='fa fa-expand'&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tbodyitem = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;tr class='root'&amp;gt;&amp;lt;td class='num'&amp;gt;__value_1__&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;__value_2__&amp;lt;/td&amp;gt;&amp;lt;td class='num'&amp;gt;__value_3__&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;__value_4__&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;__value_5__&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tbody = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.each rq, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(k,v)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tbody += tbodyitem.replace(&lt;span class=&quot;string&quot;&gt;'__value_1__'&lt;/span&gt;,v[&lt;span class=&quot;string&quot;&gt;'pv'&lt;/span&gt;]).replace(&lt;span class=&quot;string&quot;&gt;'__value_2__'&lt;/span&gt;,(v[&lt;span class=&quot;string&quot;&gt;'pv'&lt;/span&gt;]/ptotal*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)).replace(&lt;span class=&quot;string&quot;&gt;'__value_3__'&lt;/span&gt;,v[&lt;span class=&quot;string&quot;&gt;'uv'&lt;/span&gt;]).replace(&lt;span class=&quot;string&quot;&gt;'__value_4__'&lt;/span&gt;,(v[&lt;span class=&quot;string&quot;&gt;'uv'&lt;/span&gt;]/utotal*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;).toFixed(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)).replace(&lt;span class=&quot;string&quot;&gt;'__value_5__'&lt;/span&gt;,k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;'li.'&lt;/span&gt;+id).find(&lt;span class=&quot;string&quot;&gt;'thead'&lt;/span&gt;).html thead.replace(&lt;span class=&quot;string&quot;&gt;'__title__'&lt;/span&gt;,id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;string&quot;&gt;'li.'&lt;/span&gt;+id).find(&lt;span class=&quot;string&quot;&gt;'tbody'&lt;/span&gt;).html tbody&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;u603B_u7ED3&quot;&gt;&lt;a href=&quot;#u603B_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;可能有人会说既然数据都是从GA获取的, 干嘛不直接去GA查看不就得了.. 何必多此一举呢?&lt;/p&gt;
&lt;p&gt;恩… 其实确实是如此的… 只是一来我是熟悉下GA的接口和工具, 做出来练练手; 二来呢, 也是这样可以更好的聚合我想要看的数据, 方便我个人定制~ (当然, GA本身也有定制report并发送邮箱的功能~)&lt;/p&gt;
</summary></url><url><title>Cookie中path规则介绍</title><loc>http://taoalpha.me/blog/2015/05/22/tech-Cookie-path/</loc><publish>2015-05-22T16:00:00.000Z</publish><summary>&lt;p&gt;cookie这个东西经历了多次风波后, 很多人应该都有所耳闻了, 简单来说就是浏览器用来记录一些小型信息以待之后访问使用的一种机制. 一个标准cookie有几个基本的域: name, value, Domain, Path, Expires, Size, HTTP, Secure. 下面一一介绍.&lt;/p&gt;
&lt;h2 id=&quot;cookie_u5404_u9879_u5C5E_u6027&quot;&gt;&lt;a href=&quot;#cookie_u5404_u9879_u5C5E_u6027&quot; class=&quot;headerlink&quot; title=&quot;cookie各项属性&quot;&gt;&lt;/a&gt;cookie各项属性&lt;/h2&gt;&lt;h3 id=&quot;Name&quot;&gt;&lt;a href=&quot;#Name&quot; class=&quot;headerlink&quot; title=&quot;Name&quot;&gt;&lt;/a&gt;Name&lt;/h3&gt;&lt;p&gt;作为cookie的名称, 在赋值时必填的, 同时也是获取的凭证;&lt;/p&gt;
&lt;h3 id=&quot;Value&quot;&gt;&lt;a href=&quot;#Value&quot; class=&quot;headerlink&quot; title=&quot;Value&quot;&gt;&lt;/a&gt;Value&lt;/h3&gt;&lt;p&gt;具体的cookie内容存储所在. 通常不为空(为空无意义), 存储基本以文本形式或者数字形式存储, 你可以存储stringify的json, 但读取后还是需要parse才能还原为json. 直接试图储存json的话, 只会存储成&lt;code&gt;&amp;quot;[object Object]&amp;quot;&lt;/code&gt;的文本..&lt;/p&gt;
&lt;h3 id=&quot;Domain&quot;&gt;&lt;a href=&quot;#Domain&quot; class=&quot;headerlink&quot; title=&quot;Domain&quot;&gt;&lt;/a&gt;Domain&lt;/h3&gt;&lt;p&gt;cookie生效的域名, cookie只会在对应的domain下生效(直接表现为可获取), 而domain的层级是向下继承的, 所以下级域名可以获取到上级域名的cookie;&lt;/p&gt;
&lt;p&gt;举个例子就是: inbox.google.com的cookie就只能被inbox.google.com下属的页面获取, 而不能被mail.google.com获取;&lt;/p&gt;
&lt;p&gt;通常为cookie生成所属的域名;&lt;/p&gt;
&lt;h3 id=&quot;Path&quot;&gt;&lt;a href=&quot;#Path&quot; class=&quot;headerlink&quot; title=&quot;Path&quot;&gt;&lt;/a&gt;Path&lt;/h3&gt;&lt;p&gt;和Domain基本类似, 只是限制放在了路径上, 同样也是向下继承, 下级路径可以获取上级路径的cookie, 举个例子就是:&lt;/p&gt;
&lt;p&gt;google.com的域名, /reader/的二级路径的话, 就只能在google.com/reader/及以下的路径下获取.&lt;/p&gt;
&lt;p&gt;默认情况下为cookie赋予的当前路径.&lt;/p&gt;
&lt;h3 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h3&gt;&lt;p&gt;过期时间, 用于设置cookie过期的时间的. 过了这个时间后对应的cookie会自动销毁.&lt;/p&gt;
&lt;p&gt;通常默认值为session, 寿命基本存在于浏览器的一次开关周期中, 基本属于关闭浏览器后, 就销毁了.&lt;/p&gt;
&lt;h3 id=&quot;Size&quot;&gt;&lt;a href=&quot;#Size&quot; class=&quot;headerlink&quot; title=&quot;Size&quot;&gt;&lt;/a&gt;Size&lt;/h3&gt;&lt;p&gt;表示cookie的大小, 属于浏览器计算的, 在我们赋值过程中没有体现. 值得一说的是, 根据HTTP的协议要求, 单个cookie的大小是不能超过&lt;strong&gt;4kb&lt;/strong&gt;的.&lt;/p&gt;
&lt;p&gt;对于cookie的数量, 其实是有限制的, 但是这个因浏览器而有所不同, 通常来说, 大概在300个左右, 超过限制后, 会自动删除老旧的cookie来腾位置给新的cookie.&lt;/p&gt;
&lt;h3 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h3&gt;&lt;p&gt;一旦设定httpOnly的话, 那么浏览器会默认这一个cookie只能通过http协议来获取, 那么任何客户端的获取都会被阻止, 比如js.&lt;/p&gt;
&lt;h3 id=&quot;Secure&quot;&gt;&lt;a href=&quot;#Secure&quot; class=&quot;headerlink&quot; title=&quot;Secure&quot;&gt;&lt;/a&gt;Secure&lt;/h3&gt;&lt;p&gt;设定secure的话, cookie只会通过https来传输. 算是增强安全性的一种方法.&lt;/p&gt;
&lt;h2 id=&quot;u4F7F_u7528_u9014_u5F84&quot;&gt;&lt;a href=&quot;#u4F7F_u7528_u9014_u5F84&quot; class=&quot;headerlink&quot; title=&quot;使用途径&quot;&gt;&lt;/a&gt;使用途径&lt;/h2&gt;&lt;p&gt;通常你可以使用&lt;code&gt;jQuery.cookie&lt;/code&gt;的库来进行cookie的赋予和获取以及销毁. 当然, 本身原生的js也是支持的, 而且语法也很简单, 完全可以使用.&lt;/p&gt;
&lt;p&gt;HTTP以及Secure两个属性都属于基于安全性原则的考虑, 也通常需要服务器配合生成, js是无法直接完成的. 一般来说, 个人博客使用的话, 基本是不太需要的;&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599_3A&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599_3A&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/an-introduction-to-cookies--net-12482&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Introduction to Cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cookielaw.org/introduction-to-cookies/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are Cookies?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.teamtreehouse.com/how-to-create-totally-secure-cookies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Create Totally Secure Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>CSS3 中易混淆属性 (1)</title><loc>http://taoalpha.me/blog/2015/06/01/tech-CSS3-tips-1/</loc><publish>2015-06-01T13:00:00.000Z</publish><summary>&lt;h2 id=&quot;u5F00_u9898_u8BF4_u660E&quot;&gt;&lt;a href=&quot;#u5F00_u9898_u8BF4_u660E&quot; class=&quot;headerlink&quot; title=&quot;开题说明&quot;&gt;&lt;/a&gt;开题说明&lt;/h2&gt;&lt;p&gt;继jekyll tips系列之后, 这次新开CSS3 tips系列. 以记录学习研究过程中对css3的困惑以及心得~ &lt;/p&gt;
&lt;h2 id=&quot;u4ECA_u65E5_u4E3B_u9898&quot;&gt;&lt;a href=&quot;#u4ECA_u65E5_u4E3B_u9898&quot; class=&quot;headerlink&quot; title=&quot;今日主题&quot;&gt;&lt;/a&gt;今日主题&lt;/h2&gt;&lt;p&gt;今日的主题主要有以下三个方面, 我会逐一说明.&lt;/p&gt;
&lt;h3 id=&quot;nth-child_28_29__u548C_nth-of-type_28_29&quot;&gt;&lt;a href=&quot;#nth-child_28_29__u548C_nth-of-type_28_29&quot; class=&quot;headerlink&quot; title=&quot;nth-child() 和 nth-of-type()&quot;&gt;&lt;/a&gt;&lt;code&gt;nth-child()&lt;/code&gt; 和 &lt;code&gt;nth-of-type()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;nth-child()和nth-of-type()都是CSS3新引入的pseudo class. 两者有着非常接近而又细微的差别.&lt;/p&gt;
&lt;p&gt;其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;:nth-child()&lt;/strong&gt; 指的是 “第x个指定的元素;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;:nth-of-type()&lt;/strong&gt; 指的是 “第x个指定的&lt;strong&gt;该&lt;/strong&gt;元素;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有点难以理解? 看下下面的例子就可以了:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Little&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Piggy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- p:nth-child(2) --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;second one&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- p:nth-of-type(2) --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:nth-child(2)&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:nth-of-type(2)&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;多数情况下, 两者确实是可以混用的, 但对于类似上述的这种情况或者是对于table元素(因为table下的tr和th是同级别元素), 那么这个细微的差别就很有价值了.&lt;/p&gt;
&lt;p&gt;目前&lt;code&gt;:nth-of-type&lt;/code&gt;的支持已经比较普遍了, 主流浏览器都是从比较早的版本就支持了:Firefox 3.5+, Opera 9.5+, Chrome 2+, Safari 3.1+, IE 9+ .&lt;/p&gt;
&lt;h3 id=&quot;initial__u548C_inherit&quot;&gt;&lt;a href=&quot;#initial__u548C_inherit&quot; class=&quot;headerlink&quot; title=&quot;initial 和 inherit&quot;&gt;&lt;/a&gt;initial 和 inherit&lt;/h3&gt;&lt;p&gt;initial 和 inherit 虽然不是css3的新元素, 但也算是很少用的几个属性之一了. 两者的区别其实和语意差别是完全一致的. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;initial:&lt;/strong&gt; 初始值, 通过这一值可以将某个css属性恢复到初始状态, 基本来说就是当前浏览器的默认状态, 可以说一个非常方便的reset;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;inherit:&lt;/strong&gt; 继承值, 顾名思义, 继承其母元素的属性;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在元素母元素为html或者body且两者无样式的时候, 对两者的首级子元素而言, 用initial或者inherit效果是完全一样的.&lt;/p&gt;
&lt;p&gt;两个属性都是极少用到的属性, 当然也能理解, 首先很多浏览器对很多元素而言, 属性默认值就是inherit, 而initial虽然可以说是极好的reset方式, 但是想象一下每个css属性都需要重置, 一个个写…也够累的…&lt;/p&gt;
&lt;p&gt;意识到这个问题的人自然很多, 尤其是那些浏览器背后的天才工程师们, 他们已经开始着手做准备了~ 于是就有了&lt;code&gt;all: initial&lt;/code&gt;这种神级的设定~ 可以一次性的reset所有属性, 可惜的是, 其目前得到的浏览器支持是很有限的:) chrome肯定有的喽~&lt;/p&gt;
&lt;h3 id=&quot;em__u548C_rem&quot;&gt;&lt;a href=&quot;#em__u548C_rem&quot; class=&quot;headerlink&quot; title=&quot;em 和 rem&quot;&gt;&lt;/a&gt;em 和 rem&lt;/h3&gt;&lt;p&gt;em,rem是CSS新引入的字体尺寸单位了, 都是相对单位. 和initial, inherit异曲同工的就是两者的区别也近似后者.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;em: 相对的对象是母元素;&lt;/li&gt;
&lt;li&gt;rem: 相对的对象是根元素:root&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于em和rem有两种用法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局rem式: 设定全局根元素, html的字体尺寸为绝对值, 比如20px, 然后所有子元素都使用rem来定义其字体大小;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块式: 鉴于上面的情况在复杂网页中有可能会出现放大比例的误差增大, 更好的一种方式就是将网页设定为模块式, 每个模块的母元素使用一个绝对大小, 子元素设定em;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体选用哪一个, 还需要大家各自衡量喽~ &lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599_3A&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599_3A&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/getting-acquainted-with-initial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Acquainted with Initial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Difference Between :nth-child and :nth-of-type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/rems-ems/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Font Size Idea: px at the Root, rem for Components, em for Text Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/theres-more-to-the-css-rem-unit-than-font-sizing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;There’s more to the CSS rem unit than font sizing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Your are Just Getting Started(译)--解读初创公司</title><loc>http://taoalpha.me/blog/2013/06/11/read-your-are-just-getting-started-translated-startups/</loc><publish>2013-06-11T06:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Your are Just Getting Started(你才刚开始)&lt;/h4&gt;&lt;br&gt;在一个初创公司中工作,或者更准确的说,是在过去15个月里工作过的许多的初创公司的工作中,我学到了一点:观察市场是多么简单的一件事,看到的无非是一个包含了所有必备属性的清单.如果你必须获得用户的资料,你必须要有一个信息系统.如果你有个网站,你就需要一个FAQ,一个辅助部分,以及一个blog.如果你已经在活跃中,那么你就需要一个活跃的信息流,RSS以及诸如此类的事情.如果你是在线销售,那么你就需要一个评价的部分,毕竟,所有的达人们都有这个不是吗?但是,你还不是达人,你只是个初学者.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;Be Careful What You Copy(模仿需谨慎)&lt;/h5&gt;&lt;br&gt;随便打开一个.com的网站,并且假设它现在所有的所有特征就是让它们如今杰出的原因,是一个很诱人的想法.但它从来都没有成真过…&lt;p&gt;&lt;/p&gt;
&lt;p&gt;实际上,绝大多数成功的故事都开始于一个看起来不可思议的属性设置.比如:当Basecamp在2004年创立时,它还不支持文件上传.而它们的解决办法就是把文件上传到你自己的服务器,然后创建分享链接.听起来似乎很不可思议很可笑不是吗?更不用说什么样的行为你可以收到一个邮件提醒了,无论是编辑已发表的评论,通过邮件回复,或者给一个To-do项目安排时间等.简单来说,就是他们完全没想今天看到的这样开始,那时候他们也仅仅是个刚上路的新手.&lt;/p&gt;
&lt;p&gt;类似的,Amazon在1994年成立,但直到1996年才增加了书评的功能,一开始他们一直关注于获得更多用户.他们直到1998年才增加CDs的类别,直到2001年甚至都没有公布任何利润来源(也就是没有利润…).这一点很容易忽略,从而以为他们是在此之前成功的,但是你更不是它们今天的样子,你才刚刚开始.&lt;/p&gt;
&lt;p&gt;当然,他们曾经改变过市场,曾经改变过期望,但是如果你一直和它站在同一水平线上,那么你就不可能按照他们的特征来做.更进一步的说,他们并没有仅仅因为别人拥有就添加这些特征.他们给予实际的市场认知,他们的客户,反馈以及当前可用的技术等等来做决定的.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;Don’t Play To Your Weakness(不要秀你的弱势)&lt;/h5&gt;&lt;br&gt;初创公司相比那些大公司们有以下几个明显的优势:&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;没有用户–惊讶吧,这也可以称为一个优势.如果你因为它没有正确工作而想要去掉某个属性,你不用想自己解释.在早期,你有着完全的自由来塑造你的产品,你可以非常简单的选择模式,点一下删除键,然后,就ok了.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;没有投资者–你不用向那些不认可你开发产品的方式或者认为你花时间测试一个属性是否匹配界面的方法的”强权(股东)”解释汇报你的举动.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;灵活的–如果你才刚开始,你可能还没有那么大量的代码基础,没有大到不可思议的数据库,因为那些往往意味着需要几个小时的时间来升级或者迁移.如果你想要尝试如何整合flickr来工作,那么你就可以非常便捷的尝试连接它们,测试它,然后就是否需要包含它作出决定.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;自由–你不需要因为开发了它就需要使用这个功能.当然,你可能需要给开发者付费,毕竟人家做了这么杰出的工作,但是通常来说,如果功能很烂,那么你完全可以非常自由的去除它.对于Microsoft或者Google而言,可能干掉一个已经花费7个月时间来开发的功能,或者放弃它们的产品规划比较不不容易,因为外界有着数十亿的股份…更何况苦心建立的品牌名声.而初创公司,在早期你几乎可以做任何事情.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你可以轻微的越界–对于有抱负的年轻人,你可以更容易的从一堆疯狂的事情中脱身出来,相比于那些成熟的企业而言.无论是一个时髦的主页,一个市场活动,比如Grasshopper送给客户的那个蚱蜢形状巧克力,或者Derek Sivers和CDBaby做的那个很好玩的销售确认邮件,或者仅仅是给你所有的客户的私人的手写的感谢卡,想Wufoo做的那样.你需要的就是发挥你的力量,尽情的挥舞你的智慧.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;Choose Your Battles(选择你的战场)&lt;/h5&gt;&lt;br&gt;当我看到那些初创企业和那些已经建立起数百万基业的企业相较量时,我想”哇,好用勇气啊”,而当我看到他们想要在人家的地盘干倒对手,属性对属性,产品对产品,价格对价格的玩时,我就对它们的未来感到担忧了.用自己的弱势去和对手正面相抗纯粹是引火烧身的举动.你都没有足够的预算,用户基础,数据基础以及经验来实施它.谨慎灵活,考虑周全才是勇气的真正表现.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这样想,如果你必须要和Ryan Giggs竞争,而你来选择游戏,你会选择足球吗?我希望答案是不..&lt;/p&gt;
&lt;p&gt;当你在计划你的产品时,要记住你应该从最有用的属性着手,除非你的资金已经充裕到爆棚而且和大企业有所合作.同样,要记得有一些属性功能是需要现有用户和数据基础才能发挥作用的.&lt;/p&gt;
&lt;p&gt;一些关键的因素在于需要你尽力去做.浪费时间和金钱去做那些辅助的”nice to have”的属性,对于你的应用并没有什么实质性的帮助.如果你考虑一个”让用户发表评论的功能”,而且你昨天就需要它,那么,当听到我说你可能需要等两年后再做时不要发笑.当你有用户之后,再去考虑什么才是重要的.&lt;/p&gt;
</summary></url><url><title>Why Users Fill Out Less If You Mark Required Fields</title><loc>http://taoalpha.me/blog/2014/04/16/read-yi-why-users-fill-out-less-if-you-mark-required-fields/</loc><publish>2014-04-16T10:00:00.000Z</publish><summary>&lt;p&gt;UX Movement绝对是我上次similar site的意外收获啊!!! 文章都非常易懂, 好看, 实用, 页面更是非常棒的简约响应式~ 对于学ux而言, 绝对是个好去处~ 这不, 昨天收到ux的更新, 看题目就让人觉得很赞!哈哈&lt;/p&gt;
&lt;p&gt;===================正文=====================&lt;/p&gt;
&lt;p&gt;为什么你标记必填的空越多, 用户填的就越少呢?&lt;/p&gt;
&lt;p&gt;在你的表单中, 多数用户是不是跳过了那些可选项呢? 你可能不需要设置额外的信息, 但是保留这些可以帮助你更好的了解你的用户以及给他们更好的体验. 但是如果你希望有更多的用户能够在那些可选的地方填写内容, 你最好不要在那些必填的地方加上提示, 而只需要在可选的地方注明即可.&lt;/p&gt;
&lt;p&gt;研究显示(&lt;a href=&quot;http://preibusch.de/publications/Preibusch-Krol-Beresford__voluntary_over-disclosure.pdf&quot; target=&quot;_blank&quot;&gt;研究原文&lt;/a&gt;)多数用户在填写表单的时候会呈现一种”过度自我暴漏”的行为. 这意味着他们通常会提供比需要更多的信息, 即便他们被告知这完全是自愿的也一样. 这和一些传统的假设有一些矛盾, 人们会想当然的认为用户进入填表页面的时候, 会完成尽可能少的填写项. 但是, 当你把一个表单的必填项都标记后, 它就会影响并妨碍到用户的这种过度自我曝光的行为, 使得用户会跳过那些可选项…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/04/mark-optional-fields.png&quot; alt=&quot;Bad and good form example&quot;&gt;&lt;/p&gt;
&lt;p&gt;标记显示出那些必填项就会让用户可以以最少的信息来完成你的表单. 他们会着重来填写那些标记的必填项, 从而忽略掉那些可选的部分. 既然他们可以填写完那些必填的然后就可以进入下一步的情况下, 为什么他们还要花时间去填写那些可选呢? 然而, 如果你利用用户的这种”过度自我曝光”行为, 你只标记那些可选项, 用户就不会感知到这中捷径, 他们会按照顺序的填写完每一个空, 而不是扫视出那些必填的. 可选项也就能得到他们应得的注意了.&lt;/p&gt;
&lt;p&gt;认为用户不会填写那些你不标记为必填的选项是一件错误的认知. 用户下意识的行为是提供给你富余的信息而不是更少的信息. 如果你标记了那些必选项, 那么用户就不会对那些可选的位置再给予多少关注了. 这样也就让他们填写的东西更少了. 所以请停止标记那些必选项吧, 包括用星标来注明也是一样的. 这样一来这种长期因为那些劣质表单设计引起的过时的信息可以终结于此.&lt;/p&gt;
</summary></url><url><title>Why Users Aren’t Clicking Your Home Page Carousel?</title><loc>http://taoalpha.me/blog/2014/05/03/read-yi-why-users-arent-clicking-your-home-page-carousel/</loc><publish>2014-05-03T04:00:00.000Z</publish><summary>&lt;p&gt;首先介绍下什么是carousel: 标准词典翻译为”旋转木马”, 用在网络中, 尤其是网页设计的语境之下, 就是指代的很多网站中使用的多图切换模块, 通常由多张图组成, 但是一次只会显示一张, 图片右下角或者正下方常常有切换指引的远点或者缩略图, 图片左右则有前后箭头, 如此切换的时候会像旋转木马一样一张一张的出现在用户眼前(当然不限于图片, 有的也会用文字作为每一个木马).&lt;/p&gt;
&lt;p&gt;=========正文=========&lt;br&gt;网站研究发现在300w的首页中, 只有1%的用户浏览会点击页面上的carousel部分呢. 为什么占据了首页如此大面积的, 而且是很具有视觉优势的元素获得的点击是如此之少呢? 原因可能比较出乎意料, 因为多数carousel都做的很烂…&lt;/p&gt;
&lt;p&gt;绝大多数的carousel都包含多张切片, 当用户点击箭头切换时进行旋转展现. 通常第一张会获得多数的点击, 随后的点击比例就会急剧下降. 造成carousel如此的低的点击率的原因其实不是因为carousel本身的这种切换模式, 而是因为carousel的导航实在是太烂了….&lt;br&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/04/carousel-navigation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;carousel中的导航键头通常是没有点击欲望的. 为什们? 因为箭头通常无法表示出用户点击后会获得的信息, 无法给与用户期望. 所以用户通常都会忽视箭头, 把他们自己的注意力放在别的信息之上. 一个箭头只能说明这里还有更多的切片, 这完全不是让用户点击的理由. 所以, 他们很难看到carousel后面的切片, 又怎么产生点击呢? 不仅如此, 用户还常常因为箭头太小太靠近边缘而忽视它. 以这样的设计, 其他的切片能获得高点击才怪呢…&lt;/p&gt;
&lt;p&gt;实际上, carousel所需要的只是一个清晰的, 可见的标签导航即可. 标签本身说明了包含的信息, 有意义的描述, 告诉了用户他们想要的. 这会刺激用户去点击, 因为每个标签都告诉了他们点击后能获得什么. 用户就会更有可能点击那些吸引他们的信息. 导航标签本身也应该有足够的宽高并被置于一个更加可见的位置, 而不是像箭头一样很难发现. 重要的不仅是容易看到, 用户还要同时知道它代表了什么.&lt;/p&gt;
&lt;p&gt;绝大多数人们可能只会看一下这份网站研究报告的结论, 然后觉得所有的carousel都是非常不利于体验的, 他们以后都不应该使用carousel了. 但实际上, 多数carousel如此的糟糕是因为他们没有很好的导航, 都只是用一个小小的箭头来引导. 箭头本身不能承担任何信息, 但是文本标签可以. 如果你希望更多的用户点击你的carousel, 那么, 就是用标签导航把. 把标签写的清楚, 有意义, 你就会有更多的用户点击你的carousel了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;&lt;a href=&quot;http://uxmovement.com/navigation/why-users-arent-clicking-your-home-page-carousel/&quot; target=&quot;_blank&quot;&gt;UX Movement: Why Users Aren’t Clicking Your Home Page Carousel&lt;/a&gt;&lt;/li&gt;

</summary></url><url><title>Using @font-face</title><loc>http://taoalpha.me/blog/2014/07/15/read-yi-using-font-face/</loc><publish>2014-07-15T10:00:00.000Z</publish><summary>&lt;p&gt;如下例:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'MyWebFont'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'webfont.eot'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* IE9 Compat Modes */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'webfont.eot?#iefix'&lt;/span&gt;) &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'embedded-opentype'&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;/* IE6-IE8 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'webfont.woff'&lt;/span&gt;) &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'woff'&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;/* Modern Browsers */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'webfont.ttf'&lt;/span&gt;)  &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'truetype'&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;/* Safari, Android, iOS */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'webfont.svg#svgFontName'&lt;/span&gt;) &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'svg'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* Legacy iOS */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于如今WOFF是如此之火, 你也可以简化使用:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'MyWebFont'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'myfont.woff'&lt;/span&gt;) &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'woff'&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;/* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'myfont.ttf'&lt;/span&gt;) &lt;span class=&quot;function&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'truetype'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* Chrome 4+, Firefox 3.5, Opera 10+, Safari 3—5 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实只用WOFF也可以的, 目前基本主流浏览器都能支持了.&lt;/p&gt;
&lt;p&gt;然后你就可以在其他元素中使用这一属性了~ 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'MyWebFont'&lt;/span&gt;, Fallback, sans-serif&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;讲讲font-face的历史吧, @font-face是用于加载以及使用你自定义的字体而出现的, 针对的就是如今浏览器有权限使用的系统已有的有限字体. 这里有个&lt;a href=&quot;http://practicaltypography.com/system-fonts.html&quot; target=&quot;_blank&quot;&gt;系统预装字体的详情介绍&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;说到性能. 一般我们认为字体文件都是非常巨大的, 同时还会让你的网站增加很多额外的请求, 这些都会拖慢你的站点速度. 所以在使用之前请务必确保你考虑清楚.&lt;/p&gt;
&lt;p&gt;如果你确实要使用自定义字体, 有一种更好的更负责的方式是尽可能的加载足够少的字母和样式种类. 比如, 如果你使用google fonts, 只需要引入一些特定的组合即可:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(http://fonts.googleapis.com/css?family=Averia+Sans+Libre:&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;italic,&lt;span class=&quot;number&quot;&gt;700&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;甚至可以缩减引入的字符数量.&lt;/p&gt;
&lt;p&gt;相比于性能, @font-face似乎经常出现各式各样的bug…比如&lt;a href=&quot;http://blog.typekit.com/2014/02/28/new-bug-in-chrome-v33-affecting-web-fonts/&quot; target=&quot;_blank&quot;&gt;这种&lt;/a&gt;, &lt;a href=&quot;http://www.fontspring.com/support/troubleshooting/font-face-bugs&quot; target=&quot;_blank&quot;&gt;这种&lt;/a&gt;,还有&lt;a href=&quot;http://ianfeather.co.uk/ten-reasons-we-switched-from-an-icon-font-to-svg/&quot; target=&quot;_blank&quot;&gt;这种&lt;/a&gt;…&lt;/p&gt;
&lt;p&gt;关于字体格式, 倒是有几种, 每种都还有些历史.&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;  &lt;li&gt;WOFF&lt;br&gt;    &lt;p&gt;Web Open Font Format. 是专为网络使用而创造的, 由Mozilla和一些其他组织共同发展起来的, WOFF字体通常比其他格式字体加载的更快, 主要是因为他们使用了比OTF和TTF更加压缩的结构, 这种结构中还能包含一些meta信息和license信息, 目前来说WOFF应该是最大的赢家了, 主流的浏览器基本都已经能够支持了.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;SVG/SVGZ&lt;br&gt;    &lt;p&gt;Scalable Vector Graphic(Font). SVG是一种字体的矢量化过程, 主要可以让体积变的更小, 同时也能够用于移动设备. 这个字体格式是4.1版本以下的Safari浏览器唯一支持的字体格式了. 目前来说SVG依然不能被Firefox, IE以及IE 移动版支持. Firefox主要精力都在支持WOFF了~ 天知道他们什么时候支持SVG… SVGZ是SVG的再压缩版本.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;EOT&lt;br&gt;    &lt;p&gt;Embedded Open Type. 这一格式是由微软从15年前创造的(真正意义上@font-face的源头). 也是唯一一种IE8以及以下版本支持在@font-face中使用的格式了.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;OTF/TTF&lt;br&gt;    &lt;p&gt;OpenType Font 和 TrueType Font. 在一定程度上WOFF格式的出现也是因为这些格式可以很容易被复制, 无论合法与否. 同时, OpenType的某些特性(比如手写字体等)比较吸引设计师们.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;


&lt;p&gt;字体服务有很多, 主要就是提供那些你可能无权使用的字体, 从而让你的使用合法化. 主要有以下这些:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;  &lt;li&gt;Cloud Typography&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Typekit&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Fontdeck&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Webtype&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Typotheque&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Fontspring&lt;/li&gt;&lt;br&gt;  &lt;li&gt;WebINK&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Fonts.com&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Google Fonts&lt;/li&gt;&lt;br&gt;  &lt;li&gt;Font Squirrel&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;



&lt;p&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2010/10/20/review-of-popular-web-font-embedding-services/&quot; target=&quot;_blank&quot;&gt;想要对比下这些服务的好坏?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;  &lt;a href=&quot;http://css-tricks.com/snippets/css/using-font-face/&quot; target=&quot;_blank&quot;&gt;CSS Tricks&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>Top 10 Mistakes in Web Design</title><loc>http://taoalpha.me/blog/2014/04/19/read-yi-top-10-mistakes-in-web-design/</loc><publish>2014-04-19T12:00:00.000Z</publish><summary>&lt;p&gt;这是一篇很古老的文章了–发表在2011年1月. 之所以还把它挖出来, 一方面是因为正好看到了, 更重要的方面是因为里面列举的10条即便是现在也应该极力避免的~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 最让用户讨厌的10个恶习.  网页设计和html中可诟病的东西不少, 虽然其中有一些可能已经比过去少见多了.&lt;/p&gt;
&lt;p&gt;自从1996年第一次尝试一来, 我编写了不少列举网页设计中的top 10错误清单. 你可以在本文的结尾处看到这些文章的链接. 本文重点在列举其中的突出条目.&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Bad Search(糟糕的搜索)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;过度依赖文本的搜索方式是很影响用户体验的, 因为它们无法处理书写错误, 复数形式, 连字符号以及query中其他的一些特殊部分. 这样的搜索引擎对于年长者尤其难用, 但是它们伤害的是所有人.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;还有一个相关的问题就是搜索引擎仅仅根据结果中包含的query成分的多少来排列结果, 而不是根据每个文档的重要程度. 可能你把最佳猜测的结果放在最前面要更好一些, 尤其是对一些重要的查询, 比如产品名称等.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;搜索是用户在导航失败的时候的唯一依赖. 即便有些时候高级搜索能提供一些帮助, 但是简简单单的搜索本身更为常用, 同时搜索应该能够展示一个简简单单的结果, 因为那才是用户所需要的.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt; 目前来说, google, baidu等这种大型搜索基本已经不会出现这类问题了, 所以这个问题多数出现在个人blog搜索或者小站的自建搜索上, 通常只是个简单的sql语句, 也真心不能奢求做的太过完美.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;PDF Files for Online Reading(pdf文件的在线阅读)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;用户讨厌在浏览过程中突然遇到一个pdf, 这会打乱它们的工作流. 即便是简单如打印和保存都很难使用, 因为标准的浏览器命令都不能发挥作用. 网页布局往往为纸张优化, 而无法适应用户的浏览器窗口. 所以经藏无奈的看着眼前难用的窗口和小小的字体.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;最糟糕的是, pdf文档本身不易于浏览.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;PDF对于打印或者使用手册以及其他的一些需要打印出来的大型文档而言是非常有帮助的. 所以保持这一目标, 把相关的信息都转为更适合浏览的文本呈现在网页之中.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt; 对当下来说, 首先是显示器有了很大的进度, 目前的显示器基本都能轻松支持pdf的阅读了, 浏览器本身的渲染也考虑的文本的问题, 不过本身pdf的浏览性确实差了一些, 当然那些有目录交互的动态pdf除外;&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Not Changing the color of visited links(不改变已访问链接的颜色)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;一个对已经进行过的行为有区分的导航能够对当前的浏览起到巨大的帮助, 因为它代表了你的每一步操作. 了解过去的位置和当前所在可以让你更容易的决定下一步去哪里. 链接是导航处理的一个核心元素. 用户可以排除那些他们已经访问过的无用链接. 相反的, 他们也可以再次访问那些有价值的链接.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;最为重要的是, 了解自己已经访问过的页面能够避免用户重复地访问同一个页面.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;这些益处必须有一个前提: 就是用户可以分辨出已访问的和未访问的链接–利用浏览器中呈现出不同的颜色. 当已访问的链接没有改变颜色, 用户测试中发现用户表现出更加容易迷失在导航之中, 持续的访问同一页面.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;这个是个持续性的问题, 个人也是比较支持这种标记链接状态的属性的;&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Non-Scannable Text(不适合浏览的文本)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;满屏的文本本身绝对是交互体验的死敌. 不亲和, 无聊以及阅读起来非常痛苦…&lt;/p&gt;&lt;br&gt;        &lt;p&gt;为在线阅读而写作, 而不是仅仅为了展示内容. 引导用户阅读文本, 同时支持浏览, 利用一些结构化的技巧:&lt;br&gt;            &lt;ul&gt;&lt;br&gt;                &lt;li&gt;副标题&lt;/li&gt;&lt;br&gt;                &lt;li&gt;列表清单&lt;/li&gt;&lt;br&gt;                &lt;li&gt;&lt;strong&gt;高亮的关键字&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;                &lt;li&gt;简短的段落;&lt;/li&gt;&lt;br&gt;                &lt;li&gt;倒金字塔结构;&lt;/li&gt;&lt;br&gt;                &lt;li&gt;简单的写作风格, 以及尽可能避免语法错误或者信息冗余.&lt;/li&gt;&lt;br&gt;            &lt;/ul&gt;&lt;br&gt;        &lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;这个是一个老生常谈的问题了, 很多类似的文章也介绍过很多方法来更好的在网上呈现内容, 究其根本还是用户读书和上网阅读的行为差异很大–一个是读, 一个是看…&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Fixed Font Size(合适的字体大小)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;css文件非常不幸的给与了网站控制其样式的能力, 它们可以覆盖掉浏览器本身的字体样式, 同时还禁止了浏览器本身的字体大小设置的按钮, 取而代之以新的字体大小. 通常是time字体, 但往往会显得过小了写, 显著得降低了很多40以上的人们的可读性.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;请尊重用户的偏好, 让他们自行设置字体大小. 还有, 使用相对值而不是像素绝对值来定义字体大小.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;对于修改字体大小的按钮, 这个功能还是提供的 , 但是很多时候是隐性的, 目前多数浏览器应该是不会直接提供的, 个人觉得这属于一个排版型的问题, 毕竟大字会导致很多版式上的影响, 同时也是一个针对特殊人群的处理问题…&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Page Titles With Low Search Engine Visibility(网页标题不具备很好的易搜索性)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;搜索是一个用户发现网站的重要途径. 搜索本身也是用户在一个个网站之中跳转的方式. 你的页面标题是一个吸引新用户的主要方式. 通过提升在搜索结果的排位以及尽可能 的让已有的用户快速确定他们的需求.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;页面标题是存在与html的title标签之中. 通常会显示在搜索结果页的条目标题上, 点击后跳转到对应的网站. 搜索引擎通常会按照某种规则来阶段显示其中的部分, 比如66个字符, 所以这是一个非常微型的文本.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;页面标题经常还被用作浏览器书签添加后条目的标题. 对于你的首页而言, 以公司名为开始,加上简短的站点介绍. 千万不要用The, welcome to等开头, 除非你想要排序排在T或者W后…&lt;/p&gt;&lt;br&gt;        &lt;p&gt;对于很多非主页的页面, 可以以本页最突出的一些信息作为关键字描述一些用户可以在页面上发现的信息. 因为页面标题是用来作为浏览器窗口的标题, 同时还用来作为浏览器下任务栏的标题(windows下), 意味着高级用户将会在多个窗口下不断的切换, 仅仅依赖于前两三个词语, 所以如果每个页面都使用同样的页面标题, 你就会显著的影响可用性.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;这是比较实际的一个问题, 即便现在也是经常的遇到的…&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Anything That Looks Like an Advertisement(任何看起来像广告的东西)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;选择性注意是非常有帮助的, 而且网页用户已经学会忽略那些页面上的广告了–尤其是对于那些目标驱动型的浏览用户而言.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;不幸的是, 用户同时也会忽略那些正常的只是看起来比较像广告的元素. 毕竟, 当你忽略某事时, 你不需要再费力去去研究它看它究竟是啥.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;所以, 最简单的方法就是避免设计像广告的元素. 当然, 具体实施起来有很多的规则, 参照着现在越来越多的广告样式. 就目前来说, 有以下规则:&lt;br&gt;            &lt;ul&gt;&lt;br&gt;                &lt;li&gt;条幅忽略: 意味着用户将不会注意那些看起来像个条幅, 通栏的位置.&lt;/li&gt;&lt;br&gt;                &lt;li&gt;避免动态效果: 用户会自动忽略那些闪烁的或者带着特效字体的, 比较故意吸引注意力的元素;&lt;/li&gt;&lt;br&gt;                &lt;li&gt;弹出: 用户经常会在弹出页面加载完全之前就关掉了.&lt;/li&gt;&lt;br&gt;            &lt;/ul&gt;&lt;br&gt;        &lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;这个确实很现实, 尤其是随着广告的样式越来越多…如何更好的区分广告和内容是个非常值得考虑的问题, 目前来说, 基本都是通过分区来划分的, 似乎大家也都知道广告的点击很低, 但总还是有人会点的…&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Violating Design Conventions(违背设计规则)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;一致性是一个最为有帮助的可用性原则: 当所有事物保持一致的时候, 用户就不需要担忧什么将会发生. 反而, 他们知道什么将会发生, 基于过往的经验. 每次你在牛顿头上放个苹果, 它就会掉在他的头上. 这就很好.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;越符合用户的预期, 用户就会越能感觉到掌控权, 他们就会越高兴. 然而如果总是违背用户的预期, 他们就会失去安全感. 那么你下次放开苹果, 它很有可能变成一个番茄并且飞到天上去的.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;Jakob’s 关于用户体验的规则注明: 用户更多的时间是花费在其他网站上的.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;这意味着, 他们的预期是基于那些网站的共性作出的. 如果你背离了, 你的网站就会很难使用而流失用户.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;Jakob’s law 这是本文的最大收获了!!!&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Opening New Browser Windows(新开窗口)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;新开窗口就像一个吸尘器销售员销售前先把一堆灰尘倒在用户的前门地毯上. 不要用更多的窗口来污染我的屏幕, 非常感谢(尤其是在现在的操作系统管理窗口是如此的糟糕).&lt;/p&gt;&lt;br&gt;        &lt;p&gt;设计新开窗口的重要原因是在希望能够让用户留在当前站点. 但是不顾用户自己的意愿直接接管用户的电脑是非常自欺欺人的行为, 尤其这种操作导致back按钮失效, 而这才是用户通常使用的. 用户经常没有注意到一个新窗口的打开, 尤其是他们使用的是小型的显示器且窗口本身最大化的情况下. 所以一个用户试图回到之前的页面而不能的时候会非常困惑的.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;链接的行为和预期不一致会破坏用户对于自己的系统的理解. 一个链接就应该是那一个见到那的超链文本, 代表着用新的内容取代当前的页面, 如果需要在新窗口打开链接, 用户可以自行选择使用浏览器提供的”新窗口打开”命令.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;这个个人觉得需要针对具体情况考虑了, 网络的属性就决定了它发散的特征, 而用户又普遍有一种保留欲望: 打开总是容易的, 关闭总是困难的.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Not Answering Users’ Questions(答非所问)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;用户经常是目标驱动型的, 他们带着一定的目的来访问页面的, 甚至可能是要购买你的产品. 一个网站最大的失败就是没有提供用户寻找的信息.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;有时候仅仅因为没有在页面上找到答案, 你就失去了一笔订单. 因为用户会假设你的产品或者服务无法实现他的需求, 如果你不告诉他们细节的话. 另外一些时候, 这些关于产品的细节特性被淹没在众多的网站信息和庸俗的口号中. 因为用户没有时间去仔细阅读所有的信息, 所以隐藏在一堆信息中就相当于不存在.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;最糟糕的答非所问的例子就是: 避免展示价格. 没有那个B2C网站会犯这种错误. 但是在B2B经常会出现这种问题. 多数企业呈现的信息都让你无法分别他们是适用于100人还是10w人的…价格是用户所希望获得的最明显的信息, 而如果不提供它, 会让用户觉得迷失以及降低他们对一个产品的认知. 我们有一个长达几个小时的视频记录了客户在理发的时候问”价格表在哪里?”.&lt;/p&gt;&lt;br&gt;        &lt;p&gt;即便是B2C网站也经常会忘记列出价格, 比如分类页面或者搜索结果页面. 在这两种情况下, 价格也是一个重要信息. 因为它让用户区分不同的商品, 而从最相关的商品中进行挑选.&lt;/p&gt;&lt;br&gt;        &lt;p style=&quot;color:#00aa0b;&quot;&gt;&lt;i&gt;博主说: &lt;/i&gt;反例就是恶意SEO, 典型. 而在现在搜索引擎作为入口, 用户甚至不会记得上次上当的页面…所以也就出现了多次上当的情况….&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;Other Top-10 Lists&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/10-high-profit-redesign-priorities/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;High-Profit Redesign Priorities &lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/movies-usability-top-10-bloopers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Usability in the Movies&lt;/a&gt; — Top 10 Bloopers&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/most-violated-homepage-guidelines/&quot; title=&quot;Alertbox Nov. 2003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Most violated homepage guidelines &lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/top-ten-guidelines-for-homepage-usability/&quot; title=&quot;Alertbox May 2002&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Top homepage usability guidelines &lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/ten-good-deeds-in-web-design/&quot; title=&quot;Alertbox Oct. 1999&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Good deeds in Web design &lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/top-ten-web-design-mistakes-of-2005/&quot; title=&quot;Alertbox Oct. 2005&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web design mistakes&lt;/a&gt; (2005)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/top-10-web-design-mistakes-of-2003/&quot; title=&quot;Alertbox Dec. 2003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web design mistakes&lt;/a&gt; (2003)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/top-ten-web-design-mistakes-of-2002/&quot; title=&quot;Alertbox Dec. 2002&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web design mistakes&lt;/a&gt; (2002)&lt;br&gt;&lt;br&gt;        With cartoons.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/the-top-ten-web-design-mistakes-of-1999/&quot; title=&quot;Alertbox May 1999&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web design mistakes&lt;/a&gt; (1999)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/original-top-ten-mistakes-in-web-design/&quot; title=&quot;Alertbox May 1996&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web design mistakes&lt;/a&gt; (1996)&lt;br&gt;&lt;br&gt;        My first list. Luckily, many of these mistakes have been fixed by now.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/top-10-application-design-mistakes/&quot; title=&quot;Alertbox Feb. 2008&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Application design mistakes &lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;a href=&quot;http://www.nngroup.com/articles/top-10-ia-mistakes/&quot; title=&quot;Alertbox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Information Architecture (IA) mistakes &lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

</summary></url><url><title>The Habit Action List</title><loc>http://taoalpha.me/blog/2014/04/24/read-yi-the-habit-action-list/</loc><publish>2014-04-24T10:00:00.000Z</publish><summary>&lt;p&gt;我想所有人都读过励志文学或者博客, 但是很少有人能够真正的付诸行动.&lt;br&gt;他们更多的是陷入了一种所谓”励志成瘾”.&lt;br&gt;过去我自己也曾陷入其中过–就是幻想自己能够过得更好, 抓住机遇, 获得成功.&lt;br&gt;但是我一直没有采取行动的原因是:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;      &lt;li&gt;我当时太忙了, 于是就先收藏了文章以后再说, 当然结果就是明日复明日, 明日何其多…&lt;/li&gt;&lt;br&gt;      &lt;li&gt;我没有时间开启一个新项目, 尤其是这个需要做出的改变太大了…&lt;/li&gt;&lt;br&gt;      &lt;li&gt;我内心深处并不相信我们能做到, 因为作者可能比我强多了…&lt;/li&gt;&lt;br&gt;      &lt;li&gt;我只是来找找灵感, 但是实在是没有精力去付诸实践…&lt;/li&gt;&lt;br&gt;      &lt;li&gt;我计划去做, 但是一直抽出空来…&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;不可思议的是, 我竟然克服了上述的所有借口. 我竟然真的开始改变自己了(从2005年开始), 一个一个习惯的改. 我从头开始, 享受其中的成就感, 并且持续的进行. 现在我依然在坚持每天变更自己的习惯, 每次进行一小步, 回过头来看看自己做出的改变… 我的人生已经完全不同以往了.&lt;/p&gt;
&lt;p&gt;我发现了如何从阅读到实践的奥秘.&lt;/p&gt;
&lt;p&gt;如何开始行动? 问自己这些问题:&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;有任何小的行动我可以立刻实施吗? 也许我可以把一些放到我的日程表中, 或者给个朋友发封邮件来敦促自己, 写篇blog来描述一下, 或者从指定行动计划开始. 如果当前没有可以立刻做的小事, 我可以把它记录在我的idea list中, 但是实际上它可能再也不会有实践的机会了.&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;我可不可以承诺一个月来完成它呢? 也许我有太多的事情要做了, 所以没有任何空间留给新的习惯了. 于是又一次的, 我把它加到了idea list中, 但是如果我不承诺一个月去完成它(即便现在不进行, 以后也需要), 那么也许它本身对我并没有那么重要.&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;如果我每天都做的话, 会达到什么效果? 如果我每天都写写blog, 也许它会帮助到我自己的事业或者帮助到其他的人们. 如果我每天锻炼, 我将会变得更加健康, 拥有更好的体型. 如果我每天饮食更加健康, 我也会变的更加健康. 如果我每天都冥想, 我将会变的更有思想. 不积跬步, 无以至千里.&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;这个事情在我生命中有什么重要意义吗? 有时候一些重要的结果(健康, 思想, 事业, 帮助他人)是很有意义的. 有时候可能没有那么大, 但是至少对我自己的生活是有价值的. 一个新的改变一定要经过测试. 我经常会问自己: 这个改变比我现在做的要更有意义吗? 如果不是的话, 我会坚持我固有的.&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;不行动的痛苦能否压过对行动的恐惧? 通常我们不采取行动是因为我们恐惧: 恐惧失败, 恐惧我们做的不够好, 恐惧我们会让自己陷入难堪的境地. 这些恐惧确实很伤, 所以我们会尽量避开它. 但是不采取行动可能导致的结果也很伤: 让自己的健康在每天的垃圾食品中崩溃. 比如: 改变饮食习惯的恐惧和身体以及精神越来越糟糕的现状. 通常我们在不得到明确的答案之前不会采取行动的.&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;我能做一个简短的行动吗? 几分钟的? 实话说, 我每天真的很难抽出几个小时来做某件事情, 已经有很多事情在等着我去做了… 但是如果我可以把这种改变分解为一个个简短的行动, 那么, 我就有精力, 有时间, 有动力去开始行动了. 一旦它成为一种习惯, 而且我真的喜欢, 我就可以扩展它了. 比如：　我一开始每天跑5分钟, 后来慢慢的增加时间, 知道我在一年后可以跑完一个马拉松了.&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;我什么时候能抽出空? 这是一个很关键的问题: 只是说”自己从明天早上开始, 每天要做2分钟的冥想”是不够的. 你需要更确切的说明它. 虽然具体到确切的时间并不重要, 但是在日常生活中, (开始走路锻炼, 立刻洗澡)一旦你确定了时间, 你就要按照这个时间进行, 留出时间, 去做.&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;我如何让自己更有担当? 这是另一个重要的因素: 如果你不自己建立责任感, 那么可能你就无法完成或者它可能也不会持久. 责任感可以创造出一个良好的环境来养成习惯. 比如: 向朋友承诺, 在facebook或者twitter上每周更新进展, 写文章来敦促自己, 让一个家人或者同事监督你, 或者加入一个Sea Change Program的小组.&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;我能给自己点甜头尝尝吗? 这可以帮助自己克服”我不相信我能做到”的问题, 同时开始你的简短任务(简单到你自己肯定可以完成). 如果你能时不时的给自己一些甜头, 那么你就能找到自己继续的动力. 如果你经常失败(一开始就设定20-30分钟的任务), 你就会失去动力. 甜头: 想你的同学汇报你5min的成果, 通过自己的跑步软件查看自己的成果, 把自己的blog发布出来让他人可以看到.&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;我怎样让自己不忘记? 这是另一个关键之处, 很多人会说他们开始一个新习惯的养成, 然后过了一段时间后就忘记了. 因为他们从来没有对自己承诺过, 或者他们没有找到一个方法去记忆. 有一些可行的方法: 给自己设定一个每天的定时提醒, 让自己的伙伴或者是有提醒你, 把自己的跑鞋或者瑜伽垫放在自己的卧室门口, 这样你就不会忘记了.&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;



&lt;p&gt;如果我可以回答所有的问题, 那么我就会在我读完之后开始采取行动. 而且很有可能成功的完成它.&lt;/p&gt;
&lt;p&gt;那么, 你现在要承诺什么呢?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zenhabits.net/action/&quot; title=&quot;原文地址&quot; target=&quot;_blank&quot;&gt;原文地址:The Habit Action List By Leo Babauta&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>The Future of Web TV</title><loc>http://taoalpha.me/blog/2014/07/21/read-yi-the-future-of-web-tv/</loc><publish>2014-07-21T06:00:00.000Z</publish><summary>&lt;p&gt;2013年末, 时代杂志称赞Google的Chromecast为”年度工具”. 一个酷炫的用来投影互联网视频到你的电视屏幕的小工具, 售价仅为35$, 也正式这个小玩意, 提供了一种全新的网络电视交互形式, 用Netflix执行官Todd Yellin的话说: (它)将引领第二屏TV的主流.&lt;/p&gt;
&lt;p&gt;当下有很多设备都可以将你的大屏幕和网络互联起来, 总的来说可以粗略分为以下3类:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;三星,索尼,LG等出厂的智能电视. 目前许多待售的电视都属于智能电视, 虽然调查显示接近一半都没有接入网络之中;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;类似Apple TV和Roku系列的媒体播放器. 他们的主要作用是作为互联网视频的载体, 所以这些设备肯定都是联网的了;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;像Xbox和PS这种的游戏手柄. 虽然游戏是它们的核心功能, 但是他们本身网络电视的功能也被广泛的使用了;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;虽然明确的统计数字很难找到, 但是如下由SM,Parks Associates, Strategy Analytics 以及IDC提供的三种设备的市场占比(主要基于各厂商的出货量)粗略报告也能看出一二:&lt;br&gt;&lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/wijering-the-future-of-web-tv/webtv-platforms.jpg&quot; alt=&quot;各类网络视频媒介的占比&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然游戏手柄方面似乎大占优势, 但是他们真正用于网络用途的本身又是一个很小的比例了. 比如, 在StatCounter的全球设备调查中, 手柄的占比相比于台机, 平板和手机而言还是非常微小的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/wijering-the-future-of-web-tv/online-platforms.jpg&quot; alt=&quot;Online Platform Comparison&quot;&gt;&lt;/p&gt;
&lt;p&gt;不能更进一步的问题同时出现在发行商和客户两边.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于多数发行商而言, 提供对网络视频平台的支持是比较困难而且高成本的.&lt;/p&gt;
&lt;p&gt;每一种平台其实都是被一个非标准的, 甚至是过时的语言和开发IDE所支持的. 三星,LG以及索尼都在使用一些偏离HTML5的东西, 再配上问题多多的SDK… Xbox 和 PS3 则同时使用自己的SDK, 并要求一些基本的游戏开发技巧来创建媒体应用. Apple则使用的Object C, ROku用的是Brightscript, 一个基于Vbscript/javascript的变体. 顺畅的播放视频流本身已经挺有挑战了, 更何况说还要加上推广和数据统计分析的相关问题…&lt;/p&gt;
&lt;p&gt;即便所需的技能都能满足, 依然存在一个ROI(成本和回报)的问题: 有多少人会真的安装我的app, 并且观看里面的内容呢? 通过广告/订阅/市场获取的收入能够抵过开发的成本吗? 通常来说, 只有那些提供娱乐广播的视频大户, 例如netflix才敢给出肯定的答复.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户体验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于消费者而言, 最大的问题在于用户体验. 智能电视经常(也确实)因为丑陋的界面而被批评, 但是UX的问题可能潜藏的更深. 对于入门者, 设置当下繁多的遥控设定就是一个很大的问题了. 遥控器还经常丢失… 经常设计的很难理解很难搞懂… 他们基本对文本输入都非常的不友好, 但实际上对web tv而言是很重要的. 想象一下你为了更改频道, 搜索内容,登录以及创建付款认证而需要做多少工作…&lt;br&gt;&lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/wijering-the-future-of-web-tv/onscreen-keyboard.jpg&quot; alt=&quot;这比起小米电视差得远到天边了啊...&quot;&gt;&lt;br&gt;另一个问题则是探索内容的问题. 在台机或者手机上, 这很简单而且非常充裕. 有搜索引擎, 社交网络, 邮件短信, 以及各种超链接都提供给了我们一个每天都要面对的巨大的内容流. 而在WebTV平台上, 只有一个光秃秃的应用商店… 即便当应用商店慢慢发展起来, 出现一些我们日常使用的app, 它们也经常只能被动的接受内容. 那些社交网络, 搜索引擎, 网页, 以及邮件客户端都完全不能在智能电视上使用…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初识Chromecast&lt;/strong&gt;&lt;br&gt;介绍完了这些渣渣, 我们就可以聊聊Google的Chromecast了, 不愧为google出品, 必属精品啊. Chromecast极大的消除了上述的诸多问题. 它采用了一个非常创新的接收模型:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;Chromecast的接收对象完全由HTML/CSS/JavaScript写成的, 所以开发起来就很容易也很明了了. 除掉一些特殊的部分, 基本上如果一个接受对象, 通常是网页, 能够在chrome下正常的显示, 那么就能在chromecast上正常显示.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;chromecast没有遥控器. 取而代之的是, 它以来于你的笔记本, 手机或者平板来控制, 浏览, 启动app和展示内容. 使用的也是标准的HDMI-CEC, 甚至可以帮你启动电视.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;更多的是, chromecast利用你的手持移动设备来输入的功能带来了各种有趣的多屏交互形式. 比如, Chromecast的YouTube接受器允许使用者从自己手机上的Youtube app上收集一个播放列表来在party的时候播放; 而且因为内容本身是来自网络的, 所以即便手持设备关闭后, 内容依然可以继续播放.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/wijering-the-future-of-web-tv/chromecast-schema.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种交互的模型也正是chromecast得以区别于apple tv 饱受赞誉的Airplay功能的重要原因. 因为Airplay虽然提供了一个快捷的方式来投放视频到TV上, 但是却没有提供这么丰富的逻辑性(例如投放广告等)和交互(比如播放列表). 在一定程度上, chromecast是Airplay的一种进阶模式, 从一个低级的接收器变成一个更加智能的存在.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;展望下未来?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然还没有宣布具体的销售额, 但是Chromecast的销售情况明显不错. 它从一上市开始就一直是Amazon电子设备的热销产品. Google 的CFO 在最近一次发布会上已经宣布Chromecast已经卖脱销了, 言称”是整季度销量最好的产品”, 而Android SVP Sunder Pichai 也曾说销量破百万了. 下一步无疑就是把chromecast引进到其他的国家来进一步的提升销量和销路.&lt;/p&gt;
&lt;p&gt;同时, 竞争并没有停歇. Apple TV, 曾经一度被Steve Jobs称为hobby的产品, 目前也是身价破百亿的大土豪. 随着2012款开始降价销售, 已经有传言新一代设备即将上市了. 同时, Roku同学也不甘落后, 刚刚上市了一个50$的电视棒, 提供了youtube和netflix的多屏支持. 微软同样也推送了一个xbox的更新, 提升了其SmartGlass–多屏技术–的功能.&lt;/p&gt;
&lt;p&gt;无论最终哪个平台能够脱颖而出, 由chromecast开创的这种多屏交互模型都将会一炮而红, 而全世界的网络视频发行商们都会收益其中, 它同时提升了丰富的交互性和接入TV的钥匙.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source links:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://uxmag.com/articles/the-future-of-web-tv&quot; target=&quot;_blank&quot;&gt;the future of web tv| UX mag&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>The Future of Information Dashboards</title><loc>http://taoalpha.me/blog/2014/03/30/read-yi-the-future-of-information-dashboards/</loc><publish>2014-03-30T07:00:00.000Z</publish><summary>&lt;p&gt;这是月初的一篇文章, 其实从接触网络一来, 我就一直坚信internet一定会改变世界的, 或者说, internet以后一定将处于世界的核心. 而随着物联网的提出以及逐步的实现, 我对此更加深信不疑, 作为未来信息化的世界, 信息的展现一定核心的核心, 这一篇文章就是在谈未来信息面板的一些畅想.&lt;/p&gt;
&lt;p&gt;================正文===============&lt;/p&gt;
&lt;p&gt;去年对于信息可视化产业而言是一个非常有意义的一年. 随着越来越多的企业认识到了数据可视化对于企业核心业务上的价值, 未来的日子似乎充满了希望.IIA(国际统计研究所), 一个专注于个统计应用的独立企业, 最近发布了”2014年的9项统计应用预言”.&lt;/p&gt;
&lt;p&gt;其中, 它预言数据可视化在简单的统计应用和复杂的统计应用都会有所增长. 但是, Thomas H. Davenport, IIA的联合创始人以及研究组组长, 曾发表声明告诫那些想要在很复杂的, 多变量的统计中引用数据可视化的人们:”那样很复杂, 因为人类是无法理解那些超过两个,或者说最多三个纬度的事情的.”&lt;/p&gt;
&lt;p&gt;在随着越来越多的企业开始使用数据驱动来进行决策, 寻找有着强大可视化能力的应用来帮助它们更好理解自己的数据的场景下, 信息面板也就会开始做出一些更大的改变. 以下是结合数据后能够带给我们更好的用户体验的5个变化:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;更多的独立软件商将会把拥有一个强大的信息面板作为它们的核心竞争力之一;&lt;br&gt;      &lt;p&gt;在2013年, 我们看到很多ISV都在自己的产品中增加了数据可视化的能力; 在2013年5月, 作为典型SEO软件SEOmoz不仅把自己的名字改为了Moz, 同时还扩展自己的服务, 增加了一个专用的统计平台, Moz Analytics. 新平台允许用户在一个地方就可以管理他们所有的数据统计. 统计面板提供了一个很好的入口来了解一个公司的搜索, 社交以及渠道来源. 用户可以跟踪他们网站的流量来源, 有多少人在关注公司, 公司发布内容的影响力如何, 以及那些数字属性创造的价值最大.&lt;/p&gt;&lt;br&gt;&lt;br&gt;  &lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/choudhury-future-of-the-information-dashboard/future-of-the-information-dashboard-1.png&quot; alt=&quot;Moz Analytics&quot;&gt;&lt;br&gt;&lt;br&gt;  &lt;p&gt;同时,信息面板并不局限于市场统计分析之中. 在去年的12月4日, Vigillo LLC, 一个公司主要业务是制作数据挖掘软件产品用以聚合, 组织, 以及传递复杂的的车辆安全信息, 当然用一种更容易阅读的格式. 此公司宣称这是一种新型的大型数据智能平台(Athena-雅典娜).&lt;/p&gt;&lt;br&gt;     &lt;p&gt;以希腊智慧女神命名, 雅典娜是一个开源的大数据处理, 它的数据来源非常的广泛, 最终把这些多样的数据处理成为可以理解的信息, 同时用一种很直接的形式展现出来, 这样那些公司就可以用来改善自己的操作参数. 基于网络的解决方式是跨越平台的, 可以从各种设备上接入, 并且通过交互非常优质的面板来展示信息可视化以及报告发布的日程.&lt;/p&gt;&lt;br&gt;&lt;br&gt;      &lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/choudhury-future-of-the-information-dashboard/future-of-the-information-dashboard-2.png&quot; alt=&quot;initial Athena report&quot;&gt;&lt;br&gt;     &lt;p&gt;在2014年, 越来越多的ISV会增加这些功能到自己的产品之中, 用户也会逐渐适应这种信息面板.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;      &lt;li&gt;信息面板满足那些On-the-Go类型用户的需求&lt;br&gt;  &lt;p&gt;对于信息面板, 易用性是其成功与否的关键指标. 随着我们对智能手机和平板的依赖性越来越重, 面板会在以后的进化中越来越贴合那些on-the-go类型用户的需求.&lt;br&gt;&lt;br&gt;      此后将一个桌面应用转换到一个移动端的应用就再也不用那么麻烦了. ISV需要认真的考虑移动用户的需求, 把人机交互的规则实施在一个很小的屏幕之上.&lt;br&gt;&lt;br&gt;      从一个数据统计学到交互报告, 手机端的面板将会在2014年变得越来越强大. 我们将会看到医生们在路上就开始通过操作屏幕浏览患者的医史, 通过滑动或者收缩手势来浏览细节, 而不是坐在一大堆文件旁来寻找数据.&lt;br&gt;&lt;br&gt;      &lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/choudhury-future-of-the-information-dashboard/future-of-the-information-dashboard-3.png&quot; alt=&quot;Always-on wireless connectivity and gesture capabilities of mobile devices will further accelerate the improvements in mobile information dashboards.&quot;&gt;&lt;br&gt;      &lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;        &lt;li&gt;信息面板集成高度智能的位置信息&lt;br&gt;  &lt;p&gt;&lt;br&gt;    位置信息是移动技术发展的又一衍生产物. 传统上, 网页上的面板都会用地图来视觉化表现一些基于地理的信息. 比如Google Analytics就是这样.&lt;br&gt;&lt;br&gt;    而随着移动设备内置GPS技术后, 你面板中呈现的智能地理信息就开始飞速发展了. 在传统的地图提供传统的位置信息外, 这些带有GPS技术的手机面板可以帮助你来优化你的地理信息. 所以我们完全可以期待智能定位系统的移动面板将会在那些供应商们路过某个店铺时提醒他们某种货物的短缺, 或者告知快递人员及时派送快递的最佳路线.&lt;br&gt;    &lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;        &lt;li&gt;面板提供的实时性&lt;br&gt;  &lt;p&gt;&lt;br&gt;    实时数据在2013年的时候就已经红极一时, 而我们相信它一定会获得更多的瞩目在2014年之中. 用户将再也不需要局限在历史数据之中了, 他们将可以获得最新的时效性数据, 试图从中发现新的机会. 无论是市场监控自家线上活动的进展情况, 及时调整来获得最好结果亦或者是零售商们可以根据当前店内的客户情况来决定当下的优惠情况, 越来越多的商业会利用实时数据来提供更有价值的信息.&lt;br&gt;&lt;br&gt;    在最近我们fusioncharts博客上关于实时数据可视化的一系列文章中,我们看到了商业中是如何接入实时数据的技术来强化它们的决策能力. 利用实时的信息面板它们可以追踪一些核心指标, 比如: 转化失败率等. 所有的失败会在第一时间记录下来, 并更新在面板之上. 分析人员就可以利用这些信息来快速的应对那些紧急的问题, 第一时间的解决那些高风险的问题. 尤其是对于电子上午而言, 迅速的解决付款相关问题对于企业生存都是一个很关键的问题.&lt;br&gt;    &lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;      &lt;li&gt;信息面板的预测能力&lt;br&gt;  &lt;p&gt;&lt;br&gt;    随着我们习惯了天气的预报, 选举预测, 以及手机上的输入预测等, 预测性的分析在未来的信息面板中一定会有一席之地. 从数据中解析信息, 并将之用于预测趋势以及行为模式, 将会帮助商业更好的分配它们的资源. 销售商们可以避免那些脱销或者积货的风险, 厂商也可以预测它们的消耗来更好的规划财政支出, 金融上也可以很容易的分析贷款和品股信用风险了.&lt;br&gt;&lt;br&gt;    IBM列举了7个用户最能从数据预测上收益的方面:&lt;br&gt;&lt;br&gt;    &lt;ul&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Compete:&lt;/b&gt; 为最强大而又独特的竞争体系提升安全性–?&lt;/li&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Grow:&lt;/b&gt; 提升销售和零售商户的竞争力;&lt;/li&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Enforce:&lt;/b&gt; 维护商业的整体性, 通过控制伪劣产品;&lt;/li&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Improve:&lt;/b&gt; 提升你的核心产品竞争力;&lt;/li&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Satisfy:&lt;/b&gt; 满足当下用户的期望;&lt;/li&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Learn:&lt;/b&gt; 应用当下最先进的分析方法;&lt;/li&gt;&lt;br&gt;          &lt;li&gt;&lt;b&gt;Act:&lt;/b&gt; 让优化事业决策和数据分析变的真实可行;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://uxmag.com/sites/default/files/uploads/choudhury-future-of-the-information-dashboard/future-of-the-information-dashboard-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;&lt;br&gt;    Sift Science就是这么一个应用使用机器学习来帮助电子商务网站预测欺诈.&lt;br&gt;    其中, 预测数据统计会随着实时数据逐渐的应用在信息面板上的各种销售预测之中, 欺诈预防,预防性医学干预(??)等.&lt;br&gt;    &lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;移动化信息(Information-on-the-move)在2014年的信息面板中一定会是一个核心的功能. 随着web面板提供给用户更多的数据和更深层次的统计分析, 移动端的面板将会更提和那些移动用户的需求. 位置信息, 实时信息以及预测统计将会进一步的让信息面板更加丰富, 同时会让用户获得更加关键的信息.&lt;/p&gt;
</summary></url><url><title>The designer's guide to the Golden Ratio</title><loc>http://taoalpha.me/blog/2014/06/12/read-yi-the-designers-guide-to-the-golden-ratio/</loc><publish>2014-06-12T05:00:00.000Z</publish><summary>&lt;p&gt;黄金比例是每个设计师都应该知道的. 本文会介绍一下如何去在设计中使用这一概念.&lt;/p&gt;
&lt;p&gt;黄金比例呢, 是人类从自然中发现的一个比例值, 这个比例被设计师用于创造那些非常赏心悦目的, 非常自然的作品. 黄金比例有时候也被称为Golden Mean或者Golden Section, 或者是希腊字母:Phi.&lt;/p&gt;
&lt;p&gt;本文中, 我们会介绍一下什么是黄金比例, 以及如何使用它, 同时也会介绍一些非常有价值的引申资料供大家查阅~&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;  &lt;li&gt;&lt;br&gt;    &lt;h3&gt;01. What is Golden Ratio?&lt;/h3&gt;&lt;br&gt;    &lt;p&gt;基于Fibonacci Seuence(也许你还记得那年河畔的数学课…or, 那本著名的悬疑小说”The Da Vinci Code”), 黄金比例所描述的就是两个部分的一个关系(废话…比例啊…). &lt;br&gt; Fibonacci numbers, 就如同很多发现于自然界的元素一样, 符合一个1:1.61的比率-这样的我们称之为黄金比例, 而且因为它在自然界中随处可见, 所以将这一比例用于设计作品就能到得到一种非常自然的美感.&lt;br&gt;      &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/fibonaccigoldenrectangle.jpg&quot; alt=&quot;黄金比例是一个符合Fibonacci序列的元素之间的关系&quot;&gt;黄金比例是一个符合Fibonacci序列的元素之间的关系&lt;br&gt;      &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/fibonaccispiral.jpg&quot; alt=&quot;同时它也反映了一个在自然界中非常常见的比例&quot;&gt;同时它也反映了一个在自然界中非常常见的比例&lt;br&gt;    &lt;/p&gt;&lt;br&gt;    &lt;p&gt;&lt;br&gt;      我们相信黄金比例在人类的艺术设计中使用的历史已经至少4k年了, 世界上可能追溯的更久远, 一些人认为古埃及人就是用这一原则建造的金字塔. 在当下的时代里, 黄金比例在音乐, 艺术, 以及设计中更是随处可见了.&lt;br&gt;    &lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;br&gt;    &lt;h3&gt;02.Examples&lt;/h3&gt;&lt;br&gt;    &lt;p&gt;艺术和设计作品中使用黄金比例的历史非常悠久, 从建筑到设计师的大作中都能看到它的应用. 通过一个非常相似的方法, 你也可以把黄金比例带入到你的作品中~ 以下是一些例子, 希望能启发到你:&lt;/p&gt;&lt;br&gt;    &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/panthenon.jpg&quot; alt=&quot;The Parthenon&quot;&gt;&lt;br&gt;    &lt;p&gt;古希腊的建筑会在很多地方使用到黄金比例, 比如建筑物的宽度和高度, 以及和柱廊, 甚至支柱的位置. 最终导致整个建筑非常的和谐自然, 整体感很强. 新古典建筑中再一次的应用了这些原则.&lt;/p&gt;&lt;br&gt;    &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/lastsupper.jpg&quot; alt=&quot;The last Supper&quot;&gt;&lt;br&gt;    &lt;p&gt;达芬奇, 如同那个时代的很多艺术家一样, 也使用了黄金比例来创造很多非常悦目的作品. 在最后的晚餐中, 任务被放置在了下2/3里(正好是黄金比例中的大数), 同时Jesus的位置更是画布的黄金矩形的中央位置.&lt;/p&gt;&lt;br&gt;    &lt;video src=&quot;https://www.youtube.com/watch?v=kkGeOWYOFoA&quot;&gt;&lt;/video&gt;&lt;br&gt;    &lt;p&gt;在自然界中也有无数的黄金比例的例子-随处可见. 花朵, 海贝, 凤梨, 甚至是蜂窝都展现出了同样的黄金比例. 所以, 在设计中使用黄金比例无论现在还是未来都是非常合适的~&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;br&gt;    &lt;h3&gt;03.How to construct a Golden Ratio rectangle&lt;/h3&gt;&lt;br&gt;    &lt;p&gt;创建一个黄金矩形是非常简单的, 首先你需要一个简单的矩形. 按照下面的步骤进行就行:&lt;/p&gt;&lt;br&gt;    &lt;ol&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        &lt;h4&gt;Step 01&lt;/h4&gt;&lt;br&gt;        &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/step01.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;画一个正方形. 这将是最终矩形的短边.&lt;/p&gt;&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        &lt;h4&gt;Step 02&lt;/h4&gt;&lt;br&gt;        &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/step02.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;用一条竖线将方形分割成2半, 你就可以得到2个矩形了.&lt;/p&gt;&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        &lt;h4&gt;Step 03&lt;/h4&gt;&lt;br&gt;        &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/step03.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;在一个矩形里, 从一角画一条线到对角.&lt;/p&gt;&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        &lt;h4&gt;Step 04&lt;/h4&gt;&lt;br&gt;        &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/step04.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;旋转这一对角线, 放平, 到垂直于第一个矩形.&lt;/p&gt;&lt;br&gt;      &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;br&gt;        &lt;h4&gt;Step 05&lt;/h4&gt;&lt;br&gt;        &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/step05.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;根据这个对角线画一个新的矩形–就是挨着之前对角线所属的第二矩形.&lt;/p&gt;&lt;br&gt;      &lt;/li&gt;&lt;br&gt;    &lt;/ol&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;br&gt;    &lt;h3&gt;04.How to use the Golden Ratio in your design work.&lt;/h3&gt;&lt;br&gt;    &lt;p&gt;使用黄金比例其实比你想象的还要简单的. 下面分享几个应用的技巧, 以方便你快速的应用到自己的布局中:&lt;/p&gt;&lt;br&gt;    &lt;h4&gt;The quick way&lt;/h4&gt;&lt;br&gt;    &lt;p&gt;如果你以前接触过”Rule of Thirds”, 你可能对通过分割区域实现纵向和横向的三等分比较熟悉, 交线围起来的部分就是当前形状的一个自然焦点. &lt;br&gt;&lt;br&gt;    摄影师们经常会被告知通过把拍摄对象放置到这些交线区域可以实现更自然的构图, 同样的原则也适用于你的页面布局, 网页原型以及海报设计. &lt;br&gt;&lt;br&gt;    虽然”rule of thirds”基本适用于所有形状, 但如果你将之应用到比例在1:1.6的矩形上, 那么你所获得的就和黄金矩形非常接近了, 都能实现一个自然的构图. &lt;br&gt;&lt;br&gt;    &lt;/p&gt;&lt;br&gt;    &lt;h4&gt;Full implementation&lt;/h4&gt;&lt;br&gt;    &lt;p&gt;如果你想要更全面的应用黄金比例, 那么你可以通过设定你的内容区域和工具栏区域比例在1:1.61开始. 这里以网页设计为例. &lt;br&gt;&lt;br&gt;      这个比例只需要精确到一个小数点就行, 偏移0.01还是没啥问题的-所以说如果你有一个640px的内容区域, 你的工具栏区域就可以设定为400px, 如此就能得到一个黄金比例了, 即便它的真实值其实是1:1.6. &lt;br&gt;&lt;br&gt;      &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2012/10/useratiowebdesign.jpg&quot; alt=&quot;在网页中应用黄金比例布局&quot;&gt;&lt;br&gt;    &lt;/p&gt;&lt;br&gt;    &lt;p&gt;当然, 你同时还可以把内容区域再次黄金分割, 然后把整个页面的header, content area, footer area以及navigation area都能满足黄金分割比~&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;br&gt;    &lt;h3&gt;05. Golden Ratio Tools&lt;/h3&gt;&lt;br&gt;    &lt;h4&gt;GoldenRATIO&lt;/h4&gt;&lt;br&gt;    &lt;p&gt;&lt;br&gt;      &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/01/goldenapp.jpg&quot; alt=&quot;GoldenRATIO--最佳功能是保存你的绘制记录作为模板&quot;&gt;&lt;br&gt;      GoldenRATIO–最佳功能是保存你的绘制记录作为模板 &lt;br&gt;&lt;br&gt;    &lt;/p&gt;&lt;br&gt;    &lt;h4&gt;Golden Tatio Typography Calculator&lt;/h4&gt;&lt;br&gt;    &lt;p&gt;辅助创作符合你网站的字体排版! 只需要输入一个字体大小, 内容宽或者两者都输入到网站的输入区域后, 点击”Set my Type”按钮即可. 如果你喜欢逐行的优化字母, 你可以输入可选的CPL值.&lt;/p&gt;&lt;br&gt;    &lt;h4&gt;Phicalculator&lt;/h4&gt;&lt;br&gt;    &lt;p&gt;&lt;br&gt;      &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/01/phi.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;      这是个非常简单但是实用的工具, 同时支持mac和windows. 只需要输入任意的数字, 就能获得相应的黄金比例值啦~&lt;br&gt;    &lt;/p&gt;&lt;br&gt;    &lt;h4&gt;Atrise Golden Section&lt;/h4&gt;&lt;br&gt;    &lt;p&gt;&lt;br&gt;      &lt;img src=&quot;http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/01/atrise.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;      这是个屏幕尺子和网格工具, 可以帮助你不用费心的计算黄金比例了, 它直接分割好了黄金比例, 你只需要调整布局即可.&lt;br&gt;    &lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;br&gt;    &lt;h3&gt;06. Golden Ratio Tutorials&lt;/h3&gt;&lt;br&gt;    &lt;ul&gt;&lt;br&gt;      &lt;li&gt;&lt;a href=&quot;http://www.digitalartsonline.co.uk/tutorials/creative-lifestyle/creating-art-using-golden-ratio/&quot; target=&quot;_blank&quot;&gt;Create art using the Golden Ratio&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/the-golden-ratio-in-web-design--net-2272&quot; target=&quot;_blank&quot;&gt;The Golden Ratio in Web Design&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2008/05/29/applying-divine-proportion-to-web-design/&quot; target=&quot;_blank&quot;&gt;Applying Divine Proportion To Your Web Designs&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;That’s all. Thanks.&lt;/p&gt;
</summary></url><url><title>The Battle for the Body Field</title><loc>http://taoalpha.me/blog/2014/04/21/read-yi-the-battle-for-the-body-field/</loc><publish>2014-04-21T11:00:00.000Z</publish><summary>&lt;p&gt;原文来自alistapart(链接见文尾). 第一眼看到的时候以为是讲穿戴式设备的, 读完才知道此body非彼body…&lt;/p&gt;
&lt;p&gt;===============正文==================&lt;/p&gt;
&lt;p&gt;在90年代初期, 每一个网页背后都承载着一份赤诚的热爱. 但可惜的是, 任何管理一个大型网站的人最后都会遇到一个问题: 堆叠的HTML代码中掺杂着有价值的内容和模版以及粗糙的设计方法和其他一些难以维护的代码.&lt;/p&gt;
&lt;p&gt;很快, 大型站点就彻底放弃了这种手写代码的方式. 他们把一个页面的核心内容存储在数据库中, 然后通过html模版把这些内容结合设计好的元素: 页脚(footer), 边栏(sidebar), 以及条幅广告(banner ads)来展现. 如今, 即便是像一本书的名字, 封面图片, 以及作者的简介这样的基础元素都被梳理成一个个html模版, 存储在独立的模版库中. 内容编辑们只需要一个个的填表, 而不是纠结在一个空白的canvas(画布)上, 而CMS(内容管理系统)模版则把这些元素按照需要进行重排.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Trouble in Chunkytown&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;这种模版和内容域结合的方式对于固定模式的内容而言, 效果是很突出的. 比如产品信息表, 图册以及播客. 完全符合NPR建立的成功的”一次创造, 随处使用”原则, 而且也很难发现一个内容管理系统或者发布工具不提供适用多种类型内容的模型.&lt;br&gt;&lt;br&gt;但是这种组块有一个致命的弱点. 一旦描述文本混杂着嵌入的媒体, 复杂的调用, 或者其他的富文本信息, 格式化的模版就会遇到问题.&lt;br&gt;&lt;br&gt;MSNBC.com是一个非常典型的例子. 作为它2013年再版的一部分, 有线新闻频道强化了它在新闻的深度和及时的特点上. 设计包含一些复用的模块来放置模版页: 视频以及播放列表, 图片画册, 投票插件, 相关报道等. 这些都如同典型的内容管理系统一样带来了很多的好处: 让设计风格更为一致, 简化了富文本元素复用处理的流程, 同时让响应时的css代码更容易管理.&lt;br&gt;&lt;br&gt;&lt;img src=&quot;http://d.alistapart.com/391/msnbc-screenshot_edit.jpg&quot; alt=&quot;MSNBC news story, where rich media elements must appear at specific spots in stories and include captions, titles, related links, etc.&quot;&gt;&lt;br&gt;MSNBC news story, where rich media elements must appear at specific spots in stories and include captions, titles, related links, etc.&lt;br&gt;&lt;br&gt;但是不幸的是, 记者和编辑都一致坚持这会妨碍他们的工作. 它们需要混合多媒体视频, 画册以及投票, 相关报道, 针对每篇文章的特点来做. 把这些元素都割裂开来, 分成单独的一个个模版将会使保存和融合它们变得容易. 但是, 基于一些规则存在的CMS模版在展现这些内容的时候经常会破坏它们与相关的段落, 语句的联系.&lt;br&gt;&lt;br&gt;这就是复杂的代码是如何在内容文本中挤占一席之地的. 很快WYSIWYG工具的添加允许在编辑中使用一些有限的HTML技巧. 但是在所有人意识到这将带来什么之前, 这种展示型的标记语言开始大肆流行. 移动布局被破坏, 本就很困难的跨频道内容复用变得更加困难.&lt;br&gt;&lt;br&gt;一篇嵌入了tweets的博客, 一个利用相册来阐述每个产品的评测文, 一个需要别的文章作为支持的故事, 它们都面临着同样的问题: 这种模版加内容的方法不再适用于这种小口袋式的结构了.&lt;br&gt;&lt;br&gt;&lt;h3&gt;&lt;strong&gt;Why “clean markup” won’t help&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;如果你是在WYSIWYG战争期间成长起来的, 那个Adobe PageMill和Microsoft Word利用”Save to Web”功能把让人痛恨的标记语言散播的到处都是的时代, 你可能会觉得一个精简的html语言可能是正解. 去掉那些不必要的样式属性, 确保使用p标签而不是br标签, 合理的使用ul标签, 恰当的命名你的class, 那么世界就重归和平了.&lt;/p&gt;
&lt;p&gt;实际上, 精简的, 有语义是很重要的, 但是它不能解决复杂的结构问题, 比如: MSNBC希望能够把插件绑定到普通的文本之中. 我们是有一些通用型的元素例如: ul, div以及span, 也有一些精确的如cite, table和figure, 最新的html5更包含了一些新的section, aside, nav等标签. 但是除非我们的内容真的就像这种无需样式属性的文本或者图片浮层, 我们就依然需要层级嵌套的html元素以及css类名来表达我们真的想要表达的.&lt;/p&gt;
&lt;p&gt;想象一下要嵌入一个简单的图册到一篇文章中. 他的标记语言可能是非常间接而且语义正确的, 但是实际上, 图册显示的元素包含了一个标题, 3张图片, 一个链接到详情页, 以及一段说明文字? 这些都是随着时间可能会变更的设计方案, 我们需要把它们单独从组成html的内容中抽取出来.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;aside class=&quot;gallery&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;h1&amp;gt;&amp;lt;a href=&quot;gallery1.html&quot;&amp;gt;Gallery Title!&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;figure&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;a href=&quot;photo1.html&quot;&amp;gt;&amp;lt;img src=&quot;photo1.jpg&quot; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;a href=&quot;photo2.html&quot;&amp;gt;&amp;lt;img src=&quot;photo2.jpg&quot; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;a href=&quot;photo3.html&quot;&amp;gt;&amp;lt;img src=&quot;photo3.jpg&quot; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;figcaption&amp;gt;Custom caption&amp;lt;/figcaption&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/figure&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个问题同样并不仅限于印刷业. 我的团队最近在为一个公司的hr部分做一个健康保险的项目的时候遇到了类似的问题. 在50,000 个页面的站点中包含了很多复杂的逐步的提示, 还有为特殊员工定制的特殊步骤, 以及在不同国家的超时设置等… 即便是利用WYSUWYG编辑器, 对于这个公司的商业用户而言还是太过复杂了点.&lt;/p&gt;
&lt;p&gt;核心的问题是语法的匹配错误问题. 虽然标准的html对一个设计师而言已经足够表现复杂的内容了, 但是就以独立呈现的模式来说, 它还不能够准确的描述和存储内容. 这也是为什么WYSIWYG工具会让事情变得更糟: 没有让内容创建者逃开标记语言的复杂, 它让人们更容易的使用错误的语法来描述内容.&lt;/p&gt;
&lt;p&gt;如今, 因为我们识图利用复杂的富文本元素去融合跨平台的设计需求, 我们就直面了这座墙. 我们发展出来的模版-域的方法无法帮助我们解决内容和HTML工具的匹配错误问题.&lt;/p&gt;
&lt;p&gt;(待续…)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://alistapart.com/article/battle-for-the-body-field&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文: The Battle for the Body Field&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

</summary></url><url><title>Readability of the New Nutrition Label</title><loc>http://taoalpha.me/blog/2014/04/05/read-yi-readability-of-the-new-nutrition-label/</loc><publish>2014-04-05T07:00:00.000Z</publish><summary>&lt;p&gt;这是来自UXmovement的一篇文章, 是我从Instapaper Daily中看到的一个优质的站点~ 里面有很多非常棒的文章, 希望后续能都尝试着翻译一把~ 作为一个非常非常业余的翻译..表示开启[译]系列的目的就是练习一下英语顺带学习一下UX~哈哈 &lt;a href=&quot;http://uxmovement.com/content/readability-of-the-new-nutrition-label/&quot; target=&quot;_blank&quot;&gt;原文链接&lt;/a&gt; 嗯, UXM对移动设备做了优化, 体验也很爽的~&lt;/p&gt;
&lt;p&gt;========译文=========&lt;/p&gt;
&lt;p&gt;营养成分表已经很多年没有变化了, 不过这次FDA计划重新设计一下它的样式, 让这个东东变的更加容易阅读和识别. 通过对比新旧的成分表, 你可以看到为什么新的设计能够让人更快速的浏览查看其中的信息了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/03/nutrition-label-readability.png&quot; alt=&quot;Compare the old and new nutrition labels&quot;&gt;&lt;/p&gt;
&lt;h3&gt;增大文本大小来提升视觉敏感&lt;/h3&gt;

&lt;p&gt;注意新设计中的标题, 卡路里, 分量等信息是你第一眼会注意到的信息. 这是因为它们都是用大字体突出显示的. 当你提升一个文本的大小让它从周围文本中突出出来时, 你就在提升用户对于大文本信息的敏感度. 这让那些重要的信息能够更快更容易的被注意到. 很明显FDA认为卡路里和剂量是比较重要的, 且从其中卡路里的字体更大一些说明卡路里重要性更强一些. 在旧版中, 各个信息的文本大小是接近的, 这就降低了用户的视觉敏度, 也就拖慢了用户对重要信息的识别.&lt;/p&gt;
&lt;h3&gt;文本排列紧致来降低视觉漂移&lt;/h3&gt;&lt;br&gt;当你看旧版设计时, 你会发现用户经常需要在成分和每日含量中来回扫视. 这是因为这种表格设计, 让两部分信息分别向两边对其, 中间就留下了很大的空白, 很大的增加了扫视的长度. 但新的设计中就通过减少这些空白, 把两部分信息居中对齐, 从而可以明显降低用户的扫视压力, 甚至不用怎么移动眼球焦点就能获得全部的信息. 另外, 用中间一条竖线来分隔两部分信息, 也让用户能够轻易的分辨两者, 毫不费力的获取自己想要的信息.&lt;br&gt;&lt;br&gt;&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;提升视觉敏度以及降低扫视长度来提升文本的可读性. 越大的字体尺寸越容易获取视觉敏度. 拉近文本的距离可以有效的降低视线扫视的距离. 应用这些易读性原则来优化你的界面, 你能让用户更加容易来浏览你的信息.&lt;/p&gt;
</summary></url><url><title>On Styled Form Elements</title><loc>http://taoalpha.me/blog/2014/08/15/read-yi-on-styled-form-elements/</loc><publish>2014-08-15T11:00:00.000Z</publish><summary>&lt;p&gt;今天给feedpusher加了random item的功能, 随机出的一文, 觉得还算不错, 所以就翻译一下. 原作者主要介绍了下对input,form元素的样式定义历史, 从以前的类型少但自定义空间大, 到现在类型多, 可自定义空间反而变小了. 不能完全确认作者的心态是积极还是消极, 不过略有点怅然所示的感觉, 毕竟可控的地方变少了, 确实让创造的感觉变弱了.&lt;/p&gt;
&lt;p&gt;==============正文============&lt;/p&gt;
&lt;p&gt;20多年来, 我们一直用着几乎同样的input和form元素: 文本输入框, 密码类型,下拉框, 单选框, 复选框, 文件管理框, 隐藏域以及不同类型的button: submit, reset, image以及默认的button.&lt;/p&gt;
&lt;p&gt;一直以来, 我们使用的这些input元素都是伴随着操作系统或者浏览器内置的样式. 遗憾的是, 我们已经差不多研究出来如何对抗这些默认样式, 从而对这些基础的或者高级的元素应用我们自己的样式的方法了(高级和低级区别主要在于伪类–译者附).&lt;/p&gt;
&lt;p&gt;自定义样式通常意味着要使用background-image, 伪类, 还有各种奇怪的前缀修饰, 选择性的隐藏特定的元素. 限于篇幅原因本文不会介绍各种技巧, 但是这些input元素以及他们应用的复杂性都无疑放大了跨浏览器和平台的问题. 每一种浏览器和操作系统的组合都使用着自己的样式和功能, 其中有一些很难去控制(应该是说很难覆盖重写样式–译者附), 而它们之间都是不一致的.&lt;/p&gt;
&lt;p&gt;虽然从样式上来说, input元素相当的复杂… 但是这些元素本身的交互形式确实非常简单的–点击, 输入, 点击其它元素. 交互的简单就允许我们对样式的定义有更多一点的追求, 来获得更好的体验. 基本只有下拉框因为带有选项列表, 所以交互形式更加高级(繁琐)一些.&lt;/p&gt;
&lt;p&gt;随着web技术的发展, 我们对于更好的界面体验有了更多的渴求. 我们创造了多JS的组件, 来提升基础的input元素的使用体验(比如datepicker, jqueryUI), 这也确实起到了一段时间的作用, 直到2007年现代移动互联网时代爆发, 改变了所有事情.&lt;/p&gt;
&lt;p&gt;环境的变化产生了交互的变化, 我们本来很可爱的日历样式的日期选择组件在3.5-inch的触摸屏幕上就变成了赤裸裸的噩梦, 甚至是那些下拉框都需要重新思考其交互形式.&lt;/p&gt;
&lt;p&gt;iPhone默认的下拉框是一个满屏宽的滚轮界面, 就其尺寸来说交互形式非常自然. 虽然说它不算是完美的界面, 尤其是当选项超过了10左右(千万不要让我从选择国家的列表开始啊…), 但是本身已经是一个相当大的改进了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://alistapart.com/d/misc-images/apple-select.jpg&quot; alt=&quot;Apple Select&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android的下拉框也是类似的处理方式,只是形式上略有不同–如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://alistapart.com/d/misc-images/android-select.png&quot; alt=&quot;Android select&quot;&gt;&lt;/p&gt;
&lt;p&gt;下例是一个iOS内置的日期选择器–由三个下拉框组成, 这就比直接在移动端使用原来日历样式的那个好很多了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://alistapart.com/d/misc-images/ios-date.png&quot; alt=&quot;iOs date&quot;&gt;&lt;/p&gt;
&lt;p&gt;标准的select元素在这些设备上的支持做的都很好, 但是我们却无法在网页上直接使用这些系统原生自带的组件, 比如iOS的日期选择. 幸运的是, HTML5给我们带来了一些全新的input类型. 比如date以及range类型, 都得以让浏览器和操作系统处理更加附加的交互形式. Apple很快就在iOS5中引入了date的支持, 并且给了我们在网页上直接调用iOS date picker的能力.&lt;/p&gt;
&lt;p&gt;正是因为对这些新的input类型的支持, 我们如今已经可以使用这些丰富的类型, 只需要在适当的时候给予一些容错, 或者至少是一些友好的提示–对于不支持的input类型, 会自动变成文本框. 下拉框和日期选择都只是一个简单的例子, 表明系统正在更好地处理元素–毕竟设备本身总是能够更好决定自己的用处而不是不可知的网络.&lt;/p&gt;
&lt;p&gt;过去只有简单交互形式的input元素给了我们试验的空间, 但是如今复杂的元素交互形式却给我们留下了更少的空间. 在浏览器和操作系统接管了大多数交互的情况下, 我们只能任由他们了. 网络是不会停止发展的, 我们正在走向更加复杂的元素交互, 但却更少的可控性.&lt;/p&gt;
&lt;p&gt;这让我开始好奇我们还要和那些原生样式抗争多久. 也许是到了我们停止修改, 伪造input元素类型, 接受时代的大势所趋.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://alistapart.com/blog/post/on-styled-form-elements&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A List Apart-On Styled Form Elements&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>jQuery的5个小细节-5 Little Known Details About jQuery Methods</title><loc>http://taoalpha.me/blog/2014/08/05/read-yi-jquery-di-5-ge-xiao-xi-jie-5-little-known-details-about-jquery-methods/</loc><publish>2014-08-05T05:00:00.000Z</publish><summary>&lt;p&gt;其实CS真的是一个非常博大精深的课程啊… 不说其他.. 单纯说前端的这些技巧… 感觉穷其一生都难以学通学懂… 很难想象计算机的发明还不到70年… 人类的进步果然是无法想象的…&lt;/p&gt;
&lt;p&gt;====正题=====jQuery的5个小技巧============================&lt;br&gt;Author: &lt;a href=&quot;http://www.sitepoint.com/author/aderosa/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aurelio De Rosa&lt;/a&gt;&lt;br&gt;Published: 4 Aug, 2014&lt;br&gt;Source: &lt;a href=&quot;http://www.sitepoint.com/5-little-known-details-jquery-methods//&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SitePoint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;jQuery作为世界上使用最广泛的js库已经广为人知了. 虽然近来出现了很多批评的声音, 但是它依然吸引着众多的开发者. 无论你是一个jQuery的入门者还是已然晋升专家级别(Dave Methvin和其他的jQuery团队成员就除外了…), 你可能都对一些jQuery的特殊属性比较陌生. 本文将会讨论其中五个小的特性.&lt;/p&gt;
&lt;h3&gt;Returing &lt;i&gt;false&lt;/i&gt; in Event Binders&lt;/h3&gt;

&lt;p&gt;如我们所知, jQuery的首要目的是统一各个浏览器的行为. 从而可能会对一些浏览器的属性有所增强, 整合一些本来浏览器可能不支持的功能. 想想那些多亏了jQuery你才能在IE6,7上使用的选择器,比如:not, :last-child等等.&lt;/p&gt;
&lt;p&gt;但是, 虽然很少见, jQuery还是会出现一些异常表现的. 一个简单的例子就是在jQuery的事件处理中, 比如一个on()事件, 返回false的表现和如下的调用效果是完全一样的:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.stopPropagation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;event.preventDefault();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一问题从jQuery的源代码中可以得到验证的:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( ret !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (event.result = ret) === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      event.preventDefault();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      event.stopPropagation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Pseudo-selectors Do More Than You Think&lt;/h3&gt;&lt;br&gt;在jQuery对很多伪类的文档描述中, 你可以看到如下的备注(下例是:checkbox的):&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;br&gt;$( “:checkbox” ) is equivalent to $( “[type=checkbox]” ). As with other pseudo-class selectors (those that begin with a “:”) it is recommended to precede it with a tag name or some other selectors; otherwise, the universal selector (“&lt;em&gt;”) is implied. In other words, the bare $(‘:checkbox’) is equivalent to $( “&lt;/em&gt;:checkbox” ), so $( “input:checkbox” ) should be used instead.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;我们看下真实的代码部分:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createInputPseudo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; type &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; elem &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = elem.nodeName.toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name === &lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt; &amp;amp;&amp;amp; elem.type === type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如你所见, 备注中有些表述错误: $(‘:checkbox’)实际上应该等同于$(‘input[type=”checkbox”]’). 因为它搜寻的是input标签(name===”input”), 不过它依然会测试所有符合你制定要求的元素(比如你制定了一个上级div内的:checkbox,或者一个class等).&lt;/p&gt;
&lt;p&gt;因此, 你可能很希望以后使用:checkbox的时候都不用在前面加上对应的元素名了… 都用下面这种..&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $checkboxes = $(&lt;span class=&quot;string&quot;&gt;':checkbox'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上, 就单纯从性能来说, 更明确的之处元素所在会更好的帮助jQuery定位到元素的. 所以, 最好还是写成如下形式:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $checkboxes = $(&lt;span class=&quot;string&quot;&gt;'input:checkbox'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;jQuery.type()&lt;/h3&gt;&lt;br&gt;哈哈, 看名称似乎就已经很陌生了吧~ 你注意到jQuery有一个方法可以判断一个对象的类型吗?&lt;p&gt;&lt;/p&gt;
&lt;p&gt;即便你已经知道这个方法, 但你依然有可能忽略了它和js本身typeof函数的区别. 实际上, jQuery.type()返回的是一个更加准确的类型. 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// typeof examples:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// $.type() examples:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log($.type(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log($.type([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log($.type(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以说, 如果你要开发jQuery插件, 你可能需要用到$.type()来获得更准确的数据类型.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;attr() can removeAttr()&lt;/h3&gt;&lt;br&gt;有些糊涂? 哈, 首先, 对于不了解attr()函数的童鞋, 这是一个获取或者赋予第一个匹配的目标元素的属性的函数.&lt;br&gt;实际上, attr()不仅可以支持传入数字或者字符串, 同时也可以支持传入null来充当第二个参数(第一个参数是要赋予或者获取的属性名称, 比如src等–译者注). 一旦传入null, 那么其实就实现了removeAttr()的功能, 从而会去除这一属性.&lt;br&gt;不信? 看看源代码~&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;attr: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; elem, name, value &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( value !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( value === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            jQuery.removeAttr( elem, name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上, attr()调用后会先判断传入的value是不是undefined(如果是undefined, 就会转入获取环节–译者注),不是的话, 会先判断是不是null, 如果是的话, 会自动调用removeAttr()的.&lt;/p&gt;
&lt;p&gt;这一技巧在你要对某个属性进行条件性赋值的时候最为方便, 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(selector).attr(anAttr, condition ? value : &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就不用写成这样了:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;condition ? $(selector).attr(anAttr, value) : $(selector).removeAttr(anAttr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你应不应该使用这一技巧呢? 这就得由你来判断了.. 如果我是你的话, 为了代码的清晰,我可能不会使用它. 目前来说, 这一部分还没有在文档中出现, 而且这里还有一个&lt;a href=&quot;https://github.com/jquery/api.jquery.com/issues/523&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;相关的讨论&lt;/a&gt;, 有兴趣的话, 可以点开看看哈.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Turning Array-like Objects Into Arrays&lt;/h3&gt;&lt;br&gt;js包含了很多数据类型, 比如nodeList, 或者函数接受的arguments变量,都是类似于array的类型, 但是都不是array. 这意味着我们可以用类似array的方法来操作其中的元素,比如arguments[0], 但是却无法使用一些array的函数, 比如:forEach(),join()等.&lt;br&gt;假如我们有一个Dom的nodeList:&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByClassName(&lt;span class=&quot;string&quot;&gt;'book'&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想要对一个类似array的数据使用forEach()函数, 我们不能直接调用forEach()函数的, 会报错’Uncaught TypeError: undefined is not a function’. 为了避免这类错误, 最常用的方法是利用prototype属性和call()函数:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.forEach.call(list, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者你可以写成:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[].forEach.call(list, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论你使用哪种, 都不是很优雅(…靠..译者注). 幸运的是, jQuery提供了一个解决方法~ 那就是jQuery.makeArray()函数:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.makeArray(list).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;...&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好很多了有木有!!!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Conclusions&lt;/h3&gt;&lt;br&gt;从本文你可以学到什么? 除了上述这5个小技巧之外, 我们希望告诉你, 即便如jQuery这样牛X而且坚实的项目也不是10分完美的. 它依然有一些bug和文档问题, 而只有源码才是可以让你信任的信息来源. 当然, 源码有时候也能够因为不同开发者的目的而有所区别… 这是另一个话题了..&lt;p&gt;&lt;/p&gt;
&lt;p&gt;还有一点就是你应该对自己所学习和使用的框架和库保持好奇心, 阅读它们的源代码, 并尝试从中学到新的知识和技巧.&lt;/p&gt;
&lt;p&gt;作为最后一个建议, 如果你热爱jQuery, 如我这般, 请作出你的贡献吧~ 即使只是报告一个bug或者修正一个小小的文档问题也能够帮助到数以百万计的开发者们.&lt;/p&gt;
&lt;p&gt;为了以防你问我我是如何注意到这些细节问题的, 秘密就在于我写过好基本关于jQuery的书籍… 而且 欧文十一个jQuery问题跟进者!&lt;/p&gt;
</summary></url><url><title>How Travel Websites Can Make Their Calendars Faster</title><loc>http://taoalpha.me/blog/2014/04/05/read-yi-how-travel-websites-can-make-their-calendars-faster/</loc><publish>2014-04-05T11:00:00.000Z</publish><summary>&lt;p&gt;还是UXmovement的一篇老文章, 主要介绍了旅游网站中经常会遇到的往返机票时间选择的问题~&lt;/p&gt;
&lt;p&gt;=======译文==========&lt;/p&gt;
&lt;p&gt;在线订机票目前越来越普及. 每次用户定机票的时候他们都必须使用那个未尝丑陋切过时的日历插件来选择他们的出发和返程日期. 在过去的几年里, 各家旅行网站的这些日历插件无论从样式上还是功能上都越来越一样了. 用户点击一个文本区域, 一个双月日历就会出现, 用户选择一个日期后, 这个日期就会出现在选择的输入框中. 而用户需要再次点击下一个文本框, 返程, 如此操作两次才可以完成. 这个方法并不是一个体验上的灾难…但是很明显也不是最好的方法来选择日期.&lt;/p&gt;
&lt;h3&gt;一个统一的日历&lt;/h3&gt;

&lt;p&gt;一个更加高效的方案是统一出发日期和返程日期的文本输入到一个日历之中去. 一个统一的日历将明显的降低用户处理信息的压力. 这是因为用户只需要保持一个焦点区域来选择它们的日期即可. 同样的, 用户在同一个日历上选择出发日期和返程日期, 也让用户本身更清楚的了解中间的时长. 一旦选择后自动把日期填写到输入框中让用户方便的确认它们的选择.&lt;br&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2013/10/unified-calendar.png&quot; alt=&quot;Example for old and new calendar&quot;&gt;&lt;/p&gt;
&lt;p&gt;Kayak的航班日历就是一个非常完美的统一日历的范例. 它有一个文本域以及两个按钮(按钮在文本输入框中), 这两个按钮分别是出发和返程, 当点击任意一个按钮后就会弹出一个双月日历来选择按钮对应的日期, 而一旦选择后就会自动切换到另一个日期的选择, 但保持日历不变. 在用户选择日期后, 原本的按钮区域自动会变为选择的日期, 同时还会动态的显示此次旅程的间隔时间. 再都选择完成后, 日历自动隐藏. 同一个的日历和日期让信息更为清楚切更加容易去让用户理解和浏览.&lt;/p&gt;
&lt;p&gt;老的日历形式非常的无效率且需要提升. 而新的日历则降低了用户处理信息的流程和压力, 让选择更为容易快捷. 许多用户每天都在用旅行网站. 如果一个新的设计能受益于很多的用户, 那么也就到了改变的时候了.&lt;/p&gt;
&lt;p&gt;=============DONE==========&lt;/p&gt;
&lt;p&gt;看完完成后我还去Kayak上验证了下, 确实非常方便啊~~&lt;a href=&quot;http://www.kayak.com/flights&quot; target=&quot;_blank&quot;&gt;这里体验&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同时也去看了国内比较流行的同程和携程….两者都是采取的老设计形式, 不过都做了一个优化就是点击出发日期后,选择完自动会弹出返程日期, 而不需要再次点击, 其中同程每次选择新的出发日期会自动进行返程日期的修改, 携程则不会. 不过实际对比一下就能够感受到这种体验明显是弱于Kayak的, 不过Kayak有一点不好, 就是选择了出发日期后, 并不禁止选择出发日期之前的地方, 这一点细节国内的几个网站都是做到的~ 这个还是可以避免一些误点击的.&lt;/p&gt;
&lt;p&gt;好的~ 类似这种体验细节的东西, 其实确实还是国外的做的更多些, 国内相对而言更注重功能的实用性了, 不过相信随着功能的满大街, 那么也就是到了体验的时候了.&lt;/p&gt;
</summary></url><url><title>How to use circles in website design</title><loc>http://taoalpha.me/blog/2014/09/04/read-yi-how-to-use-circles-in-website-design/</loc><publish>2014-09-04T11:00:00.000Z</publish><summary>&lt;p&gt;圆在网页设计中的应用还是相对比较新的. 对于那些年轻时经历过”方形”设计主流的设计师们, 我们现在所做的设计早就远远超出了当初对万维网的预想. 如今大行其道的圆设计为什么直到现在才开始流行呢? 最可能的原因在于早期想要通过非图片的方式来创造圆是非常困难的, 而不像现在.&lt;/p&gt;
&lt;p&gt;如今, 人们可以通过css非常简单的创造圆形, 所以它们在网页设计中越来越普遍了, 随处可见. 但还有很多人觉得在网页设计中很好的使用圆是比较困难的, 当然, 对此有不少的争论. 但是, 如果我们能坚持优质的布局和留白, 一个圆形的设计能够给整个页面带了更加新潮而又刺激的元素.&lt;/p&gt;
&lt;p&gt;现在很多时候, 其实在下面这些元素上使用圆反而会造成困惑, 难看, 因为圆形元素天然有着吸引注意力的能力, 会使元素产生一种跳出感. 所以我们希望选择合适的元素并且用合适的圆形方案来设计. 下面列举了一些优秀的使用例子:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用一个圆形的logo不仅可以传达一种简洁干净的感觉, 还能给予用户一种高雅精致的感觉. 圆是人类最早熟悉的一种符号, 经常用来代表生命自身. 这可能也是为什么如此多的设计师愿意用它来代表自身的品牌和站点的部分原因吧. 到如今, 使用圆形设计的logo已经非常流行了.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;imgs&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.razvangarofeanu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/09/001.jpg&quot; alt=&quot;Logo-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://1minus1.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/1minus1.jpg&quot; alt=&quot;Logo-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://pistachioapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/pistachio.jpg&quot; alt=&quot;Logo-3&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在导航中使用圆形也正在成为一种趋势, 同时在当今快速发展进化的市场上, 这一趋势在面临移动网络的快速成长也是非常合理的. 随着触屏设备的丰富, 我们已经不再局限于智能手机和平板了, 这大大推动了圆形导航设计的发展. 同时, 圆形按钮更加贴合用户的直觉, 和指尖的形状都一致, 传达出一种祈求用户来按的感觉.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;imgs&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.cantinanegrar.it/it/dominiveneti/f2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/09/002.jpg&quot; alt=&quot;Navigation-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.kashoo.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/kashoo.jpg&quot; alt=&quot;Navigation-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.zizzi.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/zizzi.jpg&quot; alt=&quot;Navigation-3&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://inmotionmassage.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/inmotion.jpg&quot; alt=&quot;Navigation-4&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;Icons&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;圆形图标可谓是目前最流行的, 也是最常用,历史最悠久的圆形元素了. 很大程度上是因为它们通常都是基于图片形式的, 并不依赖于css的支持. 所以它们从一开始就能得以出现. 有些人可能认为既然圆形图标在互联网中已经出现并使用这么久了, 那么也许是时候改做出一些改变切换到另一种方式了. 但是其实在图标设计中, 圆形设计能够持续如此之久是有原因的:它的效果很好.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;imgs&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.denisechandler.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/denisechandler.jpg&quot; alt=&quot;Icon-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://syropia.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/syropia.jpg&quot; alt=&quot;Icon-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.styiens.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/styiens.jpg&quot; alt=&quot;Icon-3&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;Image Previews&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一形式我们可以在很多作品集网站中看到, 因为圆形的图片缩略图能够传达给用户一种愉悦的视觉美感. 同样的, 这一模式更加吸引眼球, 所以放置这些圆形的预览图时不仅要在视觉上能够给予用户合理的导向, 同时也要直接的告诉用户. 而说到可用性, 圆形的图片提供了更大的空白, 这种空白能够让网站显得更有创意更加和谐.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;imgs&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://revelationconcept.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/09/003.jpg&quot; alt=&quot;ImagePreview-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.skewedicons.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/skewedicons.jpg&quot; alt=&quot;ImagePreview-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kikk.be/2012/accueil.htm?lng=fr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/kikk.jpg&quot; alt=&quot;ImagePreview-3&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;Calls to action&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和导航一样, 在触屏设备越发流行以及功能越发丰富的情况下, 圆形设计下的动作指示更加自然. 不过, 如果你要用同样的风格展现你的导航和CTAs的话, 那么一定要尝试不同的方式来让它们凸显自己. 导航是必须的元素, 这一点没错, 但是CTAs本身代表了很高的优先级, 我们需要确保它能够优先的对待, 同时还要有足够的区别来突出. 对于网页设计师而言, 创造视觉层级并不是一个什么新的概念, 这也只不过是其中一个的延伸罢了.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;imgs&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://onedesigncompany.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/09/004.jpg&quot; alt=&quot;CTA-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://thehighlandfling.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://netdna.webdesignerdepot.com/uploads/2014/07/highlandfling.jpg&quot; alt=&quot;CTA-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;本文作者:&lt;/p&gt;
&lt;p&gt;Rob Bowen – 是一个新兴的电影制作人, 名人作家和播客, 诗人, 同时也是Arbenting和Dead Wings Designs的联合创始人以及设计和播客的贡献者.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://www.webdesignerdepot.com/2014/09/how-to-use-circles-in-website-design/&quot; title=&quot;How to use circles in website design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to use circles in website design&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;style&gt;
div.imgs a{display:block;}
&lt;/style&gt;
</summary></url><url><title>How Margins and Line Lengths Affect User Reading</title><loc>http://taoalpha.me/blog/2014/08/29/read-yi-how-margins-and-line-lengths-affect-user-reading/</loc><publish>2014-08-29T10:00:00.000Z</publish><summary>&lt;h1 id=&quot;u672C_u6587_u7565_u6C34-__u4E3B_u8981_u662F_u672C_u8EAB_u4E3B_u8981_u5185_u5BB9_u662F_u975E_u5E38_u663E_u800C_u6613_u89C1_u7684-__u4E0D_u8FC7_u91CC_u9762_u5F15_u7528_u7684_u4E24_u7BC7paper_u5176_u5B9E_u8FD8_u662F_u4E0D_u9519_u7684_7E_u54C8&quot;&gt;&lt;a href=&quot;#u672C_u6587_u7565_u6C34-__u4E3B_u8981_u662F_u672C_u8EAB_u4E3B_u8981_u5185_u5BB9_u662F_u975E_u5E38_u663E_u800C_u6613_u89C1_u7684-__u4E0D_u8FC7_u91CC_u9762_u5F15_u7528_u7684_u4E24_u7BC7paper_u5176_u5B9E_u8FD8_u662F_u4E0D_u9519_u7684_7E_u54C8&quot; class=&quot;headerlink&quot; title=&quot;本文略水.. 主要是本身主要内容是非常显而易见的. 不过里面引用的两篇paper其实还是不错的~哈&quot;&gt;&lt;/a&gt;本文略水.. 主要是本身主要内容是非常显而易见的. 不过里面引用的两篇paper其实还是不错的~哈&lt;/h1&gt;&lt;p&gt;你有过长时间阅读一个网页的经历吗? 可能多数时候你是因为满篇的文字而觉得比较花时间的. 但是研究表明margins以及line length(间距边距以及行宽)可能对阅读速度以及理解上都有所影响的. &lt;/p&gt;
&lt;p&gt;理想的阅读体验是用户能够既快速而且还能很好的理解阅读的内容. 如果你希望用户能够获得这一体验, 那么你应该对你页面的margins和line lengths有所优化.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading Speed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://psychology.wichita.edu/surl/usabilitynews/72/pdf/Usability%20News%2072%20-%20Shaikh.pdf&quot; target=&quot;_blank&quot;&gt;有一项研究&lt;/a&gt;发现行宽对于阅读速度有着非常明显的影响. 他们通过线上的一些文章进行了测试, 分别测试了4中不同的行宽, 其中每行字母数分别为35, 55, 75, 95. 结果显示用户在95CPL的测试中表现最快. 他们同时发现行宽本身对于阅读在理解上是没有影响的.&lt;/p&gt;
&lt;p&gt;这一测试表明为获得最佳的阅读速度, 建议行宽字啊95CPL左右(译者说: 我了个去.. 这测试怎么没有包含95CPL以上的对照组.. 这结论..) 一些用户反馈说他们感觉自己在35CPL的测试中阅读速度很快. 但是实际上35CPL的设定反而会拖慢阅读速度. 换句话说, 过短的行宽会导致用户阅读速度变慢. 这是因为有太多的换行, 导致用户的眼睛需要在行与行之间太过频繁的移动.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1666” align=”aligncenter” width=”1412”]&lt;a href=&quot;http://uxmovement.com/wp-content/uploads/2014/08/line-length-reading-speed.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/line-length-reading-speed.png&quot; alt=&quot;Line-length 对阅读速度的影响&quot; class=&quot;size-full wp-image-1666&quot;&gt;&lt;/a&gt;Line-length 对阅读速度的影响[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading Comprehension&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只是阅读速度快但是不能理解内容的话, 对用户是没有意义的. 所以重要的不仅仅是优化阅读速度, 还要优化其易于理解的程度.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://psychology.wichita.edu/surl/usabilitynews/62/whitespace.htm&quot; target=&quot;_blank&quot;&gt;对此也有一项研究&lt;/a&gt;发现阅读中, 有margins的文本比没有的要更好理解(译者说: 感觉.. 这是挺自然的哈..). 结果表示用户更喜欢有margin的测试组. 他们反映这种情况能够降低视觉疲劳, 对于布局上也更加满意.&lt;/p&gt;
&lt;p&gt;这一发现也暗示我们可以通过使用空白来调整布局从而提升阅读的易于理解. 你应该选择一个合适的宽度结合一个流态布局来展示网站. 流态布局会导致文本和浏览器等宽而不留margins. 合适的宽度则能够允许你对行宽以及margins做一定的限定.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1666” align=”aligncenter” width=”1412”]&lt;a href=&quot;http://uxmovement.com/wp-content/uploads/2014/08/margins-reading-comprehension.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/margins-reading-comprehension.png&quot; alt=&quot;margins 对阅读理解的影响&quot; class=&quot;size-full wp-image-1666&quot;&gt;&lt;/a&gt;margins 对阅读理解的影响[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Balancing Speed and Comprehension&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;margin的大小和行宽本身也是互相影响的. 用户需要的是两者平衡的理想阅读体验. 花费很长时间阅读文本是很没有效率的. 而阅读但是不理解则是完全没有意义的. 所以请通过优化你的行宽和margins来提升用户的阅读体验吧.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;  &lt;li&gt;&lt;a href=&quot;http://uxmovement.com/content/how-margins-and-line-lengths-affect-user-reading/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>How Can I Best Absorb Information While Reading?</title><loc>http://taoalpha.me/blog/2014/04/19/read-yi-how-can-i-best-absorb-information-while-reading/</loc><publish>2014-04-19T05:00:00.000Z</publish><summary>&lt;p&gt;Instapaper Daily 推荐的一篇的文章, 看到题目我就觉得我直接一读了~&lt;/p&gt;
&lt;p&gt;==================正文================&lt;/p&gt;
&lt;p&gt;阅读一本好书是一个非常享受的过程, 但是如果信息只是从你的大脑中流过而没有留下任何的记忆的话, 也是一件让人很沮丧的事情. 幸运的是, 这里有一些方法可以帮助你留下这些信息. 来自Stack Exchange的书虫们提供了一些值得参考借鉴的建议~&lt;/p&gt;
&lt;p&gt;我喜欢阅读那些我很感兴趣的非科幻书籍, 但是我发现这些信息都不好留存下来.&lt;/p&gt;
&lt;p&gt;比如, 一年前我阅读Thomas Jefferson的自传, 但现在除了他剩余1743年之外, 我几乎不记得任何事情了…当我看或者听那些我视为人生榜样的作家们, 比如Christopher Hitchens以及Sam Harris的书籍或者谈话时, 他们总是能够信手拈来的引用很多书中的内容. 我曾经看到Hitchens引用了一本书, 甚至完全凭借记忆给出了这本书的页码!&lt;/p&gt;
&lt;p&gt;我希望能够向这些人一样把信息存储下来, 当然, 如果可能的话, 不需要重复的读一本书… 那么为达到这一效果我应该采取什么样的策略呢?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://productivity.stackexchange.com/q/8638/6736?utm_source=lifehacker&amp;utm_medium=syndication&amp;utm_campaign=crowdhacker&amp;utm_content=productivity-108&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看原文点此&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3-Step Program(by TRdH)&lt;/h3&gt;

&lt;p&gt;记忆主要由以下三部分组成.&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;Impression(印象)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Association(联系)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Repetition(重复)&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;这三者中的任一部分都足以让你记住任何事情. 但是, 结合三者是最为保险的方法, 而且也最为永固. 让我来分别解释下这三个部分.&lt;/p&gt;
&lt;h4&gt;Impression&lt;/h4&gt;

&lt;p&gt;当你对某事非常有印象时, 比如一个想法, 一幅画, 一个声音, 一张脸, 一段话, 一个情景, 那么你记住它们的概率就会大大提升. 比如, 如果小时候你曾经一个人走丢在一个商场里, 那么你对此一定会印象深刻的. 和书一样: 如果你对Thomas Jefferson曾经做过的某件事印象深刻, 那么你记住这部分的概率就会大大提升. 万幸的是你可以在阅读中去控制这一印象的强度.&lt;/p&gt;
&lt;p&gt;比如, 你可以暂停阅读, 把书中描绘的情景在脑海中想象出来, 有意的强化某些特征来提升这一精神图像的印象, 通过增加好的, 坏的 任何东西来震撼你自己. 你甚至可以把自己加入到这一精神画卷中, 想象一下Thomas Jefferson在感谢你的帮助或者是痛扁你, 任何能够给你增加印象的都行. 这将会让你形成更强的印象.&lt;/p&gt;
&lt;p&gt;同样的, 你还可以通过大声的朗诵一段话来提升印象–只要邻居们接受, 你可以尽可能的大声. 有些人可能对来自声音的信息比文本的信息要更敏感.&lt;/p&gt;
&lt;h4&gt;Association&lt;/h4&gt;

&lt;p&gt;如果你能把正在阅读的部分和你已经知道的任何事物联系起来, 那么你记住它的概率也会有很大的提升—有时候会超出你想象的大. 比如, 如果Thomas Jefferson和你是同一天出生的, 那么你会发现你记住他的生日就非常的简单了. 因为你把阅读的东西和你已经确认而且不会忘记的事情联系了起来. 就像把新的东西(你阅读的)绑在一个树上(你知道的东西)一样. 这也是为什么如果你本来就对某一话题有所了解, 那么了解更多相关的就会变得容易很多.&lt;/p&gt;
&lt;p&gt;如果你在某个话题上非常渊博(就像 Christopher Hitchens 和 Sam Harris 在文学上的表现一样), 那么就很容易建立强联系–你有很多的绳子和树, 还怕新东西不能绑住吗? 所以了解越多基础的知识以及这本书的周边知识能够有效的帮助你记忆更多东西.&lt;/p&gt;
&lt;h4&gt;Repetition&lt;/h4&gt;

&lt;p&gt;如果你把一本书读了10遍, 你一定可以记住很多东西. 同样的道理, 一个菜谱, 一条线路, 歌词, 电话号码等等. 都可以通过重复来记忆. 你越重复, 越容易记忆. 当阅读一本书的时候, 你不需要把全书阅读很多遍, 你可以仅仅高亮某些部分, 那些你想要记忆的部分. 而你随后就能发现这些部分同样能够帮助你记忆这本书的剩余部分.&lt;/p&gt;
&lt;p&gt;通过精神图像加深你的印象, 把新知识和固有的知识联系起来(确保自己从基本开始), 同时重复练习. 努力的去做, 你就会发现自己的记忆力会越来越好.&lt;/p&gt;
</summary></url><url><title>High-Performance Browser Networking .1.Preface</title><loc>http://taoalpha.me/blog/2014/07/24/read-yi-high-performance-browser-networking-1-preface/</loc><publish>2014-07-24T11:00:00.000Z</publish><summary>&lt;p&gt;chrome一直以极速著称, 当然这和webkit内核有很大的关系, 但是本身chrome在网络处理上也有着非常多的优化方案, 综合了这些优化和本身优质的内核属性, chrome才能实现如今的极速~ &lt;/p&gt;
&lt;p&gt;进入正文前, 先介绍下&lt;a href=&quot;https://www.igvita.com/posa/high-performance-networking-in-google-chrome/&quot; target=&quot;_blank&quot;&gt;原文&lt;/a&gt;或者说&lt;a href=&quot;https://www.igvita.com/&quot; target=&quot;_blank&quot;&gt;原书&lt;/a&gt;的作者: &lt;strong&gt;Ilya Grigorik&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ilya是google的一个网络性能开发工程师, 其在很多方面都有杰出的成绩~ 有兴趣的可以去&lt;a href=&quot;https://github.com/igrigorik&quot; target=&quot;_blank&quot;&gt;大神的github&lt;/a&gt;上看看大神都在做什么项目, 顺带能观摩学习下大神的代码~&lt;/p&gt;
&lt;p&gt;==================================正文=============================&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;–Steve Sounders, Head Performance Engineer, Google, 2013&lt;/p&gt;
&lt;p&gt;“优秀的开发者知道如何做, 伟大的开发者知道为什么这么做.”&lt;/p&gt;
&lt;p&gt;我们一直都以此名言勉励自己. 我们都希望成为那个知道而且可以解释我们所使用系统的底层原理的人. 但是, 如果你是一个网页开发者, 你可能反而要走相反的路子.&lt;/p&gt;
&lt;p&gt;网页开发者现在变得越来越细分. 你是什么类型的开发者呢? 前端? 后端? 韵味? 大数据分析? UI/UX(交互设计)? 存储? 视频? 信息流? 我还可以给这个长长的列表中加入性能工程师这一细分领域. &lt;/p&gt;
&lt;p&gt;我们很多时候很难平衡技术的基础学习和前沿领域的了解. 但是, 如果我们不能了解这些基础知识, 我们的知识系统一定很空洞, 很浅薄. 仅仅知道一个技术手段的顶层使用是不够的, 尤其是在面对一些复杂的问题时, 一旦出现了一些莫名其妙的问题, 那么依赖的还是掌握底层原理的人.&lt;/p&gt;
&lt;p&gt;这也是为什么本书(High Performance Browser Networking)如此重要了. 如果你是一个网页开发者, 那么你的基础知识就是网络以及网络协议基于的金字塔结构: TCP-TLS-UDP-HTTP以及其他一些东东. 这其中的每一个协议都有其自身的性能属性特点和优化方法, 而为了创建高性能的应用, 你就需要去了解网络的工作形式, 为什么是这样的而不是那样的~&lt;/p&gt;
&lt;p&gt;感谢上苍, 你已经找到了如何阅读本书的方法. 我真希望在我开始网络编程之路时能够有这本书啊. 当初完全依靠那些懂得网络原理的前辈的言传身教以及自己硬啃那些说明指导才一步步走到现在的. HPBN一书集合了一个网络界的前辈–Ilya Grigorik–他把自己对网络的方方面面了解都融合集成到了这本书中.&lt;/p&gt;
&lt;p&gt;在本书中, Ilya详尽解释了许多关于网络的原理性知识: 比如为什么延迟(latency)是性能的绊脚石. 为什么TCP并不总是最好的传送机制以及UDP可能是你更好的选择. 还有为什么链接复用是个非常关键的优化. 紧接着他更进一步的提供了很多提升网络性能的具体方法. 想要减少延迟? 尽可能在里客户端更近的服务器端中断会话. 想要提升链接的复用? 启用链接的长效性. 就是这种如何做和为什么这么做的结合让本书传达的知识更有可操作性.&lt;/p&gt;
&lt;p&gt;Ilya 阐述了网络的基本原理并且基于此介绍了很多协议和浏览器方面的前沿知识. HTTP 2.0的有点也有所介绍. 回顾了XHR以及它的局限性, 和由此引发的跨域资源共享问题的介绍.Server-Sent Events, WebSockets, 和 WebRTC 也都所涉及, 带我们领略了一些浏览器网络的最前沿.&lt;/p&gt;
&lt;p&gt;本书的两大核心就是基础原理和前沿知识. 性能是帮助我们理解网络的根本, 并将之转化到性能是如何影响到我们的网页和用户的. 它把复杂的概念转化成了我们可以真正用于提升优化自己网站并创造更好的用户体验的工具. 这一点很重要, 这也是你为什么要阅读本身的重要原因.&lt;/p&gt;
&lt;p&gt;浏览器是当下受众面最广的部署平台了: 它出现在每一台智能手机, 平板, 笔记本, 台机和每一个介于其中形式的载体上. 实际上, 从目前设备的涨势来看, 我们预期2020年的时候入网设备能够达到200亿–至少有一个浏览器而且至少可以接入wifi或者信号基站. 而平台的形式, 设备的厂商, 以及操作系统的版本都不是问题, 每一个设备都至少会有一个网页浏览器, 而浏览器本身功能也在越发丰富了.&lt;/p&gt;
&lt;p&gt;我们如何看到的浏览器已经和过去的老版本有了千差万别, 这得益于进来的一系列创新: HTML, CSS形成的展示层, JavaScript作为web集成的新语言被引入, 以及HTML5的提出和其新的API都在继续提升着新平台提供高性能应用的能力. 当今再没有别的技术或者平台能够做到这样, 这么的面向全部人类, 同时这也是如今各种机会, 创新频出的领域.&lt;/p&gt;
&lt;p&gt;实际上, 再没有比浏览器内部的网络基础机构更适合阐述网络的快速迭代和创新了. 历史上, 我们曾经受限于简单的HTTP请求式交互, 而如今, 我们拥有了更加丰富的机制, 可以实现更加有效的信息流传递, 双向而实时的交流, 自定义应用协议的传递以及一对一的视频会议, 各方之间的数据直接传输等等, 只需要JavaScript, 足矣.&lt;/p&gt;
&lt;p&gt;最终结果? 不计其数的联网设备, 已有服务和新服务中不断壮大的用户基数, 以及对高性能应用的高需求. 速度一直都是一个功能特点, 甚至对一些应用而言, 它是决胜功能点, 而一个高性能的网页应用也需要一个对浏览器如何工作以及和网络的交互有扎实, 基础的了解的人, 这也是本书的受众.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About this Book(关于本书)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的目的是能够覆盖到每一个应该了解网络是如何工作的开发者: 我们使用的是哪一种协议, 它有什么局限性, 如何最大化的优化你的性能来使用你的网络, 以及浏览器提供了什么样的网络特性来让你使用.&lt;/p&gt;
&lt;p&gt;在此过程中, 我们会深入的了解TCP, UDP以及TLS协议, 以及如何去针对性的优化我们的应用和基础结构. 接着我们会深入的了解下无线和移动网是如何工作的–就是无线电波这家伙, 比较难懂–还会讨论一些它对我们设计和搭建我们自己的应用的启发. 最后, 我们们仔细剖析一下HTTP协议是如何工作的, 并调查下浏览器中许多新的,让你兴奋的网络特性:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;即将到来的HTTP 2.0的改善;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;新XHR的特点和能力;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;结合Server-Send Events的数据流&lt;/li&gt;&lt;br&gt;    &lt;li&gt;使用WebScoket的双向沟通;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;点对点的视频和音频沟通–WebRTC;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;点对点的数据交互–DataChannel&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;理解每一个字节都是如何传递的,以及每个传递过程和协议的属性对我们创建高性能应用都是至关重要的知识. 毕竟, 如果我们的应用卡死在网络上, 那么无论怎么渲染, JS或者其他的优化方式都是没有意义的. 我们的目标是通过近可能最大的提升网络性能而减少等待的时间.&lt;/p&gt;
&lt;p&gt;HPBN一书将会是任何一个乐于研究优化传递和应用性能的开发者的菜, 更广面的, 任何一个不满足于一个简单的checklist, 而是想要了解浏览器和底层协议是如何工作的, 有着强烈好奇心的人, 都是本书的受众. 其中如何做以及为什么做会交替进行: 我们将会覆盖到很多实际的建议, 帮助你更好的进行配置和架构规划, 我们还会探究下每一种优化方法的益处和代价.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conventions Used in This Book(本书使用的一些习惯表达)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;i&gt;斜体:&lt;/i&gt; 代表新术语, URLs, email地址, 文件名或者文件扩展名;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Constant width:Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Constant width bold: Shows commands or other text that should be typed literally by the user.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Constant width italic: Shows text that should be replaced with user-supplied values or by values determined by context.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;后面三个和两种tip的形式都无法在本译文中体现, 所以就不管了哈…&lt;br&gt;&lt;br&gt;&lt;strong&gt;Source links:&lt;/strong&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1230000000545/pr01.html&quot; target=&quot;_blank&quot;&gt;Preface Part1&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1230000000545/pr02.html&quot; target=&quot;_blank&quot;&gt;Preface Part2&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>Email Subject Lines - 5 Tips to Attract Readers</title><loc>http://taoalpha.me/blog/2014/07/26/read-yi-email-subject-lines-5-tips-to-attract-readers/</loc><publish>2014-07-26T07:00:00.000Z</publish><summary>&lt;p&gt;Email Subject Lines: 5 Tips to Attract Readers&lt;/p&gt;
&lt;p&gt;相信大家都没少写过邮件… 那么邮件最难写的是哪部分呢? 不是正文, 不是抬头称呼, 更不是结尾或者名片… 而是主题有木有!!! 再好的正文不打开也没啥用啊!!! &lt;/p&gt;
&lt;p&gt;昨天给feedpusher增加了内部搜索的功能, 随便搜索了下email, 居然就看了这篇好文~ 特意翻来给大家~&lt;/p&gt;
&lt;p&gt;==========================================正文====================================&lt;br&gt;概要: 一定要在前40个字上下点功夫. 一个好的, 表述清楚的标题可以让收件人更好的判断自己是该看看呢还是直接提过呢.&lt;/p&gt;
&lt;p&gt;各种新闻邮件, 营销邮件充斥着你的邮箱之中, 有的可能能被宠信一下, 更多的可能都默默的消失在成堆的邮件中了, 而它们的存货其实完全取决于用户对发送人信息和标题的浏览评估.&lt;/p&gt;
&lt;p&gt;成熟的用户都能够非常自信的决定是打开邮件还是直接跳过邮件. 而一个清晰,容易识别的收件人信息和表意清楚的标题能够帮助用户更快更好的作出决定.&lt;/p&gt;
&lt;p&gt;我们基于数百封邮件的研究, 发现了5条可以用于指导你写出一个表意清晰, 更够快速提升你的邮件的成活率的建议.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 让标题表述出主体内容&lt;/strong&gt;&lt;br&gt;用户更喜欢你的主题更够直截了当的告诉他们你要说什么. 相比那些标题写着发件人或者机构名字或者写作时间的邮件, 用户更看重这种表意清楚的标题信息.&lt;/p&gt;
&lt;p&gt;比如, 我们研究中的一个用户就曾收到了一封”今日词条”的邮件, 它的标题中就包含了邮件本身的关键字:&lt;br&gt;&lt;i&gt;dyad: Dictionary.com Word of the Day&lt;/i&gt;&lt;br&gt;收件人表示, 它的优点就是在标题中直接列出了核心词, 所以如果我对这个词感兴趣的话, 我就会打开邮件查阅而不是立刻删除掉.&lt;/p&gt;
&lt;p&gt;很多人可能会觉得一个描述模糊(说个大概)的标题可能会引诱用户点开来查看详情. 毕竟, 如果用户可以通过标题了解到内容的大意时, 一旦他们对内容不感兴趣自然就不会打开看了. 然而, 这一块最好还是交给用户自己去判断吧, 我们做好自己能做的: 更快的帮助他们判断. 而不是直到打开邮件才能直到自己是否感兴趣.许多人甚至都懒的看内容就直接删除了的..&lt;/p&gt;
&lt;p&gt;比如, 来自The Leukemia and Lymphoma Society的邮件就是这样的标题:&lt;br&gt;&lt;i&gt;April 2014 eNewsline&lt;/i&gt;&lt;br&gt;这一标题任何重要的内容信息都没有提供出来… 而为了了解里面到底有啥信息, 用户就必须点击打开了看. 这种交互成本是非常高的, 而且受益还尚未可知, 模糊倒是做到了极致. 如此久而久之, 用户甚至都不会再花时间看这一类的邮件了, 以后来自这以组织的邮件基本都会直接被删除了.&lt;/p&gt;
&lt;p&gt;要谨记电子邮件是一个关系型的工具. 它是最佳也是性价比最高的联络客户的工具. 所以, 请通过一个更加清楚的标题, 来减少用户打开他们不喜欢的邮件的可能吧.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 集中精力在标题的开头, 并且限制到40个字内.&lt;/strong&gt;&lt;br&gt;邮箱通常会限制在收件箱中显示的主题字数. 这一限制也会因为邮箱端的不同而不同. 虽然我们通常建议不要超过40个字, 但是多数邮件客户端能显示的都远小于这一数字.&lt;/p&gt;
&lt;p&gt;所以那些必备的, 重要的内容就应该出现在标题的以开头, 如此就不会有被截断的风险了. 况且, 即便标题全部可见, 收件人也通常只会阅读标题的开头部分的. 所以那些信息词, 诱惑性的词, 重点描述词都应该放在标题的开头部分.&lt;/p&gt;
&lt;p&gt;比如, 下例就是一封来自一个娱乐机构的邮件, Merrill Auditorium, 他们的标题是:&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Merrill Monthly Newsletter: Berinsten, Bobby McFerrin and… Bear Hunts!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;开头的三个词, 每月的邮件中都会有, 所以收件人基本上看都不看… 而是直接会跳过它们去找其他有用的信息. 所以最好的方式就是移除这三个词, 直接以关键词汇作为标题开头.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 不要在标题中重复发件人信息.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;收件人会通过快速的瞄两眼标题和发件人信息来判断一封邮件的内容. 标题就那么大点地方… 还是不要浪费在重复性的信息上了吧.&lt;/p&gt;
&lt;p&gt;多年以来, Daillypuppy.com发送的每封邮件都是以DailyPuppy为开头:&lt;br&gt;&lt;i&gt;The DailyPuppy | Pictures of Puppies&lt;/i&gt;&lt;br&gt;重复使用发件人信息是一种非常浪费的行为, 因为本身提供不了更多的信息. 收件人又只能打开邮件才能看到详情. 更好的方法是把要说的狗狗品种直接放到subject中, 而不是无营养的dailypuppy…&lt;/p&gt;
&lt;p&gt;最近Daily Puppy修改了他们的subject, 加上了当日主题狗狗的品种和名称. 比如下面这个例子:&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Meet Pistachio the English Bulldog!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;这样的标题就非常清晰明了了, 而且没有什么多余的重复信息了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 避免使用收件人的名称&lt;/strong&gt;&lt;br&gt;有一些邮件的标题会出现订阅人的名称. 收件人往往会对这类邮件存有疑虑, 因为他们知道这个邮件不是特意写给自己的, 他们明白自己只是成千上万的收件人之一, 所以会担心自己的信息被泄漏. 绝大多数情况下, 在subject中加入收件人的名称是没有必要的, 反而不如加入一些有意义的词来的更好.&lt;/p&gt;
&lt;p&gt;收件人对于个人信息是非常敏感的, 所以一旦邮件中出现了他们自己的名字, 尤其是处于一个标题或者正常的句子中时… 比如, 来自Toys”R”US的邮件, 就会包含订阅者的名字:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/25/toysrus_nameinslwithborder.jpg&quot; alt=&quot;Toys“R”Us used the recipient’s name in the subject line and displayed it in all capital letters. This is a sneaky way to grab a person’s attention.&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果一定要在subject中使用收件人的名字, 那么如此做可能会减少一些问题:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;只用名字即可, 不用全程(名+姓);&lt;/li&gt;&lt;br&gt;    &lt;li&gt;只需要首字母大写就行;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;尽量避免收件人的名字出现在subject的第一位, 因为如此做的话用户就需要继续浏览后面的词才能获知更有价值的信息;&lt;br&gt;    &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/25/lowes_nameinslwithborder.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. 谨慎使用符号和特殊字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常使用心形符号, 星号或者其他的符号以及特殊字符都是为了获取收件人的注意力, 毕竟在众多的邮件中脱颖而出抓住收件人的眼球也是不容易的事情呢. 但是, 这样也就导致邮件看起来更像市场营销邮件而不是直接发送给个人的了.&lt;/p&gt;
&lt;p&gt;一些邮箱客户端还不支持特殊字符, 无法正常显示这类字符. 如果特殊字符或者符号需要使用的话, 请先测试一下多种客户端对其的支持性, 确保显示的正确性.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/25/carters_specialcharacterwithborder.jpg&quot; alt=&quot;The heart icon didn’t display in Hotmail. The subject line was supposed to read, “We [heart symbol] 50% Off Everything”.&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果一定要使用特殊字符, 最好不要用在标题的一开头. 尽量用在结尾和中间, 这样用户就能够先浏览那些有意义的词汇, 而不是一个符号.&lt;/p&gt;
&lt;p&gt;例如, Staples 就经常把一个太阳符号放在标题的开头. 收件人往往必须要掠过它才能看到后面有意义的内容. The Home Depot 在这一点做的更好一些, 它把星号符号放在了标题中间的位置.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/25/staples_specialcharacterswithborder.jpg&quot; alt=&quot;If special characters are used, don’t put them at the start of the subject line. Use information-carrying words instead.&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实可以用一些空格围绕在核心词两边, 也可以达到用特殊字符的效果的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要合理利用标题的每一个字母&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般官方组织的邮件都是要求词数的, 所以在发件人信息和标题的每一个用词都要尽量斟酌. 毕竟这通常是收件人决定是否打开邮件前唯一能够获得的信息了.&lt;/p&gt;
&lt;p&gt;想要了解更多的关于写邮件的一些指导, 请查看&lt;a href=&quot;http://www.nngroup.com/reports/email-newsletter-design/&quot; target=&quot;_blank&quot;&gt;Email Newsletter Design Report&lt;/a&gt;获取更多相关内容.&lt;/p&gt;
</summary></url><url><title>Define Stronger A/B Test Variations Through UX Research</title><loc>http://taoalpha.me/blog/2014/04/23/read-yi-define-stronger-ab-test-variations-through-ux-research/</loc><publish>2014-04-23T13:00:00.000Z</publish><summary>&lt;blockquote&gt;总结: 结合A/Btest来进行用户研究可以定位真正的问题同时做出更好的设计.&lt;/blockquote&gt;

&lt;h3&gt;&lt;strong&gt;A/B Split Testing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A/B测试允许网站通过在同一个页面上对比不同的变量, 从而找到最佳的选择. 在A/B test中使用的衡量标准分为微观和宏观两类, 而且A/B测试如今已经非常通用且随着引入的各种工具, 极大的简化了A/B测试, 是的A/B测试如今甚至不再需要开发或者其他技术资源的介入了. 这种方法如今在市场上已经站稳的脚跟, 而且, 因为它的低成本, 它在用户体验设计行业也越来越普及. 想Google, Amazon以及很多其他的电子商务网站更是以” 一直在测试, 从未被超越 “而出名~&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Garbage In, Garbage Out&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A/B测试用得好是一个非常强大的工具. 但是, 以下三种情况下使用A/B测试也会存在一些潜在的问题:&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;      &lt;li&gt;&lt;p&gt;变量不是完全对等于测试意图的. 虽然说糟糕的设计可以导致很差的体验–这是很明确的, 但是, 每一个设计都是对意图的一种实现, 想要单单通过一种设计方式去判断这种意图的好坏是很不客观的. 通常情况下, 都需要设计多个方案来评估一个意图. 比如, 你可能觉得给一个选项增加一段描述文本可以增加这个选项的点击率. 但是, 如果这个描述文本让这个选项看起来想一个广告的话, 它可能会直接被用户所忽略. 你的意图不错, 但是实施方案有问题. 所以关键在于要区分你的意图和具体实施的方案.&lt;/p&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;p&gt;变量本身没有切中问题要害. 因为错误的原因假设会导致最后的设计无法代表真实的问题. 即便研究的再透彻这个变量也不会解决实际的问题–因为方案本身是针对的就是一个无意义问题. 比如, 你可能会猜测贷款应用的提交量低是因为处理流程太复杂, 分步太多所致, 所以你把这些步骤合并到一屏中, 但是你依然无法发现增长的趋势. 实际上, 真正的问题是用户无法找到贷款的利率, 而他们一直坚持到最终的申请页是因为他们以为会在那里看到这个信息…&lt;/p&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;p&gt;变量的设计时基于猜想的. 利用A/B测试你只能寻找到你罗列的变量组合中最佳的一组. 而且如果说变量本身设计就是基于网络体验而言, 谁又能说这个测试包含了多数的优化设计方案呢?&lt;/p&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;这些实验中的瑕疵可以通过结合用户研究和A/B测试得到缓解. 即便是最小级别的用户研究也能帮助我们获取到很有价值的线索去分析可能的原因.&lt;/p&gt;
&lt;p&gt;不掩盖真相从而获得更好的变量分析.&lt;/p&gt;
&lt;blockquote&gt;一个理论要经得住实验的考证, 但是无数次实验也不能得出理论. –爱因斯坦&lt;/blockquote&gt;

&lt;p&gt;为了获得更好的A/B测试, 以下流程需要贯彻到每一个实验中.&lt;br&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/17/a-b-test-logic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可能需要穷尽一生去研究这种原因和变量假说, 然后用A/B测试来验证它们: 这是个体力活… 无计划的的A/B测试其实和把想法扔到墙上看看那个能黏住是一样的…不幸的是, 你还不能这样做: 这种方法会显著增加用户流失率以及糟糕的用户体验. 如果你想要靠这种方式来玩A/B测试的话, 用户可能会选择一个次优的设计. 他们甚至可能最终觉得你的网站就是个失败品, 然后再也不回来了. 你需要做减法, 把假设条件都降低到一个更小的范围, 然后谨慎小心的实施A/B测试; 我们推荐你用用户研究来辅助你做到这一点.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Four User-Experience Investigations to Improve Optimization Testing(四种用户体验调研方法来优化测试)&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;&lt;br&gt;      &lt;li&gt;&lt;strong&gt;Defining User Intent and Objections(定义用户的喜恶)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;理解用户为什么访问, 他们的需求是否达成, 以及为什么他们最终离开? 如果你错误的理解了用户为什么来, 那么你最终设定的基础变量就是有问题的, 就不能反映真实的情况. 不做任何调研的去制定变量是非常危险的. 比如, 假设你认为访问者没有按照你的预期来继续拧的原因是因为你的定价太高, 所以你下调了定价希望能有效果. 但最终发现真实原因不是因为价格, 而是因为他们不能理解你的服务的需求在哪里, 如此一来你就可能保不住你的饭碗了…&lt;/p&gt;&lt;br&gt;      &lt;p&gt;如何定义用户的喜好呢? 只需要一个简单的网站调查就行了(可以通过类似Qualaroo的的服务), 在用户浏览的时候或者退出网站的时候, 或者跟在服务之后提出就行, 调查只需要提两个问题就行:&lt;br&gt;        &lt;ol&gt;&lt;br&gt;              &lt;li&gt;你是因什么而来访?&lt;/li&gt;&lt;br&gt;              &lt;li&gt;你的目的达成了吗? 如果没有的话, 为什么?&lt;/li&gt;&lt;br&gt;        &lt;/ol&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Exposing interface flaws(找到用户界面的瑕疵)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;      &lt;p&gt;如果你忽视了那些明显的可用性问题: 比如复杂的交互流程或者容易产生误解的提示, 那么即便利用A/B测试你也很难得出什么结论的, 因为你设计的变量并没有直指要害. 比如: 如果你有一个包含了几个输入框的表格, 希望能够获取一些用户不太愿意提供的信息, 然后你通过A/B测试来研究一下改变提交按钮的颜色是否会影响用户的提交率… 这当然纯属浪费时间…&lt;/p&gt;&lt;br&gt;  &lt;p&gt;理解转化率低的真正原因对于建立有效的, 成功的实验而言是至关重要的. &lt;/p&gt;&lt;br&gt;      &lt;p&gt;那么如何找到用户界面真正的瑕疵呢: 利用可用性测试(远程或者当面的), 是一个比较便捷的方式, 而且只需要5个人就可以帮助你发现85%的瑕疵了.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Measuring findability(让可寻找性可以量化)&lt;/strong&gt;&lt;br&gt;      &lt;p&gt;导航标签以及菜单设计实验经常遇到findability(可寻性)的问题. 然而, 糟糕的findability还是应该在A/B测试之前来确认, 它会影响到信息结构和导航浏览. (你可以从我们为期2天的信息结构课程中学到更多相关知识)&lt;/p&gt;&lt;br&gt;      &lt;p&gt;如何衡量findability: Tree测试可以帮助衡量一个当前信息架构中元素的findability, 而且不会因为界面设计有任何影响. 他们可以告诉你你的标签, 链接组, 层级结构或者命名是否够直观. 如果你对如何命名你的结构,页面, 链接以及标签, 这种测试就可以帮助你定位到那些最有问题的命名, 同时帮助你去设计新的标签来帮助你提升findability. Tree测试可以结合Optimal Workshop的Treejack一同使用, 这个工具可以允许你去建立一个针对信息结构的测试.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;strong&gt;Cleaning up design variations before going live(真实测试前请先进行空白实验)&lt;/strong&gt;&lt;br&gt;      &lt;p&gt;用户测试最简单的应用就是通过去除一些模块. 几个小时的实验就可以反映出你的设计中糟糕的东西. 虽然那些高级的用户调研表有很多的优点, 但是千万不要忽略那些空白实验. 对于A/B测试, 如果你希望你的变量之间是均等的, 不受可用性问题的干扰, 能够让客户获得每个变量的全部特点, 那么请先校正这些变量, 去除所有干扰因素.&lt;/p&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;h3&gt;&lt;strong&gt;Combine Methods to Maximize Conversions&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A/B测试是个伟大的工具, 但是不幸的是, 它可以被很糟糕的使用. 如果A/B测试用于研究之中, 那么变量的设计是至关重要的. 你可以通过合适的用户研究来提升你的变量设计, 更精准的定位到真实的原因, 获得更实际的猜测, 同时找到更多的实验机会, 从而提升最终的结果.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/h4&gt;. 本人不是专业的翻译, 甚至连业余的也算不上~　比起CDC的翻客同学们更是差距巨大, 翻译这些HCI的文章只是个人的一些兴趣, 因为翻译本身是一种阅读和理解的过程, 所以我也是通过这种方法来让自己对文章有更好的理解~ 所以有任何不恰当之处, 都希望大家随意指出~ 帮助我完善这些文章~ ^_^&lt;p&gt;&lt;/p&gt;
</summary></url><url><title>Compassion - How can we find compassion for people we hate?</title><loc>http://taoalpha.me/blog/2014/05/01/read-yi-compassion-how-can-we-find-compassion-for-people-we-hate/</loc><publish>2014-05-01T06:00:00.000Z</publish><summary>&lt;p&gt;与之前的译文不同, 本文来源是quora的一个问答, 我也是在quora的rss推送中看到的, 觉得值得一看所以特别翻译了一下.&lt;/p&gt;
&lt;p&gt;Question: Compassion: How can we find compassion for people we hate?&lt;/p&gt;
&lt;p&gt;问题: 包容: 面对我们憎恨的人我们怎么才能产生包容心呢?&lt;/p&gt;
&lt;p&gt;Answer:&lt;/p&gt;
&lt;p&gt;我这么牛逼, 还真没发现谁能让我对他们产生恨意… 你也应该这样想.&lt;/p&gt;
&lt;p&gt;憎恨是意见多痛苦, 多无聊, 多懦弱的事情啊. 它还能影响你的身心, 甚至破坏你的潜能.&lt;/p&gt;
&lt;p&gt;所以我尝试不去憎恨. 但是我确实会对一些人很恼怒. 而对此, 我的处理方法是这样的, 我称之为”Drilldown method”(剥洋葱法–译者观点.)&lt;/p&gt;
&lt;p&gt;我问自己为什么我会生这个人的气. 然后再问自己为什么是这个原因呢? 如此一层层的问… 知道找到我愤怒的最根本原因.&lt;/p&gt;
&lt;p&gt;通常最后会变成”因为这个人让我觉得…”, 并不涉及到这个人本身, 我愤怒的原因是因为我试图保护自己的弱点和劣势, 因为我害怕了…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qph.is.quoracdn.net/main-qimg-fd2890bbc3a172c734eb66037f55a511?convert_to_webp=true&quot; alt=&quot;starwar&quot;&gt;&lt;br&gt;“总是从你自己的恐惧开始”&lt;/p&gt;
&lt;p&gt;如果我找到自己所恐惧的, 并且努力去弥补它, 那谁还闲着没事干去憎恨别人呢? 反正我不会… 不值得嘛.&lt;/p&gt;
&lt;p&gt;举个例子:&lt;/p&gt;
&lt;p&gt;假设我现在对在quora上写我坏话的人很愤怒. 我可能会非常非常生气甚至可能会发展到憎恨.&lt;/p&gt;
&lt;p&gt;于是我们分析一下:&lt;/p&gt;
&lt;p&gt;我问自己, 为什么我要愤怒甚至憎恨这个人? 因为他们就是一群混蛋. 但是这和我有什么关系呢? 因为他们完全没有根据的来评判我. 但是为什么这会让我觉得不爽呢? 因为他们觉得我写的东西就是一坨屎. 但是为什么这会影响到我呢? 因为….如果他们说的是对的呢?!&lt;/p&gt;
&lt;p&gt;我勒个去…. 原来我的不安全感就来源于此啊, 而这也是我需要去克服的. 因为如果我自己没有感到不安全, 那么我就可以简单的把这些评论当作有价值的建议(或者当作放屁也行), 而不是去愤恨什么人. 对吧.&lt;/p&gt;
&lt;p&gt;这意味着我希望和这个人成为好友吗? 当然不是, 那这意味着我原谅甚至赞许他们的行为吗? 肯定也不是. 这只是表示我不会憎恨他们.&lt;/p&gt;
&lt;p&gt;唤醒自己的包容心是比较难的. 它始终都在, 你不可能做到随时随地的包容, 所以你必须从强迫自己遇到这类事情后, 可以先从包容的一面开始. 我发现一旦我克服了愤怒或者憎恨, 我就能看到这个人身上更多积极的部分, 以及可能导致他们形成这种认知的原因. 如此一来, 包容就会自然而然了.&lt;/p&gt;
&lt;p&gt;不过, 也有些时候, 当我发现自己最后也无法找到包容的点, 这种情况就只能比较遗憾了.&lt;br&gt;虽然不是什么新颖的概念, 但确实是我自己的体会. 我可能需要考虑如何去弥补一下那种一直无法找到包容点的情况…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quora.com/Compassion/How-can-we-find-compassion-for-people-we-hate&quot; target=&quot;_blank&quot;&gt;Quora 原文&lt;/a&gt;&lt;/li&gt;

</summary></url><url><title>Beware Horizontal Scrolling and Mimicking Swipe on Desktop</title><loc>http://taoalpha.me/blog/2014/05/03/read-yi-beware-horizontal-scrolling-and-mimicking-swipe-on-desktop/</loc><publish>2014-05-03T04:00:00.000Z</publish><summary>&lt;p&gt;摘要: 即便现在越来越多的站点开始模仿滑动手势以及在PC上非常不适合的横向滑动设计, 用户依然非常不适应这种浏览方式的.&lt;br&gt;多年一来, 我们一直都知道横向滚动本身对于桌面电脑而言都是难言的痛点. 即便是随着移动设备的普及, 用户逐渐接受了触摸手势是用来浏览内容的, 但是用户在桌面电脑上访问网站时, 依然不会习惯横向滚动的. 本文主要描述了当前触屏交互方式应用到桌面电脑上的一些问题所在, 以及提供了一些备选和建议, 关于如何帮助用户形成这种习惯. 很明显, 你在非触摸屏下是不能使用触摸手势操作的; 所以本文中会以”滑动”(加引号)来表示在桌面电脑上的这一操作.&lt;/p&gt;
&lt;h3&gt;横向滚动的诱惑&lt;/h3&gt;

&lt;p&gt;在桌面电脑上, 长篇内容型网站的通常交互形式都是纵向的滚动. 鼠标和滚轮本身的上下操作也让这种滚动方式非常简单, 这也就强化了这一行为模式.&lt;/p&gt;
&lt;p&gt;那些试图打破这一习惯, 调整网页布局为左右形式的网站, 通常是因为一下几个原因:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Consistency across devices(跨平台的统一性).&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;在移动设备的研究表明横向的滚动模式更为常见, 且用户本身也比较享受这种通过滑动手势来切换的交互形式. 同时那些响应式或者移动优先的站点更是把横向滑动推向了全平台, 当然包含了桌面电脑, 因为一个设计贯穿全平台更能节省成本, 更容易实现而且能够传递一种始终如一的体验一致性. 但是, 因为横向滚动在桌面电脑上并不那么的通用, 用户通常不知道他们可以通过”滑动”来浏览更多的内容. 随着人们区别对待移动设备和桌面设备, 这种”一变应万变”的方法的问题也逐渐暴露了. 关键点在于用户认为的一致性, 是他们在当前设备上浏览网站的各个部分时, 其风格是一致的, 他们很难记住这一习惯或者某个网站的某一交互形式然后带到不同的设备同一网站之中去. &lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Browsing through nonessential content(浏览那些不重要的信息).&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;并不是所有的信息都是非常关键的. 对于很多辅助信息, 比如说一个图册, 横向滚动本身可以在给用户一个初步的了解的同时提供让用户快速的”滑动”来点击更多内容的可能. 对于一些内容, 用户即便整个过程中都不滚动也是没有问题的. 只要你确认你没有把核心的内容放到一个横向滚动条中, 因为那样的话, 有些人是不会看到的.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Saving vertical screen space(节省纵向的空间)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;为了不让因为整个内容展现而产生一个个长长的页面, 横向布局把信息分成了一个个部分, 每次用户只需要看一部分. 同时布局本身也足够灵活, 易扩展, 因为内容既可以横向添加也可以纵向添加(译者: 让我想起来以前很流行的一种交互: 上下左右翻的那个cube设计)&lt;/p&gt;&lt;br&gt;        &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/23/hulu-stacked-filmstrips.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;i&gt;Hulu.com: 影片按照分类堆叠, 这样用户既能在一个分类下通过”滑动”看到更多的内容, 又能上下滚动查看不同的分类. 这种两维的应用可以帮助用户看到更多的选择而不需要访问不同的页面.&lt;/i&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Showcasing a distinctive design(为了展示与众不同)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;很多站点, 尤其是那些艺术家的或者数字广告公司, 通常会利用横向滚动来让自己的站点能够在众多的网站中脱颖而出, 同时秀一下自己的设计水平. 但同时, 对于多数主流网站, 为了不同而不同就是一个非常不糟糕的设计方式了.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;The Risks of Horizontal Scrolling on the Desktop(在桌面电脑上使用横向滚动的风险)&lt;/h3&gt;&lt;br&gt;虽然横向滚动多数情况下也能勉强接受, 但是应用的时候也请谨慎使用. 要注意: 横向滚动是桌面电脑中少数的几种能够始终让用户生负面反馈的交互形式之一.(有趣的是. 因为对它的蔑视非常的广泛, 我经常利用它来向不熟悉用户体验领域的人阐述用户体验是什么. 我会问他们能够想象一个网站是横向滚动的, 他们通常会抱怨自己讨厌这种方式, 然后我就会解释我们是如何看到这个事情以及我们是如何试图让它变好的. 通常他们会回答: “太赞了, 你这样的人越多越好啊”).&lt;p&gt;&lt;/p&gt;
&lt;p&gt;虽然”滑动”本身在desktop上不会像横向滚动条一样产生同等的负面效应, 但是它同样面临类似的风险. 我们来看下3个为什么横向滚动和”滑动”在desktop上会出现为问题的原因:&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;The traditional horizontal scrollbar burdens the user by requiring constant attention and greater physical effort to maintain the dragging.(传统的横向滚动条会加重用户的负担, 因为它们需要持续的注意力以及为维持拖拽动作需要更多的物理消耗)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;多数人是利用滚动条来滚动的, 而不是箭头. 然而, 在这么狭小的一个槽中移动鼠标是个非常困难的操作, 因为它要操作者更加的细心, 来操作鼠标. (这可以算是steering law[ 用户在一个槽中移动鼠标的时间取决于槽的宽度和长度: 槽越长越细, 用户从一端到另一端所花费的时间就越长.]的一个范例, steering law是从Fitt’s law[我们在HCI课程中讨论过]中衍生的.) 因此, 利用滚动条在desktop上是一个非常高成本的交互行为, 而且很容易降低用户的浏览速度. 在最近的一个用户测试中, 一个参与者在滚动浏览一个产品列表时非常的郁闷, 他抱怨道”这个滚动条仿佛要话费我一生的时间去滚动一样…”.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Users may ignore content accessible through horizontal scrolling or “swiping” as they don’t expect content there.(用户可能会忽略滚动或者”滑动”出现的内容, 因为他们对这些没有预期.)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;我们的研究发现即便是很强的引导, 比如箭头, 也经常会被忽视. 人们对于更多内容的展现, 通常期待的都是纵向的滚动操作, 而不是横向. 横向滚动违反了他们长期形成的网页浏览模式.&lt;/p&gt;&lt;br&gt;        &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/23/apple-filmstrip-heatmap.png&quot; alt=&quot;Eyetracking heatmap of filmstrip&quot;&gt;&lt;br&gt;        &lt;p&gt;Apple.com: 这个视觉热图显示的是一个用户是如何查看一个产品图片的影集的, 他们连看都没看箭头一眼, 这样也就导致他们永远不会看到影集中的其他图片.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Even obvious cues for horizontal scrolling have weak information scent.(即便是再清晰的横向滚动引导依然缺乏有效的信息)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;即便用户注意到了横向滚动的引导, 他们也不一定会冒着不知道加载什么东西的预期来去点击的. 横向滚动隐藏的内容处于一个非常劣势的位置, 因为即便是在醒目的视觉引导也不能提供足够的信息: 用户通常很难猜测他们点击后会获得什么. 而对于那种整个页面都”滑动”到新的内容, 就更不用说这种失望的风险就更高了: 用户可能需要等待整个页面加在完全才知道新页面对于他的需求而言没有任何意义…&lt;/p&gt;&lt;br&gt;        &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/23/usatoday-slider-arrow.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;USAToday.com: 用户会忽视页面上的箭头, 因为完全不知道点击后会发生什么? 当被问道用户这些箭头的事情时, 一个用户说”我不会点的 , 我只想看那些我想看的东西”.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Recommendations for Implementing Horizontal Scrolling or “Swiping” on the Desktop(对于想要在desktop上应用横向滚动和”滑动”操作的建议)&lt;/h3&gt;&lt;br&gt;如果你正在考虑在desktop上模拟滑动手势或者使用横向滚动时, 请遵循以下的建议来让你的用户更容易注意到以及获取到你的内容.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Don’t make “swiping” the primary navigation on your site.(不要把”滑动”作为你站点的主要导航)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;不要强迫用户”滑动”浏览你的内容: 一些人可能会, 一些人可能不会, 他们会直接离开的. 允许一些备选的方式: 比如给用户一些选项, 允许他们可以可以根据导航菜单来浏览. 菜单会告诉用户你的站点上都有什么, 并且帮助他们找到他们想要的信息. 用户一来他们去深入了解你的站点以及在不同的分类下切换. 没有全局导航的话, 用户就很难浏览来发现更多的内容了.&lt;/p&gt;&lt;br&gt;        &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/23/dennys-global-nav-and-swipe.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;Dennys.com:  这个设计中就提供了非常清晰的全局导航, 弥补了只有箭头的不足. 在测试这个站点时, 一个用户从来没有使用过箭头来切换不同的页面, 他完全只用全局导航来操作, 而且也完成了所有的任务. 同样注意的是: 左右两边保留部分可见内容给用户了一定的预期, 这样当切换的时候内容切换就不会觉得那么的突兀了.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Don’t make users guess how much content is left.(不要让用户去猜测还有多少内容)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;利用滚动条或者翻页导航来显示用户还有多少内容. 最好的是时刻告诉用户他在哪, 这样他就能更好的指引他自己. 告诉用户还剩多少, 他们就可以决定他们还要看多少, 或者, 对于一个循环来说, 用户需要在他们回到起点的时候知道他们回来了.&lt;/p&gt;&lt;br&gt;        &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/23/amazon-filmstrip-pagination.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;Amazon.com: 页码以及回到初始的链接都提供了非常有用的情景来告诉用户他们还剩多少以及如何快速回到初始.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;br&gt;        &lt;strong&gt;Create obvious, visible cues for horizontal swiping.(给与明显的, 可见的横向滚动引导)&lt;/strong&gt;&lt;br&gt;        &lt;p&gt;让用户可以利用点击和键盘浏览网页. 如果箭头只有在hover的时候才出现(比如Netflix的例子中[见下]), 用户可能甚至都不会发现这还有更多的内容. 无论对于但页面还是carousel, 都应该突出那些点击区域, 方便用户点击获取更多内容.&lt;/p&gt;&lt;br&gt;        &lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/04/23/netflix-no-arrow-until-hover.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;        &lt;p&gt;Netflix.com: 在netflix页面的常态中, 完全看不到任何提示有更多内容的线索(图上位置). 箭头只有在hover后才会显示出来(图下). 另外, 为了看一个分类下的更多影片, 用户必须得hover到箭头上, 一旦他们这么做了,  这个分类就会自动开始滚动, 如果用户想要看到更多, 就必须得一直hover在箭头区域. 这个交互不仅需要花费更多的精力和注意力, 同时还很慢而且很容易产生眼花撩轮的感觉… 而不是觉得有趣… 即便是点击一下然后滑动都比这个好一些…&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Conclusion(结论)&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;滚动和横向”滑动”在desktop上和手机或平板上是完全不同的两种体验. 这也是一个很好的例子去了解为什么用户会区别对待他们的手机, 平板和desktop, 以及为什么要根据不同的使用场景来优化设计会很有好处. 避免为了突出而破坏习俗, 或者为了解决多平台的问题就放弃习惯. 你应该评估一下自己的用户到底适不适合横向滚动, 这样你才能确定你的设计能够提升他们的体验而不是降低这一点. &lt;/p&gt;&lt;br&gt;&lt;p&gt;你可以通过我们的&lt;a href=&quot;http://www.nngroup.com/courses/web-page-design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Page Design 课程&lt;/a&gt;来了解更多横向滚动, carousel以及胶卷式设计的相关知识, 以及如何应用这些知识.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links: &lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nngroup.com/articles/horizontal-scrolling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址: Beware Horizontal Scrolling and Mimicking Swipe on Desktop&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://callmet.zzgary.info/2014/05/03/yi-why-users-arent-clicking-your-home-page-carousel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carousel相关的一篇文章, 印证了本文的一些观点.&lt;/a&gt;&lt;/li&gt;

</summary></url><url><title>Advanced Objects in JavaScript</title><loc>http://taoalpha.me/blog/2014/08/29/read-yi-advanced-objects-in-javascript/</loc><publish>2014-08-29T07:00:00.000Z</publish><summary>&lt;p&gt;JS算是我最常用的集中语言之一了, 而随着nodejs的出现, js终于成为了一款贯通前后端的语言~ High five for this!&lt;/p&gt;

&lt;p&gt;JS的Object可以说是应用极为广泛! 那么除了我们通常的那些用法, 对Objects还有什么高级用法吗?&lt;/p&gt;

&lt;p&gt;========正文====本文来自: Readability Top Reads==========&lt;/p&gt;

&lt;p&gt;与通常我们使用JS中Object的方法不同, 本文中涉及的要更加高端. JS的Objects的基础使用中绝大部分都会和使用json一样的简单. 但是, JS同时也提供了更加复杂的工具来创建Objects, 而且更加有趣也更加有意义, 其中很多在现代的浏览器中都已经得到支持了.&lt;/p&gt;

&lt;p&gt;本文中最后谈及的&lt;em&gt;&lt;em&gt;Proxy&lt;/em&gt;&lt;/em&gt;和&lt;em&gt;&lt;em&gt;Symbol&lt;/em&gt;&lt;/em&gt;, 是基于ECMAScript 6的一些特性, 目前在跨浏览器方面还不是很完善.&lt;/p&gt;

&lt;h4&gt;Getters and setters&lt;/h4&gt;

&lt;p&gt;Getters和Setters存在与JS中已经有一段时间了, 但是通常很少会用到. 我通常还是会使用常规的函数来获取一些属性. 比如, 我通常都是使用如下这样的函数来实现:&lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125; prefix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prefix&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @type &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prefix_ = prefix;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @type &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_ = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125; newType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Product.prototype.setType = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newType&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_ = newType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @return &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Product.prototype.type = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prefix_ + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; product = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;string&quot;&gt;&quot;fruit&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;product.setType(&lt;span class=&quot;string&quot;&gt;&quot;apple&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type());  &lt;span class=&quot;comment&quot;&gt;//logs fruit: apple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/26/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;利用getter的话, 我就可以简化这一代码:&lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125; prefix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prefix&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @type &amp;#123;number&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prefix_ = prefix;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @type &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_ = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125; newType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Product.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get type () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prefix_ + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set type (newType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_ = newType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; product = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;string&quot;&gt;&quot;fruit&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;product.type = &lt;span class=&quot;string&quot;&gt;&quot;apple&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type); &lt;span class=&quot;comment&quot;&gt;//logs &quot;fruit: apple&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type = &lt;span class=&quot;string&quot;&gt;&quot;orange&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//logs &quot;orange&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type); &lt;span class=&quot;comment&quot;&gt;//logs &quot;fruit: orange&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面的代码明显还是有些罗嗦的, 而且语法显得很不寻常, 但是&lt;em&gt;&lt;em&gt;set&lt;/em&gt;&lt;/em&gt;,&lt;em&gt;&lt;em&gt;get&lt;/em&gt;&lt;/em&gt;的好处就是在使用的时候更加易于理解. 后来我发现如下这样的好东西:&lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;roduct.type = &lt;span class=&quot;string&quot;&gt;&quot;apple&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比下面这样可读性更强也更容易接受吧:&lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;product.setType(&lt;span class=&quot;string&quot;&gt;&quot;apple&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然直接的获取以及设定用例的属性还是略微有些违反我已经形成的固有习惯. 长久以来我们都在bugs和技术问题的训练中养成了避免直接对用例赋值的’好习惯’. 同时, 还有一点则是为了返回值的问题. 比如注意上例中这两句:&lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type = &lt;span class=&quot;string&quot;&gt;&quot;orange&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//logs &quot;orange&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(product.type); &lt;span class=&quot;comment&quot;&gt;//logs &quot;fruit: orange&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意上例中,”orange”先输出, 然后输出”fruit: orange”. 在赋值命令的return中, getter是不会被触发的. 所以如果想要通过赋值语句来获取属性值是行不通的. 其实对于&lt;em&gt;&lt;em&gt;set&lt;/em&gt;&lt;/em&gt;部分,  return是会被直接忽略的. 所以你即便在setter中加入&lt;code&gt;return this.type;&lt;/code&gt; 也是没有意义的. 通常来说赋值后的默认返回值是可以直接使用的, 除非是本身有另一套的getter.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;defineProperty&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;get propertyname()&lt;/code&gt; 语法可用于对象标识符, 在前面的例子中, 我曾经给&lt;code&gt;Product.prototype&lt;/code&gt;赋予了一个对象标识符. 本来没啥问题, 但是使用这样的对象标识符会导致prototypes之间链接以实现继承变得更加困难. 此时你就可以使用&lt;code&gt;defineproperty&lt;/code&gt;而不用对象标识符来创建getters和setters了.&lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125; prefix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prefix&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @type &amp;#123;number&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prefix_ = prefix;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @type &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_ = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125; newType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(Product.prototype, &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @return &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.prefix_ + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * @param &amp;#123;string&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newType&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type_ = newType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面的代码和之前的例子效果完全一样. 于之前的例子不同, &lt;em&gt;defineProperty&lt;/em&gt;的第三个参数称为descriptor, 而且其中除了设置&lt;em&gt;set&lt;/em&gt;和&lt;em&gt;get&lt;/em&gt;以外, 还允许你去定制一些属性以及对应值. 你可以利用descriptor参数来创建一些类似常量之类的这种无法被改变和删除的属性. &lt;/p&gt;


&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//A normal object property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; obj.foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.test); &lt;span class=&quot;comment&quot;&gt;//logs undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;bar&quot;, we were able to modify foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;bar&quot;, write failed silently&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; obj.foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs bar, delete failed silently&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上例最后两次对&lt;em&gt;foo.bar&lt;/em&gt;的更改尝试都以失败结束. 这是因为&lt;em&gt;defineProperty&lt;/em&gt;默认阻止对内置属性的改变. 你可以利用&lt;em&gt;configurable&lt;/em&gt;和&lt;em&gt;writable&lt;/em&gt;来修改这一行为. 如果你使用的是stric mode, 那么错误信息就不会静默而是转化为js错误输出的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; obj.foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.test); &lt;span class=&quot;comment&quot;&gt;//logs undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中, &lt;em&gt;configurable&lt;/em&gt;键值允许你控制属性值能否被删除. 它同时还允许你控制属性值能否被修改. 而&lt;em&gt;writable&lt;/em&gt;键值则允许你去给属性赋值进行修改.&lt;/p&gt;
&lt;p&gt;如果&lt;em&gt;configurable&lt;/em&gt;设定为false(默认), 那么你再次调用&lt;em&gt;defineProperty&lt;/em&gt;定义同变量的时候就会造成js的错误, 而且会抛出异常而不是静默处理的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Uncaught TypeError: Cannot redefine property: foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/11/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而如果你设定&lt;em&gt;configurable&lt;/em&gt;为true, 那么你就可以再次利用&lt;em&gt;defineProperty&lt;/em&gt;对属性值进行修改. 比如你可以对原本不可写的属性进行修改.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &amp;amp;quot;foo&amp;amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     value: &amp;amp;quot;bar&amp;amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; obj.foo = &amp;amp;quot;foobar&amp;amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;// logs &amp;amp;quot;bar&amp;amp;quot;, write failed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &amp;amp;quot;foo&amp;amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     value: &amp;amp;quot;foobar&amp;amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;// logs &amp;amp;quot;foobar&amp;amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfilddle&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;同时还要注意下, 任何由&lt;code&gt;defineProperty&lt;/code&gt;定义的属性都不能在&lt;code&gt;for in&lt;/code&gt;循环中出现的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i, inventory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; inventory = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;amp;quot;apples&amp;amp;quot;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;amp;quot;oranges&amp;amp;quot;: &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(inventory, &amp;amp;quot;strawberries&amp;amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     value: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; inventory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i, inventory[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/13/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上述循环会输出如下结果:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apples &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oranges &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们用&lt;code&gt;enumerable&lt;/code&gt;键值来允许属性值在for in循环中出现:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i, inventory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; inventory = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;amp;quot;apples&amp;amp;quot;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;amp;quot;oranges&amp;amp;quot;: &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(inventory, &amp;amp;quot;strawberries&amp;amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     value: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     enumerable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; inventory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i, inventory[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;&lt;br&gt;上述则会输出:&lt;br&gt;&lt;br&gt;apples 10&lt;br&gt;oranges 13&lt;br&gt;strawberries 3&lt;br&gt;&lt;br&gt;&lt;br&gt;你还可以利用&lt;code&gt;isPropertyEnumerable&lt;/code&gt;来测试一个属性是否能够出现在循环中.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i, inventory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; inventory = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;amp;quot;apples&amp;amp;quot;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;amp;quot;oranges&amp;amp;quot;: &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(inventory, &amp;amp;quot;strawberries&amp;amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     value: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(inventory.propertyIsEnumerable(&amp;amp;quot;apples&amp;amp;quot;)); &lt;span class=&quot;comment&quot;&gt;//console logs true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(inventory.propertyIsEnumerable(&amp;amp;quot;strawberries&amp;amp;quot;)); &lt;span class=&quot;comment&quot;&gt;//console logs false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/mohb4fx2/21/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfilddle&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;code&gt;isPropertyEnumerable&lt;/code&gt;对于在prototype其它环节定义的属性值也会默认返回false的, 当然对于以其他形式定义的, 只要是属于这个object的属性都会默认返回false的.&lt;/p&gt;
&lt;p&gt;最后还有几点关于使用&lt;code&gt;defineProperty&lt;/code&gt;的注意项: 结合使用&lt;code&gt;set&lt;/code&gt;,&lt;code&gt;get&lt;/code&gt;和设定为true的&lt;code&gt;writable&lt;/code&gt;键值, 或者是&lt;code&gt;set&lt;/code&gt;,&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;value&lt;/code&gt;直接放在一起也是错误的做法.  把一个属性设定为一个数型值, 只会把这个数值转化为一个字符串的(这个在所有情况下都是一样的). 在&lt;code&gt;defineProperty&lt;/code&gt;中你也是可以把&lt;code&gt;value&lt;/code&gt;定义为函数的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;defineProperties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;defineProperty&lt;/code&gt;, Object还有&lt;code&gt;Object.defineProperties&lt;/code&gt;. 可以允许你一次性定义以多个属性. &lt;a href=&quot;http://jsperf.com/defineproperty-vs-defineproperties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有篇文章&lt;/a&gt;对比过两者的区别, 不过就Chrome而言, 两者并无太明显的差别.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperties(foo, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.bar = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.foo();  &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/rxopg5qe/1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Object.create&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt;和&lt;code&gt;new&lt;/code&gt;是基本一样的, 都可以允许你创建一个新的对象. 函数本身有2个参数, 一个是对象的prototype, 另一个则是property descriptor, 其的传参方式则和&lt;code&gt;Object.defineProperties&lt;/code&gt;完全一致.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototypeDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protoBar: &lt;span class=&quot;string&quot;&gt;&quot;protoBar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protoLog: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.protoBar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propertiesDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    instanceBar: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;string&quot;&gt;&quot;instanceBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    instanceLog: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instanceBar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.protoLog(); &lt;span class=&quot;comment&quot;&gt;//logs &quot;protoBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.instanceLog(); &lt;span class=&quot;comment&quot;&gt;//logs &quot;instanceBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/pqdcxnep/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在property descriptor中传入的属性值会覆盖掉prototype的同属性值.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototypeDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar: &lt;span class=&quot;string&quot;&gt;&quot;protoBar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propertiesDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;string&quot;&gt;&quot;instanceBar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.log(); &lt;span class=&quot;comment&quot;&gt;//logs &quot;instanceBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/pqdcxnep/2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置一个高级类型, 比如array或者object作为Object.create的传参可能会导致一些错误, 因为你将会创建一个所有对象共用的单例(变量会互串,公用单例的对象之间相互影响).&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototypeDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protoArray: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propertiesDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    propertyArray: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.protoArray.push(&lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar.protoArray); &lt;span class=&quot;comment&quot;&gt;//logs [&quot;foobar&quot;] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.propertyArray.push(&lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar.propertyArray); &lt;span class=&quot;comment&quot;&gt;//also logs [&quot;foobar&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/pqdcxnep/4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然, 你可以通过初始化&lt;code&gt;propertyArray&lt;/code&gt;为null来解决之前的问题. 如此你就可以随便使用任意的array了, 甚至可以做更多的事情, 比如使用getter:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototypeDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protoArray: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propertiesDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    propertyArrayValue_: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    propertyArray: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.propertyArrayValue_) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.propertyArrayValue_ = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.propertyArrayValue_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.protoArray.push(&lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar.protoArray); &lt;span class=&quot;comment&quot;&gt;//logs [&quot;foobar&quot;] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.propertyArray.push(&lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar.propertyArray); &lt;span class=&quot;comment&quot;&gt;//logs []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/pqdcxnep/5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化属性值是一个很便捷的方式. 我通常会比较喜欢在工作中把各项属性值都初始化的. 过去我的代码中经常会出现这样的初始化代码.&lt;/p&gt;
&lt;p&gt;之前的例子告诉你: 一旦property descriptor定义好了, 那么其中的所有属性值都自动生成了(PS. 这块翻译表述不很准确, 请参照原文.). 这也是为什么一个数组会跨实例共享的原因. 我同样推荐千万不要在多个属性值调用时过分依赖代码的顺序. 如果你一定要在其他属性调用前初始化属性, 那么也许可以直接在实例中使用&lt;code&gt;Object.defineProperty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;因为使用Object.create并不包含一个constructor的函数, 所以你就不能使用&lt;code&gt;instanceof&lt;/code&gt;来测试对象所属. 所以我们用&lt;code&gt;isPrototypeOf&lt;/code&gt;来确定它是哪个prototype的对象. 使用形式可以使用constructor的形式:MyFunction.prototype.isPrototypeOf或者直接使用Object.create的第一个参数来调用也是一样的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototypeDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protoArray: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propertiesDef = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    propertyArrayValue_: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    propertyArray: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.propertyArrayValue_) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.propertyArrayValue_ = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.propertyArrayValue_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//old way using instanceof works with constructors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo1 &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Foo); &lt;span class=&quot;comment&quot;&gt;//logs true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//You check against the prototype object, not the constructor function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(Foo.prototype.isPrototypeOf(foo1)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo2 = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(prototypeDef, propertiesDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//can't use instanceof with Object.create, test against prototype object...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...given as first agument to Object.create&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(prototypeDef.isPrototypeOf(foo2)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/pqdcxnep/6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isPropertyOf&lt;/code&gt;会遍历整个prototype链直到找到符合检验对象的后就会返回true.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo1Proto = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo2Proto = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(foo1Proto);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo2Proto.bar = &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(foo2Proto);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo.foo, foo.bar); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foo bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo1Proto.isPrototypeOf(foo)); &lt;span class=&quot;comment&quot;&gt;// logs true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo2Proto.isPrototypeOf(foo)); &lt;span class=&quot;comment&quot;&gt;// logs true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/pqdcxnep/7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sealing objects, freezing them and preventing extensibility(如何封装对象来阻止其扩展性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只是因为可以就给Object增加各种任意的属性是非常不好的. 在现代的浏览器和node.js的结合下, 已经可以实现限制整个Object从而限制某些单个的属性的变化了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;, &lt;code&gt;Object.seal&lt;/code&gt; 和 &lt;code&gt;Object.freeze&lt;/code&gt;三个函数对Object的限制程度依次增加. 在限制模式下, 一旦出现违反其规则的行为就会抛出js的异常错误的, 而在正常的模式下, 这些错误并不影响代码的正常运行的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;将阻止Object中属性的新增. 它不会阻止那些现有可写入属性的改变, 也不会阻止属性的删除. 而且它也不会阻止调用defineProperty来修改已知属性.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.bar = &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// logs Object &amp;#123;foo: &quot;foo&quot;, bar: &quot;bar&quot;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.preventExtensions(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; obj.bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// logs Object &amp;#123;foo: &quot;foo&quot;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.bar = &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// still logs Object &amp;#123;foo: &quot;foo&quot;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;// logs &amp;#123;foo: &quot;foobar&quot;&amp;#125; can still change values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/dwyuz997/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.seal&lt;/code&gt;比preventExtensions更进一步. 它不只会阻止新增属性, 还会阻止修改属性配置以及删除属性. 一旦object被密封后, 你就不能通过defineProperty来对现有属性进行修改了. 如上所说, 一旦你尝试, 就会报错的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;use strict&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.seal(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Uncaught TypeError: Cannot redefine property: foo &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/dwyuz997/6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你同样也不能删除任何属性了, 即便它们是设定为可配置的也不行(configurable设定为true). 但是你可以修改这些属性的value.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;use strict&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.seal(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; obj.foo; &lt;span class=&quot;comment&quot;&gt;//TypeError, cannot delete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/dwyuz997/9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后, &lt;code&gt;Object.freeze&lt;/code&gt;则会让一个object完全锁死. 你不能进行新增, 删除, 修改赋值等任何变化. 同时你也不再能使用defineProperty来对现有属性修改.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;use strict&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &lt;span class=&quot;string&quot;&gt;&quot;foo1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.freeze(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//All of the following will fail, and result in errors in strict mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;foo2&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//cannot change values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.bar = &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//cannot add a property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; obj.bar; &lt;span class=&quot;comment&quot;&gt;//cannot delete a property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cannot call defineProperty on a frozen object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foo2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/dwyuz997/10/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如下的这些函数是用来帮助检测Object是否frozen,sealed或者not extensible的:&lt;br&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;, &lt;code&gt;Object.seal&lt;/code&gt; 和 &lt;code&gt;Object.freeze&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;valueOf 和 toString&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以使用&lt;code&gt;valueOf&lt;/code&gt;和&lt;code&gt;toString&lt;/code&gt;来自定义你定义好的Object在js需要一个初始值的时候如何处理.&lt;/p&gt;
&lt;p&gt;下面是一个tostring的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;stuff&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff = stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f + &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/LgacxLbL/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及一个valueOf的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;stuff&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff = stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.valueOf = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + f); &lt;span class=&quot;comment&quot;&gt;//logs 4 (length of &quot;foo&quot; + 1);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/LgacxLbL/5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是如果你同时使用tostring和valueOf的话, 可能会得到一些奇怪的结果.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;stuff&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff = stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.valueOf = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f + &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//logs &quot;3bar&quot; instead of &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + f); &lt;span class=&quot;comment&quot;&gt;//logs 4 (length of &quot;foo&quot; + 1);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/LgacxLbL/6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个更加便捷的方式使用toString就是让你的object支持hash.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;stuff&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff = stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj[f] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj); &lt;span class=&quot;comment&quot;&gt;//logs &amp;#123;foo: true&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/LgacxLbL/8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;getOwnPropertyNames 和 keys&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以利用&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;来获得object中所有已定义的属性名称. 如果你熟悉Python的话, 它和python的dictionary类型的keys函数是一样的. 实际上, 也确实有Object.keys这么一个函数. 两者的区别在于, getOwnPropertyNames同时还会遍历到那些无法枚举到的属性, 即它可以返回那些不会出现在for in循环中的属性.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj)); &lt;span class=&quot;comment&quot;&gt;//logs [&quot;foo&quot;, &quot;bar&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(obj));  &lt;span class=&quot;comment&quot;&gt;//logs [&quot;foo&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/ookcucwm/1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Symbol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt;是一个特殊的初始类型, 是在ECMAScript 6中定义的, 会在下一代js中使用. 你可以通过chrome canary以及firefox nightly以及下面的jsfiddle例子中提前感受下(例子本身也只支持这两种浏览器, 且版本不低于本文发表时间: 2014-8).&lt;/p&gt;
&lt;p&gt;Symbols可以被用于在Object中创建以及引用属性.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj[foo] = &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj[foo]); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/5c35eyav/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt; &lt;em&gt;(Chrome Canary and Firefox Nightly only)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Symbols本身是唯一且不可改变的.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//console logs false, symbols are unique:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) === &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/5c35eyav/2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt; &lt;em&gt;(Chrome Canary and Firefox Nightly only)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;你还可以在defineProperty中使用Symbols.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, foo, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj[foo]); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/5c35eyav/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt;  &lt;em&gt;(Chrome Canary and Firefox Nightly only)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;属性通过symbols添加到object后将不能在for in循环中调用. 但是可以在hasOwnProperty中正常反馈.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, foo, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.hasOwnProperty(foo)); &lt;span class=&quot;comment&quot;&gt;//logs true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/5c35eyav/4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt; &lt;em&gt;(Chrome Canary and Firefox Nightly only)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Symbols不会出现在getOwnPropertyNames的返回值中, 但是Object本身有&lt;code&gt;Object.getOwnPropertySumbols&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, foo, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//console logs []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//console logs [Symbol(foo)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertySymbols(obj));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/5c35eyav/5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt; &lt;em&gt;(Chrome Canary and Firefox Nightly only)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Symbols在你不只希望一个属性不被偶然中修改, 更不希望它在正常的流程中出现时, 会是一个很好的帮手. 我并没有想到所有symbols的所有潜在用法, 我可以肯定还有很多.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proxy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这又是一个在ECMAScript 6中添加的新东西. 截至到2014年8月, proxies只能在Firefox中生效. 所以下面这个例子只能在firefox中看了(实际上我也是用firefox做的测试).&lt;/p&gt;
&lt;p&gt;Proxies的出现是让我很兴奋的一件事, 因为它可以允许我们轻易获得任何属性. 请看下面例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handler = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;target, name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target.hasOwnProperty(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; target[name];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;(obj, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p.foo); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p.bar);  &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p.asdf); &lt;span class=&quot;comment&quot;&gt;//logs &quot;foobar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/btipling/d4he6u4t/4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsfiddle&lt;/a&gt; &lt;em&gt;(Firefox only)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上例中, 我们把Object obj 代理到一个变量上. 我们定义了一个handler的对象来和代理后的对象进行交互. 其中的get函数应该很好理解. 它获取了目标对象以及对象的名称. 我们可以利用这个信息来返回任意一个我们希望获得的属性值, 但是为了以防万一, 我会在对象有的属性返回对应的值, 而在所有对象没有的属性我就返回”foobar”. 我喜欢这个函数, 它可以用在很多有趣的地方.&lt;/p&gt;
&lt;p&gt;还有个地方可以让proxy大显身手, 就是用于测试. 除了get以外, 你完全可以增加使用set, has以及更多的处理函数. 一旦Proxy得到更多的浏览器支持, 性能稳定后, 我会考虑写一篇更加详细的博文来聊聊Proxy的.&lt;/p&gt;
&lt;p&gt;所以说, 其实对于JS的Object, 还是有很多更加高级的用法的. 即便是现在, 也可以有很多强大的属性定义提供使用, 而在未来, 更是无法想象, 尤其是要想到Proxy完全可以改变js的整个写法. 如果你有任何问题或者纠正我的地方, 请通过Twitter来@我, 告诉我~ 我的用户名是@bjorntipling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Link&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://bjorn.tipling.com/advanced-objects-in-javascript&quot; title=&quot;source link of this article&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced Objects in JavaScript&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

</summary></url><url><title>A Closer Look At Personas - What They Are And How They Work (Part 1)</title><loc>http://taoalpha.me/blog/2014/08/16/read-yi-a-closer-look-at-personas-what-they-are-and-how-they-work-part-1/</loc><publish>2014-08-16T09:00:00.000Z</publish><summary>&lt;p&gt;来自Smashing Magazine的一篇文章, 介绍有关persona的一些基本知识. 长文啊…. &lt;/p&gt;
&lt;p&gt;基本上主要介绍了下personas的概念, 如何使用(很浅), 以及使用的好处~ part 2中会详细介绍下如何创建persona, 干货可能会多一些~&lt;/p&gt;
&lt;p&gt;==============正文=================&lt;br&gt;从我自身作为一名交互设计师的经验来说, 我遇到过很多策略, 方法之类的, 用以提升我工作的质量和一致性. 但是没有任何一个能比得过Persona(人物模型)的. Personas从上世纪90年代中期出现依赖一直被沿用至今, 且被设计圈广为认可.&lt;/p&gt;
&lt;p&gt;观察每一个使用personas的设计师, 我还发现了更多的东西: 他们通常都强烈的反对技术. 曾经我也对personas是持着一种弃之如敝履的态度, 认为他们是一种和我手头工作不相干的干扰. 一直到我真正的看到它是如何被正确的使用的, 以及它那无限的潜力.&lt;/p&gt;
&lt;p&gt;自从我意识到为什么personas是如此的重要以及他们是如何被应用到实践后, 我就开始在自己的工作中使用它们, 于是一些有趣的事情发生了: 我的工作变的更加高效而有趣, 而且我的成果变得更加有效, 对他们也更加有价值了. 以前我从来没有见到过这么明显的提升, 直接的提升了我在工作中的各个方面, 包含思路的清晰, 高效的产出, 以及最终成功的可能性. 所以我相信Personas一定可以改变你的工作流, 让你的设计水平到达一个全新的水平!&lt;/p&gt;
&lt;p&gt;我希望那些对personas不熟悉的人能够阅读这一系列, 本系列会分成2部分. 你可以尝试一下, 而对于那些反对personas的人, 也希望你能够重新考虑一下. 对于使用personas可能呢个会造成不确定性结果甚至矛盾结果的地方, 我也都会带着审视的角度来看到, 通过质疑我自己的的设计原则来判断那些对我有意义–这一点我做的很好. 也许在此过程中我学到的可以帮助其他人, 提升他们的工作流.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is A Persona ? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Persona是一种通过某种方式对观测人进行观察或者研究, 进而进行归纳总结, 沟通研究建立人物模型的研究方法. Persona通常被描述为某一类型的人物但是又不是一个真实的单独个体, 而且, 它是集中集合了很多观察对象的综合体. 每一个Persona都代表了一个特定比例的人群, 从而让设计师能够专注于一个可测量可记忆的用户角色, 而不是关注于千万种不同的个体. Personas辅助设计师创造出那些针对不同人群的不同设计,&lt;br&gt;它让设计师去设计一个特定的群体而不是特定的个人.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1620” align=”aligncenter” width=”1500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/01-devise-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/01-devise-opt.jpg&quot; alt=&quot;01-devise-opt&quot; width=&quot;1500&quot; height=&quot;1125&quot; class=&quot;size-full wp-image-1620&quot;&gt;&lt;/a&gt; 01-devise-opt[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What Does A Persona Look Like ? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然Persona通常是一篇大概一页左右的文本描述, 但他所传达的信息却远超过其本身 – 它是一种与他人沟通总结研究趋势和模式的方法. 这种对于用户的基础认知才是最重要的, 而不是描述文本本身.&lt;br&gt;[caption id=”attachment_1621” align=”aligncenter” width=”1685”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/02-cook-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/02-cook-opt.jpg&quot; alt=&quot;02-cook-opt&quot; width=&quot;1685&quot; height=&quot;1333&quot; class=&quot;size-full wp-image-1621&quot;&gt;&lt;/a&gt; 上图显示Persona中主要阐述的元素, 也是关键目标, 是”Day in the life.”(一天) 这对于很多persona文档而言都是共通的. 而其他的元素, 例如”Quick Take on Fred”(快速了解Fred), 则是团队或者项目需要而出现的. 每一个项目都需要规定一些特定的方法来制作persona文档[/caption]&lt;/p&gt;
&lt;p&gt;我特别强调了一下persona和persona文档的区别, 是因为很多人认为这两者是完全对等的–但实际上他们是有很大区别的. 对于目标导向的设计新手而言, 很容易因为追求更好的方式来制作一个persona文档而忘记了这个文档背后更大更重要的意图, 是去全面的理解一个用户然后把所获总结分享给他人.&lt;/p&gt;
&lt;p&gt;对于那些寻求一个飞跃式进步的设计师而言, 我强烈推荐&lt;a href=&quot;http://creativecompanion.wordpress.com/2011/05/05/the-persona-core-poster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Persona模板&lt;/a&gt;, 来自Creative Companion. 这个模板中包含了一个设计师所需要的一些重要信息, 用这些信息从而可以创造一个很赞的persona文档.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where Does the Concept of Personas Come From ? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理解persona的来源历史对于设计师可以带来什么是很有帮助. Personas是由Alan Cooper最初使用的, 开始于上世纪80年代, 最初是指用移情的方式来代入自己作为最终使用自己设计的软件的用户, 从而辅助初始设计的方式. Alan Cooper通过采访一些他当前项目的受众, 然后和他们接触, 熟悉了解对方后, 他就可以通过头脑风暴的形式去伪装成这些受众, 从而以他们的角度来评估那些方案. 这种方法可以让Alan Cooper把用户放在设计的核心. 而随着Alan Cooper从开发者变身为咨询后, 他很快的从几个客户身上发现, 要想要成功,&lt;br&gt;就必须要找到一个方法来帮助客户从他的角度去看世界.&lt;/p&gt;
&lt;p&gt;这种启发以及说服客户的需要让他逐渐创造了personas, 并且把它转化成为了一个成型的概念: 通过交流把自己的那种用户为核心的知识向那些没有自己做这些实验的人传达过去. Personas的操作流程以及它们的应用场景一直演化到今天, 但是初衷一直未变: 深入的理解用户是创造杰出产品的必备基础.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1622” align=”aligncenter” width=”2521”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/03-persona-pile-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/03-persona-pile-opt.jpg&quot; alt=&quot;03-persona-pile-opt&quot; width=&quot;2521&quot; height=&quot;1833&quot; class=&quot;size-full wp-image-1622&quot;&gt;&lt;/a&gt; Personas是目标导向设计的的必备部分. 用户研究中的每组用户都代表着一种persona, 研究结束后最终会转化产出为一份persona文档. 通常来说多个personas是不常见的.[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Do Personas Fit In The Design Process ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从persona诞生以来,Alan Cooper的设计方法也已经逐步进化成为用户为中心的设计理念的一个组成部分, 曾经被称为目标导向的设计. 目标导向型的设计结合了很多学科的新旧知识, 包含: 人种学, 市场研究, 战略策划以及其他的一些领域, 从而以一种新的方式去同时强调商业需求, 技术需求以及用户目标. Personas是目标导向设计的核心. 我发现通过深入理解目标导向设计方法的基础对于之后设计师去理解和使用persona是非常有帮助的. &lt;/p&gt;
&lt;p&gt;在2011年的夏天, 我非常有幸加入了Cooper公司, 也正是在这里我学习到了如何使用personas.我非常有幸加入了Cooper公司, 也正是在这里我学习到了如何使用personas. 在Cooper, 我发现虽然personas从概念上很好理解, 但是要是想要熟练精确的掌握还是要话费我数月的时间. 在这里时, 我看到团队中的每个人甚至是每个客户, 都在每次讨论会,思过会,甚至是工作中中引用各种personas. Personas没有单纯的做完就被遗忘到一边去了 – 他们成为了承载着我们所作所为活生生的角色了.&lt;/p&gt;
&lt;p&gt;我从中学习到personas已经成为了目标导向设计流程中不可缺少的一部分了. 而且虽然personas如此重要, 但是也从来不能单独使用的, 比需要和其他流程结合着一起应用才能达到更好的效果.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;i&gt;Components of Goal-Directed Design That Support Personas&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;End Goals:&lt;br&gt;    &lt;p&gt;这是persona需要被软件满足的需求对象. 软件需要帮助persona通过自身的各种功能来最终实现他们的end goals.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Scenario(s)&lt;br&gt;    &lt;p&gt;这个是描述persona是如何使用软件的, 使用的场景啊等等. 需要从persona的角度来描述Scenarios, 从更高的角度来说, 这些其实都是未来产品的真正使用的场景.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;[caption id=”attachment_1623” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/04-running-persona-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/04-running-persona-opt-500.jpg&quot; alt=&quot;04-running-persona-opt-500&quot; width=&quot;500&quot; height=&quot;380&quot; class=&quot;size-full wp-image-1623&quot;&gt;&lt;/a&gt; 目标导向型的设计的三个组成部分只有在一起使用的时候才能达到最佳成效. 比如, 为了让一个短跑运动员挖掘他们的潜力, 他们需要一个地方可以跑步以及一条终点线. 而没有scenario或者end goal, 这个运动员就完全没有什么值得去奋斗得了.[/caption]&lt;br&gt;&lt;br&gt;&lt;br&gt;Personas, end goals以及scenarios都是相互联系的,他们的联系就好象小说或者电影中的主角去实现一个目标一样. 这种经典的”主角之旅”的叙事方式和伴随它的故事结构都是为了设计更好的软件为目的的.&lt;br&gt;&lt;br&gt;&lt;strong&gt;How Are Personas Created ?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Persona可以通过无数种方式来创造, 但是设计师们通常推荐使用下述的通用方式:&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;    &lt;li&gt;采访或者观察足够数量的人群;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;找到这些被访者的反应模式和行为模式, 然后用这些来将相似的人群聚组;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;创建一个这一群组的典型模型, 基于上述找到的模式;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;结合对用户的认知以及建立的认知模型创造用户为中心的设计;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;与组员和相关人士分享这些模型;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;手把手的教你创造persona就超出了本文的内容, 但是我们会在本系列的下一个部分中介绍这块内容.&lt;br&gt;&lt;br&gt;&lt;strong&gt;What Are Personas Used For ?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Personas应该贯穿整个产品的创造节奏, 而且无论是在软件开发和设计团队甚至是整个公司中都可以使用. 以下就是一些它们可以发挥作用的实例:&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;Build Empathy(建立同理心)&lt;br&gt;        &lt;p&gt;当设计师创造一个persona的时候, 他们其实是在创造一个可以透过其中看世界的视窗. 一旦套上镜片, 就可以获得一个类似于用户角度的观点. 从这个角度来说, 当一个设计师作出一个决定后, 他们已经整合了persona的目标, 需求以及预期.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Develop focus&lt;br&gt;        &lt;p&gt;Personas可以帮助我们定义谁是我们的用户. 拥有一个清晰的目标是非常重要的, 对于很多用户多于一种类型的项目, 那么一组personas将会帮助你来选择那些类型的用户才是你应该优先关注的. 仅仅只是定义一下你的用户类型, 你就能够明显发现你不能为所有人设计, 至少不能一次性满足所有人, 不然你就会冒着失去所有人的风险. 这同时能帮助你避免那些弹性用户, 他们是那种跟随着设计师自身观点变化而变化的形体(PS: 我觉得这里说的其实是设计师自身吧) &lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Communicate and form consensus&lt;br&gt;        &lt;p&gt;通常情况下, 设计师要跨组工作, 合作的人包含各种领域各种观点. 这种情况下, personas文档通常可以帮助到那些没有亲身和用户交流的人. 使用一个媒介来分享这些知识, 就可以让组员们在一些重要的问题上更容易达成一致性.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Make and defend decisions&lt;br&gt;        &lt;p&gt;如personas可以帮助你找到高优先级的用户群体, 它还可以帮助我们决定该如何为他们设计. 当你以你的用户的角度看世界时, 再决定什么功能是有价值的, 那些是边界情况就变得简单了很多. 当设计方案遇到反驳, 要通过真实的数据和用户研究来为自己解释, 这才是告诉其他人设计的逻辑以及背后的用户为核心的理念的最佳方式.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Measure effectiveness&lt;br&gt;        &lt;p&gt;personas在预算或者时间不允许进行迭代设计的时候, 可以充当用户的代表. 各种不同的设计方案都可以通过结合personas和一个场景来进行测试, 就如同用真正的用户测试一样. 如果扮演persona的人无法识别一个功能或者遇到困惑, 那么他们代表的用户群体也可能遇到同样的问题.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Are Personas Effective ? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你依然不认为personas能够帮助到你, 那么恭喜你, 你不是一个人. 许多设计界知名人士, 包含steve portigal以及Jason Fried都认为personas不是他们的菜. 他们有很多吸引人的论点, 但是他们都不愿意使用personas.(相关资料可以参见文末的”附加资料”)&lt;/p&gt;
&lt;p&gt;就和设计师们使用的很多工具一样, personas在用对时候和用对地方的时候是非常强大的, 但其它时候就不能保证了; 所以技巧在于知道什么时候可以用, 然后有效的使用它.&lt;/p&gt;
&lt;p&gt;任何工具都有两面性, personas也不例外. 如果使用不恰当, 比如当personas不是基于研究建立的(这里不考虑临时的personas, 这些可能只是基于一个传闻或者二手信息, 仅作为主要信息的附属存在), 或者纯粹编造,基于那些和当前设计问题无关的无意义问题简历的, 或者是纯粹基于市场研究(与人种研究相对)简历的, 那么这些personas将会导致一个非常不准确的理解, 从而对用户为中心的设计产生非常错误的影响.&lt;/p&gt;
&lt;p&gt;据我所知, 目前针对personas的效率的学术研究只进行过2次: 一次是08年的Christopher N. Chapman进行的, 一次是09年Frank Long做的. 虽然范围都比较小, 但是两次研究都得出了使用personas作为设计流程的一部分可以帮助创造高质量的设计的结论.&lt;/p&gt;
&lt;p&gt;两次研究中都包含了大量的同行评价来支持personas的使用, 包含Kim Goodwin, Jeff Patton, David Hussman甚至是Donald Norman的研究. 所有这些研究结果以及其他很多的作者都证明了personas确实是可以显著影响设计流程的.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1624” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/05-graph-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/05-graph-opt.jpg&quot; alt=&quot;05-graph-opt&quot; width=&quot;500&quot; height=&quot;250&quot; class=&quot;size-full wp-image-1624&quot;&gt;&lt;/a&gt; 摘录字Frank Long关于personas的效率的研究. 学生们利用personas和Scenarios(粉色和蓝色)创造的设计得分都高于了那些两者都不使用的设计作品. 得分是通过可用性测试-启发式分析-得出的.[/caption]&lt;br&gt;&lt;strong&gt;How And Why Do Personas Work ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Personas的有效性是建立在他们可以提升以及促进很多人类的先天本能. &lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;Narrative Practice&lt;br&gt;        &lt;p&gt;这是创造, 分享, 倾听故事的能力.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Long-term memory&lt;br&gt;        &lt;p&gt;这是获得以及维持过往经历记忆的能力, 也是我们用以感受别人遇到的困难的能力.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Concrete thinking&lt;br&gt;        &lt;p&gt;人们更倾向记忆有形的范例而不是抽象的概念.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Theory of mind(folk psychology)&lt;br&gt;        &lt;p&gt;这是人们在了解他人的精神状态后得以预测他人的行为的能力.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Empathy&lt;br&gt;        &lt;p&gt;这是理解, 联系, 甚至分享他人情感的能力.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Experience-taking&lt;br&gt;        &lt;p&gt;这是人们在阅读或者观看一个故事时, 带入自己体验其中虚拟角色的’情感, 思想, 信仰以及内心声音’的能力.&lt;/p&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;Personas, goals以及scenarios之所以能够渗透我们的人性就在于他们赋予了研究结果以拟人化. 当成千上万的用户被一个persona所代表的时候, 想象一下他们会如何做就比我们直接看一堆冷冰冰的统计数据要来的容易很多了. 通过综合使用personas,goals以及scenarios, 用Cooper称之为”harmonious whole”, 一个可以更加有思维的方式工作, 始终把用户放在所有事物的核心.&lt;/p&gt;
&lt;p&gt;如果一个设计师真正的了悟了用户以及他们的需求, 那么对于找到满足需求的方式方法就会变的简单许多. 无数从用户角度出发的各种鲜活的观点都会快速的占据你的脑海. 这些点子就更可能成功孵化出一个优秀的设计方案, 这比其他方法可能来的都要好一些, 毕竟这种情况下, 设计师是从用户的角度出发的.&lt;/p&gt;
&lt;p&gt;这种personas, goals和scenarios的有力结合帮助设计师避免了很多抽象问题, 从而可以把注意力集中到如何让软件更加理想化更加整合更加人性化上.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do I Really Need To Use Personas ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要确定personas是不是适合使用到当前的设计中, 设计师需要先退后一步, 确定下他们的设计对象是谁. 确定受众似乎很简单, 其实也许是因为看起来太简单了所以很多人都从来不愿意花时间在上面来明确一下自己的设计对象.&lt;/p&gt;
&lt;p&gt;以用户为核心的设计的基础前提就是随着对用户的了解增多, 为他们设计出更有效的设计的可能性就更高. 如果一个设计师是为自己设计的, 那么他们就肯定不需要personas, 因为他们本身就是用户, 他们只需要创造出自己想要的就行了.&lt;/p&gt;
&lt;p&gt;设计师经常时不时的为自己设计一些东西, 但是多数职业人士都是为他人设计东西的. 如果他们是为他人设计, 那么他们可能只可能为两种人设计: 一种是和他们自己很像的, 一种是和他们自己不像的. 如果他们是为和自己很像的一群人设计, 那么他们就可以不需要personas, 虽然有了perosnas可能也能有所帮助, 但是自身也就够了. 但是通常来说, 设计师都是在为那些不像他们的人设计, 这种情况下, 尽可能多的了解你的用户就有很大的好处了, 那么这个时候就推荐使用personas了.&lt;/p&gt;
&lt;blockquote&gt;&lt;br&gt;    Treat different people differently, Anything else is a compromise.&lt;br&gt;    – Seth Godin&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;Personas可以帮助预防以自己为核心的想法, 就是设计师设计的时候以自己为核心, 认为自己就是用户, 但实际上用户可能和他们很不一样. 这也是很多设计师真实工作的情况: 根据他们自己喜欢的或者认为对的方式进行设计. 即便是经验再丰富的设计师凭直觉也走不远的. 这也是设计师在设计或者其他任何事情上可能犯的最大的错误了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为一个正常的人类, 设计师们本身是有自己的喜恶的, 而且也只能看到自己所看到的 – 但是, 他们以后可以记住下面这一点: 设计师必须尽自己最大的能力来控制自己的喜恶, 或者说, 自我控制.&lt;/p&gt;
&lt;p&gt;设计师并不能保证自己每次都是对的, 自己的方案都是最好的. 但多数时候用户是可以做到的, 这也是personas的目的: 代表真实的用户, 表达他们的观点, 毕竟真正的用户不能参与到设计过程. 那么, 在你的下一个项目中, 有时候你需要确定什么才是你的用户所感兴趣的. 就好象电影中描述的一样, 想象一个天使和恶魔分别站在你的肩膀上, 而恶魔总是识图迷惑你设计一些愉悦自己的作品, 而天使则是personas代表的用户据理力争自己真正的需求. 你会听谁的呢?&lt;/p&gt;
&lt;p&gt;我们必须承认即便是最训练有素的”用户为中心的设计”和”目标导向设计”的设计师也不能完全没有偏见. 作为专业人士, 我们都会用最佳的判断来做决定(基于我们的专业只是以及工作经验和市场的了解), 但是有一些人的观点的个人属性强于他人. Personas可以帮助一个设计师成长, 让他们变的比只为自己设计的时候更加诚实, 更加有思想. 如果你要为一些不像你的人设计, 那么请尽量了解你的用户并且使用persona的方法.&lt;/p&gt;
&lt;p&gt;我们会在本系列的第2部分讨论一下关于如何从人种学研究中建立personas的流程.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Resources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.slideshare.net/TheConartist/what-are-personas-and-how-to-use-them-a-presentation-by-shlomo-goltz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Presentation Deck: Personas Demystified&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-17&quot;&gt;&lt;a href=&quot;#17&quot;&gt;17&lt;/a&gt;&lt;/sup&gt;,” Shlomo Goltz&lt;br&gt;&lt;br&gt;Kick off a persona-creation project with your team.&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.slideshare.net/TheConartist/provisional-persona-workshop-10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Presentation Deck: Provisional Persona Workshop&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-18&quot;&gt;&lt;a href=&quot;#18&quot;&gt;18&lt;/a&gt;&lt;/sup&gt;,” Shlomo Goltz&lt;br&gt;&lt;br&gt;Create provisional personas with stakeholders.&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://creativecompanion.wordpress.com/2011/05/05/the-persona-core-poster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Persona Poster Template&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-19&quot;&gt;&lt;a href=&quot;#19&quot;&gt;19&lt;/a&gt;&lt;/sup&gt;,” Creative Companion&lt;br&gt;&lt;br&gt;A great way to get a jumpstart on creating a persona one-pager.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Inmates-Are-Running-Asylum-Products/dp/0672326140/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;The Inmates Are Running the Asylum: Why High-Tech Products Drive Us Crazy and How to Restore the Sanity&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-20&quot;&gt;&lt;a href=&quot;#20&quot;&gt;20&lt;/a&gt;&lt;/sup&gt;, Alan Cooper&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/About-Face-Essentials-Interaction-Design/dp/0470084111/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;About Face 3: The Essentials of Interaction Design&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-21&quot;&gt;&lt;a href=&quot;#21&quot;&gt;21&lt;/a&gt;&lt;/sup&gt;, Alan Cooper&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Designing-Digital-Age-Human-Centered-Products/dp/0470229101/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Designing for the Digital Age: How to Create Human-Centered Products and Services&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-22&quot;&gt;&lt;a href=&quot;#22&quot;&gt;22&lt;/a&gt;&lt;/sup&gt;, Kim Goodwin&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Essential-Persona-Lifecycle-Building-Personas/dp/0123814189/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;The Essential Persona Lifecycle: Your Guide to Building and Using Personas&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-23&quot;&gt;&lt;a href=&quot;#23&quot;&gt;23&lt;/a&gt;&lt;/sup&gt;, Tamara Adlin and John Pruitt&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/User-Always-Right-Practical-Creating/dp/0321434536/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;The User Is Always Right: A Practical Guide to Creating and Using Personas for the Web&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-24&quot;&gt;&lt;a href=&quot;#24&quot;&gt;24&lt;/a&gt;&lt;/sup&gt;, Steve Mulder&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.uie.com/articles/goal_directed_design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Goal-Directed Design: An Interview With Kim Goodwin&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-25&quot;&gt;&lt;a href=&quot;#25&quot;&gt;25&lt;/a&gt;&lt;/sup&gt;,” Christine Perfetti, User Interface Engineering&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://rtsnance.com/ui15/pdfs/day-one/goodwin-wksp.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Designing With Scenarios: Putting Personas to Work&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-26&quot;&gt;&lt;a href=&quot;#26&quot;&gt;26&lt;/a&gt;&lt;/sup&gt;” (PDF slidedeck), Kim Goodwin&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.cooper.com/journal/2008/05/perfecting_your_personas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Perfecting Your Personas&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-27&quot;&gt;&lt;a href=&quot;#27&quot;&gt;27&lt;/a&gt;&lt;/sup&gt;,” Kim Goodwin, Cooper Journal&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.cooper.com/journal/2008/05/getting_from_research_to_perso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting From Research to Personas: Harnessing the Power of Data&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-28&quot;&gt;&lt;a href=&quot;#28&quot;&gt;28&lt;/a&gt;&lt;/sup&gt;,” Kim Goodwin, Cooper Journal&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;https://www.measuringusability.com/blog/personas-ux.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7 Core Ideas About Personas And The User Experience&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-29&quot;&gt;&lt;a href=&quot;#29&quot;&gt;29&lt;/a&gt;&lt;/sup&gt;,” Jeff Sauro, Measuring Usability&lt;/li&gt;&lt;br&gt;&lt;li&gt;“Explaining Personas Used in UX Design,” &lt;a href=&quot;http://asinthecity.com/2011/05/13/explaining-personas-used-in-ux-design-–-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Part 1&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-30&quot;&gt;&lt;a href=&quot;#30&quot;&gt;30&lt;/a&gt;&lt;/sup&gt;, &lt;a href=&quot;http://asinthecity.com/2011/05/13/explaining-personas-used-in-ux-design-–-part-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Part 2&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-31&quot;&gt;&lt;a href=&quot;#31&quot;&gt;31&lt;/a&gt;&lt;/sup&gt;, Ben Melbourne&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.greenbook.org/marketing-research/w5-on-personas-06410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Personas&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-32&quot;&gt;&lt;a href=&quot;#32&quot;&gt;32&lt;/a&gt;&lt;/sup&gt; (white paper), W5&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dd569755.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Power of Personas&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-33&quot;&gt;&lt;a href=&quot;#33&quot;&gt;33&lt;/a&gt;&lt;/sup&gt;,” Charles B. Kreitzberg and Ambrose Little, MSDN Magazine&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.uxbooth.com/articles/personas-putting-the-focus-back-on-the-user/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Personas: Putting the Focus Back on the User&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-34&quot;&gt;&lt;a href=&quot;#34&quot;&gt;34&lt;/a&gt;&lt;/sup&gt;,” James Costa, UX Booth&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.cooper.com/journal/2008/05/the_origin_of_personas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Origin of Personas&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-35&quot;&gt;&lt;a href=&quot;#35&quot;&gt;35&lt;/a&gt;&lt;/sup&gt;,” Alan Cooper, Cooper Journal&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.slideshare.net/ebacon/death-to-personas-long-live-personas-presentation?type=powerpoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Death to Personas! Long Live Personas!&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-36&quot;&gt;&lt;a href=&quot;#36&quot;&gt;36&lt;/a&gt;&lt;/sup&gt;” (slidedeck) Elizabeth Bacon and Steve Calde, Catalyze&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.interaction-design.org/encyclopedia/personas.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Personas&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-37&quot;&gt;&lt;a href=&quot;#37&quot;&gt;37&lt;/a&gt;&lt;/sup&gt;”, Lene Nielsen, Interaction Design Foundation&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.academia.edu/217619/The_Narrative_Practice_Hypothesis_Clarifications_and_Implications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Narrative Practice Hypothesis: Clarifications and Implications&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-38&quot;&gt;&lt;a href=&quot;#38&quot;&gt;38&lt;/a&gt;&lt;/sup&gt;,” Daniel D. Hutto, Academia.edu&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.jnd.org/dn.mss/adhoc_personas_em.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ad-Hoc Personas and Empathetic Focus&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-39&quot;&gt;&lt;a href=&quot;#39&quot;&gt;39&lt;/a&gt;&lt;/sup&gt;,” Donald Norman&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://bokardo.com/archives/personas-and-the-advantage-of-designing-for-yourself/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Personas and the Advantage of Designing for Yourself&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-40&quot;&gt;&lt;a href=&quot;#40&quot;&gt;40&lt;/a&gt;&lt;/sup&gt;,” Joshua Porter&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://research.microsoft.com/en-us/um/redmond/groups/coet/grudin/personas/old versions/pruitt-grudinold.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Personas: Practice and Theory&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-41&quot;&gt;&lt;a href=&quot;#41&quot;&gt;41&lt;/a&gt;&lt;/sup&gt;” (PDF), John Pruitt and Jonathan Grudin, Microsoft&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Persona-Lifecycle-Throughout-Interactive-Technologies-ebook/dp/B006OM89KQ/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;The Persona Lifecycle: Keeping People in Mind Throughout Product Design&lt;/em&gt;&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-42&quot;&gt;&lt;a href=&quot;#42&quot;&gt;42&lt;/a&gt;&lt;/sup&gt;, John Pruitt and Tamara Adlin&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://researchnews.osu.edu/archive/exptaking.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Losing Yourself in a Fictional Character Can Affect Your Real Life&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-43&quot;&gt;&lt;a href=&quot;#43&quot;&gt;43&lt;/a&gt;&lt;/sup&gt;,” Jeff Grabmeier, Ohio State University&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.frontend.com/the-effectiveness-of-using-personas-in-product-design.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Real or Imaginary: The Effectiveness of Using Personas in Product Design&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-44&quot;&gt;&lt;a href=&quot;#44&quot;&gt;44&lt;/a&gt;&lt;/sup&gt;,” Frank Long, Frontend&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://cnchapman.files.wordpress.com/2007/03/chapman-milham-personas-hfes2006-0139-0330.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Personas’ New Clothes: Methodological and Practical Arguments Against a Popular Method&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-45&quot;&gt;&lt;a href=&quot;#45&quot;&gt;45&lt;/a&gt;&lt;/sup&gt;” (PDF), Christopher N. Chapman and Russell P. Milham, Microsoft&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.cooper.com/journal/2009/06/measuring_the_effectiveness_of&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Putting Personas Under the Microscope&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-46&quot;&gt;&lt;a href=&quot;#46&quot;&gt;46&lt;/a&gt;&lt;/sup&gt;,” Suzy Thompson, Cooper Journal&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.userphilosophy.com/wp-content/uploads/2009/02/reprint-hfes08-chapman-love-milham-elrif-alford.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quantitative Evaluation of Personas as Information&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-47&quot;&gt;&lt;a href=&quot;#47&quot;&gt;47&lt;/a&gt;&lt;/sup&gt;” (PDF), Christopher N. Chapman&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2014/08/06/a-closer-look-at-personas-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smashing Magazine: A Closer Look At Personas: What They Are And How They Work (Part 1)&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>A Closer Look At Personas - A Guide To Developing The Right Ones (Part 2)</title><loc>http://taoalpha.me/blog/2014/08/19/read-yi-a-closer-look-at-personas-a-guide-to-developing-the-right-ones-part-2/</loc><publish>2014-08-19T06:00:00.000Z</publish><summary>&lt;p&gt;系列第二篇 – 这次都是干货啦!!!&lt;br&gt;==============正文===============&lt;/p&gt;
&lt;p&gt;设计师如何才能创造出那种给不像自己的用户也能有种定制的体验呢?  就如在part 1中减少的, 一个最有效获取用户相关知识, 建立很好的同理心以及专注用户的方式就是使用persona. 这一部分也是本系列的最后一部分就主要介绍下如何高效的创造一个persona.&lt;/p&gt;
&lt;p&gt;我们有无数的方法可以把以用户为中心的思维方式嵌入到UX设计中. 而personas是其中获得同理心以及分析用户最有效率的一种方式了.&lt;/p&gt;
&lt;p&gt;如何创造一个persona的方法并不是唯一的, 但是我们这里分享的方法则是交互设计公司Cooper中基于多年的发展和测试以及优化之后的. 这一流程遵循一个基本的逻辑, 就是关于用户恩, 一切都是从零开始, 但是却最终收获一个经过优化和精雕细琢的用户, 而且可以分享给其他人.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Identify Your Users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在你可以向用户学习之前, 你需要先确定向哪些用户学习. 你可以创建一个基于人种学和心理学的筛选器来决定我们应该去观察谁, 与谁探讨以及不与谁讨论.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1627” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/01-segmentation-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/01-segmentation-opt-500.jpg&quot; alt=&quot;01-segmentation-opt-500&quot; width=&quot;500&quot; height=&quot;212&quot; class=&quot;size-full wp-image-1627&quot;&gt;&lt;/a&gt; 有很多方法来筛选人群从而专注于那些和项目有关的用户. 而一个多因素的结合体往往可以确定一个筛选器的标准.[/caption]&lt;/p&gt;
&lt;p&gt;对市场的传统调研是一个好的开始. 如果已经有了用户基础, 那么你就相当于有了一个很好的人种学数据源; 如果你当前要是还没有这种数据源, 你就可以向当前的用户派送调查来获取信息. 如果你要是没有这种用户基础(多数新公司都是如此的), 那么就去挖掘更多竞品或者同类产品的用户信息.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Decide What To Ask&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最常见的了解用户的方法就是去采访或者观察他们. 而一个采访脚本或者调研协议将会保证你从所有的调研对象中获取到相同的信息, 所以数据集一定得是均匀的. 而设计这种脚本或者协议会强迫你去考虑一些你要从研究对象中学到什么. 因为采访或者观察都不只是要去获取原始的数据, 同时还要得到一个更好的,全面的对参与者和他们的观点的理解和认识.&lt;/p&gt;
&lt;p&gt;实际上, 在有限的时间内我们想要获得所有受访者和观察对象的信息也是不可能的, 所以在研究过程中请关注询问那些有价值的问题以及最相关的行为. 为了确定什么样的信息是最需要的, 我们需要考虑一下自己的知识的代沟(PS: 此处不太明白), 这些细节最终形成了你的设计方式, 以及你的团队成员们关心什么, 如何才能给团队基于用户的需求和目的定下一个基本的框架.&lt;/p&gt;
&lt;p&gt;在观察阶段中, 观察实验的提问不需要非常详尽, 因为本阶段目标是获得一个对用户的基本了解, 以此让团队能够进行预测以及回答一些没有提问的问题. 通过详尽的了解用户, 团队成员应该彻底站在persona的角度来考虑问题. 用户不需要直接参与到产品的开发环节, 但是一个persona, 尤其是根据正确的信息建立起来的persona, 就是一个最好的代表了. 通过正确地提问来获得用户的一些观点的核心要素, 你就可以创造出一个带着用户声音的persona了.&lt;/p&gt;
&lt;p&gt;具体到要问的问题, 就会依不同的项目目标而不同了, 采访对象的类型不同也会有所影响, 其他影响因素还有时间的限制啊, 等等. 不过, 无论你问什么, 请记住一下几点:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;主要进行开放式提问;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;让参与者尽可能多的展示而不是说;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;如果可能的话, 请提问一些具体的故事, 尤其是那些你无法通过观察获得的东西;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;不要担心询问一些似乎有些天真的问题, 毕竟你希望的是获取尽可能多的信息. (天真的问题从来不是愚蠢的, 他们代表了一种学习的渴望以及会在采访中建立一个非常轻松不那么严肃的基调, 这对于快速建立关于参与者的报告而言是非常有好处的) 遵循这些规则就可以获得丰富的答案以及创造persona坚实的基础.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1628” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/02-interview-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/02-interview-opt-500.jpg&quot; alt=&quot;02-interview-opt-500&quot; width=&quot;500&quot; height=&quot;375&quot; class=&quot;size-full wp-image-1628&quot;&gt;&lt;/a&gt; 对所有的参与者都尽可能的询问一些差不多的问题, 从而保持一定的一致性.[/caption]&lt;/p&gt;
&lt;p&gt;当然, 你可以根据一下的模板创建自己的模板, 下面这些模板则是我京擦还能够在企业软件的设计中使用到的. 对于新项目而言, 他的帮助是非藏巨大的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;请给我们简单介绍下你的工作背景.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你是如何以及为什么从事这样一份工作的?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你如此工作多久了?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你为什么选择这家公司而不是令一家呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;请告诉一些更多的关于你所处企业以及你在其中的角色的事情.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Domain Knowledge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;你的工作所需技能有哪些?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你是如何保证自己能够按时完成工作, 以及获取工作相关信息的呢?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;你在工作中的职责是什么?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你如何定义你工作的进展或者是否成功?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你又如何去衡量你的工作进展或者是否成功?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attitudes and motications&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;你工作中最快乐的部分是哪些?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你最重视又是什么呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你有哪些内在的或者外在的动力来促使你努力工作吗? 比如奖励, 提升, 津贴等&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Processes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;描述一下你的典型的工作日情景. 比如一进办公室你做的第一件事是什么? 接下来呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;如果现在给你一个[任务], 你如何完成呢?&lt;br&gt;        &lt;ul&gt;&lt;br&gt;            &lt;li&gt;这个工作你的预估时间是怎么样的?&lt;/li&gt;&lt;br&gt;            &lt;li&gt;你会从哪着手开始呢?&lt;/li&gt;&lt;br&gt;            &lt;li&gt;接下来你会如何做呢?&lt;/li&gt;&lt;br&gt;            &lt;li&gt;你能给我展示一下如何做吗?&lt;/li&gt;&lt;br&gt;        &lt;/ul&gt;&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    &lt;li&gt;什么样的活动会占据你最多的时间?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;什么样的活动对于你的成功是至关重要的呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;对于你工作日中的这些事物, 有哪些是你的公司或者企业要求你做的呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;哪些事物又是出于自己医院做的呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你是否会从你的同事那里学到更多呢?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;你是如何布置你的工位来帮助你完成工作和计划的?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;请给我简单介绍下你是如何利用自己的办公室来帮助你完成工作任务和计划的?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pain Points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;在你的工作中, 哪些是最困难, 最具挑战性以及最令人烦恼和困惑的呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;通常一个工作日结束后, 什么事情会在之后依然占据你的脑海呢? 如果有的话. 或者说什么事情会让你加班熬夜呢? &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tools and technology&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;哪些传统的(或者类似的)工具是你通常在工作任务中使用的呢 ?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;什么样的数字工具又是你通常使用的呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;哪些又是你的工具无法做到的呢? (你是否需要用这些工具做一些它们不擅长的事情呢?)&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mental Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;什么样的人可以做到你的位置呢? 为什么?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;描述一个工作是如何随时间改变的, 亦或者是不随时间改变的呢?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Relationships and organizational structure&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;除了客户和消费者, 你在工作中还会和什么样的人沟通呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你向谁做汇报呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;谁向你做汇报呢?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你和其他人联谊活动的频率如何?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你通常如何做联谊活动呢?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Projecting into the future&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;如果我们x年以后再次进行一次这样的对话, 你觉得会有什么不同吗?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;如果给你机会创造独属于自己的体验, 你希望是什么样的?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;我们有略过哪些吗? &lt;/li&gt;&lt;br&gt;    &lt;li&gt;还有什么你想要告诉我们的吗?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;还有什么你想要询问我们的吗?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Get Access to Users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步很大程度上会决定你的persona最终的效果. 你观察对象的数量将会决定你的persona是否能够准确, 有价值的反映你的研究对象们. 专家建议每个persona的研究人群最佳范围在5-30个人. 准确的数字并不重要, 只要能够出现一定的趋势和模式. 5-30这个范围可能看起来太小了, 感觉不是那么的可信, 但是这一集合并不是为了统计学分析, 而是为了设计过程中的定性研究.&lt;/p&gt;
&lt;p&gt;通常来说, 从5个人身上就可以看到趋势了. 以此为基础来获得更多的认识. 参与对象的人数多少就如同你是通过采访还是观察获得信息一样, 并不重要. “吃力不讨好”的规则这里同样适用, 在达到一个特定的点之后, 进一步的采访或者观察都不能揭示更多的信息了, 因为所有相关的模式都基本已经发现了, 研究人员已经达到了一个被人种学称之为”Verstehen”(理想人口)的程度. 在这一点上, 也不再需要更多的研究了.&lt;/p&gt;
&lt;p&gt;对于为了获得更多信息而增加观察对象人数, 只能在一个很小的范围内生效. 如果你不能依赖自己或者朋友找到足够的人来观察, 那么你可以考虑去找一个代理商来帮忙.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/03-network-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/03-network-opt-500.jpg&quot; alt=&quot;03-network-opt-500&quot; width=&quot;500&quot; height=&quot;438&quot; class=&quot;aligncenter size-full wp-image-1629&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;4. Gain an understanding of Users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常建立一个persona的主要时间和精力都会花在采访观察用户上了. 找一个队友一起帮忙, 从而可以记录所有采访或者观察过程中的事情, 谨防遗漏. 你和你的同事应该和观察对象同处在同一环境下, 这个环境最好能够和当前的项目结合的足够紧密. 在一个自然舒适的环境下, 参与人员才能提供更多, 更准确的信息, 而不会表现的不自然.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1630” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/04-cooper-observation-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/04-cooper-observation-opt-500.jpg&quot; alt=&quot;04-cooper-observation-opt-500&quot; width=&quot;500&quot; height=&quot;348&quot; class=&quot;size-full wp-image-1630&quot;&gt;&lt;/a&gt; 在一个好的地方观察能够产生更多有价值的数据. 同时, 通过多种途径来记录信息, 比如笔记和录音等, 也能够更好的保证准确性.[/caption]&lt;/p&gt;
&lt;p&gt;这一环节中, 为了获取设计受众的同理心, 那么简单直接, 不经提前处理的交互方式是至关重要的. 虽然直接亲身采访用户可能不一定都能做到, 但是请尽量做到. 如果你不能直接接触到用户, 那么可以考虑次优的选择: 采访那些有和用户产生直接交互的人群. 这种从二手信息中创造的persona被称之为”provisional personas”(潜在用户模型). 由此得到的观点回事二手的, 存在一定的过滤和偏见的, 但是有总比没有好, 这依然会给你一个启动项目的基点.&lt;/p&gt;
&lt;p&gt;同理心对整体理解用户而言是非常重要的, 而且直接的接触交互是唯一能够创造一个真正的用户模型, 从内心到精神, 的方法了. 我不希望说的太肉麻, 但是如果你能够在和直接用户的沟通中做到移情, 那么你就更可能接触到用户的直觉, 这些都是其他方法无法做到的. 所以说, 第一手的资料是直观重要的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Analyze the data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分析环节是最为复杂的, 因为你必须要综合对比涉及多个研究对象的行为啊, 态度啊等多个变量. 它需要一些练习, 而且随着经验增加会逐渐变的简单很多. 想要了解更多的话, 可以查看&lt;a href=&quot;http://wiki.fluidproject.org/display/fluid/Persona+Creation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fluid project&lt;/a&gt;, 或者考虑阅读&lt;a href=&quot;http://www.amazon.com/Designing-Digital-Age-Human-Centered-Products/dp/0470229101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Designing for the Digital Age&lt;/em&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;在直接或者间接的了解了研究对象后, 你将需要对获得的数据进行分析来找出其中的模式. 简而言之, 对于同一个角色的每个实验组而言(比如一个医生组成的组), 你就可以依照一系列的行为属性和态度进行打分排名, 从而决定哪些参与者有着相似的属性排名, 以此来找到他们的共同点. 每一组相似的参与者就能作为一个persona的源了.&lt;/p&gt;
&lt;p&gt;Persona并不仅仅是”角色”, 虽然他们最初看起来比较像. 角色可以很好的把相似的用户进行分组切段, 用以分析, 但是角色不是personas. 角色更大程度上由人们执行的任务定义的, 而不是被人们如何执行任务定义, 也不是由人们完成任务后的感觉决定的. 通常, 一个role在一定范围的行为需要2个或者2个以上的pesonas来表征.&lt;/p&gt;
&lt;p&gt;比如, 如果你在设计一个医用的软件, 面向的对象主要是医生, 护士, 技师, 以及病人. 那么你就会希望自己采访的人群是这四个角色范畴的. 但是, 当分析他们的反馈时, 你会希望纵向对比医生和医生, 而不是横向对比医生和技师. 他们的角色有时候会重叠. 但是, 千万不要把各个角色的数据混合到一起来分析. 针对同一个角色来进行对比分析, 否则的话, 角色不同带来的大区别会掩盖内在的小区别的.&lt;/p&gt;
&lt;p&gt;你可以把多数观测行为和态度都用一个谱图绘出来(比如:从低到高, 从伤心到开心). 每一个谱带都会是离散的, 都能够被分成4个梯度.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1631” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/05-spectrum-generic-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/05-spectrum-generic-opt-500.jpg&quot; alt=&quot;05-spectrum-generic-opt-500&quot; width=&quot;500&quot; height=&quot;52&quot; class=&quot;size-full wp-image-1631&quot;&gt;&lt;/a&gt; 在这个样本的谱带中, 消极或者低程度的属性会在左侧, 而积极的以及高级的属性则会出现在右侧.[/caption]&lt;/p&gt;
&lt;p&gt;在每一个谱带上, 参与人可以被打上1-4的分数(和”李克特量表”类似). 偶数个梯度可以在一定程度上防止中性得分(比如: 5个梯度的话, 那么3分的价值就会很低了). 一些变量可能不适合放在谱带中, 这种情况下, 不要硬往上靠, 可以把这个变量当成一个多项选择题. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/08-spectrum-continuum-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/08-spectrum-continuum-opt-500.jpg&quot; alt=&quot;08-spectrum-continuum-opt-500&quot; width=&quot;500&quot; height=&quot;93&quot; class=&quot;aligncenter size-full wp-image-1633&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/07-spectrum-multiplechoice-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/07-spectrum-multiplechoice-opt.jpg&quot; alt=&quot;07-spectrum-multiplechoice-opt&quot; width=&quot;498&quot; height=&quot;101&quot; class=&quot;aligncenter size-full wp-image-1632&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了确定有多少条谱带需要分析, 我们可以先粗略的过一下收到的反馈, 记录所有的行为和态度上有明显区分的. 通常来说少于5个谱带就过少了, 而多余20个就太多了… 所以一般意义上我们目的是介于两者之间. 如果你在决定用什么谱带上比较纠结的话, 可以重新看一下上节中的问题模板中的问题分类, 然后来确定下那些分类可以有效的区分研究对象. 动机和目标, 任务频率和时间, 以及对待任务的态度等等都是好的启动点嘛&lt;/p&gt;
&lt;p&gt;在你列出5-20个观测变量(每个角色哦)后, 就可以把每一个研究对象放到每隔谱带上, 如下:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/07-spectrum-multiplechoice-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/07-spectrum-multiplechoice-opt.jpg&quot; alt=&quot;07-spectrum-multiplechoice-opt&quot; width=&quot;498&quot; height=&quot;101&quot; class=&quot;aligncenter size-full wp-image-1632&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当你在制作谱带的时候, 请记住所有的数据都只是映射到谱带上. 比如Whitney比Doug做的手术更多, 但少于Elliot, 本身代表的意义比其作为一个数据点2而不是3,4的含义更重要.&lt;/p&gt;
&lt;p&gt;一旦你把所有的研究对象都放在谱带上后, 就到了你去寻找模式的时候了. 这一部分看起来似乎很不知所错, 尤其是在你研究了很多人之后. 你可以从小着手, 比如先去找到2个人的共同点. 这一模式分析和语义分析或者多变量的亲和图法很接近.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/09-spectra-patterns-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/09-spectra-patterns-opt-500.jpg&quot; alt=&quot;09-spectra-patterns-opt-500&quot; width=&quot;500&quot; height=&quot;493&quot; class=&quot;aligncenter size-full wp-image-1634&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述5个谱带描述的是医生的采访. Tiffany和Sam在同一个地方出现了3次, 在接近的地方出现了一次, 还有一次则散开了. 就我们所关心的来说, T和S是比较接近的, 而且应该用同一个persona来代表. 进一步看, Dan和Elliot同样有一些相似或者相同的谱带域. 但是他们的域和T和S又有所不同. 所以D和E也可以组成一个新的persona.&lt;/p&gt;
&lt;p&gt;这一研究员分别创建了5个变量来对比不同的医生, 并且把所有医生都列在了谱带上. 如果T和S在多条谱带上都出现在同一地方, 那么他们更可能组成一个模式, 从而最终辅助我们创建一个persona. 很多时候, 你找到的某个模式都不能描述每一个在谱带上的人, 毕竟所有模式都是不完美的.&lt;/p&gt;
&lt;p&gt;这并不是一个问题, 只要能够匹配谱带上的多数情况, 那么模式就是有效的. 重复这一步骤, 直到你找到了所有匹配相似用户的所有模式. 如果做的正确的话, 这时候你已经两两对比了很多参与者了, 同时结果看起来也会和下图这样可(蓝色的注解代表最初发现的模式[哪里有蓝色!!!!]):&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1635” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/10-whiteboard-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/10-whiteboard-opt.jpg&quot; alt=&quot;10-whiteboard-opt&quot; width=&quot;500&quot; height=&quot;417&quot; class=&quot;size-full wp-image-1635&quot;&gt;&lt;/a&gt; 把相似的参与者分组是一件苦力活, 但是确实是值得的. 考虑和他人一起合作, 从而获得更多角度的观点, 也可以讨论一些觉得困惑的地方.[/caption]&lt;/p&gt;
&lt;p&gt;这一环节就是如何区分不同的角色和personas. 即使调研人员采访了很多医生, 但是他们也会有着非常迥然不同的模式, 从而导致医生角色的不同personas. 每一个独一无二的行为和态度模式都应该用一个persona来代表.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Synthesize a model of Users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在我们有了分好组的研究对象, 他们可以用不同的persona来代表, 也决定了这些personas会是什么样的. 在采访和观察阶段, 你可能听到或者注意到一些反馈或者行为对于对每一组进行性别确定会有所帮助. 这些共同的, 平均的或者是突出的特点都需要在每一个persona中体现.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1636” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/11-sketch-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/11-sketch-opt-500.jpg&quot; alt=&quot;11-sketch-opt-500&quot; width=&quot;500&quot; height=&quot;272&quot; class=&quot;size-full wp-image-1636&quot;&gt;&lt;/a&gt; 这些personas都是由一些很少的,在观察中发现的关键属性所充实的. 这种总结后的结果就能呈现一个很清晰而又很简洁的用户模型了.[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Produce a document for others&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写persona文档本身并没有一个唯一正确的方法, 但是一些必备的元素还是要包含其中的. 一个有效的persona文档通常包含以下几点:&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;姓名&lt;/li&gt;&lt;br&gt;    &lt;li&gt;个人背景&lt;/li&gt;&lt;br&gt;    &lt;li&gt;简介描述&lt;/li&gt;&lt;br&gt;    &lt;li&gt;照片&lt;/li&gt;&lt;br&gt;    &lt;li&gt;座右铭&lt;/li&gt;&lt;br&gt;    &lt;li&gt;日常生活的旁白描述&lt;/li&gt;&lt;br&gt;    &lt;li&gt;期终目标(清晰,简洁)&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;[caption id=”attachment_1621” align=”aligncenter” width=”1685”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/02-cook-opt.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/02-cook-opt.jpg&quot; alt=&quot;02-cook-opt&quot; width=&quot;1685&quot; height=&quot;1333&quot; class=&quot;size-full wp-image-1621&quot;&gt;&lt;/a&gt; 如上这篇文档就非常清楚的总结了研究数据. 一些关键元素比如”关键目标”,”生活中的一天”等, 都是一篇优秀的persona文档的必备部分. 其他的一些元素, 诸如”Fred的简介”则是因为项目本身的需求而加入其中的. 每一个项目都会有一个恰当的方式来创造自己的persona文档.[/caption]&lt;/p&gt;
&lt;p&gt;一个强有力的persona其实只需要那7个部分就可以帮助团队中的每一个人了解用户的那些核心因素了. 其余的那些元素通常都是为了描绘一个更加鲜活的形象而出现的, 比如需求描述, 责任, 动机, 态度和痛点, 新奇的行为, 设计原则(一些设计师必须这么做才能满足用户的地方)等.&lt;/p&gt;
&lt;p&gt;你可以给你的persona文档中添加无数的元素, 但是多并不总是最好的. persona文档通常以一页为最佳, 这种限制能偶帮助你更好的聚焦到那些核心元素上, 而不是被其他事情所分散. 如果你不能把所有东西都放到一页上, 那么可以考虑增加一个附属文档之类的. 需要记住, 虽然你可能拥有无数的数据, 但是其他人通看到的都是那一页的内容.  如果更长的话, 人们不一定会去阅读的, 更不用说去记住那些信息了. 所以请尽可能的保持简单, 聚焦在那些核心的点上.&lt;/p&gt;
&lt;p&gt;如果你在寻找一个模板来帮助你, 我非常推荐&lt;a href=&quot;http://creativecompanion.wordpress.com/2011/05/05/the-persona-core-poster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;persona poster by Christof Zürn&lt;/a&gt;, 它总结了绝大多数的重要信息, 由此作为基础你一定可以创造完美的一页文档的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Socialize the personas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过和他人分享你的persona, 你可以把自己整个过程中学到的所有知识都传播出去. 你可以考虑用更迷人的方式来展示你的personas, 同时给每个人一份文档以便于离场时携带.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_1637” align=”aligncenter” width=”500”]&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/13-dualposters-opt-500.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://callmet.zzgary.info/wp-content/uploads/2014/08/13-dualposters-opt-500.jpg&quot; alt=&quot;13-dualposters-opt-500&quot; width=&quot;500&quot; height=&quot;334&quot; class=&quot;size-full wp-image-1637&quot;&gt;&lt;/a&gt; 虽然信息密度可能会降低, 但是这些迷人的海报可以更好的提醒这个persona的原型和所代表的人群是什么样子的.[/caption]&lt;/p&gt;
&lt;p&gt;本文中描述的流程是非常全面而又严格的. 它是基于Cooper公司多年的修缮以及我个人的修改的. 也就是说, 请随意修改, 让它变的更加适合你的需求. 如果你经验丰富后, 有一些部分是可以简略些甚至是可以直接跳过的. 当然, 这绝对不是唯一的方式来创造一个persona, 但是它是一个非常棒的开始. 我希望本文能够对你有所帮助!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additonal Resouces&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.smashingmagazine.com/2014/08/06/a-closer-look-at-personas-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Closer Look At Personas: What They Are And How They Work (Part 1)&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-38&quot;&gt;&lt;a href=&quot;#38&quot;&gt;38&lt;/a&gt;&lt;/sup&gt;,” Shlomo Goltz, Smashing Magazine&lt;br&gt;&lt;br&gt;The first part in this series talks about what personas are and why they are so effective in the creative process.&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.slideshare.net/TheConartist/what-are-personas-and-how-to-use-them-a-presentation-by-shlomo-goltz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding Your Users: Developing Personas&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-39&quot;&gt;&lt;a href=&quot;#39&quot;&gt;39&lt;/a&gt;&lt;/sup&gt;” (slidedeck), Shlomo Goltz&lt;br&gt;&lt;br&gt;Use these presentation slides to kick off a persona creation project.&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://www.slideshare.net/TheConartist/provisional-persona-workshop-10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Provisional Personas: Workshop&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-40&quot;&gt;&lt;a href=&quot;#40&quot;&gt;40&lt;/a&gt;&lt;/sup&gt;” (slidedeck), Shlomo Goltz&lt;br&gt;&lt;br&gt;This guide walks through the process of creating provisional personas.&lt;/li&gt;&lt;br&gt;&lt;li&gt;“&lt;a href=&quot;http://creativecompanion.wordpress.com/2011/05/05/the-persona-core-poster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Persona Core Poster: A Service Design Tool&lt;/a&gt;&lt;sup class=&quot;po&quot; id=&quot;note-41&quot;&gt;&lt;a href=&quot;#41&quot;&gt;41&lt;/a&gt;&lt;/sup&gt;,” Christof Zürn&lt;br&gt;&lt;br&gt;This template can be used to create a one-page deliverable.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Source link:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2014/08/13/a-closer-look-at-personas-part-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Closer Look At Personas: A Guide To Developing The Right Ones (Part 2)&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>3 Tricks to Make Users Think Your App Loads Faster</title><loc>http://taoalpha.me/blog/2014/07/23/read-yi-3-tricks-to-make-users-think-your-app-loads-faster/</loc><publish>2014-07-23T07:00:00.000Z</publish><summary>&lt;p&gt;译者闲话: 随着现在社会节奏越来越快, 人们的耐性越来越少, 对于等待的忍耐度越来越低, 而加载速度一直作为用户体验的重要影响因素之一, 更一直是app和网页的重量级考核指标! 本文就从一些细节角度介绍了如何在维持当前加载速度的同时, 让用户觉得加载速度有所提升.&lt;br&gt;================================恩, 正文如下========================&lt;br&gt;当用户在移动中的时候, 那么响应速度快的app体验自然越好. 虽然移动设备自身的联网速度是不受你控制的, 但你依然可以通过一些别的方面来让你的app看起来似乎加载的更快一些. 以下就是如何实现这一目的的一些小技巧, 即便是在低网速区域也能奏效哦~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instant &amp;amp; Steady Progress Bars(实时而又稳定的进度条)&lt;/strong&gt;&lt;br&gt;进度条起到的作用就是告诉用户当前动作需要多久完成, 但是它们并不总是精确真实的. 你可以通过让进度条始终稳定变化来掩盖后台的一些拥堵问题. 第一原则就是进度条永远都不应该停滞, 否则用户有可能认为是app当机了… 而且让进度条先快后慢, 直到结束可以给用户一些积极的预期. Messaging 就是这么一个典型的app. 当用户发出一条消息后, 蓝色的进度条立刻开始增加, 但是随着逐渐接近完成而慢慢变缓.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/07/instant-progress.png&quot; alt=&quot;Messaging&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background Operations(后台操作)&lt;/strong&gt;&lt;br&gt;还有一个加速技巧就是你可以实用后台操作. 就是当你有一个正在处理的任务的时候, 你可以让用户聚焦到另一件事情上去. 一个典型的例子就是在Instagram上上传照片这一操作. 一旦用户选好了要分享的照片, 它就开始上传了. 同时app开始让用户填写标签, 标题以及描述, 而当他们都写完之后, 准备按下share按钮的时候, 照片基本也都上传完毕了, 他们就能立刻分享他们的照片了. 完全不会意识到上传的时间的~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/07/background-operations.png&quot; alt=&quot;Instagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dummy Content(虚假内容)&lt;/strong&gt;&lt;br&gt;如果用户网速比较慢, 那么app加载内容就会花费更多的时间. 而让用户一直盯着进度条或者菊花图肯定会提升跳出率的. 那么, 为了防止用户离开, 我们可以在页面上显示一些伪造的内容. 比如, facebook的app就会在内容加载出来前先展示一些灰色的线条和方块来代表图片和文本, 而一旦内容加载完成, 真实的图片和文本就会显示, 取代这些预加载的假图. 这并不会比你用一个loading页面真正快到哪去… 但是用户会觉得它快!&lt;br&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/07/dummy-content.png&quot; alt=&quot;Facebook&quot;&gt;&lt;/p&gt;
&lt;p&gt;你的app加载速度究竟如何, 取决于用户感知的如何. 当网速较低的时候, 你依然可以通过一些技巧来给用户一种快速的体验. 用户不喜欢等待内容, 但是如果你让他们表面上看似乎从来没等过, 他们就会在任何网速的情况下享受你的app了.&lt;/p&gt;
</summary></url><url><title>10 Tips to Get You Started with Responsive Design</title><loc>http://taoalpha.me/blog/2014/08/15/read-yi-10-tips-to-get-you-started-with-responsive-design/</loc><publish>2014-08-15T13:00:00.000Z</publish><summary>&lt;p&gt;结合响应式设计, 出现了很多优秀的原则, 比如: Mobile First等等. 那么到底该如何进行响应式设计呢?&lt;/p&gt;
&lt;p&gt;==================正文=====================&lt;/p&gt;
&lt;p&gt;最近有项研究表明: 大约1/4的美国人只用手机上网!! 而在全世界, 每5个人就会有一个拥有智能手机, 而至少有一半人会使用它来浏览网络.&lt;/p&gt;
&lt;p&gt;如果你的网站在这些设备上不能很好的浏览的话, 你真的损失了很大一部分的手机用户. 快来拥抱响应式设计吧. 万事开头难, 不过下面这些小贴士可能会有所帮助.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Go Mobile First&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-1.png&quot; alt=&quot;Mobile First&quot;&gt;&lt;/p&gt;
&lt;p&gt;在你准备为笔记本,台机等大屏设计网站时, 考虑下手机用户的浏览体验. 很多设计师现在开始使用移动居先的策略了. 为什么呢? 因为移动端正在超越PC端.&lt;/p&gt;
&lt;p&gt;大概1/7的用户会使用他们的移动设备浏览网络. 所以先聚焦在手机用户如何和你网站进行交互, 之后在慢慢的扩展到大屏范围.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Get Acquainted with Media Queries.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-2.png&quot; alt=&quot;Media Queries&quot;&gt;&lt;/p&gt;
&lt;p&gt;media queries(媒体查询)是CSS3引入的一个新功能, 可以允许页面元素的样式随设备种类和尺寸大小而变化. Media Queries会查询设备的分辨率, 宽, 高以及是否横屏. 然后根据这些信息来判断改应用哪些CSS样式. MQ可谓是响应式设计的首要推动力.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Understand What Mobile Means for your Users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-3.png&quot; alt=&quot;Mobile Users&quot;&gt;&lt;/p&gt;
&lt;p&gt;用户在使用手机上网时, 他们的操作等交互方式都和桌面有很大的差别. 你可以利用分析数据来了解用户为什么用手机访问你的网站. 比如他们可能想要通过搜索框更快的获取信息, 如果你的用户中大多数都这么做, 那么就可以修改你的搜索框, 让它更加明显可观.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Use Percentages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-4.png&quot; alt=&quot;Percentages&quot;&gt;&lt;/p&gt;
&lt;p&gt;响应式设计中最困难的部分就是如何作出一个流畅的结构. 一个流畅的结构会更好的辅助media queries, 从而更好的针对不同视窗显示.&lt;/p&gt;
&lt;p&gt;你不需要针对每一个视窗界限都设置断点, 你可以设定最大的布局尺寸. 然后在它里面, 你就可以通过百分比而不是像素来定义宽高了. 这样就可以让网站基于百分比来安排布局了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. The Need for Speed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-5.png&quot; alt=&quot;Speed&quot;&gt;&lt;/p&gt;
&lt;p&gt;响应式布局有一个缺点就是会影响加载速度. 实际上, 近期的一个研究表明, 48%的响应式站点平均加载速度在4-8s左右. 这个加载速度在1997年的时候是完全可以接受的, 但是到今天, 就是完全不能接受的了. 要知道64%的智能手机用户对一个站点的加载时间预期是4s以内的.&lt;/p&gt;
&lt;p&gt;最主要的拖慢原因在于那些没有优化的图片. 千万不要让这些图片影响你的加载速度. 你可以通过一些类似Adaptive Images或者TinyPNG等工具来缩减你的图片大小.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Eliminate the Unnecessary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-6.png&quot; alt=&quot;Unnecessary&quot;&gt;&lt;/p&gt;
&lt;p&gt;去掉那些多余的元素, 不仅是为了用户体验, 同时也为了提升网站的加载速度. 一个网站如果太臃肿, 元素过多也是不能够让用户满意或者愉快的. 可以利用GZIP等方式来进行压缩.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. To Hamburger or Not to Hamburger&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-7.png&quot; alt=&quot;Hamburger&quot;&gt;&lt;/p&gt;
&lt;p&gt;汉堡包图标 - 即用三条线来表示一个隐藏的菜单 - 经常处于争论的焦点… 一些人很讨厌它, 但还有一些人很喜欢它, 但是怎样才是最好的方式呢?&lt;/p&gt;
&lt;p&gt;对于响应式设计, 最重要的往往是方便. 如果一个用户必须通过点击icon才能看到菜单, 这本身就不方便了. 如果你把最长用的菜单显示出来就能节省用户不少的时间以及防止他们产生浮躁感. 所以, 尽量不要把常用的链接放在你的汉堡包菜单导航中.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Make it Readable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-8.png&quot; alt=&quot;Readable&quot;&gt;&lt;/p&gt;
&lt;p&gt;网页千万不要做到需要用户使用放大缩小才能阅读的地步. 请设置足够大的字体, 方便在移动端的小屏幕下阅读. 我推荐的设定是文本16px,1em或者12pt. 附上一个很方便的&lt;a href=&quot;http://pxtoem.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;px to em&lt;/a&gt;链接. 当你设计标题时, 可以使用如FitText的工具来创造响应式的字体.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. Use the Right Button Size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-desing-9.png&quot; alt=&quot;Button Size&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然在移动设备上可谓是寸土寸金, 但是还是要尽量避免小按钮. 要确保你的按钮至少是44x44px大小的, 以方便触击. 还有个技巧是多使用padding而不是margin. Padding可以增加可触击区域的大小, 而margin不能的. Margin只能增加围绕按钮周围的空白区域.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. Design for Screen Orientation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://uxmovement.com/wp-content/uploads/2014/08/responsive-design-10.png&quot; alt=&quot;Orientation&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据统计, 移动用户中竖屏比例(59%)是超过横屏比例(41%)的. 所以虽然我们需要尽量设计在两种方式下都好看的界面, 但可以给予竖屏更多的经历. 记得确保你的图片不会被拉伸~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;响应式设计可以让你使用各种各样设备的用户都能轻松的访问你的网站. 以上这些都是一些基础的贴士, 来帮助你开始你的响应式设计. 那么, 那些网站应该遵循的最佳方案来提升其用户体验的又是哪些呢?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://uxmovement.com/mobile/10-tips-to-get-you-started-with-responsive-design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文: 10 Tips to Get You Started with Responsive Design from UX movement&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>在 Github Pages 中使用Jekyll插件</title><loc>http://taoalpha.me/blog/2015/05/29/tech-use-jekyll-plugin-with-github-page/</loc><publish>2015-05-29T06:00:00.000Z</publish><summary>&lt;h2 id=&quot;Github_Page_u7684jekyll&quot;&gt;&lt;a href=&quot;#Github_Page_u7684jekyll&quot; class=&quot;headerlink&quot; title=&quot;Github Page的jekyll&quot;&gt;&lt;/a&gt;Github Page的jekyll&lt;/h2&gt;&lt;p&gt;  Github Page对jekyll的支持是很到位的, 唯一的不足可能也是其本身基于安全考虑而使得jekyll始终都是运行在safe模式, 目前&lt;a href=&quot;https://help.github.com/articles/using-jekyll-plugins-with-github-pages/&quot; title=&quot;Using Jekyll Plugins with GitHub Pages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;放开的插件列表非常有限&lt;/a&gt;, 所以很多jekyll的插件都无法使用. 当然, 单纯支持的几个插件或者不用插件也是完全可以做出很好的效果的, 不过个人比较喜欢折腾, 所以虽然目前只有一个可有可无的压缩需求, 也为了以后的大肆折腾干脆一步到位~ 哈哈 当然, 如果以后github能够开放插件就最好啦.&lt;/p&gt;
&lt;h2 id=&quot;jekyll_plugin&quot;&gt;&lt;a href=&quot;#jekyll_plugin&quot; class=&quot;headerlink&quot; title=&quot;jekyll plugin&quot;&gt;&lt;/a&gt;jekyll plugin&lt;/h2&gt;&lt;p&gt;  作为一个流行的静态blog, jekyll的社区和支持者也是非常众多的, 大家可以在github上搜索jekyll就能找到很多jekyll的插件了. 当然, 你也可以前往&lt;a href=&quot;http://www.jekyll-plugins.com/&quot; title=&quot;Jekyll Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll-Plugins&lt;/a&gt;, 这算是一个jekyll plugin的集合地了~ 优点类似&lt;a href=&quot;http://vimawesome.com/&quot; title=&quot;Vim Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VimAwesome&lt;/a&gt;的感觉哈哈.&lt;/p&gt;
&lt;h2 id=&quot;u96C6_u6210plugin_u7684jekyll_u4E0Egithub_page&quot;&gt;&lt;a href=&quot;#u96C6_u6210plugin_u7684jekyll_u4E0Egithub_page&quot; class=&quot;headerlink&quot; title=&quot;集成plugin的jekyll与github page&quot;&gt;&lt;/a&gt;集成plugin的jekyll与github page&lt;/h2&gt;&lt;p&gt;  闲话少说, 在github page不支持插件的情况下, 我们该如何选择呢? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;换: github page主要是因为安全因素而强迫jekyll服务必须在safe下运行, 那么我们换一个服务器的话自然就完全由我们自己可控了, 或者换一个支持jekyll的公共服务即可;&lt;/li&gt;
&lt;li&gt;推: github page对jekyll的支持, 本质上还是对静态网页的支持, 所以如果我们在本地编译好jekyll然后把build后的&lt;code&gt;_site&lt;/code&gt;文件夹推送到github page上也是肯定可以的;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绕: 如果你觉得每次这么推送比较痛苦, 而且还是想要把jekyll部分的代码也放在github上的话, 那么可以考虑用一个绕一些的办法, 通过github本身支持project page, 结合&lt;strong&gt;推&lt;/strong&gt;的办法, 我们就可以新建一个repo, 然后在master分支管理原始代码, 在gh-pages分支存放生成的site代码. 然后通过&lt;code&gt;xxx.github.io/repo-name&lt;/code&gt;来访问了.&lt;/p&gt;
&lt;p&gt;本次主要介绍的是第三种方法:&lt;strong&gt;绕&lt;/strong&gt;. 主要是便于管理~&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u65B0_u5EFArepo&quot;&gt;&lt;a href=&quot;#u65B0_u5EFArepo&quot; class=&quot;headerlink&quot; title=&quot;新建repo&quot;&gt;&lt;/a&gt;新建repo&lt;/h3&gt;&lt;p&gt;  首先新建一个repo, 这一步你可以在github上完成, 也可以通过命令行直接执行:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -u &lt;span class=&quot;string&quot;&gt;'github_name'&lt;/span&gt; https://api.github.com/user/repos &lt;span class=&quot;operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;\&quot;name\&quot;:\&quot;&lt;span class=&quot;variable&quot;&gt;$repo_name&lt;/span&gt;\&quot;&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换github_name为你的用户名, $repo_name为你想要的repo名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;u8FC1_u79FB_u539F_u7AD9_u4EE5_u53CA_u4FEE_u6539_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#u8FC1_u79FB_u539F_u7AD9_u4EE5_u53CA_u4FEE_u6539_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;迁移原站以及修改配置&quot;&gt;&lt;/a&gt;迁移原站以及修改配置&lt;/h3&gt;&lt;p&gt;创建好repo后, 就可以开始转移你已经放置在github page的jekyll主体了. 首先, 初始化你的新repo(以blog为例):&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;first commit&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@github.com:your_username/blog.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来, copy 你原路径下所有和jekyll相关的文件到blog下, 这一步代码就省略了~&lt;/p&gt;
&lt;p&gt;文件转移后, 就需要修改一下jekyll的&lt;code&gt;_config.yml&lt;/code&gt;以及一些引用代码来适应新的博客结构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;baseurl: 因为路径修改, 所以这里需要设定以下baseurl, 从而确保后面的资源应用都正常;&lt;/li&gt;
&lt;li&gt;permalink: 这里要视情况而定, 因为我之前的页面中设定的也是blog作为二级目录, 所以这里修改到project page后, 继续保留blog的话, 博文的链接就会变成&lt;code&gt;/blog/blog/xxxx&lt;/code&gt;了, 所以这里permalink去除了blog;&lt;/li&gt;
&lt;li&gt;资源引用: 如果后面模板等部分使用了对应的相对路径引用资源的话, 这里就需要做对应的修改(比如从”/js/xxx”到”/blog/js/xxx”), 这里推荐都是用&lt;code&gt;site.baseurl&lt;/code&gt;来引用,方便修改;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改完相关的配置和路径后, 基本迁移部分就做的差不多了.&lt;/p&gt;
&lt;h3 id=&quot;u672C_u5730_u6D4B_u8BD5&quot;&gt;&lt;a href=&quot;#u672C_u5730_u6D4B_u8BD5&quot; class=&quot;headerlink&quot; title=&quot;本地测试&quot;&gt;&lt;/a&gt;本地测试&lt;/h3&gt;&lt;p&gt;  同样的, 虽然我们把jekyll转移到了project page里面, 我们本地测试环境还是照样需要的. 如果你是通过&lt;code&gt;_config.yml&lt;/code&gt;中的&lt;code&gt;baseurl&lt;/code&gt;来修改的资源引用, 那么你就可以直接继续使用&lt;code&gt;jekyll serve&lt;/code&gt;来查看本地环境, 这个时候会自动转换server address到&lt;code&gt;http://127.0.0.1:4000/blog/&lt;/code&gt;(你对应的baseurl).&lt;/p&gt;
&lt;p&gt;  但是如果你不是通过baseurl, 而是手动更改代码中的资源引用的话, 那么这里你直接运行&lt;code&gt;jekyll serve&lt;/code&gt;的话, 就可能遇到css引用失败等等错误, 这个时候你可以通过jekyll的`–baseurl``参数来指定baseurl.&lt;/p&gt;
&lt;p&gt;  另外, 因为jekyll自身的问题, 一旦设定baseurl后, 你的首页访问只能通过&lt;code&gt;http://localhost:4000/blog/index.html&lt;/code&gt;, 而不能使用&lt;code&gt;http://localhost:4000/blog&lt;/code&gt;… &lt;a href=&quot;http://jekyllrb.com/docs/troubleshooting/#base-url-problems&quot; title=&quot;base-url problem of jekyll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;爱莫能助&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;u6DFB_u52A0Rakefile_u5B9E_u73B0_u81EA_u52A8_u63A8_u9001&quot;&gt;&lt;a href=&quot;#u6DFB_u52A0Rakefile_u5B9E_u73B0_u81EA_u52A8_u63A8_u9001&quot; class=&quot;headerlink&quot; title=&quot;添加Rakefile实现自动推送&quot;&gt;&lt;/a&gt;添加Rakefile实现自动推送&lt;/h3&gt;&lt;p&gt;  一切调整妥当后, 我们就可以push到github中, 然后将build的site文件夹推送到gh-pages分支了~ 听起来就挺麻烦的是吗… 哈哈, 我们也有简单的办法实现自动的推送更新, 那就是Rakefile, 你需要在根路径下新建一个Rakefile文件, 然后复制下述代码到其中即可:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'rubygems'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'rake'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'rdoc'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'date'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'yaml'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'tmpdir'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'jekyll'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    desc &lt;span class=&quot;string&quot;&gt;&quot;Generate blog files&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task &lt;span class=&quot;symbol&quot;&gt;:generate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#Jekyll::Site.new(Jekyll.configuration(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#  &quot;source&quot;      =&amp;gt; &quot;.&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#  &quot;destination&quot; =&amp;gt; &quot;_site&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#&amp;#125;)).process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      system &lt;span class=&quot;string&quot;&gt;&quot;bundle exec jekyll build&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# fix the problem caused by updating the modules to the latest version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    desc &lt;span class=&quot;string&quot;&gt;&quot;Generate and publish blog to gh-pages&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task &lt;span class=&quot;symbol&quot;&gt;:publish&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;symbol&quot;&gt;:generate&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;constant&quot;&gt;Dir&lt;/span&gt;.mktmpdir &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |tmp|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;mv _site/* &lt;span class=&quot;subst&quot;&gt;#&amp;#123;tmp&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;git checkout -B gh-pages&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;rm -rf *&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;mv &lt;span class=&quot;subst&quot;&gt;#&amp;#123;tmp&amp;#125;&lt;/span&gt;/* .&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message = &lt;span class=&quot;string&quot;&gt;&quot;Site updated at &lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;constant&quot;&gt;Time&lt;/span&gt;.now.utc&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;git add .&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;git commit -am &lt;span class=&quot;subst&quot;&gt;#&amp;#123;message.shellescape&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;git push origin gh-pages --force&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;git checkout master -f&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        system &lt;span class=&quot;string&quot;&gt;&quot;echo yolo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task &lt;span class=&quot;symbol&quot;&gt;:default&lt;/span&gt; =&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:publish&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码就是用来帮助你简化发布环节的~ 当然你要是用shell自己写也是没问题的哈哈哈&lt;/p&gt;
&lt;blockquote class=&quot;special update&quot; markdown=&quot;1&quot; data-flag=&quot;gotsomeupdateshere&quot;&gt;&lt;br&gt;&lt;br&gt;### Update&lt;br&gt;&lt;br&gt;这里遗留了一个问题就是在切换分支的过程中因为会&lt;code&gt;rm -rf *&lt;/code&gt;, 所以我们在master分支定义在&lt;code&gt;.gitignore&lt;/code&gt;的文件就会丢失了. 比如我用&lt;code&gt;bower&lt;/code&gt;管理的各种包, 就会因为这个而在每次&lt;code&gt;rake&lt;/code&gt;之后丢失…&lt;br&gt;&lt;br&gt;为了解决这个问题, 我们需要修改以下上述的rakefile:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Dir&lt;/span&gt;.mktmpdir &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |tmp|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;mv _site &lt;span class=&quot;subst&quot;&gt;#&amp;#123;tmp&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 这里需要改成将_site整个文件夹移动到tmp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;mv _assets/vendors &lt;span class=&quot;subst&quot;&gt;#&amp;#123;tmp&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 然后把你需要保留的位于ignore中的文件也移动到tmp去&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;git checkout -B gh-pages&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;rm -rf *&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;mv &lt;span class=&quot;subst&quot;&gt;#&amp;#123;tmp&amp;#125;&lt;/span&gt;/_site/* .&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 这里就要变成移动tmp/_site下的所有文件到当前分支了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  message = &lt;span class=&quot;string&quot;&gt;&quot;Site updated at &lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;constant&quot;&gt;Time&lt;/span&gt;.now.utc&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;git add .&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;git commit -am &lt;span class=&quot;subst&quot;&gt;#&amp;#123;message.shellescape&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;git push origin gh-pages --force&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;git checkout master -f&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;mv &lt;span class=&quot;subst&quot;&gt;#&amp;#123;tmp&amp;#125;&lt;/span&gt;/vendors ./_assets/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 在checkout到master之后, 再把对应的保留文件移回来即可.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  system &lt;span class=&quot;string&quot;&gt;&quot;echo yolo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 这里就可以执行一些别的小命令, 比如我就会让它每次cat一下我的todo.log, 然后就能知道下一步要做什么了哈哈 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;恩, 这样一来, 就不用每次rake完还需要我们自己bower install一下了, 尤其是面对我们修改了dependencies的代码的情况, 就更加适用了~&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;u63D2_u4EF6_u5B89_u88C5&quot;&gt;&lt;a href=&quot;#u63D2_u4EF6_u5B89_u88C5&quot; class=&quot;headerlink&quot; title=&quot;插件安装&quot;&gt;&lt;/a&gt;插件安装&lt;/h2&gt;&lt;p&gt;  根据jekyll插件的设定, 主要有三种插件安装的方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在根目录下新建&lt;code&gt;_plugins&lt;/code&gt;文件夹, 然后把对应的&lt;code&gt;*.rb&lt;/code&gt;插件文件放进去就行了;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;_config.yml&lt;/code&gt;文件中增加一个&lt;code&gt;gems&lt;/code&gt;关键字, 然后把要引用的插件用数组形式存储其中即可;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;Gemfile&lt;/code&gt;中添加相关的插件;&lt;/p&gt;
&lt;p&gt;三种方法都可以, 甚至完全可以同时使用~ &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恩~ 快去安装插件去吧!&lt;/p&gt;
</summary></url><url><title>当你出现在Designer News的头条之后会发生什么?</title><loc>http://taoalpha.me/blog/2014/11/25/read-what-happens-when-you-appear-after-the-designer-news-headlines/</loc><publish>2014-11-25T12:00:00.000Z</publish><summary>&lt;p&gt;本文原文来自 &lt;a href=&quot;http://blog.pexels.com/what-happens-when-youre-1-on-designer-news/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What happens when you’re #1 on Designer News &lt;/a&gt;, 内容主要是介绍了一个上周的DN头条产品, 在DN的首位占据了大概12个小时的时间, 获得了48的赞和16个评论, 然后他们分析了这一段时间的一些数据, 很有意思, 值得一看哦~&lt;/p&gt;

&lt;p&gt;一些背景数据: DN目前大约有17000个注册用户, 主要受众是设计圈~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总体指标:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一些关于直接来自DN的用户总体指标:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;1900 用户&lt;/li&gt;&lt;br&gt;&lt;li&gt;5600 PV&lt;/li&gt;&lt;br&gt;&lt;li&gt;平均一次访问时长: 1:40min&lt;/li&gt;&lt;br&gt;&lt;li&gt;蹦失率: 60%&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;其他一些结果:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而因为一些看客们在社交媒体上分享了我们的网站, 所以我们实际获得了更多的访问者, 甚至在某个blog中露了一次脸:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SitePoint&lt;/a&gt;的报道(带来了500的访问者)&lt;/li&gt;&lt;br&gt;&lt;li&gt;大约50条Tweets&lt;/li&gt;&lt;br&gt;&lt;li&gt;来自Google+的100位访问者&lt;/li&gt;&lt;br&gt;&lt;li&gt;来自facebook的1000位访问者&lt;/li&gt;&lt;br&gt;&lt;li&gt;PV的峰值达到了80/min&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;有几个大牛也在twitter上转载了关于我们的产品推文.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用户的其他属性:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DN的用户基本是30岁左右, 来自美国本土的MacBook用户, 通常使用的也都是Chrome(当然他们中多数都厌恶IE, 哈哈. PS: who doesn’t?):&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;OS: &lt;strong&gt;83%&lt;/strong&gt; Mac, &lt;strong&gt;11%&lt;/strong&gt;  windows&lt;/li&gt;&lt;br&gt;&lt;li&gt;Mobile:  &lt;strong&gt;95%&lt;/strong&gt; Desktop, &lt;strong&gt;4%&lt;/strong&gt; Mobile, &lt;strong&gt;1%&lt;/strong&gt; Tablet&lt;/li&gt;&lt;br&gt;&lt;li&gt;Browser: &lt;strong&gt;88%&lt;/strong&gt; Chrome, &lt;strong&gt;11%&lt;/strong&gt; Safari, … , &lt;strong&gt;0%&lt;/strong&gt; IE!!!&lt;/li&gt;&lt;br&gt;&lt;li&gt;Coutries: &lt;strong&gt;40%&lt;/strong&gt; 美国, &lt;strong&gt;10%&lt;/strong&gt;的英国, &lt;strong&gt;5%&lt;/strong&gt;的加拿大, &lt;strong&gt;4%&lt;/strong&gt;的德国, &lt;strong&gt;4%&lt;/strong&gt;的瑞士;&lt;/li&gt;&lt;br&gt;&lt;li&gt;Language: &lt;strong&gt;85%&lt;/strong&gt;的英语;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;br&gt; &lt;img src=&quot;http://i.imgur.com/QT3sh0B.png?1&quot; alt=&quot;75% of the users were between 25 and 34 years old and only 8.8% were female&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;如上~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;博主说:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;对于一个小产品或者说初始项目而言, 这种小站或者特定细分的垂直站的推广也是不容小觑的哦~ 不过从用户属性来说, DN这种垂直站点的用户属性确实非常突出, 集中啊.&lt;br&gt;&lt;/code&gt;&lt;/p&gt;
</summary></url><url><title>What does it mean to be simple?(译)</title><loc>http://taoalpha.me/blog/2013/06/08/read-what-does-it-mean-to-be-simple-translated/</loc><publish>2013-06-08T13:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;什么才意味着真正的简单呢?(What does it mean to be simple?)&lt;/h4&gt;&lt;br&gt;所有的设计师都在说”简洁性”是多么多么的重要,那么,究竟什么才真正意味着简单呢?多数情况下我我们认为简单意味着更少,通过去掉一些事物来达到简单的目的. 我们以为通过把内容放置在明显位置,可以帮助用户更好的集中注意力,或者采用使用符号列表而不是段落的形式,会有更多的人愿意去阅读;亦或者通过将文本内容缩略到一半可以让内容更清晰. 但是简单并不意味着”更少”.一个更准确的定义应该是”刚刚好”.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;唔,我可能过于简单了…&lt;/p&gt;
&lt;p&gt;在一些时候,设计需要更多的东西来实现简单.所以,一个更好的定义应该是:”刚刚好可以满足理解以及实现我们的目标”.不采用隐藏或者去除某些东西,我们采用如下的方法让我们的设计变得更加有意义的简单:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;只有一个核心观点(不要多个观点或者一个不完全的观点)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;随时间而逐渐增强清晰性(不要被不恰当的细节淹没)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;一致性(避免使用不必要的特殊界面和信息)&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;只有一个核心观点&lt;/h5&gt;&lt;br&gt;注意力和兴趣是你试图让某人做任何事的首要因素.最好的吸引注意力和建立兴趣的方式是只展现一个核心的观点,全面的阐述这一观点.这将允许用户来做一个二选一的选项:”我感兴趣啊?”.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;在介绍某个特性的时候,应当让用户能立刻”看到”自己的操作会产生的任何后果,这将帮助用户更好的理清内容同时对于下一步要做什么有更好的掌控. 只有一个核心目标的原则是贯穿始终的,从全局到每个细小的属性.&lt;br&gt;&lt;em&gt;“除了’Send Message’,没有更好的词语可以描述清楚’Send Message’”.—Des Treynor&lt;/em&gt;&lt;br&gt;这是一个非常典型的例子,它的结果非常清楚(就是Send Message).这里其他的版本可能是”Go”或者”Submit Now”,或者仅仅是”Send”.但这些都没有”Send Message”那样清楚,只用两个词就可以让用户非常清楚的理解其含义,从而更轻松的做出选择. 随着转移到更加复杂的一些属性,让其概念清晰易于选择的困难程度呈指数级增长,但是我们的目标应该是一致的:利用一个核心观点指引用户合理的设定他们的预期.如果我们没能成功的做到这一点,那么感知起来的复杂度就会有所增加.&lt;/p&gt;
&lt;p&gt;只有一个核心观点包括以下内容:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;二选一的:足够简单只有两个选择…允许人们方便的评估他们同意与否&lt;/li&gt;&lt;br&gt;    &lt;li&gt;用朴实的语言来陈述:尽可能的清晰以及明显的表述问题或者选择的机会&lt;/li&gt;&lt;br&gt;    &lt;li&gt;不断的重复:每一个界面都应该在适当的位置不断重复恰当的问题或选择的机会.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;让预期变得明显:每一个问题或者选择机会的结果都应该可预计;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;随时间提升其清晰性&lt;/h5&gt;&lt;br&gt;在获得人们的兴趣之后,下一步就需要让他们投入时间和精力了.即便当你的用户发现你的应用非常有趣,也依然有很多”摩擦”可能会出现.如果他们被这些阻拦了,那么转化率依然很低.你必须要清晰的没有任何困扰的展示给他们他们可以实现他们的目标.&lt;br&gt;&lt;em&gt;“网络出版:写的太少,无法清楚地表达意思.写的太多,会因为太厚而无法浏览从而有很多内容被跳过.”–Ryan Singer&lt;/em&gt;&lt;br&gt;就好比很多对话可以随着时间的进行而变得更清楚更准确,正确的时间出现的正确的细节将会增加最终获得满意结局的机会.去除相关的但是不恰当的细节,将可以帮助用户不断前进而减少被分散的机会.谨记,每一个无法获得有意义的结果的时间和精力的投资都会增加感知的复杂性.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;随时间提升清晰性可以采用如下方法:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;清楚的开始和结束–确保界面中如何清楚的做某一件事实非常清楚地.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;逐步解密–要做到恰到好处:把用户的焦点只放在那些有主意他们理解当前任务的细节上.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;明显的路径–总是提供一个清晰的路径到下一步或者下一层次的细节.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;一致性&lt;/h5&gt;&lt;br&gt;一个新用户和一个老用户是完全不同的两种用户.如果你想要让人们一直停留这里,那么你需要帮助他们,让他们感觉自己掌握了这一应用的每一部分,而且完全没有必要去担心下一个是什么. 每一个特性都需要足够的便捷而让用户感到愉悦以及他们的时间和精力得到了最好的利用.&lt;br&gt;&lt;em&gt;“无论是风中舞动的旗子,空的和挤满人的站台的区别,亦或者是那些暗示着可行的路径的脚印,我们一直寻找着世界上那些明显的标志来提供指引.”–Don Norman&lt;/em&gt;&lt;br&gt;你给予他人友好的表情可以带给他们自信,而且可以收获笑容.帮助人们看到那些他们之前看到的内容,基于他们已经知道的事情获得结论.当你确实有一个复杂的问题时,你的界面比较复杂并没有错,但是毫无理由的把用户扔在一个陌生的地方,而且不给于任何指引或者地图,那就是不友好了.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;通过以下方法保持一致性:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;巩固惯例–使用相似的处理过程,使用相似的方法.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;建立模式–把相似的事物放在相似的地方,这样用户就可以根据直觉来行动了.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;偶尔破坏规则–知道什么时候一个界面需要独一无二,实际上可能比你想象中更少一些.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;当多就是少的时候&lt;/h4&gt;&lt;br&gt;目前盛行的观念认为简单就是少…删减再删减.但是简单真的应该针对理解和清晰的目标…我们能做出让用户立刻就明白正在做什么,同时可以非常明确的了解下一步将做什么的设计吗?为了实践实现简单,我们可以坚持只有一个核心观点,随时间提升其清晰性,同时利用一致性帮助用户更高效的使用. 在这种情况下,更多也可能就是更少…通过在适当的时候添加适当的细节,整个处理过程将会变得更加简单易用.简单性促使我们认为它应该是更少的,但是其实它真的应该是”刚刚好”. Edit By &lt;a href=&quot;http://mahua.jser.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MaHua&lt;/a&gt;&lt;p&gt;&lt;/p&gt;
</summary></url><url><title>关于Landing page - serial landing page的重设计</title><loc>http://taoalpha.me/blog/2014/11/25/read-weight-on-landing-pageserial-landing-page-design/</loc><publish>2014-11-25T08:00:00.000Z</publish><summary>&lt;p&gt;&lt;a href=&quot;http://justinjackson.ca/serial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文&lt;/a&gt;关于landing page的一些观点还是很不错的~ 所以特地翻译其中的一些不错的观点分享如下:&lt;/p&gt;

&lt;p&gt;作者举了一个简单的例子(来自serial-当前非常火爆的一个podcast)作为分析示例:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://serialpodcast.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://justinjackson.ca/wp-content/uploads/2014/11/original-1-1024x532.png&quot; alt=&quot;Original Serial Podcast splash page&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里作者指出上例中的一个重要错误: 当你要尝试说服某人的时候, 你不能使用”我们”(us), 而应该使用”他们”(them).&lt;/p&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;他特意勾出了上图文本中的主语们:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://justinjackson.ca/wp-content/uploads/2014/11/original-corrections-1024x532.png&quot; alt=&quot;Serial splash page with underlines&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以看到上文中直到第五句话才提到了听众, 而实际上听众才应该是这段文本所要针对的核心.&lt;/p&gt;

&lt;p&gt;什么意思呢? 用&lt;br&gt; &lt;a href=&quot;https://www.goodreads.com/work/quotes/2370171-how-to-win-friends-and-influence-people&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dale Carnegie&lt;/a&gt;的话说就是:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;“People don’t care about what you want. They only care about what they want.”&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;或者用 &lt;a href=&quot;http://productpeople.tv/2013/01/30/ep11-brennan-dunn-part1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brennan Dunn&lt;/a&gt;的话说就是:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;“People buy the outcomes that they want.”&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;意思就是写作要围绕这读者来写才行. 我们所编写的小故事不能是关于我们的, 核心的人物应该是他们, 你的读者.&lt;/p&gt;

&lt;p&gt;于是乎, 作者就改写了上述的这个捐赠页面:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://justinjackson.ca/wp-content/uploads/2014/11/re-write-1024x694.png&quot; alt=&quot;Justin Jackson re-writes Serial podcast landing page&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;上面这个版本着重强调了Serial的听众的两个属性:&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;他们痴迷于这一节目. 对他们而言, 最糟糕的事情莫过于这个节目的结束;&lt;/li&gt;&lt;br&gt;&lt;li&gt;他们觉得自己是节目的一部分, 自己是促成与这一节目的主人公之一. 他们开始参与Serial相关的party, 聚会, 调研等等, 这成了他们自己的节目.&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;于是基于上述这两个属性, 作者给予Serial了一些中肯的建议: &lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;在着陆页打开的同时引用 &lt;a href=&quot;https://twitter.com/chijs/status/536340442309070848&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@chijs的这条tweet&lt;/a&gt;. 这会有助于建立一个中心主题:”如果再不更新了怎么办?”&lt;/li&gt;&lt;br&gt;&lt;li&gt;邀请听众作为结局问题的一员: 告诉他们他们可以影响自己所喜爱的节目的未来;&lt;/li&gt;&lt;br&gt;&lt;li&gt;制造一些紧张感, 比如使用类似”仅本周”的词语;&lt;/li&gt;&lt;br&gt;&lt;li&gt;呼吁听众去采取行动. 比如不用”donate”这样的按钮而使用”I want to help”这样的按钮;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;本来到此为止了,  结果作者把文章发表后, 很多网友开始在twitter上回复他, 给他提了很多的建议, 于是他又更新了一个版本:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://justinjackson.ca/wp-content/uploads/2014/11/update-landing-2-1024x622.png&quot; alt=&quot;Updated: Serial podcast landing page teardown&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;其中变化的部分主要有:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;柔化了背景( &lt;a href=&quot;https://twitter.com/thegreygorilla/status/536906062683963392&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mark Bunnker&lt;/a&gt;表示原来的背景很像是一个警告页面… 很像Tokyo hot的FBI warning是吧…哈哈)&lt;/li&gt;&lt;br&gt;&lt;li&gt;加上了Serial的logo(来自 &lt;a href=&quot;https://twitter.com/JamesLove31/status/536928750810562560&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;James Love&lt;/a&gt;的建议), 以及一个Sarah Koenig的照片从而显得更加人性化更真实( &lt;a href=&quot;https://twitter.com/shennyg/status/536959318101204992&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shen DeShayne&lt;/a&gt;的建议);&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/nathanbarry/status/536930868275974145&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nathan Barry&lt;/a&gt;提议的新题目:”帮助我们讲述更好的故事”;&lt;/li&gt;&lt;br&gt;&lt;li&gt;还有很多关于CTA(call to action)的建议, 我最终采用了 &lt;a href=&quot;https://twitter.com/sanityinc/status/536898059389902848&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Steve Purcell’s&lt;/a&gt;的;&lt;/li&gt;&lt;br&gt;&lt;li&gt;对排版做了很多的细化, 更精简的语言, 更加强调了听众这一核心以及他们的帮助对于Serial第二季的播出的影响;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;果然是众人拾柴火焰高… 瞬间华丽丽的变身有木有!! 要是我是serial, 果断立刻接着这个活动, 直接替换donate页, 甚至直接向yahoo学习, 来个圣诞节donate系列, 每天一个版本~ 然后根据每天的捐款数, 最后选出几个最佳来哈哈哈 &lt;/p&gt;
</summary></url><url><title>Why Sass?</title><loc>http://taoalpha.me/blog/2013/12/16/read-translation-why-sass/</loc><publish>2013-12-16T08:00:00.000Z</publish><summary>&lt;p&gt;好久不写HCI翻译项目了~恩,拾起~哈&lt;br&gt;===========================================正文===============================&lt;br&gt;原作者:&lt;a href=&quot;http://alistapart.com/author/dancederholm&quot; target=&quot;_blank&quot;&gt;DAN CEDERHOLM&lt;/a&gt; @ November 13,2013&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://alistapart.com/article/why-sass&quot; title=&quot;origin article&quot; target=&quot;_blank&quot;&gt;原文&lt;/a&gt;备注: 这是DAN CEDERHOLM&amp;lt;&amp;lt;Sass For Web Designers&amp;gt;&amp;gt; 一书的一部分摘要.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正文:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我并不是一个Sass的虔诚信奉者. 我一般都是自己写样式表! 我不需要任何帮助!而且我当然不想要给我的工作增加任何的复杂成分.所以,请走开(Sass)!&lt;/p&gt;
&lt;p&gt;无论如何,这是最初的想法.但是实际上,Sass以及其他的CSS预处理程序都可以成为一个非常强有力的帮手,一个任何样式作者都可以轻易的在日常工作中使用的工具. 它确实让我犹豫了好一阵儿,不过我非常确定我很高兴我真的这么做了.&lt;/p&gt;
&lt;p&gt;而这也是我想要写这本书的原因. 来分享我是如何通过使用Sass在保持我自己10年来形成的舒适的CSS写作方式的同时让自己变得更加高效的.最初,我对Sass有很多误解,这也是一直阻止我去接近它的原因.我一直担心自己需要完全变更自己已有的写作和管理样式表的方式.因为CSS很多时候确实很琐碎,所以对于作者们希望保护自己的创作的心情是可以理解的~不是吗?&lt;/p&gt;
&lt;p&gt;恩,所以,我在此向大家展示Sass是如何在不打断你的工作和处理方式的同时让你的生活变的容易的~我会阐述Sass的各个方面: 如何安装?如何使用?以及它是如何在我自己的项目中帮助我们的.幸运的话,我希望你也能成为一个Sass的信奉者~&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Sass的电梯游说&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;假如你要做个小改动,比如说一个颜色值,然后你发现自己需要在多处修改这个值.难道你不希望CSS可以允许你这么做吗:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$brand-color: #fc3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color: $brand-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nav &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         background-color: $brand-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你只需要在一个地方修改这个值,然后整个样式文件都会生效,这样岂不快哉?用Sass就可以!~&lt;/p&gt;
&lt;p&gt;再比如在样式文件中多处重复使用的样式模块:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果把这些共享的规则都放进一个重复使用的模块中不是更奇妙更好吗? 再一次,利用Sass你就可以只需要定义一次,然后在任何地方使用它了&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;     @mixin default-type &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     margin-bottom: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     font-size: 14px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     line-height: 1.5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@include default-type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;footer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     @include default-type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些都是Sass的功劳!这两个极为简单,只能算得上Sass工作的皮毛的例子已经足以告诉你Sass是如何让样式文件的制作更加的快捷,更加的容易以及更加的灵活~这是一个在网页设计领域非常受欢迎的助手, 因为任何一个制作网站的人都知道…&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;CSS很难&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;我们需要面对这个事实: 学习CSS并不是一个容易的事情.了解每个属性都能做什么,层叠是如何工作的,哪个浏览器支持哪个属性,选择器,各种技巧等等,这并不容易.再加上我们现在这个时代流行的界面的复杂度,以及长时间的维护…等等,为什么我们再次开始抱怨这些? 这是一个迷,而我们中的部分人会非常享受最终的完工一刻~&lt;br&gt;&lt;br&gt;但CSS的问题还在于它最开始并不是用来做现在做的事情的.当然,因为浏览器快速的而更新以及CSS3的实施等,CSS有了一个非常不错的转变~但是我们仍然需要依赖那些技术,或者说,那些技巧.比如说float这个属性,其实是设计来让在一个文本块中的图片能够很好的对其.对,就是这样,而我们则逐渐利用这个属性来调整整个界面的布局~&lt;br&gt;&lt;br&gt;我们的样式表更是拥有者大量的重复.颜色,字体,以及经常使用的成堆的样式属性等等.一个典型的CSS文件是一个非常极端的线性文档–那种让一个面向对象的程序员想要把自己的头发揪掉的东西…我并不是一个面向对象的程序员,但是我确实剩下没多少的头发…你可以尽可能曲解此意..&lt;br&gt;&lt;br&gt;随着界面和网页应用变得更加强大和复杂,我们正在将原本的CSS运用到更加广阔的地方,那些想都没想过的地方.我们实际上很享受其中.幸运的是,浏览器一致在非常快速的适应着最新的CSS特性,利用更加高效抢到的属性以及选择器来解决各种现在遇到的问题.那些像CSS3新的层级属性:border-radius,box-shadow,以及高级的选择器,变化,变形,动画等等.这是一个令人兴奋的时代,当然,CSS本身还有很多的欠缺.随着漏洞的逐渐修补完善,样式的制作者们的生活应该变得更加容易~&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;DRY原则&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;如果我们窥视到软件工程的世界(这里我更喜欢用窥视而不是逛悠,也更加自然),我们可以很快的了解到那些关于组织结构,变量,常量,控制变量等概念都是非常根深蒂固的,对于创建复杂系统都是非常关键的工作.&lt;br&gt;&lt;br&gt;你可能听说过”不要重复(代码)”(DRY)原则.由Andy Hunt以及Dave Thomas在他们的&amp;lt;&lt;pragmatic programmer=&quot;&quot;&gt;&amp;gt;一书中提出,含义是:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;知识的每一个碎片在其系统内都一定有一个单独的,不混淆的,权威的表述.&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;这一观点的提出是因为重复的代码很容易造成失败以及对开发者造成困惑.同样作为常识:把公用的模式只写一遍然后在整个程序中重复使用.这对于维护代码也会更加高效而容易.&lt;br&gt;&lt;br&gt;CSS就是典型的DRY原则适用者.曾经,它充斥着各种重复的规则,声明,属性等等,在整个样式文件中我们不断的重复着那些颜色,字体等常用的样式类型…一旦看过一个适当的CSS文件,一个DRY原则实践者一定会泪牛满面的,先是困惑,然后会遇到失望于挫折.&lt;br&gt;&lt;br&gt;“如何维护这些恶心的符号!@#$?”他们会问.&lt;br&gt;“我告诉你过关于IE的bug吧?”你一定会带着一丝厌恶的回答他.&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;那么为什么CSS会这么的难用呢?&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;我们可以从CSS的共同创始人Bert Bos的&lt;a href=&quot;http://bkaprt.com/sass/3/&quot; target=&quot;_blank&quot;&gt;一篇文章&lt;/a&gt;中获得一些提示:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;  CSS停用了很多在其他语言中使用的比较强大的功能,比如宏,变量,符号常量,条件语句,变量表达式等等,那是因为这些东西会让很多厉害的使用者们获得更多的方便和技巧,但是那些经验比较少的人常常会不自知的陷入其中,不能自拔; 或者更可能的是,他们甚至不会去尝试接近CSS.这算是一个平衡,而且对于CSS而言,这个平衡还略有不同.&lt;br&gt;  &lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;最初的CSS构架是经过深思熟虑后的.他们非常希望能有更多的人可以自己创建网站.他们希望CSS能成为一个足够强大的工具来自定义他们的网页,在易用和易于理解的同时又能和内容的展示区分开来.我当然对此表示非常尊重.同时,我们又必须承认我们目前的工作正在越来越复杂,越微妙,也越来越有挑战性,无论是维护还是未来发展.&lt;br&gt;&lt;br&gt;幸运的是,还是有很多方法可以帮助我们脱离苦海,其中之一就是使用Sass.&lt;br&gt;&lt;br&gt;&lt;h3&gt;&lt;strong&gt;什么是Sass?&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;Sass是一个CSS的预处理程序–一个介于样式表和css文件之间的中间层.Sass(Syntactically Awesome Stylesheets的简称)为CSS填补了不少漏洞,允许你利用DRY原则更快的coding,更加高效也更加容易的维护.&lt;br&gt;&lt;br&gt;Sass官网上给出的简介如下:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;  Sass是一个基于CSS之上的元语言,用来更加整洁以及结构化的方式来描述一个样式文本,比单纯的CSS要更加强大.Sass同时提供了一个更加简单,更加优雅的CSS语法以及更多样的特性使用来创建更加可控的样式文件.&lt;br&gt;  &lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;所以,当常规的CSS不能允许的诸如变量,复用块以及其他的好东西,Sass都可以提供,为你的CSS开启了”高级功能”模式.之后又可以通过一个命令行程序或者网页框架插件把这些语法翻译成一个常规的CSS文件.&lt;br&gt;&lt;br&gt;更特别的是,Sass是一个CSS3的扩展,而且它的SCSS语法–我们稍后会谈到–是CSS3的父集.意思是,任何有效的CSS3文本都是一个有效的SCSS文本.这促成了Sass可以作为一个你很容易使用的工具.开始Sass的过程是没有任何痛苦的,而且你可以随意的使用或多或少的SCSS语法~这也意味着将一个现成的CSS文件转为SCSS格式的文件是可以分步进行的,随着你对Sass的功能的了解而逐步加深.&lt;br&gt;&lt;br&gt;稍后,当你已经熟练使用Sass时(这不会需要多少时间),它就会变成一个CSS的扩展,非常自然,就好像CSS自己把我们想要它弥补的那些漏洞补上了一样.这也是为什么,一旦我开始使用Sass后,我就从来不曾认为它有任何的尴尬或者费劲–它就像CSS应该做到的那样.一旦你开始尝试了,你很有可能就会永远的离不开它.&lt;br&gt;&lt;br&gt;&lt;h3&gt;&lt;strong&gt;Sass的误解&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;我之前提到过我非常犹豫的尝试Sass.这也是因为我在使用它之前听到的大量的传闻.我需要先了解Ruby或者高级的命令行技巧吗?我需要完全改变我写css的方式吗?输出的css会不会很臃肿完全不能看呢?&lt;/p&gt;
&lt;p&gt;谢天谢地,以上所有的问题的答案都是否定的,当然,但是我确实能从各种网络渠道到听到很多人在提到Sass的时候蹦出这些问题…让我们来清理一下一部分流言:&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;我很恐惧命令行…&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;无论从哪方面讲我都绝对不是一个命令行专家,但是这么多年来,我或多或少的在不同地方学到了一些,刚刚够让我陷入困境的…我不担心切换文件系统或者使用Git命令等.&lt;br&gt;&lt;br&gt;那意味着,我同情那些设计师以及前端开发者,他们从不担心这些.在一些人群中确实有一种命令行的恐慌.对于Sass,只需要非常少的一些命令行操作-实际上,一个命令行就足够做到所有了~更何况,现在有很多app以及网络框架都可以让你免受命令行的打扰来实现一切.(在下一章我会介绍这些工具)&lt;br&gt;&lt;br&gt;所以,如果你想要避开命令行,那么不要让命令行成为阻止你接触Sass的理由~&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;我不想要改变我写CSS的模式&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;这是我当时所持有的一个误解.我特别在意的就是我的样式文件的结构和组织方式.这里有非常多的个人习惯存在其中. 但是要记住,因为SCSS是一个CSS3的父集,所以你完全不用改变任何你写CSS的方式和习惯.注释,缩进或者不缩进等,所有你所偏好的设置都可以保留在.scss文件中.一旦我了解了这些,我就没有任何恐惧的开始了Sass之行.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;我不想要SASS改变我设计的方式&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;另一方面,Sass并不会解决你所有的问题,也不会纠正你的话习惯.更无效率的是,臃肿的样式即便用Sass也会同样的臃肿.良好的组织以及敏捷的思考仍然适用这里.实际上,有很多例子证实Sass可以放大一些弊端,这些我们稍后也会到.但是当使用的足够合适和明智,Sass将会成为一个非常优秀的网页助手.&lt;/p&gt;
&lt;p&gt;好吧,我们先把所有的细节都移开,让我们先玩些有趣的事情.我想你一定会被Sass所能做到的事情所震惊的.在下一章,我会建立起我们的工作流–Sass是如何适应你的处理流程以及在命令行或者app中操作它是多么的简单.让我们开始Sass吧~凡人们!&lt;/p&gt;
&lt;p&gt;DONE!–有兴趣的可翻阅全书! 从国外网盘找到了先关资源~&lt;a href=&quot;http://pan.baidu.com/s/1b4Lgj&quot; title=&quot;Sass&quot; target=&quot;_blank&quot;&gt;分享给大家&lt;/a&gt;(因为公开分享会导致审核失败…所以只能私密了,领取码为:77ur)~有机会可能会翻译全书.&lt;/p&gt;
&lt;/pragmatic&gt;</summary></url><url><title>USING SASS–Chapter 4(全书完)</title><loc>http://taoalpha.me/blog/2013/12/25/read-translation-using-sass-chapter-4/</loc><publish>2013-12-25T12:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Sass and media queries&lt;/strong&gt;&lt;/h2&gt;&lt;br&gt;本书最后一章.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;我希望本书能一直聚焦在sass的基本应用上, 以此来证明sass不需要扰乱你本身现有的工作流. 但是在最后一章, 我还是想要讨论一些使用Sass和Media Queries部分的高级技巧, 这些技巧已经帮助我简化了很多css中非常复杂的地方.&lt;/p&gt;
&lt;p&gt;Sass的强大超出你的想象.利用一些变量和几个mixin就能让你的生活变得简单许多. 但是它也可以做很多除以之外的部分. 在这里我希望能分享的是我是如何利用Sass来制作响应式布局以及高保真的项目的, 以及它是如何再次把附在的事情变得非常易于管理的.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;嵌套的Media Queries&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;响应式布局站点的奠基石之一就是Media Queries. 通过监听浏览器的不同维度的信息, 就可以针对这些信息给予对应的样式, 这就是创建响应式布局的基础.&lt;/p&gt;
&lt;p&gt;比如, 你可能想要在浏览器小于800px宽的时候调整其中元素的宽度, 就需要用到Meida Query:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;65%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (max-width: &lt;span class=&quot;number&quot;&gt;800px&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; auto&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Sass中, 你可以通过把media queries嵌套在原本的声明之中, 然后再编译的时候就会自动分散到对应情况下独立的声明了~NICE!&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	float:left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: 65%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size:16px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	line-height:1.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media screen and (max-width: 800px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      float: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      width: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media screen and (max-width:500px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-size:12px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		line-height: 1.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上在编译后就会成为之前分开写的时候那样了(除了500px没有以外)~(见第一个代码示例~)&lt;/p&gt;
&lt;p&gt;嵌套media queries可以避免你在多个断点测试的时候不断的重写selector(本例中就是section.main)了.&lt;/p&gt;
&lt;p&gt;同时media-query的声明就放在元素定义的下方, 本身也是一种极大的便利. 我已经感受到了在多个断点(就是分辨率的意思,此处)下, 如果把每个断点的media-query都写在对应元素下的极大好处了~比单独放在一个文件或者样式的最后面都要好很多.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Using variables to define breakpoints&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;Media-query bubbling是sass为响应式设计带来了极大的便利性. 但是这里依然还会有很多重复性的代码. 在每一个声明里, 我们都会定义一个断点(比如之前的800px和500px), 通常在设计中, 我会基于特定的设计来调整断点,然后观察页面的布局反应, 而不完全依赖于静态的设备尺寸~换句话说, 这些断点都是可能变化的. 而如果能够定义一次, 然后每次都在一个地方修改会好很多. Sass中的变量再次有了用武之地哈!&lt;br&gt;&lt;br&gt;首先我们来试着创建三个断点. 命名的时候注意灵活而不是和某个设备绑定了~&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$width-small: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$width-medium: 800px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$width-large: 1200px;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;通过把断点设定为Sass中的变量, 我们就可以在之后的使用中去调用这些变量. 比如:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	float:left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: 65%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size:16px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	line-height:1.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media screen and (max-width: $width-large)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      float: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      width: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media screen and (max-width:$width-medium)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-size:12px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		line-height: 1.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;编译(略)&lt;br&gt;如果我们稍后决定修改这些断点,就可以只需要去编辑变量本身,而sass会自动把后面的所有引用修改了~ 这对于开发响应式布局的页面有着极好的帮助, 因为设计者需要根据不同的页面宽度来决定什么样的断点是合适去调整布局的~&lt;br&gt;&lt;br&gt;这里甚至是支持数学计算的, 比如我们可以在断点的值上进行加减的操作.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	float:left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: 65%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size:16px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	line-height:1.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media screen and (max-width: $width-large+1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      float: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      width: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* 这里最后编译后就会变成1201px; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media screen and (max-width:$width-medium-1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-size:12px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		line-height: 1.4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* 这里最后编译后就会变成799px; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;更进一步, 你还可以把整个media query都定义成一个变量(而不只是那个数字);&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mobile-first: &quot;screen and (min-width:300px)&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media #($mobile-first)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#content &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-size: 14px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		line-height: 1.5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;注意此处的转义符号: #{},这是一个特殊的方式, 专门用来提示sass去编译包含属性名称或者selector名称的变量, 否则会当成文本来处理的.&lt;br&gt;&lt;br&gt;当你把media-queries嵌套在对应的声明中后, 变量的定义会让你省去很多的重复. 但是我们可能甚至想要进一步的简化, 就需要使用@content模块了, 也是在Sass 3.2 中引入的.&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;Combining @content blocks and mixins&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;通过使用Sass的@content, 你可以把整个样式模块都传递给一个mixin之中, 而且sass还可以把这些模块跟随mixin一起放回到声明之中. 听起来似乎有些困惑, 但是实际上使用起来是非常简单而且便捷的.&lt;br&gt;&lt;br&gt;让我们创建一个响应式模块来处理三个不同的断点,利用@content来引入我们需要引入的模块样式. 同时依然使用变量来处理断点宽度值.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$width-small: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$width-medium: 800px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$width-large: 1200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin responsive($width)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@if $width == wide-screens &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@media only screen and (max-width: $width-large)&amp;#123;@content;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@else if $width == medium-screens&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@media only screen and (max-width: $width-medium)&amp;#123;@content;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@else if $width==small-screens&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@media only screen and (max-width: $width-small) &amp;#123;@content;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;注意到Sass同样支持@if,@else语句, 通过它们我们就可以来评估$width变量的大小从而使用不同的样式模块. 比如, 如果我们传进mixin的是medium-screens变量, sass就可以把media-query按照我们设定给$width-medium的变量来处理. @content允许我们更进一步的传递我们插入到media-query之中的样式模块给mixin. 利用这么一个mixin, 我们就可以在任何地方使用一个非常简洁的模式去调用它:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#content&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: 70%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(wide-screens)&amp;#123;width:80%;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(medium-screens)&amp;#123;width:50%; font-size: 14px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(small-screens)&amp;#123;float:none;width:100%;font-size:12px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;上述编译结果(略)&lt;br&gt;&lt;br&gt;是不是觉得很神奇呢~ Sass可以把任何样式恰当的传递给media-query并且重构整个声明. 利用@content模块来补充需要填写在media-query中的内容就可以让整个响应式环节的设计更加简单—少了很多的重复.&lt;br&gt;&lt;br&gt;如此再去理解一个元素是如何在不同的设备中变化适应就会非常容易了, 比如, 随着设备的不同, 同一个网站的同一个标题为什么会不一样大小呢? 其实隐藏其中的就是这么简单:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 40px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(wide-screens)&amp;#123;font-size: 48px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(medium-screens)&amp;#123;font-size: 32px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(small-screens)&amp;#123;font-size:20px;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;编译略&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;Keep the output in mind&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;一定要指出的就是上述方法会导致最后的编译输出结果出现大量重复的media-queries. 完美的事情就是Sass可以允许我们通过嵌套queries来让结构变得更清晰, 更整合.&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blockquote&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(wide-screens)&amp;#123;width: 80%;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;figure &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include responsive(wide-screens)&amp;#123;margin: 0 0 30px 0;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此就会让编译更加高效, 因为公用的部分放进了一个media-query:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blockquote &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;figure &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media only screen and (max-width: 1200px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	blockquote&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		width:80%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	figure &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		margin: 0 0 30px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于一个非常大的,因为响应式设计而包含了很多常用的media queries断点的样式文件, 就可以通过这种方式减少一些体积~&lt;/p&gt;
&lt;p&gt;不幸的是, Sass不支持(至少目前是的)”聚合的media querry”,就如同我说的, 但是对于多数项目而言, 代价也就是编译的css文件会大一些而已, 但是针对其带来的易用性和很好的整合方式都是非常值得的. 到目前来说, 这就是我们如何做的了.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;RETINIZING HIDPI BACKGROUND IMAGES(背景图片的高清视网膜化)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;仿佛是觉得事情还不够麻烦, 随着高分辨率屏幕的诞生, 网页设计师们又遇到了一个新的挑战. 比如,苹果公司推出的非常华丽的视网膜屏幕, 就把像素数目再一次的翻倍了…这意味着我们会拥有更加清晰好看的图像,同时还可以对那些模糊的像素们说再见了! 但是这一切的前提都是你要花时间去创作这种高质量的图片.&lt;/p&gt;
&lt;p&gt;对于img元素, 这也意味着可以通过调整width而实现在展现2倍大小的图片而只占用一半的大小. 更甚者, 还可以用media-query和js来处理图像的展示方式(模糊到清晰的渐变).&lt;/p&gt;
&lt;p&gt;再次分享一个HiDPI的图片示例, Sasquatch Records 的logo, 是133x121px的大小. 对于支持更大分辨率的设备, 我们需要创建第二个版本, 是这一版本的两倍大(266x242px)同时需要把它压缩到133px来让它更加清晰.&lt;/p&gt;
&lt;p&gt;对于背景图片, 我们只需要简单的使用CSS media queries(在现在的支持mediaquery的浏览器中)就可以决定是否使用HiDPI的方式来渲染图片尺寸. 在我们的示例网站中, 比如, 我们需要一组社交网站的连接, 侧边栏的位置上. 每一个连接的icon都有一个特定的背景图片. 在dribbble的链接上, CSS把一个正常的分辨率的图片放置在文字的左侧:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.follow&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.dribbble&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; no-repeat&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(../img/icon-dribbble.png)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而对于那些HiDPI的显示器, 我们需要重置这一图片,换用另一个两倍大的图标,然后压缩到这么大~ 首先为了检测是否是支持HiDPI的显示器, 我们需要使用media query中的min-device-pixel-ratio属性.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; (-webkit-min-device-pixel-ratio: &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;),(min--moz-device-pixel-ratio:&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;),(-o-min-device-pixel-ratio:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),(min-device-pixel-ratio:&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;),(min-resolution:&lt;span class=&quot;number&quot;&gt;1.5dppx&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.follow&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.dribbble&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; no-repeat&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(../img/icon-dribbble-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;x.png)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-background-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-moz-background-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本质上, 我们认为如果显示器的分辨率在1.5倍与通常的分辨率,我们就是用一个更大的图标, 然后压缩这一图标来达到更清晰的目的.&lt;/p&gt;
&lt;p&gt;区别在于, 当在一个HiDPI的显示器上展示时, 会非常的清晰. 所有模糊的边际都会消失不见的.&lt;/p&gt;
&lt;p&gt;如你想象的那样, 要想让你的界面视网膜化, 你需要一堆的重复工作…每次都需要在media query中引用做好的第二张大图片, 以覆盖普通分辨率下的图片. 如下是sass是如何让这一过程简单化的.&lt;/p&gt;
&lt;p&gt;我们可以创建一个sass的mixin来处理所有的麻烦事, 在创建图片的时候就把两个文件名设置的有些关联~方便的找到普适的规律:&lt;/p&gt;
&lt;p&gt;如下是我在日常工作中使用的retinize mixin:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin retinize&amp;#123;$file,$type,$width,$height)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background_image: url('../img/'+$file + '.'+$type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media (-webkit-min-device-pixel-ratio: 1.5),(min--moz-device-pixel-ratio:1.5),(-o-min-device-pixel-ratio:3/2),(min-device-pixel-ratio:1.5),(min-resolution:1.5dppx)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;amp; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		background-image: url('../img/'+$file+'-2x.'+$type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			-webkit-background-size: $width $height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			-moz-background-size: $width $height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			background-size: $width $height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一行中设置了4个参数,是我们需要用来传递给他的图片信息:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;      &lt;li&gt;文件名称;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;文件类型, 即图片的格式;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;图片展示的宽度;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;图片展示的高度;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;在实际使用中,按照顺序填上对应的参数即可调用此mixin了~比如:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;li.dribbble a&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include retinize('icon-dribbble','png',24px,24px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回归mixin本身, 第二行则形成了一个常规分辨率下背景图片的规则~&lt;/p&gt;
&lt;p&gt;Sass支持信息的连接~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background-image: url('../img/'+$file+'.'+$type);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过添加文件的路径,然后加上文件名以及文件类型,就可以形成完整的一个路径信息,然后就可以和正常的信息一样使用了~&lt;/p&gt;
&lt;p&gt;放置好了常规分辨率的图片后, 我们可以添加media query来处理那些需要double的图片的设备. 首先是需要包含所有的浏览器属性(-webkit,-o等)以保证所有的浏览器都可以生效…&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin retinize&amp;#123;$file,$type,$width,$height)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background_image: url('../img/'+$file + '.'+$type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media (-webkit-min-device-pixel-ratio: 1.5),(min--moz-device-pixel-ratio:1.5),(-o-min-device-pixel-ratio:3/2),(min-device-pixel-ratio:1.5),(min-resolution:1.5dppx)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;amp; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		background-image: url('../img/'+$file+'-2x.'+$type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过&amp;amp;来指代调用此mixin的selector(前文中说到过).&lt;br&gt;注意到我们同样使用了sass的连接功能来添加-2x这个后缀到每个文件名来指代那些翻倍的图片文件. 用这种非常规律的命名方式来给你的图片命名是非常有利于sass的整合的~&lt;br&gt;比如:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;      &lt;li&gt;常规的图片名称: file-name.png;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;@2x 代表高质量的图片: file-name-2x.png;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;你当然不是一定要用-2x来代表高分辨率下的图片, 你完全可以按照你自己的喜好来选择合适的文件名称~但是我觉得2x最为简单刚好~&lt;/p&gt;
&lt;p&gt;这个mixin的最后一部分就是background-size属性~当然也包含浏览器的前缀~&lt;br&gt;如此就形成了最后完整的mixin~&lt;/p&gt;
&lt;p&gt;这就是一个科重复使用的,服务于高保真图片的mixin, 你可以方便的在任意一个selector中调用它~只需要非常简单的一行代码即可~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;li.dribbble a&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include retinize('icon-dribbble','png',24px,24px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;mixins inside mixins&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;mixin中完全可以包含其他的mixin, 构成一个mixin集合~不要担心,宇宙不会爆炸的…实际上, 我们可以一步步的实践DRY原则, 手续爱你可以把浏览器前缀等规则转移到变量之中~然后把这些属性嵌入到对应的mixin中. 再把那些可以重复使用的部分都摘出来整合到mixins中. 而把你所有的浏览器前缀属性都设置到一起的好处就是我们可以在需要的时候方便的修改和调整他们~当然包括删除它们~~&lt;p&gt;&lt;/p&gt;
&lt;p&gt;首先, 我们需要替换pixel-ratio, 把它作为一个变量, 方便后面的重复使用~ 如本章之前提到的那样, 注意在mixin之中的变量一定要加上#{}的符号~来告诉sass这里可能有变量~之后我们就可以把一大推的pixel-ratio定义为变量, 这些在之后的样式中也会经常使用~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$is-hidpi:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;(-webkit-min-device-pixel-ratio: 1.5),(min--moz-device-pixel-ratio:1.5),(-o-min-device-pixel-ratio:3/2),(min-device-pixel-ratio:1.5),(min-resolution:1.5dppx)&quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来, 则是为background-size创建一个mixin~接受width和height两个参数~同时包含所有相关的浏览器前缀属性以及没有前缀的属性…(这不是废话吗…译者注)&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin background-size($width,$height)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		-webkit-background-size: $width $height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		-moz-background-size: $width $height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		background-size: $width $height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最核心的时候到了~我们可以在retinize的mixin中调用background-size这个mixin~如下:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin retinize&amp;#123;$file,$type,$width,$height)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background_image: url('../img/'+$file + '.'+$type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@media #&amp;#123;$is-hidpi&amp;#125;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;amp; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		background-image: url('../img/'+$file+'-2x.'+$type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@include background-size($width,$height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此就是如何在mixin中嵌套mixin了~我们重构了最初的retinize mixin~如此会进一步的减少很多重复的代码~同时还可以把共享的代码段放在尽可能少的地方,以便于之后的更新和维护.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Wrapping up&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;我希望这本小书能够帮助你开始你的Sass之旅, 同时能让你对Sass的核心功能特点有所了解. 我同样希望它能够消除一些关于sass承受的部分曲解:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;      &lt;li&gt;你需要先学ruby;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你需要完全变更自己的css方式;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;你需要成为一个命令行专家;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;正如我们讨论的那样, 真实情况是更为简单的. 但是Sass可以称为你所想要的那么强大, 至少, 他是一个非常棒的工具, 而且可以非常友好的结合到你的系统和工作流程中去, 而不需要打乱你本身的css风格和习惯.&lt;/p&gt;
&lt;p&gt;现在是用Sass来简化你的样式的时候了~节省自己的时间,最重要的是,做最酷的事情!&lt;/p&gt;
&lt;p&gt;==============全书完!=============================&lt;/p&gt;
</summary></url><url><title>USING SASS–Chapter 3</title><loc>http://taoalpha.me/blog/2013/12/19/read-translation-using-sass-chapter-3/</loc><publish>2013-12-19T08:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;第三章–使用SASS&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;在这一章, 我会分享许多我每天使用的一些sass的特性~ 我特意为此书建了一个虚拟的项目来演示对应的功能~&lt;p&gt;&lt;/p&gt;
&lt;p&gt;项目名称是Sasquatch Records–一个简单的关注一种神秘生物-大足野人的超自然音乐风格(?). Sass的功能是非常强大的–它是一个非常强力的工具, 可以让你更加轻松理智的创造复杂的样式文件. 有这么多的可能性,随我们处理, 我喜欢先说一下我认为对网页设计者们最有价值的部分, 同时也是最容易转化为你自己的部分.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;嵌套规则&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;利用sass可以在css规则中相互嵌套而不是重复的在不同的声明中使用选择器. 这个嵌套功能反映了一个典型的标记语言的结构特征.&lt;br&gt;&lt;br&gt;例如, 针对Sasquatch Records的头部主体部分, 其html代码如下:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;header role=&quot;banner&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&quot;logo&quot;&amp;gt;&amp;lt;img alt=&quot;Sasquatch Records&quot; src=&quot;logo.png&quot; /&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h1&amp;gt;Sasquatch Records&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;当我们写SCSS的时候, 我可以沿用这样的嵌套结构, 让Sass建立一个完整的选择器. 我个人喜欢在嵌套的选择器之前放一个空的行来让同一个嵌套级别的css属性成组出现.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;header[role=&quot;banner&quot;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 20px 0 30px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	border-bottom: 4px solid #333;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	#logo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		margin: 0 20px 0 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		img &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			opacity: .95;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	h1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		padding: 15px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-size: 54px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		line-height: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-family: Jubilat, Georgia, serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 发现这里prettyprint不能很好的识别tab...所以格式上乱了..大家明白是缩进就行~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;以上的SCSS部分则可以编译为:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;attr_selector&quot;&gt;[role=&quot;banner&quot;]&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;4px&lt;/span&gt; solid &lt;span class=&quot;hexcolor&quot;&gt;#333&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;attr_selector&quot;&gt;[role=&quot;banner&quot;]&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;#logo&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;attr_selector&quot;&gt;[role=&quot;banner&quot;]&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;#logo&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; block&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; .&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;attr_selector&quot;&gt;[role=&quot;banner&quot;]&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;54px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; Jubilat, Georgia, serif&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; bold&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;不用在每个选择器中重复那些元素, sass可以通过嵌套来让结构变的更加简化. 当然, 嵌套过程中需要谨慎再谨慎.有时候你不需要在选择器上太过啰嗦, 而且无尽的嵌套实际上很有可能影响可读性. 一些不多的层级结构就刚刚好~而且对于模块的声明, 像上面的例子, sass的嵌套是一个非常省时间的事情.&lt;br&gt;&lt;h5&gt;&lt;strong&gt;嵌套过程中的命名属性&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;除了嵌套的规则, 你还可以嵌套那些公用同一个命名的属性值:比如,font-family, font-size, font-weight等~就像这样:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;attr_selector&quot;&gt;[role=&quot;banner&quot;]&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			size: &lt;span class=&quot;number&quot;&gt;54px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; Jubilat, Georgia, serif&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; bold&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;line-height&lt;/span&gt;: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;编译后则是:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;attr_selector&quot;&gt;[role=&quot;banner&quot;]&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;54px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; Jubilat, Georgia, serif&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; bold&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;类似的, 在text-家族中也有很多属性~ 我们可以用Sass嵌套来省掉很多的重复输入:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; uppercase&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;decoration&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; underline&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; center&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;同时background-家族也是一个很好的例子~&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ea4c89&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(sasquatch.png)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;repeat&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; no-repeat&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; top left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;嵌套在Sass中就意味着更少的输入. 用缩进来表示选择器的格式. 这同样是一个很容易就能吸引到任何写css的人的概念~毕竟css可算得上是很废精神的..&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;利用&amp;amp;来引用父级别选择器&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;和结构的嵌套以及属性的嵌套一起, sass针对引用当前选择器的父级元素也有很好的方式来实现~就是&amp;amp;~&lt;/p&gt;
&lt;p&gt;例如, 一个对链接的声明, 我们可以添加一个hover的属性来重写它们的颜色和边框颜色:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-decoration: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	border-bottom: 2px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;: hover &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		color: maroon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		border-color: maroon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个符号代表插入父级选择器, 在这里代表的就是a~ 上例编译后就是:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; bold&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; maroon&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; maroon&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有另一个例子是使用&amp;amp;符号引用父元素的, 而不同的类别中就会产生不同的效果:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;li a: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	border-bottom: 2px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;.alert &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		color:blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;.success &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		color: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就会相应的编译为:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.alert&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;blue&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.success&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; green&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;amp;符号在同一个命名下重写规则也非常实用, 比如说我们在一个站点下, 希望在某个特定的页面下有轻微的不同. 我们给body添加一个class, 然后我们就可以用&amp;amp;符号来轻松的重写这条规则了:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main p&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	body.store &amp;amp;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		font-size: 16px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		margin: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译结果就是:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.store&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在所有的带有store的class的页面,段落的margin就会有所区别,字体也会用16px. 但是相对于重写整个声明, 我们用嵌套的方式, 利用&amp;amp;符号来创建一个独一无二的范例, 从而让sass能够重新调整全部的选择器. 再一次, 非常省时, 同时还把相关的规则放在了一起~&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Sass 中的注释&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;为了在样式文件中注释, Sass在原有css的多行注释的基础上, 增加了单行注释的支持.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* This is a multi-line comment that will appear in the final .css file. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而为了保证一些注释信息能够出现在极简风格下的css文件中, 就可以用!符号, 将!放在注释的开头即可.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*! This is a multi-line comment that will appear in the final .css file. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而单行注释则通过两个//作为前缀实现的. 只要出现在任何一行的开头, 就会生效, 同时单行注释的内容是不会出现在最终的css文件中的. 所以你可以非常安全的使用它们, 通过它们来注释掉你那些非常私人的注释内容.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// hahah~this is a single-line comment.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// You can not see me in the css file~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ahahahah&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了隐藏你对于音乐的那些令人怀疑的品味外, 单行注释对于团队合作而言是非常有帮助的. 你可以随时随地的使用单行注释而不用担心导致输出的css文件变得臃肿…&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sass充满了各种不可思议的有用技能, 这些都可以让你的生活变的更加简单. 但是如果说要选择一个最有用的功能, 我一定会选择—变量.&lt;/p&gt;
&lt;p&gt;我们在样式文件中经常性的重复. 颜色, 字体, 背景图片, 宽度等等. 那些一定有所调整就需要一大堆的查找-替换才能搞定的固定模式…变量的引入就是让这些变的更加容易以及简单的维护.&lt;/p&gt;
&lt;p&gt;Sass中定义的变量很简单, 只需要在常规的css规则中加入$就可以了~ 如下:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$color-main: #333;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$color-light: #999;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$color-accent: #ea4c89;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$font-sans: &quot;Proxima Noca&quot;,&quot;Helvertica Neue&quot;, Helvetica, Arial, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$font-serif: Jubilat, Georgia, serif;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦定以后, 它们就可以在声明中使用:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; $font-sans&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; $color-main&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(../img/bg.jpg) repeat-x -&lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Sass 则会自动替换掉对应的变量值, 输出(略)…&lt;/p&gt;
&lt;p&gt;利用Sass的变量, 再去改变那些整个样式中的重复模式, 就只需要很快的调整变量即可~ 再也不用去整个文件中捞了…赞美我主..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用变量来做风格指南&lt;/strong&gt;&lt;br&gt;Jina Bolton曾经写过一篇非常棒的文章关于Sass的变量是如何帮助我们根据一个brand palette(品牌调色板?)创建一个风格指南的.Jina是这么说的:&lt;/p&gt;
&lt;blockquote&gt;为了保持我们风格指南的相关性, 针对每一个它所描述的应用而言, 一般把它放在admin部分. 我们利用sass的变量一次展示我们调色板中的颜色, 因为我们在同一个应用中使用的是同一个前端, 所以我们就可以使用同样的变量来引用这个调色板, 当我们修改变量的值, 这个调色板就会自动的更新.(说实话..没看懂…囧..)&lt;/blockquote&gt;

&lt;p&gt;预期创建一个静态的风格指南, 随时有可能过时以及不相关, 利用Sass变量来定义就意味着任何人都可以帮助更新这个风格指南.&lt;/p&gt;
&lt;p&gt;利用风格指南的变量为基础, Jina有谈论了一些关于Sass的颜色属性, 用来创建brand palette的变量. 比如:&lt;/p&gt;
&lt;p&gt;如下有一个非常mini的调色板, 是提供给Sasquatch Records使用的, 利用了单行注释来注明每个颜色, 因为对于css文件而言,这些信息无关紧要.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$color-main: #333; // black&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$color-light: #999; // grey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$color-accent: #ea4c89; // pink&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来, 利用sass中darken或者lighten的属性, 我们可以生成基于这个调色板的不同明暗的颜色~&lt;/p&gt;
&lt;p&gt;比如说让我们把pink调暗30%:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.secondary&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;darken&lt;/span&gt;($color-accent, &lt;span class=&quot;number&quot;&gt;30%&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而编译后, Sass就会计算把原来的pink降低30%的亮度后获得的16进制色值为:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.secondary&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#8d1040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的,我们可以用lighten来调高颜色的亮度:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.secondary &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: lighten($color-accent, 30%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.secondary &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: #fad5e3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;CSS的变量还有什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sass有个极好的地方在于它可以作为css的一个实验基地, 为css提供了一个非常棒的测试环境. 换句话说, Sass可以每次都提前一步, 试用一些css中没有的功能, 如果证实可行易用, 那么就有可能放入到标准的css之中去.&lt;/p&gt;
&lt;p&gt;变量就是一个典型的例子, 而且可能是css的预处理程序中最有用的功能了. 通过使用Sass以及Less, 大家对于在css中添加变量的呼声越来越大, 目前W3C已经开始起草一个方案,’&lt;a href=&quot;http://www.w3.org/TR/css-variables/&quot; target=&quot;_blank&quot;&gt;CSS 变量模块 1级&lt;/a&gt;‘, 已经开始开发了.而且最新的Webkit nightly 版本已经开始支持变量了. 这也意味着原生支持css变量已经步入正轨了~&lt;/p&gt;
&lt;p&gt;不幸的是, 在写作本文的时候, CSS变量语法还是和Sass有所区别, 而且不是那么的优雅以及简单易学…比如说, 下述是为root元素定义一个css变量:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pseudo&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var-color-main&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#333&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么如何在声明中使用呢?&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#main&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;var&lt;/span&gt;(color-main)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目的是通过var前缀来定义一个变量, 然后通过var(变量名)来引用变量; 这有些复杂而且容易混淆了..但是这算是一个正在进行中的工作, 有很多人都在倡议直接使用Sass那样的语法来定义变量, 使用和定义都用同样的符号~ 仅在这里希望最终能够达成此愿~&lt;/p&gt;
&lt;p&gt;最重要的是,只有开发版的浏览器才支持最新的功能, css变量完全不能再正常的产品中使用…这也是坚持使用sass的又一原因.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;混合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们接着说我第二喜欢的Sass特性: 混合. 通过变量你可以定义以及在整个样式文件中重复使用一些属性值;而通过混合, 你可以在整个样式中定义以及复用整个模块. 与其一次次的重复的输入相同的代码块, 你完全可以用混合的功能来定义一组规则, 然后再后面的声明中直接使用这一定义~&lt;/p&gt;
&lt;p&gt;为了阐述的更加清楚~我们来能创建一个给Sasquatch Records的头部样式使用的mixins~ 因为这些标题会出现在整个页面的多个地方, 而他们的CSS样式又都是一样的, 绝好的机会使用mixins~&lt;/p&gt;
&lt;p&gt;首先, 我们需要定义一个mixin, 在sass中可以用@mixin开头来定义, 我命名为title-style, 定义其margin和fonts的规则:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin title-style &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-family: $font-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦定义好了, 就可以在任何地方来引用它了~通过@include就可以了~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main h2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么它会编译为:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; Jubilat, Georgia,serif&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; bold&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; uppercase&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是我们同时又希望在侧边栏的h3元素也用同样的方式, 那么就可以直接在h3上同样引用这个mixin~ 然后会用同样的方式编译~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.secondary h3 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此会让我们避免重复的输入同样的代码,或者添加一个共同的class来赋予属性~&lt;/p&gt;
&lt;p&gt;mixins引用的同时不影响其他属性的继续使用:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main h2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译的时候也只是多了color的属性而已~&lt;/p&gt;
&lt;p&gt;共用的代码完全可以摘出来作为mxins~ 这样你依然保留重写覆盖或者增强这些规则的能力~ 多强大！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mixin Arguments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sass的mixins同样可以接受在引用的同时传参数. 比如, 让我们在引用title-style的同时指定一个颜色.&lt;/p&gt;
&lt;p&gt;如果要给一个mixin传参数, 就需要在定义的时候在mixin后面加上括号以及对应的变量:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin title-style($color) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-family: $font-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们调用这个mixin的时候, 我们就可以传递一个颜色值给它了~比如:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.secondary h3 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style(#c63);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译的时候就会自动替换掉相应的颜色变量~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多个参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以通过用逗号分隔变量参数来传递多个参数~ 定义和引用方式也都一致,用逗号分隔多个变量即可.&lt;br&gt;范例(略)&lt;br&gt;由此你应该开始感受到mixin是多么的灵活了吧~ 通过参数, 在统一的规则之中又可以有些微的区别~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义默认变量参数值&lt;/strong&gt;&lt;br&gt;当你使用mixins的参数时, 为了方便经常会定义一个默认的值. 通过这种方式, 你就可以在调用mixin的时候不传递参数了. 这算是正常的状态, 但同时也可以接受参数传递~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin title-style($color,$background:#eee) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-family: $font-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: $background;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即便我们已经定义了一个淡灰色值作为mixin默认的背景色, 我们依然可以传递不同的值作为参数来调用mixin~&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main h2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style(#c63);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.secondary h3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style(#39c,#333);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译后(略)&lt;br&gt;此外, 当我们为一个mixin有多个默认的参数值时, 你可以指定重写某个而不用全部重定义.&lt;/p&gt;
&lt;p&gt;比如, 如果我们的mixin定义了color和background两个值:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin title-style($color:blue,$background: green) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin: 0 0 20px 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-family: $font-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background:$background;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加入我们希望color保持默认,而background则重写为pink,那么可以利用如下的形式指定background重写:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;section.main h2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include title-style($background:pink);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;CSS3 LOVES MIXINS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS3中支持MIXINS和参数真的是一大亮点, 我们经常会大量的重复verdor-开头的属性来实现一些诸如圆角,阴影,渐变,变形等, 而这些的大体都一样, 只是属性值可能略有区别..所以多数是重复性的, sass则让这一切变的容易起来~ 快用mixin吧~&lt;/p&gt;
&lt;p&gt;&lt;del&gt;~&lt;/del&gt;&lt;del&gt;~~待续&lt;/del&gt;&lt;del&gt;~~今天先到这里了&lt;/del&gt;&lt;del&gt;第三章剩余的部分就在下一次来继续吧&lt;/del&gt;&lt;del&gt;~回见&lt;/del&gt;~~~&lt;/p&gt;
</summary></url><url><title>USING SASS–Chapter 3--续</title><loc>http://taoalpha.me/blog/2013/12/23/read-translation-using-sass-chapter-3-continued/</loc><publish>2013-12-23T08:00:00.000Z</publish><summary>&lt;p&gt;续前篇(CSS3 Loves Mixins)&lt;br&gt;&lt;strong&gt;Border-radius&lt;/strong&gt;&lt;br&gt;在CSS3中,对圆角的处理方式为:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin rounded($radius)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-border-radius:$radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-moz-border-radius:$radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	border-radius:$radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过调用此mixin,就可以实现将任何元素变成圆角~范例略(这里传递的参数是半径长度值:3px).&lt;br&gt;对应的编译(略)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Border-shadow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一下是另一个使用多参数的例子: 一个用来创建下投阴影的CSS3片段,可以让我们传递对应阴影的横向和纵向位置参数,以及模糊的程度以及颜色值:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin shadow( $x,$y, $blur, $color)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-box-shadow: $x $y $blur $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-moz-box-shadow: $x $y $blur $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	box-shadow: $x $y $blur $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将此模块添加到某个元素属性中, 就可以产生对应的阴影了~(示例代码和编译后代码都省略)&lt;/p&gt;
&lt;p&gt;不需要再重复的写这些凡人的代码段. 你只需要写一次, 就可以在任何地方使用它了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS3 Gradients&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS3的渐变语法是非常恶心的.它还会因为浏览器的不同而不同..难记,而且已经更新了不少地方,不少作者都不得不更新他们的样式来适应最新的版本. 也因为所有这些理由, Sass,尤其是其中的mixin部分, 就让使用css的渐变变成可以接受的了, 同时还能作为未来版本的根基~ 我们只需要修改这个mixin,就可以更新全部了.&lt;/p&gt;
&lt;p&gt;比如, 我们给一个激活的tab加一个渐变的样式. 为了确保渐变对多数浏览器是可以工作的, 而如果遇到不能正常渲染的浏览器, 则需要转换为单一色,我们将会需要一个相对复杂的属性:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header nav[role=&quot;navigation&quot;] ul&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	li.active a&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		padding: 4px 8px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		-webkit-border-radius: 4px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			-moz-border-radius: 4px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				border-radius: 4px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		background-color:#d42a78;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image:-moz-linear-gradient(#ff70b1,#d42a78);// for mozilla firefox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -o-linear-gradient(#ff70b1,#d42a78); // for opera&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #ff70b1), color-stop(1,#d42a78)); // webkit chrome 10 &amp;amp;amp; safari&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -webkit-linear-gradient(#ff70b1, #d42a78); // webkit chrome 11+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -ms-linear-gradient(#ff70b1, #d42a78); // IE 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: linear-gradient(#ff70b1, #d42a78); // W3C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到所有的用法都是两个颜色值的传递, 来实现从上到下的颜色渐变, 通过使用Sass的mixin,我们可以让这个环节变的简单, 通过把渐变色设计为变量来传递到给mixin. 不然谁能记住这么多的情况…人生如此艰难,我们就自己给自己行些方便吧…&lt;/p&gt;
&lt;p&gt;首先, 我们可以创建一个mixin叫linear-gradient, 接受2个16进制的颜色值, 分别为$from,$to.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin linear-gradient($from,$to)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-color:$to;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 这里把$to的颜色作为不支持渐变色的浏览器中的背景色;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image:-moz-linear-gradient($from,$to);// for mozilla firefox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -o-linear-gradient($from,$to); // for opera&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, $from), color-stop(1,$to)); // webkit chrome 10 &amp;amp;amp; safari&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -webkit-linear-gradient($from,$to); // webkit chrome 11+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -ms-linear-gradient($from,$to); // IE 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: linear-gradient($from,$to); // W3C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header nav[role=&quot;navigation&quot;] ul&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	li.active a&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		padding: 4px 8px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@include linear-gradient(#ff70b1,#d42a78);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这不只是可重复了~这才应该是CSS应该的用法…就好像是用英语直接描述的那么自然. 而且我还能复用此模式, 只需要按照需要修改传递的颜色值.&lt;/p&gt;
&lt;p&gt;就如你所知道的那样, linear gradient只是其中的一个例子,css gradients包含了非常复杂的用法, 比如color stops, radial gradients, multiple directions等等.Sass同样可以应用于那些场景, 把任何重复性的模块都抽取为一个mixin.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;创建一个Mixin的库&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;mixins因为它们一次写完多次使用的特型而非常优秀. 但是很多时候这些mixins其实是跨项目的, 可以在多个项目中使用. 你可能会发现自己更乐意为整个CSS3的一些诸如box-shadow,gradients,css transitions以及floats(是否清除clear),box-sizing,表元素等来写mixin. 而不只是为某个项目. 这样难道不是更加有效吗?&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;@import&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;@import规则是Sass扩展到允许多个SCSS文件的导入的一个功能, 可以把多个scss文件合并成一个css文件编译出来. 这有很多非常实际的原因:&lt;br&gt;    一个css文件代表了更少的网络连接, 展现方面有好处.&lt;br&gt;    变量可以定义在一个文件中,然后在需要的时候导入,而不用考虑层级关系或者其他页面样式.&lt;br&gt;    导入的Scss文件可以包含整个项目可能用到的所有mixins.&lt;br&gt;一下介绍一下@import是如何使用的.&lt;br&gt;我这里有一个mixins.scss文件, 它会在我整个项目中重复引用. 在这个文件中,我定义了我在每个项目中可能会重复使用的一些常规模式. 比如:&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin rounded($radius)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-border-radius:$radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-moz-border-radius:$radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	border-radius:$radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin linear-gradient($from,$to)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-color:$to;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 这里把$to的颜色作为不支持渐变色的浏览器中的背景色;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image:-moz-linear-gradient($from,$to);// for mozilla firefox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -o-linear-gradient($from,$to); // for opera&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, $from), color-stop(1,$to)); // webkit chrome 10 &amp;amp;amp; safari&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -webkit-linear-gradient($from,$to); // webkit chrome 11+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: -ms-linear-gradient($from,$to); // IE 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-image: linear-gradient($from,$to); // W3C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin shadow( $x,$y, $blur, $color)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-box-shadow: $x $y $blur $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-moz-box-shadow: $x $y $blur $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	box-shadow: $x $y $blur $color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我的主文件中,就是包含所有层级信息等样式的文件中, 我引入此scss文件, 就可以让所有定义好的mixins生效, 同时我还import一个变量规则, 来让所有的变量定义生效. 这就允许我在其他文件中同样适用这些变量, 比如在同一个项目的别的页面或者环节, 就可以不用再重复包含层级信息了(?).&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import &quot;reset.scss&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import &quot;variables.scss&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import &quot;mixins.scss&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Site-specific styles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.foo&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而当sass编译这一文件时, 它就会包含所有import的文件的内容, 这样你就只需要一个css文件,但是却有多个包含灵活可重复使用的代码块的文件了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Compass Framework(罗盘框架)&lt;/strong&gt;&lt;br&gt;利用mixins,变量文件以及@import规则, 你可以创建你自己的css框架, 从而为你的新项目省下无数的时间.把复杂而又重复的模式都设计好, 只需要一个代码来调用意味着你会有更多的时间来创造,更少的时间折腾代码.&lt;/p&gt;
&lt;p&gt;而把这个组织结构上的优势提高到另一个层次的就是Compass, 一个开源的样式框架, 基于Sass, 由Chris Eppstein(一个Sass的核心成员也是一个全面的好人~). Compass提供了非常多预写好的css模式, 而且随着css的更新而逐渐更新. Compass同时还让图标集(sprites)以及印刷系统更加容易处理了.&lt;/p&gt;
&lt;p&gt;我总是建议创建属于自己的框架, 因为这更容易理解同时也能让你更好的掌握和使用. 但是作为一个学习经验的方法, 其他的框架可能会让你受益匪浅–他们可以让你了解别人是怎样设计项目以及提升效率的, 对此, compass也不例外.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Bourbon Library&lt;/strong&gt;&lt;br&gt;Design/Development shop thoughtbot的一群人合作完成了一个扩展的mixin库, 命名为Bourbon–巧合的是, 我喝过不少这种略苦的东西~一般混合着糖和水果.&lt;/p&gt;
&lt;p&gt;通过google你就可以找到很多Sasser分享他们的mixins, 在github或者其他站点. 机会在于, CSS3中那些看起来非常丑陋而且难以维护的代码都已经包含在了一个个mixins中, 所以, 好好利用这个社区吧.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;@extend&lt;/strong&gt;&lt;/h5&gt;&lt;br&gt;有没有过这样的经历: 在写某一个CSS的时候,发现和另一个有着非常相近的样式…除了几条规则以外…?&lt;p&gt;&lt;/p&gt;
&lt;p&gt;如下是一个示例. 你设计了一个提醒信息的样式,包含两个按钮, 位于页面顶部. 一个样式用以处理标准提醒, 第二个则是处理代表积极信息的提醒. 这两个样式几乎完全一样,只有背景色有所区别.&lt;/p&gt;
&lt;p&gt;通常来说, 我们可以创建一个基类给常规的提醒,然后在第二种情况中覆盖背景颜色.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h2 class=&quot;alert alert-positive&quot;&amp;gt;This is a positive alert!&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	padding: 15px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 1.2em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: normal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	line-height: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	letter-spacing: 3px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: $color-accent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include shadow(0,1px,2px,rgba(0,0,0,0.5));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include rounded(10px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert-positive&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: #9c3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实不用在html中多加一个class来处理这种小问题, 我们完全可以使用@extend功能来把公用多数规则的样式连接起来. 此外, 我们可以添加多余的规则重写一些需要的样式, 来形成我们需要的样式.&lt;br&gt;所以, 如果使用@extend,那么上面的代码可以改写为:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h2 class=&quot;alert-positive&quot;&amp;gt;This is a positive alert!&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 这里就只需要一个class即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	padding: 15px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 1.2em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: normal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	line-height: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	letter-spacing: 3px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: $color-accent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include shadow(0,1px,2px,rgba(0,0,0,0.5));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include rounded(10px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert-positive&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@extend .alert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: #9c3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;sass就会自动将之编译妥当~(略)&lt;/p&gt;
&lt;p&gt;当然, 我们也可以一开始就这么写(就是直接合并两个selector的公共部分,然后单独给另一个selector创建一条需要覆盖的股则).但是,sass的@extend让这一过程变得更加省事–更不用说让整个样式之间的关系变得更加清晰了.这比一开始就先要考虑好怎么用如何用要简单多了…&lt;/p&gt;
&lt;p&gt;利用@extend同样可以让我们精炼我们的语法结构, 基于实际意义来创建类别名称而不是外观..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple @extends&lt;/strong&gt;&lt;br&gt;在一个声明中你是可以使用多个@extends的, 这可以把各个样式连接起来.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h2 class=&quot;alert alert-positive&quot;&amp;gt;This is a positive alert!&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	padding: 15px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: normal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	line-height: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	letter-spacing: 3px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: $color-accent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include shadow(0,1px,2px,rgba(0,0,0,0.5));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@include rounded(10px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.important &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size:4em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.alert-positive&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@extend .alert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@extend .important;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: #9c3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译(略)&lt;br&gt;Sass会把同样规则的样式归组, 并利用逗号分隔开, 然后为任何例外创建单条声明.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using placeholder selectors with @extend&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果某个类完全使用的都是extend的样式, 即你需要创建一个完全使用别的类的样式的类,又该如何做呢? 利用placeholder selectors, 允许你创建虚类, 不会单独出现在最后的css文件中,然后你可以在其中引用@extend.&lt;br&gt;比如:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%button &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	padding: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-weight: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	border-radius: 6px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//这就是一个虚类, 纯粹是用来定义基础样式的. 以%开头声明;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.buy&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@extend %button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.submit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@extend %button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;placeholder selectors在创建一些不确定是否会用到的模式的时候会非常有用,比如在框架中,设计指南中或者是初学者模板等, 因为不使用的placeholder的类是不会出现在css文件中的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@extend VS @mixin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mixin会在每一个引用它的声明中创建同样的规则, 而@extend则是为同样的规则增加多个共同的selectors. 使用中一定要记得两者的区别.&lt;/p&gt;
&lt;p&gt;比如, 过多的使用mixin可能会导致最终css文件变得臃肿..因为每次调用mixin,就会创建一次mixin的规则…越积越多..如果你发现你在各种地方使用一个mixin,那么考虑一下它是怎么编译的,考虑是否可以把它转化为@extend,让这些重复的样式合并到一起.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t over @extend yourself&lt;/strong&gt;&lt;br&gt;对于共有样式的多个类而言, 使用@extend是一个非常强大的工具, 但是一定要注意. 一旦使用太多的extend, css文件会变的有些危险..不断的重复引用一个extend可能会导致一些不好的声明.当使用sass的时候, 很容易忘记最终编译好的样式文件会长什么样…一定要保留一个tab给你的编译后文件..时刻检查一下~&lt;/p&gt;
&lt;p&gt;好了~你如今了解到sass的强大之处了~我们基本上已经覆盖了sass的所有基础信息.如何初始设置, 语法规则,以及它是如何和你现有的代码习惯相互配合的,同时还有如何使用其核心的功能:嵌套,变量,mixins以及@extend.&lt;/p&gt;
&lt;p&gt;如果你继续深入的研究的话. 你会发现Sass可以做更多的事情,在下一章节, 我们会讲述sass如何辅助响应式设计以及媒体播放的.&lt;br&gt;走起~&lt;br&gt;=========本章完======&lt;/p&gt;
</summary></url><url><title>Sass Workflow--Chapter 2</title><loc>http://taoalpha.me/blog/2013/12/19/read-translation-sass-workflow-chapter-2/</loc><publish>2013-12-19T10:00:00.000Z</publish><summary>&lt;p&gt;这个是”Sass for web designers”一书的第二章:&lt;/p&gt;
&lt;h2&gt;SASS的工作流&lt;/h2&gt;

&lt;p&gt;  既然我们都知道了SASS是什么,就让我们开始切实的使用以下它吧. 我们首先需要做的就是安装,把Sass安装到你的电脑之中.我在第一章中提到SASS是一个用Ruby写的程序,将它的语法翻译成CSS的结构. 所以,在我们开始使用Sass之前,我们需要先安装Sass.&lt;/p&gt;
  &lt;h3&gt;&lt;strong&gt;在MAC上安装SASS&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;  如果你是Mac用户(恭喜你,你是如此幸运!),安装Sass会非常简单. Mac OS X预装了Ruby,而Sass作为一个Ruby的一个”GEM”,非常贴切的一个术语,对Ruby的程序而言.&lt;/p&gt;
&lt;p&gt;  你可以开启你的Terminal(终端)–不要恐惧哈~ 在提示符后输入如下命令,然后回车即可:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem install sass&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  并没有想象中那么糟,不是吗? 在你按下回车后,你会看到终端中输出了一堆东西..此处略掉.&lt;/p&gt;
&lt;p&gt;  那么恭喜你~你已经成功的安装了sass~&lt;/p&gt;
&lt;p&gt;  在写本书的时候, sass的官方更新最新版本时3.2.10, 终端中会贴切的展示这些信息~&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;安装最新的预发布版本&lt;/strong&gt;&lt;br&gt;  你还可以选择更潇洒一些, 安装预发布的alpha版本, 通过在之前的命令之后就爱上pre的标记即可. 使用alpha版本并不安全, 但是它可以允许你利用那些最新的功能~ 而为了获取最新的以及最棒的功能体验, 那么请在中断中输入以下代码, 再按下回车:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem install sass --pre&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  你将再次看到终端中输出一堆东西…再次略..&lt;/p&gt;
&lt;p&gt;  大功告成, 如此你就算是成功的站在了时代的前沿, 向你的勇气和胆量致敬.&lt;/p&gt;
  &lt;h3&gt;&lt;strong&gt;在WINDOWS上安装SASS&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;  不像Mac, windows并没有预装Ruby, 官网上推荐使用RubyInstaller的windows版本来安装. 一旦Ruby成功安装后, 你就可以像在Mac中的操作一样了~&lt;/p&gt;
  &lt;h3&gt;&lt;strong&gt;告诉SASS去watch什么文件&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;  好, 我们装好了Sass, 然后呢? 我们需要告诉Sass那些文件是需要”监控”的. 意思是, 当我们编辑一个样式文件时, 我们需要Sass监控对应的文件并且把我们每次修改后的.scss的文件转换为浏览器可识别的css文件~ 有多种方法来完成这一操作:&lt;/p&gt;
  &lt;ol&gt;&lt;br&gt;    &lt;li&gt;一个命令行的简单命令;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;一个桌面app(有很多个)来帮助你管理你的sass文件以及它们的输出文件;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt; 我们首先试下命令行的方式. 不要恐惧! 很简单的. 本质上来说, 这一个命令就是让sass去监控一个特定的.scss文件, 并把这个文件转换为.css文件~&lt;/p&gt;
&lt;p&gt;  例如:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sass --watch screen.scss:screeen.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  当你运行完上述命令后, sass会自动监控screeen.scss文件, 并且每当它有任何的变化, 一旦你在终端中按下回车, 你就可以看到如下的提示:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;Sass&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;watching&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;changes&lt;/span&gt;. &lt;span class=&quot;tag&quot;&gt;Press&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;Ctrl-C&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;stop&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果这个文件更新了, Sass就会将它转换, 然后重新生成.css文件并且自动覆盖原文件. 换句话说, 每次你在你的Sass文件中保存任何的变化, css文件就会立刻更新.&lt;/p&gt;
&lt;p&gt;文件的名字不需要相互匹配. 比如, 如下的命令也可以完全适用(虽然它可能会出现一些混淆):&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sass --watch werewolf.scss:vampire.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  更进一步, 这两个文件甚至可以不在同一个文件夹下. 实际上, 我发现把.scss文件和.css文件分开来时非常有好处的. 这并不是必须的, 但是对于让整个项目更便于管理有帮助.&lt;/p&gt;
  &lt;h3&gt;&lt;strong&gt;Sass 文件的管理&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;  图2.1演示的是一个典型的初始结构, 有一个stylesheets的文件夹, 里面是所有转换后的css文件,同时包含一个sass文件夹用来存放对应的scss文件. 你可以告诉Sass监控整个文件夹而不是某个单独的文件. 所以利用上述的额结构, 你就可以用下面的命令来监控整个项目的scss了:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sass --watch stylesheets/sass:stylesheets&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;strong&gt;用app管理而不是命令行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  到目前为止, 我们所遇到的命令行都是非常简单的, 我非常有信心作为一个以机敏著称的前端工程师对于搞定这些东西是毫无难度的. 那也就意味着, 我下面介绍的这些桌面级的应用将会让这个监控过程变的更加的简单. 无论你对于命令行的舒适程度是什么样的, 都值得一看.&lt;/p&gt;
  &lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://mhs.github.io/scout-app/&quot; target=&quot;_blank&quot;&gt;Scout&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;http://mhs.github.io/scout-app/&quot; target=&quot;_blank&quot;&gt;Scout&lt;/a&gt;是一个免费的工具,同时支持mac和windows, 同时还包含了一个自带的Ruby环境, 可以让你在轻松的点击中管理所有你的sass工程. 换句话说, Scout给了你一个非常好的图形界面来让你操作本来需要命令行实现的监控文件或者文件夹操作.(具体操作介绍略)&lt;/li&gt;&lt;br&gt;        &lt;li&gt;&lt;a href=&quot;http://incident57.com/codekit/&quot; target=&quot;_blank&quot;&gt;Codekit&lt;/a&gt;&lt;br&gt;     和Scout一样, CodeKit也是一个方便的用图形界面管理你的sass文件的工具, 不过只支持mac系统. 但是它同时支持编译LESS,Stylus,Haml以及CoffeScript,JS和其他的语言. 另外,Codekit还能够优化你的文件和图片,同时还可以自动的重载浏览器~方便你的开发~&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://livereload.com/&quot; target=&quot;_blank&quot;&gt;LiveReload&lt;/a&gt;&lt;br&gt;    LiveReload可以监控任何文件的更新修改,包含Sass的编译, 以及工作过程中的自动重载浏览器操作. 同时支持Mac和Windows.&lt;br&gt;    &lt;/li&gt;&lt;br&gt;    ……(略)&lt;br&gt;&lt;/ul&gt;&lt;br&gt;除了app级的应用外, 还有一些网络框架是支持sass的, 比如ruby on rails, 就可以自动编译Sass文件. 不需要任何的命令行.&lt;br&gt;&lt;br&gt;  所以说,你可以发现即便你对命令行过敏…也有很多备选项可以选择的~虽然我觉得很明显sass并没有任何复杂的命令…&lt;br&gt;&lt;br&gt;  那么, 我们就把Sass安装完成了~而且添加了监控的文件, 那么就我们就可以谈一下输出格式以及注释和嵌套的问题了.&lt;br&gt;&lt;br&gt;  &lt;strong&gt;选择一个输出的风格&lt;/strong&gt;&lt;br&gt;&lt;br&gt;  正如大多数人, 我也是通过看源码来学习网页设计的. 看这个源码来观摩一个网站是如何被有机的整合到一起的是一件非常奢侈的大餐啊. 也正是基于这个原因, 我会非常谨慎的写代码和样式文件: 我声明的方式, 如何关闭标签, 如何用空行来分组等等. 所有的这些看起来都是非必要的, 但是因为我们的css文件可能会成为别人学习的工具和资源, 我们不应该只为实现自己的目的而创作他们.&lt;br&gt;&lt;br&gt;  利用Sass,你基本不会接触你的css文件了. 取而代之, 你主要操作的就是.scss文件, 用户是无法看到这个文件的, 而最终的输出css文件, 很有可能和你偏好的css的结构有所区别…这也是Sass所必须付出的代价..尤其是对于强迫症而言..这也是我最初不愿意用sass的原因之一. 听起来似乎有些不可思议, 但是如果一个样式是我的作品, 我当然很关心它的结构和格式以及最后的呈现.&lt;br&gt;&lt;br&gt;最终我克服了这个问题, 也因此, 我写了这本书. 究其根本, 格式上的区别也只是个非常微不足道的问题(纯粹是鸡蛋里挑骨头..). sass的输出文件就阅读而言还是完全没有问题的. 实际上, sass也提供了多种不同的输出风格以供选择, 接下来我们就过一下这些风格.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Nested&lt;/strong&gt;&lt;br&gt; 这是默认的风格, sass会把每条规则缩进, 而且结构会和对应的html结构一致.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;  Expanded&lt;br&gt;  这是另一种形式, 更像我们通常写的css那样. 对那些希望通过查看你的css源代码来学习的人而言,这种形式会更熟悉一些.&lt;br&gt;&lt;br&gt;  如下是一个典型的例子(略)&lt;br&gt;&lt;br&gt;  每一个关闭的括号都会出现在这个声明的最后一部分, 并且新开一行显示. Sass会在每个声明之后插入一个空白行, 虽然是不必要的, 但是除了这个不是问题的问题, 这算是我比较倾向使用的风格. 它非常接近我在不用sass的情况下自己写css的风格(这是非常难得的!).&lt;br&gt;&lt;br&gt;  为了使用这个风格而不是默认的风格, 我们需要在watch的时候添加一个style的标识:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sass --watch --style expanded screen.scss:screen.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;Compact(简约)&lt;br&gt;简约风格将会把一个声明的的所有部分都整合一起输出,不在期间分段;&lt;br&gt;示例如下:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;  Compressed(极简)&lt;br&gt;&lt;br&gt;  第四种也是最后一种风格就是极简风格了, 会去掉所有的空格和空行来减小样式文件的体积. 但缺点就是难以阅读, 不过这也是可以理解的..毕竟极简的目的就是高效率, 而不是为了让人方便.&lt;br&gt;   例子如下:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 准确说应该是去除所有非必须的空格和空行 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;如果需要使用这种风格, 制定方式和之前的expanded是一致的:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sass --watch --style compressed screen.scss:screen.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;浏览器实际上本来就不需要空格和空行的, 所以为什么不去掉这些东西来进一步压缩体积呢? 我只能说这种方式非常不利于他人从代码中学习, 但是对于那些很大的样式文件, 每一个byte都需要考虑的时候, sass引入这种风格就是非常值得肯定的了.&lt;br&gt;&lt;br&gt;      极简风格对于那些高流量的app而言是非常适合的. 因为这个时候任何文件的展示都是非常关键的. 而对于常规的个人博客之类的东西, 就相对而言没有那么重要了, 反而是更适合人类阅读的模式更加适用, 可以方便那些希望通过观摩的css源代码来学习的人~&lt;br&gt;  &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;值得一提的是, 随着查看元素的工具在浏览器中的普及, .css文件的格式不再像几年前那样的重要了. 预期去看一个css文件, 你完全可以用浏览器内置的分析工具, 去查看一个网站的结构,获得更加强大的功能体验, 更清晰的了解css是如何影响网页布局的, 这些工具将会把css用更加方便阅读和理解的形式展现出来, 而不局限于css文件本身.&lt;/p&gt;
&lt;p&gt;不管你选择的是什么风格来输出你的css文件, 它对于你自己的工作流程是没有很大影响的. 因为你的世界里只有scss文件, 你完全可以在scss文件中延续你css中的风格~ 所以说, 对待scss文件的时候就要像对待你最终的完美产品一样对待, 来让scss输出可以让计算机和人类理解的样式.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要编辑你的输出结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对这一点, 需要特别注明的就是当你使用sass的时候, 你就再也不用编辑任何的.css文件了. 你所依赖的只有.scss文件. 因为你对你的.css文件的任何操作最终都会被下一次更新.scss文件时重新编译的css文件覆盖掉. 所以说, 不要管什么css文件了, 只关注你眼前的scss文件就行了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;既然我们有了工作流, 那就让我们开始吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们已经说完了如何设置sass. 我们也说了下如何把sass添加到你的工作流程之中, 包括命令行和第三方软件的方式~ 最后, 我们也说明了下关于选择一个合适的sass输出风格. 我们现在就做好准备去使用sass了, 充分享受一下sass的加入以及随着项目的复杂而变得越来越明显的省时的特性! &lt;/p&gt;
&lt;p&gt;走起~ Next Chapter–3-USING SASS&lt;/p&gt;
</summary></url><url><title>SASS SYNTAX</title><loc>http://taoalpha.me/blog/2013/12/19/read-translation-sass-syntax/</loc><publish>2013-12-19T06:00:00.000Z</publish><summary>&lt;p&gt;本文继续 “SASS for web designers” 这本书~ 这是续 &lt;a href=&quot;http://callmet.zzgary.info/2013/12/16/translation-why-sass/&quot; target=&quot;_blank&quot;&gt;Why Sass?&lt;/a&gt; 这一章的遗漏,全书共分为四章,我会尽量都过一遍~哈&lt;/p&gt;
&lt;p&gt;============正文=============&lt;/p&gt;
&lt;p&gt;在Sass中实际上是有两种不同的语法的.比较新的一种是之前提到的SCSS语法,SCSS文件会以.scss结尾.这也是我比较倾向的一种语法,理由如下:&lt;/p&gt;
&lt;blockquote&gt;&lt;br&gt;  &lt;ul&gt;&lt;br&gt;    &lt;li&gt;因为SCSS是基于CSS,是CSS的一个父集, 所以我可以依然按照过去十年写CSS那样写SCSS,而不用担心它不能识别;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;它可以允许你一步步的将现有的css样式转换为sass的结构;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;它不会导致一个很突兀的代码风格转变;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h5&gt;&lt;strong&gt;一个简单的SCSS例子&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;如下是一个展示SCSS语法是如何工作的范例, 它定义了一个变量并且在之后的css中使用了这个变量.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$pink: #ea4c89;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;font-size: 12px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color: $pink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p strong&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text-transform: uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻译成css则是:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;12px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ea4c89&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; uppercase&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了那个$pink变量之外,是不是看起来很熟悉. 本书的后部分我们会详细说说这个变量~&lt;/p&gt;
&lt;p&gt;SCSS围绕CSS,而CSS本身你已经非常熟悉了. 也因此, 我非常喜欢SCSS~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sass原始语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sass自身的语法, 从某方面来说, 和SCSS以及css都是完全不一样的. 一些人比较喜欢它直来直去的风格, 没有任何的花括号,分号等, 完全由缩进控制结构的语法.如果你也习惯这种类似ruby或者python的语法形式, 那么SASS的语法你会觉得比较熟悉, 而且你会更加舒适自然.&lt;/p&gt;
&lt;p&gt;如果把之前的片段用这种语法表示出来, 就会出现如下的形式:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$pink: #ea4c89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	font-size: 12px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: $pink&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p strong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	text-transform: uppercase&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没有了括号和分号,只剩下一堆的空格和缩进来表示声明和定义. 很明显这更加干净而且简单, 你们中的部分人可能会非常钟情于此. 它可以提升代码的速度, 同时去除那些乱七八糟的东西. 但是对我而言, 我依然更喜欢SCSS, 应为它和正常的css更像, 就如同我之前提到的原因一样.&lt;/p&gt;
&lt;p&gt;本书后续的章节里也都会用SCSS语法来做演示. 如果你更喜欢那个干净的Sass语法, 也很容易转换. 而我们所有提到的Sass功能对两者都是适用的. 只是偏好的问题罢了. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sass的误解传言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在之前已经提到过这个我最初不愿意尝试sass的原因. 部分归咎于那些大量的传言….(此处同&lt;a href=&quot;http://callmet.zzgary.info/2013/12/16/translation-why-sass/&quot; target=&quot;_blank&quot;&gt;Why Sass?&lt;/a&gt; 中的传言部分.)&lt;/p&gt;
</summary></url><url><title>python tricks(1)</title><loc>http://taoalpha.me/blog/2014/01/03/read-translation-python-tricks-1/</loc><publish>2014-01-03T13:00:00.000Z</publish><summary>&lt;p&gt;无意中发现的一篇文章~ 很有意思, 介绍了不少python的技巧型用法~ &lt;a href=&quot;http://www.secnetix.de/~olli/Python/tricks.hawk&quot; target=&quot;_blank&quot;&gt;原文在此&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;      &lt;li&gt;&lt;strong&gt;模拟”?:”的三元运算符&lt;/strong&gt;&lt;br&gt;  python是不识别C中的”?:”这种三元操作符的,但是模拟这种运算是非常容易的:&lt;br&gt;      x ? y : z —&amp;gt; [z,y][bool(x)]&lt;br&gt;  如果你提前就知道了x的类型, 比如本身就是1,0或者布尔类型, 那么就完全可以不用使用bool()函数了~ 原理? 很简单, 我们只是简单创建了一个列表, 包含两个值, 然后用布尔类型作为索引值来选择list的元素, 其中”true”是等同于1, 而false等同于0, 如此就变成了指定list的第一个还是第二个元素了~&lt;br&gt;&lt;br&gt;   注意到在此情况下, x,y,z三个操作数始终都是需要的, 这一点和C里面的”?:”操作符不一样. 如果你需要一个简单方式, 也可以使用if-else来实现.&lt;br&gt;&lt;br&gt;   实际上, 还有另一种方法做到这一点, 但是只会在y本身不为false时生效:&lt;br&gt;      x ? y : z —&amp;gt; bool(x) and y or z&lt;br&gt;  (其实就是相当于与运算, 如果x,y都为真,那么就是y(因为bool(x)=1),如果bool(x)为假且y为真时, 就是z~)&lt;br&gt;  &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;strong&gt;如何查看python的版本.&lt;/strong&gt;&lt;br&gt;  其实很多时候经常发现自己用到的一些功能在旧版本的python中不支持. 这个时候如果在旧版本中运行了, 就会出现一个非常恶心的exception traceback….而通常它的错误信息都是非常无用的…在此情况中, 你就可以用一个简单的脚本来解决~&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;sys&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;hasattr&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;sys&lt;/span&gt;, &quot;&lt;span class=&quot;tag&quot;&gt;hexversion&lt;/span&gt;&quot;) &lt;span class=&quot;tag&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.hexversion&lt;/span&gt; &amp;lt; 0&lt;span class=&quot;tag&quot;&gt;x020300f0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.stderr&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.write&lt;/span&gt;(&quot;&lt;span class=&quot;tag&quot;&gt;Sorry&lt;/span&gt;, &lt;span class=&quot;tag&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;too&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;old&lt;/span&gt;.\&lt;span class=&quot;tag&quot;&gt;n&lt;/span&gt;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.stderr&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.write&lt;/span&gt;(&quot;&lt;span class=&quot;tag&quot;&gt;Please&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;upgrade&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;least&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;to&lt;/span&gt; 2&lt;span class=&quot;class&quot;&gt;.3&lt;/span&gt;.\&lt;span class=&quot;tag&quot;&gt;n&lt;/span&gt;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.exit&lt;/span&gt;(1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;将这一段代码放在你的程序的最顶部, 包括其他的import语句都要放在其下方. 其中hexversion代表的是一个旨在1.5.2的python之后出现的变量, 由此预防有人使用比1.5.2还早的版本. 这个变量的格式0x&amp;lt;maj&amp;gt;&amp;lt;min&amp;gt;&amp;lt;rev&amp;gt;&amp;lt;rel&amp;gt;(major,minor以及revision和一个发布状态的指示符,官方一般是f0),每四个字符是两个16进制数位.&lt;br&gt;  &lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;strong&gt;调试CGIs.&lt;/strong&gt;&lt;br&gt;     从python2.2版本后使用的cgitb库是一个非常好用的工具, 尤其是在调试CGI程序时. 任何时候每当run-time错误比如exception发生时, 一个很好的html文件就会创建, 包含了错误发生的位置以及源代码, 行号甚至其中涉及的变量. 为了使用这个模块, 只需要把这行代码放在你的CGI程序上方即可.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;cgitb&lt;/span&gt;; &lt;span class=&quot;tag&quot;&gt;cgitb&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.enable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;列表元素的并行排序&lt;/strong&gt;&lt;br&gt;      有时候你需要对一个列表元素进行排序, 同时还有第二个列表(同等长度)需要一起排序. 当然, 你可以一开始就使用一个2元数构成的列表, 但有的时候程序要求使用别的格式…所以还是可能发生的, 无论如何, 这样也很简单~ 如下的代码片段就可以适用于2个甚至更多的列表~&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = zip(list1, list2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list1, list2 = map(lambda t: list(t), zip(*data))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;      注意到zip()函数返回的就是一个包含数组的列表, 所以最后你需要把zip()后的数据再次拆分一下~ 这也是map()函数以及lambda函数的作用. 如果你实际上不需要列表,那么完全可以把最后一行简化为:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tuple1, tuple2 = zip(*data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;转换Mac地址&lt;/strong&gt;&lt;br&gt;          我发现我自己经常转换MAC地址…有时候叫它以太网地址…到一个标准格式. 比如: 每6个部分代表2个数位, 而且都是用的小写的16进制字节. 也是很简单的~&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mac = &quot;:&quot;.join([i.zfill(2) for i in mac.split(&quot;:&quot;)]).lower()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;      zfill()函数是在python 2.2.2之后引入的, 是针对字符串操作的一个函数.&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;针对IP地址排序&lt;/strong&gt;&lt;br&gt;  如何对一个代表着IP地址的字符串列表进行排序呢? 当然, 你可以针对sort()函数做一些简单调整, 但是那会是非常低效率的.&lt;br&gt;&lt;br&gt;      更好的处理方法是能够利用内置好的比对函数来对列表做预处理, 然后再次把它转回原来的格式. 这个技巧可以处理很多情况, 不止是IP地址~&lt;br&gt;&lt;br&gt;      在本例中还是使用IP地址, 我们首先把每个IP地址重新格式化, 每四个八位字节占据三个字符的域, 如果需要可以在前补充空格. 这样每部分都有同样的长度且可以比较了, 而且有现成的比对函数, 之后就是把它再调回之前的格式就行了~&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i in range(len(ips)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ips[i] = &quot;%3s.%3s.%3s.%3s&quot; % tuple(ips[i].split(&quot;.&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ips.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i in range(len(ips)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ips[i] = ips[i].replace(&quot; &quot;, &quot;&quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;解析命令行选项&lt;/strong&gt;&lt;br&gt;  如下是一个关于解析命令选项的代码片段, 使用的是getopt库, 而且是一种相对比较复杂的方式…在本例中, 程序会接受3个参数, 同时需要至少两个参数.&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import sys, getopt, os.path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;me = os.path.basename(sys.argv[0])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;debug   = False&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;really  = True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;verbose = False&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_options = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&quot;d&quot;, &quot;debug&quot;,     &quot;debug   = True&quot;,  &quot;Enable debug mode.&quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&quot;n&quot;, &quot;notreally&quot;, &quot;really  = False&quot;, &quot;No action, display only.&quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&quot;v&quot;, &quot;verbose&quot;,   &quot;verbose = True&quot;,  &quot;Increase verbosity.&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short_opts = reduce(lambda a, b: a + b[0], my_options, &quot;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long_opts  = map(lambda x: x[1], my_options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def usage ():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args = &quot;[-%s] &amp;lt;dir1&amp;gt; &amp;lt;dir2&amp;gt; [...]&quot; % short_opts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;gt;&amp;gt; sys.stderr, &quot;Usage: &quot;, me, args, &quot;\nOptions:&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for opt in my_options:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;gt;&amp;gt; sys.stderr, &quot;-&quot; + opt[0], opt[3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sys.exit(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    opts, args = getopt.getopt(sys.argv[1:], short_opts, long_opts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except getopt.GetoptError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    usage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for o, p in opts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for shrt, lng, action in my_options:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if o[1:] in shrt or o[2:] == lng:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            exec action&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if len(args) &amp;lt; 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    usage()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;python与shell的结合&lt;/strong&gt;&lt;br&gt;&lt;br&gt;    有时候写一个既可以用于shell的也可以用于python的脚本会非常有帮助的. 这也是可行的, 技巧就是: 在shell中四个引号的序列作为代表引用, 而在python中用3个引号. 所以你可以把shell命令嵌套在一个三个引号中. 注意一般最开始的字符代表的都是这个模块或者脚本的doc信息, 所以通常会被python的编译所忽略.&lt;br&gt;&lt;br&gt;如下的例子中演示了这一技巧. 首先它是作为一个shell脚本(因为在首行声明了#!/bin/sh). 然后嵌套的shell命令会检查是否安装了python. 如果没有的话, 就会出现一个非常有意义的错误信息, 同时脚本退出. 如果有的话, 脚本会再次用python执行. python会忽略所有包含在三个引号内的注释信息,同时执行剩下的部分.&lt;br&gt;&lt;br&gt;如果你希望能有一个真实的doc信息, 你必须在之后声明它.如下:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&quot;&quot;&quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if which python &amp;gt;/dev/null; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exec python &quot;$0&quot; &quot;$@&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    echo &quot;$&amp;#123;0##*/&amp;#125;: Python not found. Please install Python.&quot; &amp;gt;&amp;amp;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__doc__ = &quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Demonstrate how to mix Python + shell script.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &quot;Hello World!&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &quot;This is Python&quot;, sys.version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &quot;This is my argument vector:&quot;, sys.argv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &quot;This is my doc string:&quot;, __doc__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.exit (0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;把signal numbers转换为names&lt;/strong&gt;&lt;br&gt;    不幸的是在signal模块中并不存在一个转换signal number到signal name的函数, 虽然通常来说这会很有帮助. 如下的函数可以做到这一点:&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import signal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def signal_numtoname (num):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for key in signal.__dict__.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if key.startswith(&quot;SIG&quot;) and getattr(signal, key) == num:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name.append (key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if len(name) == 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return str(num)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;br&gt;&lt;/ul&gt;


</summary></url><url><title>Interviewing Humans</title><loc>http://taoalpha.me/blog/2013/12/17/read-translation-interviewing-humans/</loc><publish>2013-12-17T13:00:00.000Z</publish><summary>&lt;p&gt;原文作者: ERIKA HALL @ September 10, 2013&lt;br&gt;原文链接: &lt;a href=&quot;http://alistapart.com/article/interviewing-humans&quot; target=&quot;_blank&quot;&gt;点击此处&lt;/a&gt;&lt;br&gt;原文备注: 本文是节选自&lt;a href=&quot;http://www.abookapart.com/products/just-enough-research&quot; target=&quot;_blank&quot;&gt;&amp;lt;&amp;lt; Just Enough Research&amp;gt;&amp;gt;&lt;/a&gt;一书的第五章.&lt;/p&gt;
&lt;p&gt;访谈用户的目标就是去了解那些可能会影响用户使用你的产品的所有因素. 一个好的访谈是通过不断的练习逐渐掌握的. 其中最大的秘诀就在于你需要称为一个良好的谈论着. 但引导一个良好的访谈最重要的是先学会住口. 这可能会很难, 尤其是当你对这个话题充满热情的时候.&lt;/p&gt;
&lt;p&gt;记住,你所访谈的对象是需要被鼓舞的. 他们希望能够表现出他们的聪明才智. 当你访谈一个你一无所知的人时,你正在学习一个全新的而且非常吸引人的主题:那个人.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;一旦你已经建立好访谈的对象和访谈的目的, 你就需要创建你的访谈指南. 这是一个你在访谈中需要随身携带, 以保证你能够围绕着适合的话题并获得所有你需要知道的信息.&lt;/p&gt;
&lt;p&gt;这份访谈指南需要包含:&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;&lt;br&gt;    &lt;li&gt;这项研究的简介和目的.这是让你和参与者分享同时提醒你需要去围绕主题进行访谈.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;一些基本事实和常规问题以让访谈对象的回答顺畅下来.这些主要取决于访谈的目的,但多数会包含姓名,性别,年龄,地域以及职称和角色.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;一些破冰或者暖场的问题,来让访谈对象开口说话.多数人将这些称为”小对话”.可以大胆根据统计信息来修缮这些问题.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;整个访谈所围绕的核心话题或者问题.&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;&lt;br&gt;你还需要手机一些关于此话题以及访谈对象的背景信息, 尤其是当访谈的领域对你来讲相对陌生的时候. 比如你要去和屋主人谈论他们是如何选择他们的抵押经纪人的? 先阅读一些关于抵押贷款的资料.如果你要坐下来和客服的头头们聊天? 先了解一下帮助论坛的情况或者常见问题.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;访谈结构:三个盒子,松散集合&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;一个访谈包含三个环节,就像一场戏剧或者一个旋转课堂: 开场白和暖场环节,访谈的主体,结论.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;开场白&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;面带微笑的介绍自己,像花费时间接受你采访的人表达真诚的感谢(即便他们是有着足够的动机..特别是那些在百忙之中抽出时间的人们,尤其需要表示感谢).&lt;/p&gt;
&lt;p&gt;描述整个对话的目的以及访谈的话题,但是不要描述过多细节以防止你影响到访谈者的回答. 解释这些信息的用处以及公开性. 获得对方明确的许可后录制对话.&lt;/p&gt;
&lt;p&gt;询问对方是否对整个环节还有疑问.&lt;/p&gt;
&lt;p&gt;继续进行你需要确认的信息以及常规问题的部分.用获得的信息组织你的暖场问题.比如:&lt;/p&gt;
&lt;p&gt;“哦, 你住在圣地亚哥啊.在那里您都喜欢做什么来休闲放松啊?”&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;主体&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;一旦你顾全到了礼仪和乐趣,那么就可以进一步挖掘主食了.如果访谈对象谈性正浓, 你很有可能不需要直接提问就可以获得你想要的所有答案了.&lt;/p&gt;
&lt;p&gt;用开放式问题提问,这样可以鼓励访谈对象更多的说,而不是那些可以用”YES”,”NO”回答的问题.(关闭式问题: 你经常和市场部交流吗? 开放式: 和我说说你在平时工作中内部交流的情况吧.)&lt;/p&gt;
&lt;p&gt;如果访谈对象在某个话题上没有提供足够的信息, 那么可以问一些承接的问题或者探索式的问题,比如:多讲讲这里的情况.&lt;/p&gt;
&lt;p&gt;允许暂停来让整个过程继续.沉默会让对话气氛变的尴尬而不舒服,但需要习惯这些,不要急着去填补对话中的空缺.你需要设法让你访谈的对象去这么做.&lt;/p&gt;
&lt;p&gt;你预备的问题列表要作为一个核查列表而不是提问手稿,如果你需要逐字的读出你要问的问题,那么就和一个预录制的播放音没有区别了…&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;一旦你获得了你想要获得的信息,甚至更多的信息后,可以做一个非常优雅的总结.说一些类似这样的话语:”这就是我所有要提问的问题了.针对我们所讨论的,你还有什么想要告诉我的吗?”&lt;/p&gt;
&lt;p&gt;感谢他们抽空接受采访,避免所有官话式的话题:动机啊,或者下一步啊等等.&lt;/p&gt;
&lt;p&gt;不要担心提前结束对话,尤其是在你发现自己处在一个没有什么产出的访谈境地时.有时候一个访谈对象会变得很沉默或者敌意.一旦这种情况发生,你最需要做的就是继续下一部分.没有任何规定你必须死扣这一个话题,除非你已经尝试过你所有的需要回答的问题了…&lt;/p&gt;
&lt;p&gt;做好你需要做的,平和而尊重的面对所有结果.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;引导访谈&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;作为访谈者,你需要扮演好两个角色:主人以及学生.首先通过你的行为让访谈对象放松下来.他们感觉越舒适,你所能获得的信息就越多越好.一个轻松的访谈对象会更容易开头,更诚实,也就更少担心自己不能给人留下好的印象了.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;一旦你完成了你说的部分,就立刻闭嘴让路.在访谈对象开口的时候,你要尽量做到透明,中立的接受对方说的一切.相信他们都是这个世界上最了解自己的人,而这正是目前情景唯一需要重视的.只有在需要让对话回归话题或者需要进一步解释的时候才开口.你将知道,当你一个字都插不进去却获得了所有问题的答案的对话才是最好的访谈.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;休息&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;就如同你在舞台上一样,会不知不觉的紧张.你自己的紧张情绪可能会传染给访谈对象,所以提醒自己深呼吸,保持放松以及机警.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;练习积极主动的聆听&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;只要你能够呼吸,就尽量发出一些恩恩的声音吧.如果你在访谈一个人,确保直视对方并且不时点头表示赞同. 此时无关的想法可能开始不断的浮现, 尤其是当一个回答很长的时候, 但这时一定要保持警惕并且将注意力集中到这个人身上!&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;时刻有一只耳朵注意着那些模糊的回答&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;你要细节再细节.要时刻准备好提出探索式的问题:为什么是那个呢?或者”和我多讲讲这个吧?”&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;避免谈论你自己&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;有时候,对话会转变到”让我告诉你一些我曾经的一个类似经历吧…”.但访谈并不是访谈你和你的意见.这可能会比较困难,要多加练习来避免这种情况. 所以, 如果你发现你已经插入对话之中了,那么请放松,控制对话回到正轨.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;灵巧的检查表&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;这个在用户研究中出现的检查表的方式其实是从Helsinki设计实验室由Sitra,芬兰创新基金会共同出版的”Ethnography Field Guide”中继承的(&lt;a href=&quot;http://bkaprt.com/jer/10/&quot; target=&quot;_blank&quot;&gt;原文链接&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;营造一个非常温暖舒适的气氛来让参与者放松&lt;/li&gt;&lt;br&gt;    &lt;li&gt;多倾听,少说话.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;要负责人的记录传达你所研究对象的想法和行为.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;引导你的研究在一个自然的话题情景下进行.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;通过一个常规的目标简介作为开端,但是要谨慎不要把话题的回应范围限制的太狭窄.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;鼓励参与者分享他们的想法以及讲述他们的经历经验.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;避免那些引导性的问题以及关闭式的问题.问一下承接性的问题.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;提前准备好要提问的问题,但是不要担心超出这个预定范围.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;如果可能的话,尽可能的记录那些有趣的事情或者行为.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;同时注意记录参与者使用的那些短语和词汇.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;保持注意力,即便停止录制后,你也有可能获得一个启示性的信息.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;尽可能表现的健谈而又自然.如果志愿参与者能在你提问之前就告诉你需要的信息.你的问题始终都是一个提示性的东西,来让参与者尽可能的给你一个完整的故事,其中很有可能有不少情景,态度以及行为是你都没有想过的.完全可以通过设置对话的角度来获取足够的信息,但是同时对于回应没造成多少的影响.&lt;/p&gt;
&lt;p&gt;如下是一些问题集,基于我们自己的博物馆网站设计示例,捏可以在此基础上来作调整以满足你的需要:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;告诉我一些你工作的事情吧.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;回顾一下你的一个典型的一周生活吧.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你上网的频率如何?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你使用的电脑或者设备是什么样的?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你会分享他们中的任何东西吗?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你通常上网都做什么?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你通常在下班后都做什么?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你是如何决定做什么的?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;告诉我一些关于你孩子使用互联网的情况吧.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你如何决定在你休息的时候和你的孩子做什么?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你有没有什么特殊的非工作的兴趣呢?除了新闻你都会在网络上阅读什么?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;你多久访问一次城里的博物馆,哪一个?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;是什么促使你去的?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;如何处理你收集到的信息&lt;/strong&gt;&lt;/h3&gt;&lt;br&gt;访谈只是人类研究中的一个基础单元.一旦你完成了你的访谈,那么分析这些数据找到主题,包含用户的需求以及优先级,行为模式以及精神模型.注意你所听到的特定的语言和术语,这样才能更好的反映用户在真实的交互中的所思所想.如果你在做的是迭代研究,那么就需要去了解你发现的需求和行为来指出需要解决的问题.将这些围绕的用户类型的族群整理转化为用户模型,从而可以让你在工作中的产品和服务中使用它们.&lt;p&gt;&lt;/p&gt;
</summary></url><url><title>HCI相关出版物总汇</title><loc>http://taoalpha.me/blog/2014/01/14/read-translation-hci-publications-confluence/</loc><publish>2014-01-14T06:00:00.000Z</publish><summary>&lt;p&gt;源地址: &lt;a href=&quot;http://hcibib.org/publications/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本页面为HCI相关的在线课程, 日志, 出版物以及电子资源等的汇总.&lt;/p&gt;
&lt;p&gt;1ST Choice: 优质资源&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;ACM TIIS: (Transactions on Interactive Intelligent Systems)交互式智能系统的处理&lt;br&gt;        ACMTIIS主要出版一些关注在设计, 认知, 或者是包含某种形式的机械智能的交互系统的评价方面的论文. TIIS的文章来源是非常广泛的. 一篇文章可能就包含了多种复杂的关于交互式智能系统的观点, 但关注焦点是: 智能科技, 用户和系统的交互,或者同时包含这两方面.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;ACM TOCHI: Transactions on CHI&lt;br&gt;        TOCHI涵盖了软件, 硬件以及交互过程中的人的方面. 话题更是包含了硬件以及软件的架构, 交互技术, 内涵隐喻以及评估, 用户界面设计流程, 以及用户和用户群等多方面. 而那些包含在人工智能, 面向对象系统, 信息系统, 图像以及软件工程社区的各个方面, 都会在TOCHI中那些高质量–构建高效的HCI界面相关的信息和ideas–的研究论文中受益.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Behaviour and Information Technology&lt;br&gt;        行为和信息科技覆盖了和设计, 使用以及信息技术带来的影响等方面的研究.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Human-Computer Interaction&lt;br&gt;        HCI是一个多学科交互的杂志. 它关注的方面包含了理论的, 经验主义的以及方法论的各个方面. 比如用户研究, 系统设计以及它是如何影响用户的等. 而HCI的目标是成为一个高质量的杂志, 汇集各个学科优质的研究和设计作品, 形成一个卓越的HCI领域.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Interacting with Computers&lt;br&gt;        英国HCI小组的杂志, 一个英国电脑协会的特别兴趣小组.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;International Journal of Human-Computer Interaction&lt;br&gt;        强调认知学, 社会学, 健康学以及功效学方面的工作, 当然是和计算机相结合的~ 同时强调高效设计以及计算机交互系统的使用人和计算机两个方面.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;International Journal of Human-Computer Studies&lt;br&gt;        HCI相关的论文, 基于用户的界面, 用户研究中的统计学和工程学方法, 以及计算机系统发展的人工智能领域.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Task-Centered UI Design (Book)&lt;br&gt;        基于Task的UI设计, 转为HTML的共享书籍.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;UI Design Newsletter&lt;br&gt;        有HCI相关的人员收集的文章~&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Usability &amp;amp; UX Articles&lt;br&gt;        基于研究的关于网页可用性, 用户测试以及交互界面设计的文章, 以及UX方面的文章(有很多大牛在)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;User Interface Engineering Articles&lt;br&gt;        用户界面工程&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;其他资源&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;ACM Digital Library&lt;br&gt;        包含了现在以及以前的杂志和会议.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;ACM interactions&lt;br&gt;        一个HCI应用方面的双月刊;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;ACM SIGCHI Bulletin&lt;br&gt;        ACM SIGCHI的官方发布机构, 和HCI相关的报告,新闻,文章等等. 按照季度发行, 同时会发送给SIGCHI的各个成员.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;ACM SIGCHI Curricula for Human-Computer Interaction&lt;br&gt;        SIGCHI课程发展小组推荐的课程介绍, 包含一个对HCI的回顾和定义.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;A List Apart Articles&lt;br&gt;        杂志, 探究设计, 开发以及网页内容的含义, 特别关注结合网页规范设计的技术和益处.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Ask Tog&lt;br&gt;        个人博客,算是. 一些来自Bruce Tog的建议~&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Alertbox: Web Usability&lt;br&gt;        两周发行一次的, 关注网页可用性的一些问题.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Boxes and Arrows&lt;br&gt;        试图把工程结构和设计带到数字化领域的资源整合站. 包含information architecture, information design, interaction design, interface design.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Coding Horror: Programming and Human Factors&lt;br&gt;        &lt;/li&gt;&lt;br&gt;    &lt;li&gt;Design Articles&lt;br&gt;        用户界面设计相关.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;e-Newsletter: UI Design Update&lt;br&gt;        每个月这个免费的新闻摘录都会回顾一下和用户界面设计相关的在主流的会议和出版方给出的有价值的进展.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Interactions Magazine Blogs&lt;br&gt;        HCI大牛们的blogs&lt;/li&gt;&lt;br&gt;        …..&lt;br&gt;&lt;/ul&gt;&lt;br&gt;…..&lt;br&gt;注: 很多链接其实都失效了…比较遗憾…我会尽量在我的wiki上补充一些自己收集的链接.&lt;/p&gt;
</summary></url><url><title>为什么以及如何应用&quot;persona&quot;</title><loc>http://taoalpha.me/blog/2015/06/11/read-things-related-to-persona/</loc><publish>2015-06-11T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6765_u6E90_u4ECB_u7ECD&quot;&gt;&lt;a href=&quot;#u6765_u6E90_u4ECB_u7ECD&quot; class=&quot;headerlink&quot; title=&quot;来源介绍&quot;&gt;&lt;/a&gt;来源介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.uxbooth.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UX BOOTH&lt;/a&gt;一直是我很喜欢的一个UX站之一, 不止喜欢其文章, 更喜欢其设计的简洁明了, 重点突出~ 一个好的UX站首先自己的网站设计一定要足够优秀, 毕竟自己的瓜不甜, 如何叫人种瓜呢?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uxbooth.com/articles/creating-personas/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating Personas&lt;/a&gt;是UX BOOTH最近的一篇文章, 主要讲的内容也是和persona相关的, 对于任何一个产品而言, 找对你的面向对象, 目标用户是你成功的首要因素之一. 所以读完本文后, 特来分享到此.&lt;/p&gt;
&lt;h2 id=&quot;u4EC0_u4E48_u662Fpersona&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u662Fpersona&quot; class=&quot;headerlink&quot; title=&quot;什么是persona&quot;&gt;&lt;/a&gt;什么是persona&lt;/h2&gt;&lt;p&gt;首先介绍下persona, persona一词应用到UX领域最早是&lt;a href=&quot;http://en.wikipedia.org/wiki/Alan_Cooper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alan Cooper&lt;/a&gt;在他的&lt;strong&gt;The Inmates Are Running the Asylum&lt;/strong&gt;一书中引入的, 是表示Cooper为了解决设计问题而引入的虚拟用户. 这些虚拟用户本身也都是基于研究数据的. 从那之后, persona就成为了很多”以用户为中心的设计”或者”面向大众设计”等原则的核心思路之一, 逐渐取代了早期的”移情式角色扮演法”.&lt;/p&gt;
&lt;p&gt;简单来说, persona就是基于研究数据而建立其的用户抽象模型. 在设计过程将其作为用户来看待, 从而让设计,甚至开发过程都变的更具实际意义, 更加就事论事.&lt;/p&gt;
&lt;p&gt;通常会将persona分为三种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marketing personas: 主要关注与用户的基本属性, 购买动机以及消费的倾向等等; 通常会对用户的行为做出基本的解释, 但并不关注或深究其背后的原因, 通常适用于为特定产品选择合适的消费者;&lt;/li&gt;
&lt;li&gt;Design personas: 与关注商业方面的marketing personas不同, design personas主要关注用户的预期, 目标, 所作出的行为以及其所遇到的痛点等等; 这些personas的建立都是基于具体的研究和真实的用户数据. 这种persona的主要目的是阐述用户为什么这么做的, 借此来将用户引入到整个产品的设计, 开发和服务的各个环节之中. 通常会贯穿整个产品周期, 时刻借此提醒不要便宜目标用户, 始终将核心关注到用户的需求之中去而不是自己的需求上去;&lt;/li&gt;
&lt;li&gt;Proto personas: 这算是一个不标准的Design personas, 因为通常一个完善的design personas是非常耗费资源的, 很多时候可能没有那么多的时间,经历,经济来去建立一个design persona, 这时候我们可以利用他人的研究资料以及团队本身对服务用户的了解, 建立一个不那么严格的design persona, 即proto persona. 需要注意的是, 即便不够标准, proto persona也一定是基于有效的研究数据建立的.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u4E3A_u4EC0_u4E48_u8981_u4F7F_u7528persona&quot;&gt;&lt;a href=&quot;#u4E3A_u4EC0_u4E48_u8981_u4F7F_u7528persona&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用persona&quot;&gt;&lt;/a&gt;为什么要使用persona&lt;/h2&gt;&lt;p&gt;说完了什么是persona, 想来大家对为什么要用persona也有了一定的认识. 无非就是以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过具体的用户模型, 我们就能将用户需求贯穿产品始终, 时刻提醒我们关注的核心和重点;&lt;/li&gt;
&lt;li&gt;让用户由抽象繁杂变的清晰明了, 更加容易做到以用户为核心的设计;&lt;/li&gt;
&lt;li&gt;更加容易区分核心任务和非核心任务;&lt;/li&gt;
&lt;li&gt;更加容易激发灵感;&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u5982_u4F55_u4F7F_u7528persona&quot;&gt;&lt;a href=&quot;#u5982_u4F55_u4F7F_u7528persona&quot; class=&quot;headerlink&quot; title=&quot;如何使用persona&quot;&gt;&lt;/a&gt;如何使用persona&lt;/h2&gt;&lt;p&gt;说了这些persona的好处, 我们该如何使用persona呢? 先说说不用persona可能带来的坏处吧, 除了上述那些好处都没了外:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们很容易被个别用户所引导, 从而不断的更改设计和需求方案;&lt;/li&gt;
&lt;li&gt;团队很容易出现理解上的偏差, 很容易出现自我代入的思维方式;&lt;/li&gt;
&lt;li&gt;很容易陷入到边缘需求之中去;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么如何使用呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据研究资料, 用户调查, 抽象出典型用户模型;&lt;/li&gt;
&lt;li&gt;团队沟通要完善, 确保每个人都对建立的persona有足够清晰统一的认识;&lt;/li&gt;
&lt;li&gt;需求要以persona为评判对象, 以用户核心需求作为第一要务;&lt;/li&gt;
&lt;li&gt;在产品的各个环节都要随时保持对persona的对比验证, 确保始终走在以用户为核心的设计之路上;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单? 哈哈, 其实这里的核心都在与那个用户模型, 好的用户模型才能带来实际的好益处, 那么如何评判一个好的用户模型呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好的persona一定是反映出了研究中的某种模式;&lt;/li&gt;
&lt;li&gt;好的persona一定是关注当前的, 而不是着眼于未来的;&lt;/li&gt;
&lt;li&gt;好的persona都是非常现实的, 没有那么多的理想主义;&lt;/li&gt;
&lt;li&gt;好的persona都代表着一个颇有难度的设计对象;&lt;/li&gt;
&lt;li&gt;好的persona能够帮助你了解用户的使用情景, 行为, 态度, 需求, 痛点以及其目标和动机;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈哈, 挺虚的? 可以看看&lt;a href=&quot;https://www.pinterest.com/chrismkelley/personas/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chris Kelly 收集到pinterest的一些personas的例子&lt;/a&gt;~ 也许你会有更加清晰的认识哦~&lt;/p&gt;
&lt;h2 id=&quot;u7ED3_u8BED&quot;&gt;&lt;a href=&quot;#u7ED3_u8BED&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;第一次接触到persona这个词是12年在TX实习的时候, 因为要针对伦敦奥运会做一个微博活动平台, 当时就需要我们针对微博运营人员的调研而建立一个persona, 从而更好的整合大家的需求, 以解决共同需求为主要目的. 当时觉得persona其实就是个用户需求代表, 现在来看, persona更准确说应该是个带着用户主要共同需求的虚拟人物.&lt;/p&gt;
&lt;p&gt;而且通常来说, persona只有和scenario结合的时候才有价值, 而往往一个product下有不止一个persona, 更有无数scenario. 拥有一个完善的persona, 就相当于有一个更好的代入对象, 我们都可以更好的找到一个用户的角度去观察和思考在某个情景下的用户目标, 行为和预期等等, 从而让产品设计的更加贴近用户, 更加自然的与用户交互了.&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599_3A&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599_3A&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Persona#In_user_experience_design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Persona - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pinterest.com/chrismkelley/personas/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chris Kelley’s Board of Personas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://uxmag.com/articles/using-proto-personas-for-executive-alignment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Proto-Personas for Executive Alignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2014/08/06/a-closer-look-at-personas-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clear look at personas - smashing magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Teenage Usability(译)-为青少年而设计</title><loc>http://taoalpha.me/blog/2013/06/12/read-teenage-usability-translated-designed-for-young-people/</loc><publish>2013-06-12T05:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h5&gt;Teenage Usability:Designing Teen-Targeted Websites&lt;/h5&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;Summary:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;青少年往往会对自己的网络技能过渡自信,但实际上他们表现的比成年还要差劲.更弱的阅读水平,没有耐心,而且尚未发展成熟的研究技能,都减少了青少年完成任务的成功率以及对于简单可靠的网站的需要.&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;青少年们都是兴奋的.技术已经和青少年的生活密切的结合到一起了,此时为他们创造更多有用而且有益的网站变得更加关键了.在当下这个下一件最重要的事情就是点击鼠标,而短信息打断活动已经成为一种默认的规则而不是偶尔发生的例外的时代,网站架设者们必须清晰的理解青少年们想要什么,如何让他们留在你的网站上.&lt;/p&gt;
&lt;p&gt;为了理解伴随着科技和互联网成长起来的一代人的期望,我们设计了经验性的可用性研究,针对真实的青少年对象,来寻找可以指导关于网站如何提升以满足青少年的能力和偏好.&lt;/p&gt;
&lt;p&gt;我们的研究拒绝了很多刻板印象,包含以下这类的青少年:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;只是为了通过网络的图片和媒体获得娱乐的;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;非常精通技术的科技控;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;手机控,用手机做任何事,而且&lt;/li&gt;&lt;br&gt;    &lt;li&gt;希望所有事物都能社交化的;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;青少年不是那些有选择性放弃的浏览网络的技术控们.而且他们并不喜欢充满了炫目的,闪烁的图片的网站.青少年大都比较一致,千篇一律的只喜欢那些大胆新奇的事物.他们经常毫不惧怕技术风险的浏览着网络,而且经常会连接到某种形式的媒体之中.虽然这些都是部分正确的,但是这些都是过于简单的,而且让这些来指引你的设计可能会导致非常灾难性的后果.&lt;/p&gt;
&lt;p&gt;青少年们使用网络的设备是非常多样的,而且会依据不同的环境而有所不同.在我们的研究中,我们主要关注于网页的可用性.主要是从桌面电脑或者笔记本的角度来说. 我们同样也观察了移动网站的可用性,以及青少年是如何使用移动设备的.虽然青少年在发短信,上facebook等事情上花费了无穷无尽的时间,我们并没有关注于此,因为我们的目标是归纳出可以作为主流网站的设计指导的标准,而不是帮助建立下一个Facebook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于本研究&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们归纳出了111条能吸引青少年并把他们留在你的网站上的可用性指导原则.这些推荐的规则都是基于多种方法的观察研究之上.共计84名用户,年龄范围在13-17岁之间的参与者,分为两轮参与了本次研究:38名请少人在原始研究(8年前),而46名青少年在新的研究中.我们把我们的发现按照下述的三个方法分成三部分:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;可用性测试:我们和参与者逐一进行测试,并且给与他们一定的任务来完成,让他们在操作的过程中说出他们的想法.为了让整个场景尽可能的有效,我们按照每个参与的青少年的真实兴趣尽量的模拟了真实世界的场景.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;实地考察:我们在青少年的家里以及学校观察他们.在他们访问网站期间,我们没有实现给予他们预定的任务,而只是观察他们平常的时候使用网络的方式.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;采访测试对象以及焦点小组:为了获得更进一步的关于他们体验的意见和态度,我们询问参与者,由他们提供了一些示例细节,关于他们是如何以及什么时候使用网络的,以及他们认为哪些网站是有用而有趣的.我们同时还请求青少年们给了我们关于如何让网站更有吸引力的建议.采访既会发生在可用性测试前,也会发生在可用性测试之后,同样也会在焦点组中进行.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;我们在US,Australia的城市和乡村,从富裕的城镇到平穷的乡村都进行了研究.我们测试对象由大致相等的男生女生组成,就152个包含了一个很大范围的网站测试集进行测试,测试集包含:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;学校资源(加州州立大学,BBC学院,SparkNotes)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;旅游,艺术以及娱乐类(Lonely Planet等)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;健康类(Australia Drug Foundation)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;信息参考类(Nature)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;新闻类(CNN)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;娱乐和游戏类(MTV等)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;电子商务类(Apple)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;企业官网(Samsung)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;政府网站(NASA)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;非盈利机构网站(The Insite,World Food Programme)&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;从这些样例中可以发现,我们测试的网站中既有面向青少年的专业网站,也有一些主流网站,其受众的一部分是青少年.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Teen Motivation For Using Websites(青少年使用网络的动力)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;青少年使用网络的理由很多样,其中包含娱乐.通常来说,他们会有比较明确的目标,即便是那个目标只能获得他们持续10分钟的注意力.&lt;/p&gt;
&lt;p&gt;虽然他们上网的目的和成年人可能不一样,但是青少年在主要的方式上还是和成年人一致的:两组人都希望网站足够简单易用,可以让他们很快的完成既定目标.想成年人那样,青少年们也大多是面向目标的类型,而且很少无目的的浏览网页.这也是为什么网站的易用性对于他们的重要性和其他用户组一样的原因了.&lt;/p&gt;
&lt;p&gt;我们的研究报告指出,青少年们使用网站用于:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;学校的安排&lt;/li&gt;&lt;br&gt;    &lt;li&gt;爱好或者其他特殊的兴趣(包含学习新的技能以及参与有趣的活动)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;娱乐(包含音乐和游戏)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;新闻(包含体育类,时事类的以及娱乐类的)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;学习一些新的话题&lt;/li&gt;&lt;br&gt;    &lt;li&gt;和朋友聊天&lt;/li&gt;&lt;br&gt;    &lt;li&gt;购物&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;即便当青少年没有在网站上做任何实际的买卖,他们也会访问这些网站,并且在其中寻找商品建立自己的心愿单,针对于那些有支付信用卡能力的成年人.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好消息和坏消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好消息&lt;/strong&gt;:青少年在导航网站以及找到他们想要的方面变得更加成功了.青少年的成功率大约提升了16%,按照现在的和8年前的相比,相当于每年增长2个百分点.这相比于成年人在过去的10年里平均每年1.7个百分点的增长还是有微弱的优势.&lt;/p&gt;
&lt;p&gt;注意:成功率反应的是任务完成的学生比例.任何小于100%的百分比都代表了一个网站设计上的失败或者商业上的损失.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://media.nngroup.com/media/editor/2013/02/01/teenagers-usability-tast-success-rate.png&quot; alt=&quot;Average Task Success&quot;&gt;&lt;/p&gt;
&lt;p&gt;究竟是青少年变得更优秀了呢?还是网站变的更优秀了呢?可能两者都有吧.我们观察到了青少年许多和8年前的研究中一样的坏习惯.因此,新研究中青少年良好的表现至少有部分是来自于网站设计本身的提升的. 即便如此,虽然我们8年前的研究对象都是一些重度的互联网使用者,但今天的青少年们有了更多的时间投注到更庞大的互联网中,去使用它,这也导致了更多的机会去磨练他们的浏览技巧.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;坏消息&lt;/strong&gt;:青少年们并没有人们想象中的那么无敌.虽然青少年在网络上会感觉很自信,但是他们也会犯错误,而且经常轻易的就会放弃.行动敏捷的青少年们相比成年人有更少的谨慎而且经常轻易的下判断,这些都导致更小的成功.实际上,我们得到的成功率只有71%,而成年人则获得了83%的成功率.&lt;/p&gt;
&lt;p&gt;青少年们表现的比成年人差主要是以下三个原因:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;尚不熟练的阅读技巧;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;缺少复杂的研究策略;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;低到不可思议的耐心;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;为了提升你的网站对青少年的易用性,你必须考虑以上三个因素.&lt;/p&gt;
&lt;p&gt;通过不同网站类别,青少年在电子商务网站获得最好的成功,这类网站经常有着标准的设计方式,而且需要很少的阅读技巧.青少年们对那些提供紧凑的内容和弱小的导航的大网站而言是一个巨大的挑战.政府网站,非营利组织网站以及学校网站等都是这种低可用性的代表.&lt;/p&gt;
&lt;p&gt;不管可用性的提升,我们在前些年以及最新的观察中发现了用户纠结于同样的问题:由于合并一些属性以及设计方法而造成的问题.因此,无论是传统的还是新的指导原则都必须考虑技术和人都是在持续进化的,我们最新的报告包含了总计110条指导原则,相比于最初版本的61条还是增加了不少.&lt;/p&gt;
&lt;p&gt;许多指导原则同样适用于普通的用户.对于青少年,这些原则显得更加重要因为易用性表现出了巨大的门槛效应.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write Well(优秀的文章)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为那些没有耐心的用户而写.再没有比满满一屏幕混乱的文本更让年轻的用户感到痛苦而放弃了.青少年们更容易变得无聊,分散以及挫败感.青少年不喜欢在网络上阅读太多东西.他们在学校里已经读的够多了.同样的,许多青少年的阅读技能并不完美,尤其是那些相对更年幼的青少年们.那些更容易浏览或者视觉上更明显的阐述概念的网站更受到青少年的偏爱,尤其是相比于那些有着紧凑文本的网站.&lt;/p&gt;
&lt;p&gt;应用适当的网络书写和排版技术对于和青少年沟通是非常关键的.在小而有意义的块中显示内容,并加以足够的空白/小块可以帮助学生更好的获取信息以及找到他们上次被短信或者电话打断时读到的地方,而且这种打断几乎还是不可避免的.&lt;/p&gt;
&lt;p&gt;通过选择合适的词语来帮助青少年理解以及获取他们的注意力.使用那些青少年可以理解的词语.句子以及段落要足够短.青少年通常在阅读和理解技巧上要略逊于成年人.如果你的网站面向的用户比较广,那么就用6年级的阅读水平(或者更低)作为书写的参考标准.在这一水平的书写,可以帮助几乎所有的用户,无论是年轻的还是年老的,都可以快速的理解你的内容.&lt;/p&gt;
&lt;p&gt;研究过程中,还有一个令人惊喜的发现:青少年和成年人都不喜欢那些太小的字体.我们经常提醒使用小字体的网站,因为它们太小而可能对老年人有负面影响(甚至人过了40岁,视力就开始下降了).我们一贯假设小字体占据主导是因为多数网页设计师都是年轻人,都还有着近乎完美的视力,所以当我们发现小字体对我们的青少年用户也会产生一些问题,引起一些负面的评价时,我们非常惊讶.虽然他们的视力明锐,但在阅读太小的文字时,他们更容易快速跳过或者更容易的被分散注意力.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid Boring Content–and Entertainment Overload(避免无趣的内容,以及过度娱乐)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;青少年经常抱怨他们浏览的网站过于无趣.枯燥的内容对于那些想要留住青少年的网站而言就是死神之吻.然而,并不是所有的内容都需要有很炫的交互的.虽然青少年们对于美感有较高的评价,但是它们对于表现混乱,包含无意义的媒体的网站也是敬谢不敏的.&lt;/p&gt;
&lt;p&gt;注意不要过度使用交互属性,因为你在为青少年进行设计.多媒体可以吸引也可以激怒青少年,完全取决于它是否有用.对于青少年而言,最佳的上网体验是那些可以交给他们一些新东西或者那些让他们关注于某个目标的网站.&lt;/p&gt;
&lt;p&gt;什么才是好的?以下的这些交互属性都是不错的,因为他们让青少年更好的做事情而不是简单的坐下来阅读:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;在线小测验;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;提供反馈意见或者提问的表;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;在线投票;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;游戏;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;分享图片或者故事的功能;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;信息板;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;可以提供建议或者给出建议的论坛;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;创建一个网站或者添加内容的功能;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;这些交互的功能都让青少年们在互联网上留下了自己的痕迹或者用某种方式表现了他们自己,有些很微小,有些则很突出.&lt;/p&gt;
&lt;p&gt;网站类型对于用户的期待值是有影响的.比如说,青少年会期待在电子商务网站或者品牌网站中看到专业,而在信息类站点上则希望看到简单而且经过润色的内容;对于后者,用一种礼貌的方式展现有趣的内容会比用新的复杂的功能体验起来更加有吸引力.青少年可以自如的学习以及感到被吸引.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make It Snappy(让网站变的时髦)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个加载速度很慢的网站会是一个很好的破坏者.无论你做什么,首先先确保你的网站载入速度够快.慢,迟缓的网站对于任何人都是一种沮丧的体验,但是它们对于期待瞬间满足的青少年而言尤其如此.&lt;/p&gt;
&lt;p&gt;每次在你开发新的超酷的插件前好好再想想.如果它很慢,那还是算了吧.青少年们不会有耐心等待它的.因为青少年经常使用的是旧的,二手的计算机,有时候还有着比较慢的网络连接,那些酷炫的特性可能不会很好的展现.青少年喜欢子啊网站上做事情,他们不喜欢看那些很慢的网站或者看起来很炫但是表现的很迟缓的网站.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t Talk Down To Teens(不要轻视青少年)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;避免任何听起来可能有优越感或者幼稚的话语.恰当的语调可能促使你的成功,也有可能造成你的失败.青少年们多和那些同龄人创造的故事有关,所以你的网站应该提供那些真实的故事,图片以及来自其他青少年的真实例子.&lt;/p&gt;
&lt;p&gt;我们研究中一些网站试图在一个层面上同时服务于儿童和青少年,通常都是让标题看起来像是孩子气的感觉.这其实是一个自掘坟墓的行为,”kid”这个词正好引起青少年的厌恶.青少年对于他们刚赢得的地位有着很强的自豪感,他们不希望过于幼稚的内容—这是面向青少年用户的网站避免过于动画风格或者显眼的色彩主题的又一原因.我们推荐位青少年和儿童提供不同的部分,并分别加以”kids””Teens”的标题.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let Teens Control The Social Aspects(让青少年控制社交的方面)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让分享变的容易但不强迫分享.青少年们的社会交际通常都依赖于科技,但是他们并不希望无时无刻都处在社交的环节中.他们希望能够控制他们分享的内容以及如何分享.那些强迫青少年去注册然后自动将他们的注册信息公开的网站违反了信任的原则.父母以及老师教育青少年在年轻的时候保护自己的隐私,其中一条就是要避免那些恼人的网站.&lt;/p&gt;
&lt;p&gt;当提供分享的功能时,确保包含邮件.不像大学生,青少年经常喜欢使用电子邮件来分享内容,因为他们更注重保护自己的社交账号,而且更谨慎的决定什么人可以看到他们的活动状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design For Smaller Screens and Poor Ergonomics(为那些小屏幕和弱小的工效学而设计)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;许多学生在尴尬的时候都会使用移动设备来上网,而这些笔记本,平板以及手机等,都有着比较小的屏幕.随着移动设备的发展,就需要你在设计一个网站的时候选择一种不会损害到易用性的方式.因此,即便是对商业用户屏幕在越来越大,青少年也极少能拥有自己的高端台式电脑.&lt;/p&gt;
&lt;p&gt;青少年经常使用带触控板的笔记本,这让交互对于精确性的需求有了要求,比如下拉菜单,拖拽行为,以及小按钮–操作很困难.翻转效果或者狭小的点击区域等设计元素往往会造成问题,如果他们到处都在使用的话.小号文本和紧凑的文本让阅读变的困难.整合所有的功效性低的元素,你就有了一个针对各类错误和苦事的处方了.&lt;/p&gt;
&lt;p&gt;媒体所描绘的青少年都是那种非常熟练的计算机操作者.而实际上,青少年对于利用认知能力整合信息是过度自信的,也就意味着他们经常轻易的放弃,然后责怪网站的设计.他们不会责怪自己,他们责怪你.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Age Group Difference(年龄不同的差异)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下表总结了在为少年,青少年,大学生以及成年人而进行的设计方法的主要相似点和差别.其中,关于儿童的发现是基于3-12岁的用户的;而关于大学生的发现则是基于18-24岁的用户的.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://callmet.zzgary.info/wp-content/uploads/2013/06/AgeGroupDifference1.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-743&quot; title=&quot;AgeGroupDifference&quot; src=&quot;http://callmet.zzgary.info/wp-content/uploads/2013/06/AgeGroupDifference1.png&quot; alt=&quot;&quot; width=&quot;484&quot; height=&quot;260&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;Smile:代表喜欢,感兴趣,收到吸引,或者用户可以非常轻松的适应它&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Middle:用户可能对于其中的一些方面比较看好,但是大量使用可能会出现问题&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Dislike:用户不喜欢,甚至不愿意做,或者觉得很难操作&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;很明显,在不同的年龄组中有着非常明显的差异.其中对于青少年而言,易用性的最高水平在于设计直接命中了他们的需求和行为,这一点和儿童以及成年人都有所不同.从表中还可以看到,无论是对交互设计还是对那些更明显的因素,比如话题以及内容风格,这一点都是没错的.&lt;/p&gt;
&lt;p&gt;更多的信息和完整的青少年网站设计可用性指导原则,可见我们的全部研究报告. Edit By &lt;a href=&quot;http://mahua.jser.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MaHua&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>谈谈颜色在市场方面的应用</title><loc>http://taoalpha.me/blog/2014/11/27/read-talk-about-application-of-colors-in-the-market/</loc><publish>2014-11-27T08:00:00.000Z</publish><summary>&lt;p&gt;&lt;a href=&quot;https://blog.bufferapp.com/the-science-of-colors-in-marketing-why-is-facebook-blue&quot; title=&quot;颜色在市场的应用&quot; target=&quot;_blank&quot;&gt;本文&lt;/a&gt;讲述了关于颜色的不同所能带来的不同影响, 相信很多人都认可”颜色和人的感受有着非常紧密的关系”这个事实. 那么颜色能产生多大的影响呢? 又是和产生的影响的对应关系如何呢?&lt;br&gt;&lt;br&gt;先说个趣闻: facebook为什么是蓝色为主色调呢? 其实根据New Yorker, 原因很简单. 就是因为Mark Zuckerberg是一个红绿色盲. 这就导致蓝色是Mark所能识别的最好的色调了. 用Mark自己的话说就是:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;蓝色对我而言是最丰富的了, 我可以看到各种的蓝色.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;没什么科学价值? 可能就facebook这个个例来说确实没啥特别的价值, 但是实际上现实生活中还有很多关于颜色是如何影响消费者们的消费决策的实例的. 毕竟视觉可谓是多数人类最常用的接收器了.  甚至可以说决定我们是否尝试某款产品的90%因素都是颜色所致呢.&lt;/p&gt;

&lt;p&gt;那么颜色和我们的感知究竟是什么样的对应关系呢?&lt;/p&gt;

&lt;p&gt;这里作者聚了4个典型的例子:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;黑色&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.54.00-AM.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.54.00-AM.png&quot; alt=&quot;the science of colors in marketing: black&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;绿色&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.54.31-AM.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.54.31-AM.png&quot; alt=&quot;the science of colors in marketing: green&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;蓝色&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.55.37-AM.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.55.37-AM.png&quot; alt=&quot;the science of colors in marketing: blue&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以及在大大小小品牌商标logo中使用的种种颜色:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/color-guide.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/color-guide.png&quot; alt=&quot;the science of colors in marketing: color guide&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基于此, 颜色对人类的感受是有着非常明显的影响的, 这一影响尤其是在我们购物时发挥的最为到位. 有一个分析公司 &lt;a href=&quot;http://kissmetrics.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KISSmetrics&lt;/a&gt;曾经做过一个非常棒的信息图来描述关于颜色是如何影响我们的购买决策的.&lt;/p&gt;

&lt;p&gt;从其中可以看出绿色在购物中使用的最为突出, 因为它最能让人放松.  其次, 黑色也经常用于奢侈品中, 它在背光下表现极为出色. 下面就是这一信息图的全文啦:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.57.04-AM.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-10.57.04-AM.png&quot; alt=&quot;the science of colors in marketing: buying&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;既然说了颜色会影响到人们的心情感受, 那么你要如何利用颜色来提升你的市场效果呢?&lt;/p&gt;

&lt;p&gt;同样是来自 &lt;a href=&quot;http://kissmetrics.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KISSmetrics&lt;/a&gt;, 我们概括来说有以下几点:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;针对女性而言&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;女性爱好色: 蓝色, 紫色, 绿色&lt;/li&gt;&lt;br&gt;&lt;li&gt;女性厌恶色: 橘色, 棕色, 灰色&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;br&gt; &lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-11.19.28-AM.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-11.19.28-AM.png&quot; alt=&quot;the science of colors in marketing: women&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;针对男性而言&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;男性爱好色: 蓝色, 绿色, 黑色&lt;/li&gt;&lt;br&gt;&lt;li&gt;男性厌恶色: 棕色, 橘色, 紫色&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;br&gt; &lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-11.21.20-AM.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-25-at-11.21.20-AM.png&quot; alt=&quot;the science of colors in marketing for men&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也有人曾经做过一个实验去看改变一个按钮的颜色 &lt;a href=&quot;http://blog.bufferapp.com/best-time-to-tweet-post-to-facebook-send-emails-publish-blogposts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对于转化率的影响&lt;/a&gt;. 他们选用了绿色和红色作为对比.&lt;/p&gt;

&lt;p&gt;对绿色呢, 他们初始猜测:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;绿色通常和”自然”,”环境”联系在一起, 在加上在交通灯中的广泛应用, 有一种”Go”或者前进的意味在其中;&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;对红色呢, 初始认为:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;红色和绿色不同, 通常认为是一种兴奋的, 激情的, 和血, 警告等联系在一起. 而在交通灯中常用来指示停止. 当然, 红色往往很抢眼.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;按照上面的分析, 多数人会假设绿色更加友好, 其转化率应该更高猜对.&lt;/p&gt;

&lt;p&gt;所以, 他们进行了一个简单的 &lt;a href=&quot;http://blog.bufferapp.com/best-time-to-tweet-post-to-facebook-send-emails-publish-blogposts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A/B test&lt;/a&gt;, 来测试看看究竟是哪种颜色的转化率更高.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/performable.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/performable.png&quot; alt=&quot;the science of colors in marketing performable&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;结果呢? &lt;strong&gt;红色按钮的表现比绿色按钮的表现要好上21%&lt;/strong&gt; 为什么呢? 本文并没有直接给出答案, 大家可以自己思考一下~&lt;/p&gt;

&lt;p&gt;作者结合这个故事主要想说的一点是: 无论要做什么样的改变, 都要先从假设开始, 实践是检验真理的唯一标准.  &lt;a href=&quot;http://blog.bufferapp.com/the-4-most-accurate-ways-to-find-your-best-time-to-tweet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;data always beats opinion&lt;/a&gt;,no matter what.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后来个趣味小知识: 为什么超链接是蓝色的呢?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;看的时候我恰好看到下文中有个fun story….于是非常恶意的想: 不会又是万维网之父也是个红绿色盲吧…&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当然不是… 哈哈. 实际上使用蓝色是为了能够和原本网页背景色的灰色形成最佳的对比.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/old-sites.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://bufferblog-wpengine.netdna-ssl.com/wp-content/uploads/2013/04/old-sites.png&quot; alt=&quot;why are hyperlinks blue?&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;详细解释如下:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;Tim Berners-Lee,万维网的主要缔造者, 被认为是初始设定链接为蓝色的人.  Mosaic, 这个非常早起的浏览器, 展示网页的时候默认是灰色的背景和黑色的文本. 而同样为深色调, 但是又不至于和黑色混在一起的就是蓝色了. 所以, 为了让链接能够在一堆文本中脱颖而出, 方便阅读, 就默认设定超链接的颜色为蓝色了.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;作者最后做的总结其实确实值得深思:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;仅仅简单改变一些非常小的类似颜色这种细节, 就能产生如此巨大的改变,  甚至可以完全改变最后的产出.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;
</summary></url><url><title>Why Companies Need Full-Time Product Managers</title><loc>http://taoalpha.me/blog/2014/11/01/read-t-why-companies-need-full-time-product-managers/</loc><publish>2014-11-01T11:00:00.000Z</publish><summary>&lt;p&gt;&lt;strong&gt;&lt;em&gt;写在前头:&lt;/em&gt;&lt;/strong&gt; PM是一个挺让人困惑的职位的, 尤其是在国内, 感觉大大小小PM无数, 更加让人苦恼PM究竟是个什么样的职位呢? 虽然我有接近2年多的PM经验, 但是因为本身更加喜欢FE, 所以往往也是做一个非常Geek的PM, 并不符合真正的PM本质, 而这次能够看到下文, 确实觉得它对PM的总结还是比较到位的, 非常推荐PM以及想要做PM的童鞋们看看~&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;公司为啥需要全职的产品经理呢?(或者说,他们一天都在干啥呢?)&lt;/p&gt;
&lt;p&gt;什么是产品经理呢? 产品经理一天的工作都是什么呢? 最重要的是, 为什么公司需要招聘产品经理呢? 这是个好问题.&lt;/p&gt;

&lt;p&gt;我们首先需要明确的问题是究竟什么是”产品”. 在软件开发这个领域内, 一个产品呢, 可以是一个网站, 一个应用, 或者是用户们使用的线上服务. 而根据公司的大小以及它的产品性质本身, 一个产品经理可能会是一个完整系统(比如一个移动app)的负责人, 也可能是某个整体系统的一部分(比如在电子商务网站中, 负责全平台的检验流程).&lt;/p&gt;

&lt;p&gt;对这一点可能会存在一些困惑, 毕竟在绝大多数情况下, 产品通常代表着一个你要出售给客户的东西. 尤其是在电子商务, 经常会混淆产品经理和分类经理, 分类经理们主要是负责在电子商务网站出售商品的渠道和经营问题. 所以, 在一定程度上说, 用”产品”这个词确实并不是最合适的. 但是就目前来说, 现状如此, 我们也没法了, 就凑活着用吧.&lt;/p&gt;

&lt;p&gt;为了明确产品经理这一职位的性质, 我们首先从Marc Andreessen就”创业公司唯一重要的事情”这一观点说起:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;一个创业公司产品的质量可以定义为这一个产品对一个实际使用它的客户或者用户所留下的印象: 这个产品的易用性如何? 其功能的丰富性如何? 流畅性和速度如何? 扩展性又如何? 有多精致?有多少bug呢?&lt;br&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;而一个创业公司的市场大小, 则是这一产品的客户或用户的数量, 增长速度 …&lt;br&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;唯一重要的事情就是要让产品去适应市场(Product-market fit). 产品适应市场意思就是在一个好的市场里, 要让产品尽可能的满足市场的需求.&lt;br&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;虽然Andreessen是为创业公司写的, 但是最后这段关于”产品适应市场”的重要性对每一个公司都是一样的–无论这个公司是在开发一个新产品还是说去改善一个现有产品,亦或者是介于这两者之间的,都一样. 这是通向成功的宇宙公理, 而这也是产品经理所负责的核心.&lt;/p&gt;

&lt;p&gt;有了这个作为背景, 我对产品经理这一角色的定义就是: 通过数字产品持续性的更新和执行来符合用户需求从而实现商业上的成功.&lt;/p&gt;

&lt;p&gt;这一定义总结了一个产品经理所需要涵盖的全部内容: 目标市场, 所属产品的各个方面, 商业成功的需求, 以及如何去衡量这一成功. 它还包含了三个产品经理绝对不能忽视的点:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;成功的最佳衡量标准就是商业的健康度, 也即产品给用户提供的价值;&lt;/li&gt;&lt;br&gt;&lt;li&gt;所有的一切都起始于对目标市场和需求的深刻理解, 从而把焦点集中到产品体验的质量上去;&lt;/li&gt;&lt;br&gt;&lt;li&gt;为了符合市场需求, 可持续发展需要一个良好的策划与执行.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;那么, 如何把这些转译成一个产品经理每天的工作呢? 这个问题就太大了, 在这里是说不清楚的, 不过仅作为一个初步介绍的话, Marty Cagan在它的电子书”每一个伟大的产品背后”中列出了一个针对产品经理需要负责的事项清单. 这一清单包含:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;寻找确认并且评估产品机遇的可行性和易行性,&lt;/li&gt;&lt;br&gt;&lt;li&gt;确保合适的产品在合适的时机发布出去,&lt;/li&gt;&lt;br&gt;&lt;li&gt;为开发者提供清晰的产品策略和思路指南,&lt;/li&gt;&lt;br&gt;&lt;li&gt;带领团队执行产品的思路,&lt;/li&gt;&lt;br&gt;&lt;li&gt;确保向团队成员传达产品的内涵,&lt;/li&gt;&lt;br&gt;&lt;li&gt;在产品开发流程中始终站在用户的角度思考问题.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;但是, 在一个产品经理能够做这些事情之前, 我们首先要问一些比较尴尬的问题. 首先, 公司真的需要产品经理吗? 另外, 如果我们同意说需要, 那么一个好的产品经理的特质是什么呢? 同时还有, 这一角色在公司组织架构中的位置呢? 我们来一一回答这些问题.&lt;/p&gt;

&lt;h6&gt;为什么公司需要产品经理&lt;/h6&gt;

&lt;p&gt;产品经理的角色有一些公司可能是非常不买账的. 通常的反对意见包含:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;code&gt;我们公司里有各种各样的人, 他们就已经满足一个产品经理职责的各个范畴了, 不需要专门配备这一个职务了.&lt;/code&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;code&gt;我完全看不出来这个角色能给公司带来什么实质性的利益.&lt;/code&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;code&gt;产品经理只会拖我们后腿.&lt;/code&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;code&gt;我不想把产品控制权交到别人手中.(通常这个理由不会那么公开的说…)&lt;/code&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;这些考虑都是很有道理的, 但是显然他们并没有很好的理解产品经理这一角色, 或者说这个公司的产品经理很差劲, 没有很好的体现产品经理的职责.&lt;/p&gt;

&lt;p&gt;实情是, 为了更高的效率, 对一个产品或者领域的管理权最好不要分散给多个人掌控. 对于产品经理而言, 看到产品全局是非常重要的 – 大局战略和局部细致都是一样重要的 – 为了获得更好的抉择. 如果不同流程的情况掌握在不同人手中, 那么就没有人会有一个完好的大局观, 那么这一角色的价值自然也会渐渐失去.&lt;/p&gt;

&lt;p&gt;我们看下产品经理通常能够带来的两个典型好处吧:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;产品经理确保产品一直处于市场驱动&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对产品经理而言, 其最突出的优点就是他们可以帮助公司一直为目标市场的需求和目标所驱动, 而不是被技术和潮流所驱动. 如同Barbara Nelson在”谁需要产品经理”一文中所说:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;相比于找到你现有技术的客户而言, 找到市场问题然后用技术手段解决实在是简单太多了.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果方法足够正确的话, 一个市场驱动的产品能够促成一个长期的, 可持续的, 有利润的商业, 因为这个公司会持续的把焦点放在解决市场问题而不是用最新的科技去做什么的问题上. 一个公司受什么驱动是很重要的, 因为受市场驱动的公司已经被证实比受其他因素驱动的公司所获得的利润更高(要多出31%, 根据&lt;a href=&quot;http://www.jstor.org/stable/1252267&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;George S.Day 和 Prakash Nedungadi的报告&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;这并不意味着关注不断出现的变化和产品创新是互斥的. 确定市场问题并不仅仅是找到现有的问题进行改进(比如说, 60%的用户都会在这个页面离开, 那么我们就搞搞这个页面), 同时还需要创造心的产品来满足那些没有被满足的需求(比如说现在的电话实在太烂了, 我们搞个新的吧).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;产品经理能够提升时间管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;产品经理带来的第二个好处就是他们能够减少一个公司实现目标所需的时间. 一个定位清晰合适的产品, 其开发流程掌握在一个有效率的管理者手中时会极大改善发布所需时间以及回报所需时间的.&lt;/p&gt;

&lt;p&gt;那么为什么产品经理可以做到这一点呢? 因为他们要权衡出那些是值得做的, 那些是不值得的. 这也意味着可以把更少的时间花费在Spaghetti法上了(把所有事情都扔到墙上看哪个能够粘在上面…) 而有更多时间放在已经被市场验证过的产品上了. 这一方法同样还能帮助更好的确定公司的焦点所在, 帮助公司更加投入到那些更有可能成功的项目之中, 而不是把人力分散到那些没人能够确保获利的项目中去.&lt;/p&gt;

&lt;p&gt;未完待续(还有两部分回答另外两个问题).&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;原文 - &lt;a href=&quot;http://www.smashingmagazine.com/2014/09/17/why-companies-need-full-time-product-managers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Companies Need Full-Time Product Managers &lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>What Is the Relationship Between HCI Research and UX Practice?</title><loc>http://taoalpha.me/blog/2014/09/05/read-t-what-is-the-relationship-between-hci-research-and-ux-practice/</loc><publish>2014-09-05T08:00:00.000Z</publish><summary>&lt;p&gt;测试feedpusher的数据库搜索功能时找到了这篇文章~ 对于HCI Research有很好的介绍!&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;人机交互是一个快速发展的学术研究领域. 目前来说, 学术机构基本主导了绝大多数的HCI研究, 无论在US,UK,Europe,Australasia以及Japan, 还有逐渐发展起来的南亚以及中国. HCI研究经常是附属在计算机系之下的, 但是又保留着其很强的心理学背景和人因学背景. 此外, 还有几个大型的杰出公司同时在独立的, 当让也有和各学术研究机构合作进行的, HCI相关的研究. 比如微软, PARC以及goole.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What Do Academic HCI Researchers Do?(那么学术性的HCI研究者都在做什么呢?)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常来说, 学术性研究者都在做以下这三类事情:&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;他们通过探索性的实验以及利用复杂的交互系统来创造新的计算机用户界面;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;他们建立并发展了一套经验体系, 针对用户对于用户界面的使用和体验; 主要通过实验室中的用户界面研究或者在实际环境中观察用户对用户界面的使用情况(就如同人种学研究一样)来获得的;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;他们发展出了一个理论系统来讲述设计以及使用交互系统. 其中包含了一些基本理论, 比如Fitts’s law(菲茨定律),描述指针移动和目标元素在屏幕的位置的的关系, 通常, HCI理论采用设计框架的形式, 包含了各种混杂的概念. HCI研究可能是聚焦到某个整体的局部也可能是直接识图去强化整体.&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://www.uxmatters.com/mt/archives/2014/08/images/StuartReevesArticle_fig1.png&quot; alt=&quot;Figure 1-Academic HCI Research&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is There a Connection Between Academic Research and Industry Practice?(在学术研究和工业实践之间有联系吗?)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在工业界的UX从业人士也通常都会做些研究的, 就如同设计一样. 但是学术性HCI研究和UX研究在目的产出, 目标, 以及关注的范围都有着非常显著的差别, 学术研究和工业研究通常可能都在处理那些看起来比较接近的基础对象: 数字化交互系统的设计和理解以及它们的用户群体. 两者都遵循用户为中心的设计原则, 都提倡把对人类的理解融入到设计环节中. 所以说, 它们之间肯定也应该有很强的关系以及重叠区域.&lt;/p&gt;
&lt;p&gt;在UK, 政府在HCI的学术研究基金投入上逐渐关注起学术研究和工业时间的联系了. UK的工程和物理科学研究委员会, 也是HCI研究领域基金的重要来源, 就讨论过关于HCI研究需要考虑如何”把理论和方法应用到工业实践中”. 更进一步地说, 既然HCI学术研究在很多的领域, 包含医疗健康, 电子设备消费品以及软件等等都有很强的关系, 那么在HCI学术研究和UX实践之间建立一个更好的联系就能够获得很高的回报.&lt;/p&gt;
&lt;p&gt;虽然学术圈经常会对UX领域做出很多不准确的猜测,而且有时候认为两者的关系是理所当然的. 学术研究者们通常会假设因为知识的利用和转移, 所以学术研究和工业实践有着非常自然的联系. 但另一方面, UX领域则经常认为HCI的学术研究通常都是脱离实际的, 在现实社会中是无法应用的. 也因为这样的原因, 他们通常会整个抛弃学术研究, 或者至少是觉得消化以及应用学术研究的结论是非常困难的一件事.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Moving Toward Establishing a Mutually Beneficial Connection Between Academia and Industry(为学术研究和工业实践发展建立一个双赢互惠的关系)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有两个开放性问题我们需要强调的是:&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;    &lt;li&gt;UX职业领域该如何指导以及启发学术研究?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;学术研究又能够为UX职业领域做什么事情呢?&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;回答第一个问题可能需要HCI研究者们对理解UX职业领域的工作有着一定的热情, 并且进行一些关于UX实践的经验性研究. 迄今为止, 学术研究中对于UX实践应用的探索还是比较有限的. 无论如何, 在UX领域工作的经验能够对学术研究产生很多意外的重要启示. 而回答第二个问题就要相对更加复杂了 – 甚至可以说完全不知道该如何下手了. 它需要很深入的研究才行.&lt;/p&gt;
&lt;p&gt;令人好奇的是, 学术研究者们通常对HCI研究中大量出现的创新以及其自身关注领域的快速发展而感到忧虑. 在一个学术领域中, 他们的目标通常是建立一个强有力的基础, 然后慢慢发展.&lt;/p&gt;
&lt;p&gt;然而, HCI学术研究领域的创新和广度都强化了其和在工业限制下的UX领域有限的能力形成的鲜明对比. 比如说, 在一个很限制的项目中工作时, 你需要考虑有限定的预算, 有限的时间, 你需要去满足客户的需求以及相关利益人的利益, 还要能和其他领域的人相互配合, 比如软件开发者; 还要习惯于新的工作方式, 比如敏捷开发以及精益方法. 你不会担心有过多的创新, UX从业人士通常希望能够在他们非常受限的环境下创造更多的创新.&lt;/p&gt;
&lt;p&gt;学术性研究的产出中完全可以提供很多对UX领域有潜在价值的东西. 但是如何来传递这些产出呢? 首先也是最重要的是, 我们完全不用把HCI研究和某一个项目或者新项目, 或某项服务的预期条件, 或者某个客户的特定需求绑定在一起; 其次, 学术新的HCI研究有其探究未来科技的自由 – 即便其设计本身有着一定的风险且没有清晰的,即时的回报. 所以, HCI研究者们通常在无数失败的基础上创造了快速的创新, 他们的工作少了很多的限制.&lt;/p&gt;
&lt;p&gt;也许通过有效的沟通, HCI学术研究中的那些成果能够给工业实践带来巨大的价值. 很多UX从业人士都没有那么富裕的时间来让他们去探讨那些当前需求以外的东西. 但是在学术研究中, 关注范围更广是很通常的事情.&lt;/p&gt;
&lt;p&gt;不幸的是, 就目前来说, 绝大多数的学术工作–无论是创造圆形, 概念, 想法, 或者是设计原则 – 都局限在了HCI研究者们在各种会议期刊上发表的论文中了. HCI研究者的受众多数都是那些其他的学术研究者, 而不是那些在工业界工作的人们.&lt;/p&gt;
&lt;p&gt;通过理解用户体验的工作情景, HCI研究者们能够更好的把他们的研究方向切合这些受众, 从而和UX职业领域建立更加友好自然的联系. 与其让学术研究和工业实践互相竞争, 不如假设一方创造那些权威的, 严禁的知识体系, 一方吸收并加以应用呢. 两者这样的互利互惠关系才是最有价值的. 采用这一方法可能会让学术研究者们更好的理解他们该如何进行自己的研究, 让它们更加容易帮助到那些UX从业人士.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Postscript(后记)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为我开始针对这一领域的调研的一部分, 我创建了一个非常简短的, 5分钟调查问卷, 邀请各位UX从业人士来提供一些关于自身背景, 所用方法以及和学术研究的关系的信息. 如果你愿意参与其中, 或者是对这一工作有兴趣的话, 请参与&lt;a href=&quot;https://horizon.qualtrics.com/SE/?SID=SV_7QwWadHIPeLJx4N&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此项调查&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acknowledgments(感谢)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者非常感谢EPSRC的支持.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References(参考)&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;bibliography&quot;&gt;[1] Benford, Steve, and Gabriella Giannachi. &lt;em&gt;Performing Mixed Reality&lt;/em&gt;. Cambridge, MA: MIT Press, 2011.&lt;/p&gt;&lt;br&gt;&lt;p class=&quot;bibliography&quot;&gt;[2] Engineering and Physical Sciences Research Council. &lt;a href=&quot;http://www.epsrc.ac.uk/newsevents/pubs/report-of-the-epsrc-human-computer-interaction-theme-day-and-survey/&quot; title=&quot;Report of the Human EPSRC Computer Interaction Theme Day and Survey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Report of the Human EPSRC Computer Interaction Theme Day and Survey&lt;/em&gt;&lt;/a&gt;,&lt;a href=&quot;http://www.epsrc.ac.uk/newsevents/pubs/report-of-the-epsrc-human-computer-interaction-theme-day-and-survey/&quot; title=&quot;Report of the Human EPSRC Computer Interaction Theme Day and Survey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;/images/new-window-arrow.gif&quot; width=&quot;14&quot; height=&quot;12&quot; class=&quot;icon-right&quot;&gt;&lt;/a&gt; March 2012.&lt;/p&gt;&lt;br&gt;&lt;p class=&quot;bibliography&quot;&gt;[3] Friess, Erin. “Personas and Decision Making in the Design Process: An Ethnographic Case Study.” In &lt;em&gt;Proceedings of CHI ’12&lt;/em&gt;. New York: ACM Press, 2012.&lt;/p&gt;&lt;br&gt;&lt;p class=&quot;bibliography&quot;&gt;[4] Goodman, Elizabeth. &lt;em&gt;Performance and Materiality in Professional Interaction Design&lt;/em&gt;. PhD thesis, University of California, Berkeley, 2013.&lt;/p&gt;&lt;br&gt;&lt;p class=&quot;bibliogLast&quot;&gt;[5] Gray, Colin M., Erik Stolterman, and Martin A. Siegel. “Reprioritizing the Relationship Between HCI Research and Practice: Bubble-Up and Trickle-Down Effects.” &lt;em&gt;Proceedings of CHI ’14&lt;/em&gt;. New York: ACM Press, 2014.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Link:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://www.uxmatters.com/mt/archives/2014/08/what-is-the-relationship-between-hci-research-and-ux-practice.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What Is the Relationship Between HCI Research and UX Practice?&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>User Experience is a feeling</title><loc>http://taoalpha.me/blog/2014/11/10/read-t-user-experience-is-a-feeling/</loc><publish>2014-11-10T14:00:00.000Z</publish><summary>&lt;h3&gt;用户体验是一种感觉&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;“如果你以’用户体验是一种感觉’为基础, 那么你就算是向真正理解用户体验迈出了一步.”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;许多人似乎都认为用户体验是一个可以控制的设计产出–好像它是一个你可以通过你的想法, 设计师以及开发者们从而操纵一个人对某个产品或者服务的体验. 实际上, 用户体验经常被认为是一个定义以及管理用户对产品的感觉.&lt;/p&gt;

&lt;p&gt;但是你的产品并不能决定一个用户的体验, 用户自己的行为, 态度以及情感才是决定因素. 因此, 用户体验就是一个感觉. 实际上, 它远不止于此, 但如果你是在此基础上去理解用户体验, 那么你就算是向真正理解用户体验迈出了一步.&lt;/p&gt;

&lt;p&gt;一个用户在使用某个产品时的体验是每个产品都需要关注的点. 一个用户可能会有很好的体验也可能会有一个很糟糕的体验. 虽然你不能直接的设计一个用户对一个产品的体验, 但你可以采取一些措施, 应用一些用户为中心的设计原则和流程来确保他们的体验是积极的, 正面的.&lt;/p&gt;

&lt;p&gt;你应该把以用户为中心的设计的各种优势告诉那些投资人, 相关利益人从而拿到钱, 而这些优势就包括以下这些:&lt;br&gt;- 快速的获得更多客户&lt;br&gt;- 保留现有的客户&lt;br&gt;- 为你的公司建立信誉&lt;br&gt;- 在公司长期运行中扩大销售额&lt;br&gt;- 降低周边产品/服务(外围设备)的价格, 比如客服/售后&lt;br&gt;- 减少无形的花费, 比如浪费的时间&lt;br&gt;- 完成的更加高效&lt;/p&gt;

&lt;p&gt;对于你的公司而言, 无论是一个创业公司还是说一个庞然巨物, 都要意识到这些利处, 而你所在的产品团队则需要:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;理解伟大的设计和优质的体验之间的区别&lt;/li&gt;&lt;br&gt;&lt;li&gt;像用户那样去思考, 而不是站在一个产品的制作者角度&lt;/li&gt;&lt;br&gt;&lt;li&gt;在你的产品策划, 设计以及开发环节都要考虑到产品的用户&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;h4&gt;优秀的设计是不够的&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;“许多人认为用户体验就是一个产品是如何工作以及外观”.&lt;/code&gt; 换句话说, 人们很容易认为用户和产品的交互就是用户体验的全部内容了. 比如, 他们可能关注的焦点问题诸如: 产品的交互界面是否利于用户导航呢? 最重要的内容是否获得了视觉的最优位置呢? 产品外观是否足够优质呢?&lt;/p&gt;

&lt;p&gt;如果对此类的回答是”是”, 就会让人很容易的认为你已经给你的产品赋予了极好用户体验. 在很多方面, 你可能已经做的比你的竞争对手好很多. 但是, 一个产品的用户体验所包含的内容远远不止是在一个网页浏览器或者移动设备中打开一个应用这么简单.&lt;/p&gt;

&lt;p&gt;让我们以一个我们可能会提问的问题为例: 在用户第一次使用你的产品之前用户对产品的期望是什么? 可能他们听到很多其他用户的看法, 可能是好的, 也可能是不好的看法, 如果这样的话, 这些意见都会成为TA对你的产品最终形成的整体体验感受的重要组成部分, 它当然会影响到他们对产品的使用方式, 他们对产品以及你的公司的看法和感受, 以及很多我们接下来会说到的一些重要部分.&lt;/p&gt;

&lt;h4&gt;像素, 屏幕, 页面以及体验&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;“以用户为中心的设计所关心的不只是产品本身的用户界面, 还有用户在界面之外与产品的交互行为.”&lt;/code&gt; 这些包含但不限于以下几点:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;你的产品市场和分发方式&lt;/li&gt;&lt;br&gt;&lt;li&gt;购买, 打开和首次使用产品的整个流程&lt;/li&gt;&lt;br&gt;&lt;li&gt;升级流程&lt;/li&gt;&lt;br&gt;&lt;li&gt;“登船体验”, 即逐步学习产品所具备的能力, 以及如何使用和如何处理错误信息的过程&lt;/li&gt;&lt;br&gt;&lt;li&gt;宣传, 用户的口碑是最好的广告&lt;/li&gt;&lt;br&gt;&lt;li&gt;客服或者售后服务质量, 以及你对产品能力的深入了解&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;上面这个清单仅仅只是非常表面的一些东西, 但是它可以初步让我们对影响用户体验的诸多因素有个大概的了解.&lt;/p&gt;

&lt;p&gt;如果你曾经找你的手机或者线路公司进行技术咨询, 你就会理解这一经历会对你对他们的产品以及服务的感受观点有多大影响了. 虽然你可能最后还是解决了问题, 获得了更好的线路以及手机问题得以解决, 但是如果你在处理这一事宜的过程是非常让人不开心的一个经历, 那么你可能依然会对他们的服务产生负面的观感. 而一个用户对你公司的看法和以往的交往经历都可以算是用户体验的一部分.&lt;/p&gt;

&lt;h4&gt;像一个伟大的UX设计师那样思考&lt;/h4&gt;

&lt;p&gt;在本文后面的内容中, 我会提供一些你可以用来和你的产品团队分享, 一起帮助每个人像一个伟大的UX设计师那样思考问题. &lt;code&gt;为了创造一个人们喜欢的产品, 需要你整个团队, 不只是UX团队, 都聚焦到用户身上.”&lt;/code&gt; 而如果能够把焦点放到用户身上, 那么就能帮助你传递很多益处, 会带来很多我上面说过的好处.&lt;/p&gt;

&lt;h4&gt;走向优秀体验的态度&lt;/h4&gt;

&lt;p&gt;像一个伟大的UX设计师那样思考意味着你需要养成一些思维方式, 这些思维方式与其说是一些特定的思考流程或者做事规则, 不如说是一些基本的&lt;code&gt;态度&lt;/code&gt;更为合适.&lt;/p&gt;

&lt;h5&gt;要有同理心&lt;/h5&gt;

&lt;p&gt;当你被无数决策缠身, 催促着你从想法走到原型直到上线, 你会很容易的陷入到一个困境, 就是视野会局限在产品团队之中.  你手头工作的复杂和困难以及你作为产品主导者对产品目的, 设计以及功能的熟悉都让你无法兼顾自检的环节了.  在这个环节中, 我们缺失的正式外界的观点-你的用户的角度的看法.&lt;/p&gt;

&lt;p&gt;和你的用户交流所能带来的好处不仅是他们提供的那些你可以用来优化设计流程的信息, 随着时间, &lt;code&gt;和你的用户交流能够帮助你建立更好的同理心. 你将学会通过他们的眼睛看世界.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;而有了同理心, 你将可以站在用户的角度去评估你的设计和商业决策. 而且你会更有可能创造一些他们 能够找到其价值, 用处以及给他们带来欢乐的产品.&lt;/p&gt;

&lt;h5&gt;要承认每个意见都是有价值的&lt;/h5&gt;

&lt;p&gt;以用户为中心的设计的下一个态度往往很难被人所采用. 请跟着我一起重复:”每个意见都有价值. 每个意见都有价值.” 哪怕是意见本身可能完全没有逻辑. 哪怕是这个意见完全违反了一个正确的设计原则. 哪怕是这个意见是完全非理性的, 而且对你而言完全没有意义的.&lt;/p&gt;

&lt;p&gt;如果使用你的产品对用户而言是一个可选行为的话–实际上它确实是个可选的行为–那么他们的意见就是有意义的. 但是从那些非理性或者无逻辑的反馈中找到有价值的东西是有难度的. &lt;code&gt;然而, 这类用户反馈可能指向的更大的一些问题, 可能代表着用户的某种更深层次的情感模式, 而这对于用户和你的产品之间的交互有着很大的影响. 而如果带着”每个意见都有价值”的观点来处理用户的反馈, 那么就能够帮助你发现这些模式.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果你收到一些对你完全没有意义的反馈, 那么你应该暂停一下, 好好思考以下它的具体含义. 可以问这么几个问题:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;那些没有给我们反馈的用户中有多少可能也有同样的看法呢?&lt;/li&gt;&lt;br&gt;&lt;li&gt;为什么他们会需要这么一个具体的功能点呢?&lt;/li&gt;&lt;br&gt;&lt;li&gt;为什么他们不能理解我们设定的这种用户工作流呢?&lt;/li&gt;&lt;br&gt;&lt;li&gt;为什么他们会这么感觉呢?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;退一步讲, 和你的用户聊天, 即便是一些似乎很疯狂的想法也往往能够给你带来一些新的观点, 说不定就能帮助你解决手头的问题呢.&lt;/p&gt;

&lt;h5&gt;意识到情景和经历都会对用户体验产生影响的&lt;/h5&gt;

&lt;p&gt;可能你的项目的目的是创造某个全新的东西, 但是你的产品最终会被那些有着自己过往使用科技产品经历以及特定的使用场景的人去使用的. 而这些经历以及所处的情景会在很深层次上影响人们和产品之间的交互.&lt;/p&gt;

&lt;p&gt;比如, 我每次购物时如果发现那些老式的黑屏绿字, 带着键盘的销售终端依然还在投入使用时都会觉得这是一件非常令人着迷的事情. 实际上, 我经常能够在非常现代化, 成功的零售商们那里看到类似这样的用户界面.&lt;/p&gt;

&lt;p&gt;这样的用户界面可能看起来很过时, 而且使用也不高效, 但是如果你考虑下它使用的场景, 就会有不同的看法了:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;零售行业的工作人员在长期的工作中, 因为不断的使用同样的用户界面重复同样的销售操作, 会形成一种独特的肌肉记忆;&lt;/li&gt;&lt;br&gt;&lt;li&gt;他们的这种肌肉记忆会允许他们甚至不怎么注意屏幕就能够准确的完成操作, 也就让他们有更多的时间和客户进行视觉交流, 这样能够给客户更好的购物体验;&lt;/li&gt;&lt;br&gt;&lt;li&gt;这种肌肉记忆需要很长的时间才能形成. 可能需要一个缓慢的学习曲线去掌握, 但是一旦掌握了, 它带来的速度和效率的提升是雇员们所愿意放弃的, 即便是面临着一个有着快速学习曲线的新的交互界面的诱惑也一样.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;如果你忽略这种历史原因以及特定的场景原因, 那么这种古老的POS终端看起来就是一个典型的糟糕的用户体验. 但是你一旦把这些都考虑进来, 你就会获得完全不同的理解了.&lt;/p&gt;

&lt;p&gt;当你脱离用户界面, 而考虑更加宏观的一些事情时, 你就会知道哪些因素才能真正让你的产品体验有所不同.&lt;/p&gt;

&lt;h5&gt;要有情商&lt;/h5&gt;

&lt;p&gt;如果你自己质疑用户对你产品的感觉的重要性, 那么你可以回想下最近Facebook首次展示了他们做了明显改变的新用户界面, 而随之而来的用户疯狂的愤怒回应.&lt;/p&gt;

&lt;p&gt;最强烈的情感–爱, 恨, 快乐和忠诚–都需要时间来建立的. 你的公司的新产品将会继承那些旧产品用户的情感, 而这些完全不受你控制–比如用户对你的app运行平台的看法以及在app store中的应用发现这一过程等都是不受你控制的.&lt;/p&gt;

&lt;p&gt;但是他们对你产品的感觉会随着使用逐渐的形成并发展. 想象一下: 不断重复的讨人厌的登录环节, 一个流畅的,愉快的导航, 一个思虑周全的错误处理机制, 一个一直都不尽如人意的客户服务, 这些长期积累下来情绪, 会产生什么样的影响呢?&lt;/p&gt;

&lt;p&gt;像一个UX设计师一样思考, 就要考虑到用户和你的产品之间的这种情感关系.&lt;/p&gt;

&lt;h4&gt;把这种优秀UX设计师的态度应用起来&lt;/h4&gt;

&lt;p&gt;有一个很简单的, 混合了这些特点的方式可以让你开始像一个优秀的UX设计师那样思考: &lt;code&gt;注意观察人们是如何和日常生活的事物进行交互的.&lt;/code&gt; 他们的这些行为会告诉你很多, 很多在你开始考虑开发一个产品之前需要考虑的事情, 会告诉你如何开发一个新产品, 一个能够让人们生活更加便捷, 更加快乐, 更加符合人们期望的产品. &lt;/p&gt;

&lt;h5&gt;来源:&lt;/h5&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.uxmatters.com/mt/archives/2014/10/user-experience-is-a-feeling.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文: User Experience Is a Feeling&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>The Who, What, When, Wear, and Why of Wearable Technology</title><loc>http://taoalpha.me/blog/2014/10/29/read-t-the-who-what-when-wear-and-why-of-wearable-technology/</loc><publish>2014-10-29T04:00:00.000Z</publish><summary>&lt;h3&gt;穿戴式技术的5个W&lt;/h3&gt;

&lt;p&gt;什么是移动性？移动性就应该是让内容服务对用户做到随时随地的访问， 尽可能的便捷高效。 就好比移动设备让人们再也不用坐到一台电脑前才能获取信息那样，穿戴式设备让人们甚至不用再拿着设备来获取信息了。 就好比我们把思维模式转移到iPhone的小屏幕并且学习着这全新的使用情景一样， 我们需要再次调整我们的思维方式去适应穿戴式设备–更小的屏幕，以及更加收缩的交互界面。 苹果最近推出了Apple Watch， 这也是穿戴式设备正式登场的一大证明–所有重量级玩家都已经落座， 游戏要正式开始了。&lt;/p&gt;

&lt;h5&gt;深度挖掘&lt;/h5&gt;

&lt;p&gt;首先， 了解『穿戴式』这一术语的含义非常重要，因为这一术语有一些误导性， 因为它囊括了数以百计的，有着不同目的和用途的设备于一体：智能手表，智能眼镜，智能衣服，智能袜子，智能腕带等等。 最基本的， 『穿戴式』是指所有那些用户能够穿戴起来的设备，当然这些设备还需要能够实现有价值的计算功能的能力。 但是为了能够理解他们的能力， 我们需要区分这些不同的设备以及他们的应用模式。 以下是当下最主流也是最具区分性的穿戴式设备的特点。&lt;/p&gt;

&lt;h5&gt;活动记录&lt;/h5&gt;

&lt;p&gt;通常来说， 形如腕带的这种设备都是围绕在收集我们身体数据（诸如心率， 脉搏， 运动模式， 每日行走距离等）这一服务核心来服务的。获得数据后， 他们就可以把数据传输到云端， 进行分析从而获得一些关于如何提升用户身体健康的结论。 而通过穿上这么一个并不怎么碍眼的设备， 收集我们自己的身体数据， 我们就可以更好的了解我们自己的身体， 从而更好的生活。&lt;/p&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;虽然活动记录这一功能已经很受欢迎， 但是他们依然还有着很多巨大的商业价值和利用空间。 比如， 加拿大奥运代表队就利用智能服装来跟踪记录队员的重要指标， 这在团队在Sochi奥运会上取得的成功中扮演了很重要的角色。 同样的， 这些小型设备还可以影响到保险行业， 保险公司可以通过获得客户的个人信息来更加精确的计算客户的风险， 从而来降低保价。当然， 这肯定会引发很多的隐私问题， 但是对那些为了折扣同意提供自己个人信息的市民而言还是很有可能做到的。&lt;/p&gt;

&lt;h5&gt;智能手表&lt;/h5&gt;

&lt;p&gt;与活动跟踪不同， 智能手表更多的是被用来主动使用的。 在很早以前就已经播下了智能手表的种子： 近百年来， 腕表一直作为一个重要的工具， 一个用于计时，随时告知我们身处当下的工具。&lt;/p&gt;

&lt;p&gt;如今， 智能手表远远超出了这个范畴， 它能够给我们提供更加多样的情景信息： 邮件短信的提醒，会议的提醒，天气预报，电子票（机场，剧院，音乐会等等地方）。 智能手表还有着丰富的交互，意味着我们不仅可以用来查看我们的邮件， 还能回复邮件； 我们可以用来Google，入住酒店，修改音乐记录备忘，查看时间等等，再也不用花费时间去从手袋中掏出手机了。 正如设计师们都知道的， 行动的简洁性对我们决定是否采取行动有着非常重要的影响， 所以这些多余的时间是非常重要的。 这所有的一切都在说明一个现实， 就是我们如今把手机安放到了我们的手腕上， 虽然因此有了一些设计上的限制。&lt;/p&gt;

&lt;p&gt;而对设计师而言更加有诱惑力的一个现实就是智能手表是支持定制apps的， 这也意味着我们可以拥有一个全新的手表专属apps的生态系统了。 我们可以看到全新版本的Instagram，Pinterest，Foursquare以及各种各样的新的商业apps。 这对于各大品牌而言同样是个好消息，因为他们有了一个新的机会和渠道向他们的客户宣传自己了。&lt;/p&gt;

&lt;h5&gt;智能眼镜&lt;/h5&gt;

&lt;p&gt;信息一直在不断的向着和我们大脑建立协同发展关系的目标前进着， 而智能眼镜无疑是这一阶梯上的下一步–跟随在20世纪60年代的计算中心的成功，以及之后数十年的PC时代，笔记本时代和手机时代之后。 智能眼镜和智能手表有一点是相似的： 他们把信息和我们的距离拉的更近了， 而且鼓励这种更加简单的交互形式。 但是， 眼镜是完全的解放了我们的双手， 彻底的把信息直接带到了我们的眼前， 完全使用语音命令和感应器作为输入设备。&lt;/p&gt;

&lt;p&gt;与智能手表很轻易的就能融入到我们的日常生活不同， 智能眼镜略微有一点过于超前了。 问题出在很多方面， 比如：技术上，习俗上，以及社交上等等。 简而言之， 以Google Glass这个当前最有代表性的智能眼镜技术为例， 它所提供的价值和他本身的价格并不相配：$1500的价格，极为有限的电池寿命，非常不舒服的街道视觉体验等等， 再加上一个简单的相机和导航，非常有限的几个酷炫应用和效果， 尚不足以说服我每天都早上把这玩意带在我的脸上。。。至少目前还不行。&lt;/p&gt;

&lt;p&gt;这种现象也被成为『杀手级应用问题』， 但是它并不意味着这个产品或者这种表现形式就是彻底无用的。 相反， 它已经被证实对商业使用有着巨大的价值：医生们可以用在手术过程中看到重要的提示，仓库工作人员就可以用语音实现商品扫描以及详细信息录入等事情了，运动员可以实时的看到他们的数据–这些理由都足够让Google开启他们的商业化项目并且和Vuzix合作了。 这其中的模式非常清楚而直接： 允许雇员们在工作以及处理数据的过程中解放双手。 这不仅可以节省他们的时间， 同时还能提高安全性： 不需要更换手套， 拿手机或者因为别的屏幕而分散注意力。&lt;/p&gt;

&lt;h5&gt;结论&lt;/h5&gt;

&lt;p&gt;每一种穿戴式设备都有他自身的特点。有一些只是单纯的用于收集数据， 还有一些则是用来进行主动的交互， 有些是把自身的使用环境建立在每天的日常使用基础上，而有些可能在某些特定场合下更加有帮助， 有一些可能在社会接受程度上更为突出， 而有些则需要时间和规则才能被慢慢接受。 但是他们都共享着一些相似的属性， 而了解这一点对于设计师，开发者以及那些处理产品商业相关事宜的人们都会有更好帮助，帮助他们更加全面的利用这些设备。&lt;/p&gt;

&lt;h4&gt;Resource:&lt;/h4&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;原文：&lt;a href=&quot;http://uxmag.com/articles/the-who-what-when-wear-and-why-of-wearable-technology&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Who, What, When, Wear, and Why of Wearable Technology&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>Semicolons in JavaScript is optional</title><loc>http://taoalpha.me/blog/2014/11/05/read-t-semicolons-in-javascript-is-optional/</loc><publish>2014-11-05T08:00:00.000Z</publish><summary>&lt;article class=&quot;article body&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;JavaScript作为脚本语言的一种, 其末尾的结尾符号:分号, 其实是可选的, 没错, 这个分号并非是强制要求的.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;但是, 对这一点很多人有着非常多的担忧啊, 顾虑啊, 不确定啊等等, 也就导致绝大多数的开发者都会推荐我们始终以分号结尾, 以防万一.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;那我们究竟在防止什么? 我搜集了一些关于开发者们为什么愿意强迫自己使用分号结尾的原因, 下面我就概括的说下:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;规则过于神秘而且JavaScript本身编译器之间又有很多不同&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;对一个粗略浏览的读者而言, 即使很难理解,明白, 但是关于自动插入分号的规则依然是随处可见的. 而对于JS不同的编译器而言, 又存在很多的区别, 我这恰好有这么个例子. 当我问一些开发者关于为什么使用分号时, 通常他们会这么回答:”哦,有那么一个浏览期就不能正常的编译, 我就是想不起来是哪个了.” 当然, 他们永远也不会想起来的…&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;我自己写JS基本不用分号的, 就个人经验而言, 还没遇到无法处理的JS编译器呢.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;如果不用分号就不能压缩JS代码&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;对JS源文件而言, 压缩其实共分为3个层次: 压缩(比如gzip), 最小化(即去除不必要的空格和注释) 以及模糊化(修改代码, 缩短变量名以及函数名).&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;类似gzip这类的压缩是最为容易的, 只需要在服务器上设置一次就行了, 完全不需要开发者在进行什么别的代码修改. 曾经IE6在一段时间内不支持这一设定, 不过我记得应该在几年前就已经打补丁修正了, 如今基本没有人会在意这部分了.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;最小化和模糊化都会对你的源码有一定的修改. 它们都算是一类你可以用于操作js文件, 用以压缩文件大小, 同时不改变代码本身功能的工具. 我比较不喜欢用这类的工具, 因为很多开发者都说如果我不按照特定的代码格式来编写代码的话, 比如使用分号结尾, 那么这些工具就有可能破坏我的代码. 我完全可以理解以及接受他人或者社区规定使我使用特定的代码格式, 但无法接受一个工具要强迫我使用某种代码格式.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;如果我有一段在我目标浏览器或者编译器上运行的代码, 而我通过你的压缩工具压缩后, 它无法运行了, 那么我只能很伤心的告诉你, 你的工具有问题. 如果一个工具想要编辑JS代码的话, 那么, 它最好还是按照真正的编译器理解的那样来进行.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;既然说到最小化问题, 我们就简单做个实际的测试吧. 我利用的是jQuery的源码, 当然, &lt;a href=&quot;http://github.com/mislav/jquery/commit/4a2faf8987fc3fcb8aefc99def5b5ed2b4de190c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;去掉了所有的分号&lt;/a&gt;,  然后我在&lt;a href=&quot;http://code.google.com/closure/compiler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Closure Compiler&lt;/a&gt;上运行了以下, 将它压缩到76673bytes. 原始的jquery.min.js文件大小在76674(只多了1byte). 所以你可以发现, 基本上是没有区别的; 当然, 它的功能也是完全正常的.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这是如何发生的呢? 我们可以参考下面的代码:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;var a=1&lt;br&gt;var b=2&lt;br&gt;var c=3&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;它有24bytes. 给它加上分号后进行压缩:&lt;br&gt;&lt;code&gt;var a=1;var b=2;var c=3;&lt;/code&gt; 还是24bytes. 所以, 你可以看到, 添加分号移除空行后对我们的文件大小并没有产生任何的改变. 从根本上来说, 我们通过最小化减少的文件大小并不是通过移除空行所得的, 而是通过移除注释部分获得的.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;更新: 很多人都指出他们的最小化工具把上述代码重写为了&lt;code&gt;var a=1,b=2,c=3&lt;/code&gt;. 我知道有些工具是这么干的, 但是本文的主旨仅在于探究分号和空行的关系. 而如果一个最小化工具都可以重写代码(比如Closure Compiler), 那么对于它而言, 自动添加分号自然不成问题了.&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;同样的, 有些人推荐在块结构上使用括号, 即使块结构只有一行代码时:&lt;br&gt;&lt;code&gt;// before&lt;br&gt;if(condition) stuff()&lt;br&gt;// after&lt;br&gt;if(condition){&lt;br&gt;  stuff()&lt;br&gt;}&lt;br&gt;// after minification&lt;br&gt;if(condition){stuff()}&lt;br&gt;&lt;/code&gt;&lt;br&gt;强制使用括号至少能给我们的表达式增加1byte, 即便是压缩后也一样. 我实在不知道这样做的好处在哪里–既不利于文件大小, 也不利于可读性啊.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;以下都是一些空格有具体意义的语言, 你可能听过其中的一些:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Ruby – 把操作符,调用函数和空格联合使用的话会抛出异常的;&lt;/li&gt;&lt;br&gt;&lt;li&gt;Python - 更不用说了&lt;/li&gt;&lt;br&gt;&lt;li&gt;HTML - 可以通过&lt;a href=&quot;http://perfectionkills.com/experimenting-with-html-minifier/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kangax’s HTML minifier&lt;/a&gt;了解更多&lt;/li&gt;&lt;br&gt;&lt;li&gt;Haml Templates&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;当然, 针对最小化, 在服务器端我们就不需要进行任何操作了. 我列举这些主要目的是为了支持下面这一论述: 空格可以, 而且经常作为一个语言的一部分. 它并不是一个非要去除不可的坏东西.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;这是一个优秀的代码格式&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;也通常可以理解为:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;这对于保持一致性有好处&lt;/li&gt;&lt;br&gt;&lt;li&gt;(如果不这么做的话)JSLint该有问题了&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Douglas Crockford是这么说的&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;当然这也算是”其他人都这么做”的另一种表达方式, 很多人在线上讨论时自己没有观点时往往这么说.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;至于JSLint, 我能给的建议就是: 不要用了. 为什么要用它呢? 如果你相信它能帮助你, 减少你代码中的bug数目, 那么请听这条快讯: 只有人可以发现并解决软件中的问题, 而不是工具. 所以, 与其使用工具, 不如让更多人看看你的代码.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;至于所谓Douglas Crockford所说的”4个空格”论, 还有很多流行的JS库用的要么是tab要么是2个空格呢.&lt;br&gt;不同项目的社区自然有着不同的观点, 这就是现实, 就如我之前说的: 让其他人以及你自己来塑造你的代码风格, 而不是某个人或者某个工具.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;你可能注意到本文中, 我并没有告诉你说你应该彻底扔掉分号. 我只是陈列一些事实告诉你你可以这么做. 具体如何选择还要看你自己.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;至于说代码风格, 它们的存在使得代码更加可读, 更加容易被团队中的人理解. 深入的想想分号是否真的可以提升你的代码的可读性. 其实多数情况下, 提升你代码可读性的是空格–缩进, 代码块之间的空行, 对齐表达式时使用的空格等, 以及非常易于理解的变量和函数名. 你可以看看这些&lt;a href=&quot;http://img.skitch.com/20100509-qf8t69ad7cpmudwdksbw5hu6te.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;非常难懂的代码&lt;/a&gt;, 里面总是有很多的分号的. 它帮助你更好的阅读了吗? 没有, 实际上帮助到你的是大量使用的空格以及那些初始变量名.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;在return中插入分号会反咬你一口哦&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;我在搜索”JavaScript分号插入”时, 很多博文中都描述了这么一个问题:&lt;br&gt;&lt;code&gt;function add() {&lt;br&gt;  var a = 1, b = 2&lt;br&gt;  return&lt;br&gt;    a + b&lt;br&gt;}&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;在你费解于为什么有人会把代码写成这么个样子之前, 我们先继续看问题, 这段代码会被最小化为:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;return;&lt;br&gt;  a + b;&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;显然它并没有返回我们要的求和.  但是你知道吗? 如果我们在&lt;code&gt;a+b&lt;/code&gt;后面添加一个分号并不能解决问题. 而当我们去除了return和a+b之间的空行后, 问题就可以解决了.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;return a+b&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;同样的, 利用这一个极端无知的例子, 我还是建议人们不要在代码中随意添加分号. 当然, 分号可能仅仅只是在这一个问题上有问题, 但是我们要做的其实是更好的理解一个语言是如何被解析的.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;不加分号的编码中唯一的问题&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;下面这个例子是你在尽量少用分号的编码方式中需要注意的一种情况:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;// careful: will break&lt;br&gt;a = b + c&lt;br&gt;(d + e).print()&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;它正常的结果应该是:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;a = b + c(d + e).print();&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这一例子取自&lt;a href=&quot;http://www.mozilla.org/js/language/js20-2000-07/rationale/syntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇关于JS2.0兼容性问题的文章&lt;/a&gt;, 但是我确实在我自己使用&lt;a href=&quot;http://www.yuiblog.com/blog/2007/06/12/module-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the module pattern&lt;/a&gt;的程序中遇到过几次.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;简单的解决办法是: 当某一行是以括号开头的时候, 可以在括号前面加一个分号.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;;(d + e).print()&lt;br&gt;&lt;/code&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这可能看起来不那么优雅, 但是确实可以解决问题. &lt;a href=&quot;http://inimino.org/~inimino/blog/javascript_semicolons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Michaeljohn Clement 做了进一步的解释&lt;/a&gt;:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;如果你选择尽可能少的使用分号, 我的建议是在任何一个括号和方括号为开头的表达式前立刻插入一个分号, 或者任何一个以算数运算符 ‘/‘,’+’,’-‘开头的表达式也应该如此, 如果你正好写了这么一个表达式的话.&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;接受这一建议就不会有问题了.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Source:&lt;/strong&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;原文: &lt;a href=&quot;http://mislav.uniqpath.com/2010/05/semicolons/&quot; title=&quot;semicolons in javascript is optional&quot; target=&quot;_blank&quot;&gt;semicolons in javascript is optional&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/article&gt;
</summary></url><url><title>Scarcity Principle in UI Design - Making Users Click RIGHT NOW or Lose Out</title><loc>http://taoalpha.me/blog/2014/11/07/read-t-scarcity-principle-in-ui-design-making-users-click-right-now-or-lose-out/</loc><publish>2014-11-07T09:00:00.000Z</publish><summary>&lt;article class=&quot;article body&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;稀缺原理是社会心理学中的一个著名现象, 换句话说就是”物以稀为贵”. 在现实生活中, 黑色星期五就是一个稀缺原理的最好示例: 对这个每年仅进行一天的销售日(在美国是感恩节之后的那天), 且有着非常明确的数量限制, 再加上一定的折扣, 也就导致在这一天里, 成群结队的饥渴的消费者们往往对于零售商们而言是一个非常好的事情, 当然, 除非他们过于亢奋而引发暴力… 那就不好了…&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;稀缺远离在交互界面的应用模式&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;有限的时间和数量&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/09/12/scarcity_time-and-quantity.png&quot; alt=&quot;有限的时间和数量&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;在上面这个Groupon的例子中, 这一交易的有效期和商品的数量都昭示着稀缺原理的应用.&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;有限的范畴&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/09/12/scarcity_request_invite_creative_market.png&quot; alt=&quot;有限的范畴&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;上述例子则是来自Creative Market, 这一次, 有限的是卖者, 所以卖家必须要申请获得一个邀请才能进入. 在互联网上, 空间的限制从来都不是仅仅为了限制空间, 他们通常都是用来进行一些收藏, 名人和内容的展览.&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;有限的信息&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://s3.amazonaws.com/media.nngroup.com/media/editor/2014/09/12/scarcity_be-the-first-to-know_urbans-email.png&quot; alt=&quot;有限的信息&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;上述来自Urban Outfitters的例子则是通过利用最新的一首信息和优惠的邮件来演示了有限的信息.(我们的研究表明这种对于获取比别人更多更好的信息对订阅是一种很好的动力).&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;稀缺原理的背景介绍&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;稀缺原理是Robert Cialdini博士提出的6种影响力原理之一, RC博士是来自Arizona州立大学的一位教授, 因其1984年所著”影响力:说服的心理学”而出名. Cialdini的这一著作是围绕着关于妥协这一现象的心理学探究展开的, 描述了RC作为一个心理学教授, 他和他的学生们进行了无数的研究来探究这6种影响力.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;稀缺性是一个非常重要的影响因素, 为什么这么说呢? 其根本在于认知学上有一个著名的偏见叫做: 损失规避, 是由Daniel Kahneman和Amos Tversky两人首先提出的. K和T发现人们总是对失去的东西投入更多, 认为它们的价值高于所获得的, 从而导致人们更倾向于避免损失而不是增加收获. 换句话说, 损失$100的痛要压过获得$100的快乐…(译者注: 即失去了才懂得珍惜…)&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这种对于规避损失的强烈倾向解释了为什么稀缺原理如此有效: 因为我们觉得如果我们不立刻采取行动, 我们就要失去这一稀缺产品或者信息了. 比如, 如果一个人正在买机票, 然后发现有一个航班很符合他的需求, 然后发现后面注明这是这一价格下的最后一张机票了, 这个人可能会立刻因为担心错失这张机票而立刻下单购买, 即便可能他自己还没准备好订票呢. (对于这种当前$100的折扣, 除非用户能够在之后获得$200的优惠, 否则多数用户都无法说不的.)&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;稀缺性可谓是一个非常有效的说服工具, 为什么这么说呢?  因为稀缺性有多种表现形式: 数量, 时间以及信息. Knishinsky曾做了一个实验证明了正是这些因素的累积效应产生了说服作用. 在他的研究中, 销售们通常可以通过告诉客户在接下来的几个月里牛排供应会比较稀缺而获得2被的销售量. 而更加不可思议的是他们还发现如果销售们不是直接的告诉客户, 而是以一种秘密消息透漏出去的情况下, 他们甚至可以达到6倍的销售量. 哈, 这种双重稀缺(商品+消息)比简单的商品稀缺要高出三倍的销售量啊.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;在互联网上, 我们什么时候去使用这一技巧呢?&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;加快预期行动&lt;/strong&gt;: 如果你发现你网站转化用户中的绝大多数人在成交前访问你网站的次数比你预期的还要多时, 那么你可以尝试利用稀缺性来减少这一延迟;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;提升商品感知价值&lt;/strong&gt;: 暗示商品数量有限可以影响客户对商品价格的估计. 比如, 在一个高端晚餐中, 一个大盘子上一块小猪肉可以暗示其所使用的调料是非常稀有的, 也应该更加珍贵.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;测试稀缺性&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;使用稀缺远离的最大风险就是会降低信誉. 如果你的用户怀疑你这种稀缺只是虚假的, 他们可能就会流失掉的. 这也是为什么在正式应用稀缺原理前一定要将进行前期的测试. 以下是一些对应的问题和你可以使用的对应方法:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Q: 什么样的稀缺信息会增加转化率?      Testing: A/B Testing&lt;/li&gt;&lt;br&gt;&lt;li&gt;Q: 稀缺信息会减少转化所需时间吗?      Testing: Analytics data, 访问路径以及延迟时间报告&lt;/li&gt;&lt;br&gt;&lt;li&gt;Q: 这一稀缺信息会影响信誉吗?              Testing: Usability Testing&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;结论&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;稀缺原理在真实信息的基础上进行适当的微调, 可以鼓励用户更好的更流畅的在你的网站上达成转化. 但是, 如今这一原理在很多网站上有所应用, 所以其效果也在逐渐下降了. 也因此, 我们非常鼓励设计团队在正式应用前进行测试, 确认其对于转化率以及长期商业目标的影响.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;Reference:&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Robert B.Cialdini, &lt;a href=&quot;http://www.amazon.com/dp/B001CDZYVE?tag=useitcomusablein&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Influence: Science and Practice.&lt;/a&gt; Pearson Education Inc., 2009.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Amos Tversky and Daniel Kahneman. Loss Aversion In Riskless Choice: A reference-Dependent Model. The Quarterly Journal of Economics Vol. 106, No.4(Nov., 1991), pp. 1039-1061&lt;/li&gt;&lt;br&gt;&lt;li&gt;Knishinsky, A. The effects of scarcity of material and exclusivity of information on industrial buyer perceived risk in provoking a purchase decision. Unpublished doctoral dissertation, Arizona State University, Tempe, 1982.&lt;br&gt;-Daniel Kahneman, &lt;a href=&quot;http://www.amazon.com/dp/B00555X8OA?tag=useitcomusablein&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thinking, Fast and Slow&lt;/a&gt;. Farrar, Straus and Giroux, New York, 2011.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;Source:&lt;/h5&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.nngroup.com/articles/scarcity-principle-ux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scarcity Principle in UI Design: Making Users Click RIGHT NOW or Lose Out&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/article&gt;
</summary></url><url><title>jQuery 3.0 &amp; jQuery Compat 3.0 are Announced</title><loc>http://taoalpha.me/blog/2014/11/19/read-t-jquery-3-0-jquery-compat-3-0-are-announced/</loc><publish>2014-11-19T10:00:00.000Z</publish><summary>&lt;h3&gt;jQuery 3.0 &amp;amp; jQuery Compat 3.0 are Announced&lt;/h3&gt;

&lt;p&gt;如果你算是web开发领域的一员, 那么一可能会是下述两种类型之一: 你认为jQuery是自图像切片以来最棒的事情了, 没它你一周都过不下去; 或者, 你认为jQuery就是一个臃肿的拄杖, 是那些过于懒惰不愿意学习真正的JS的人的利器.&lt;/p&gt;

&lt;p&gt;但是, 无论你持哪种观点, 你都不能否认jQuery对工业界产生的影响, 它已经是如今网页开发最流行的JS库了. 所以本周宣布的jQuery 3.0可以说是前端开发的又以里程碑事件啊.&lt;/p&gt;

&lt;p&gt;jQuery 2.1.1会很好的继承到jQuery3.0.0中, 而jQuery 1.11.1则会很好的继承到jQuery Compat 3.0.0中. 他们共享一个版本号是因为他们的公共API都是一样的, 后者主要是最大化的兼顾兼容性问题, 前者则最大化的提升性能.&lt;/p&gt;

&lt;p&gt;先别急着去更新自己的站点, jQuery 3.0还没正式发布呢, 它还处在计划阶段呢. 但是它意味着jQuery 2.0的时代已经告一段落了, 而任何残留的问题也都只能暂时保留了.&lt;/p&gt;

&lt;p&gt;更重要的是, 它同时意味着用jQuery 2.1.1开发的东西不一定会在3.0的版本中正常工作呢, 因为通常来说当小版本迭代更新时往往能够向前兼容, 但是大版本的更新就不一定了. 这一点, 在 &lt;a href=&quot;http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dave Methvin的更新声明文章&lt;/a&gt;中也有着重提到.&lt;/p&gt;

&lt;p&gt;这对开发者有什么影响呢? 如果你曾经通过Google引入jQuery过, 你就会知道你往往会请求某个特定版本的文件, 或者至少是特定的某个大版本号下的文件. 如果不是这样的话,  3.0 出来后就有可能引发一些问题. 但是目前手头还有一个更大的问题, 随着3.0的更新, 成千上万的使用jQuery的第三方产品将会急冲冲的开始更新自己的版本(很多是因为市场因素所致).&lt;/p&gt;

&lt;p&gt;这种匆忙更新3.0很有可能造成一种多米诺骨牌的更新效果,  其中必然有一些会出现问题.&lt;/p&gt;

&lt;p&gt;但是jQuery也不能常年不变, 那么它离废弃也不远了. 它必须更新自己的代码来应对新的需求和技术. 而通过强调下一版本为大版本更新, 告知可能出现的API变动, 本身就是一种负责任的表现, 而且他们已经尽可能的提前通知公众给大家足够多的警告了.&lt;/p&gt;

&lt;p&gt;开发者们所需要做的就是确保他们在引入jQuery的时候指定一个详细的版本号(既有大版本号又包含小版本), 并且确保自己使用的第三方脚本也是用的同样版本的jQuery.&lt;/p&gt;

&lt;h4&gt;Source:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.developerdrive.com/2014/10/jquery-3-0-jquery-compat-3-0-are-announced/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;back to original page: jQuery 3.0 &amp;amp; jQuery Compat 3.0 are Announced&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>It’s Not UX vs. UI, It’s UX &amp; UI</title><loc>http://taoalpha.me/blog/2014/11/13/read-t-its-not-ux-vs-ui-its-ux-ui/</loc><publish>2014-11-13T08:00:00.000Z</publish><summary>&lt;article class=&quot;article body&quot;&gt;&lt;h3&gt;UX和UI并不是对立的&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Chris Bank of UXPin –  &lt;a href=&quot;http://www.uxpin.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个线框图和原型制作工具&lt;/a&gt; – 对比了以下网页设计和用户体验, 解释了为什么我们有时候默认要先创建一个UI, 然后利用UI来塑造整体的UX.  如果想要了解下利用33个公司的例子所进行的分析, 可以前往阅读: &lt;a href=&quot;http://uxpin.com/web-ui-design-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网页设计界面典型实例&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;网页用户体验(UX)是用来描述人们对一个网站所获得一种感受的这么一种抽象概念. 而用户界面(UI)则是在这个体验过程中, 用户所与之交互的界面.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;当设计一个网站时, 你希望你的UX能够尽可能的正面, 积极 – 你希望你的用户能够享受这一浏览过程, 这也是网站全部的意义所在. 但是你不能只是简单的说”让我们提升一下我们网站的UX吧”, 就好像你不能随便的对一个事业说”来让我们多赚点钱吧”. 只有我们用以创造体验的方法, 即用户界面这个媒介来提升我们的体验.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/ux-ui.png&quot; alt=&quot;ux ui&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;http://www.helloerik.com/ux-is-not-ui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来源: UX is not UI&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;通常对网站而言, 一个公司的设计团队都是通过在UI上下功夫来提升UX的. 菜单选项啊, 按钮啊, 文本啊, 图像啊, 视频啊等等, 这些摆放在页面上的元素, 是组成这个界面的各个部分, 也是我们所需要精雕细琢的地方. 而这些都是UX的组成部分, 他们的使用直接影响着最终用户的体验.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;我们会结合一些UI的实例来解释种种可以帮助你题解为什么一个好的UX依赖于一个好的UI的方法, 并且会更进一步的解释为什么创造一个UI要比创造一种UX来的容易.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h4&gt;网页用户界面究竟是什么?又不是什么?&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;就网页这个情景下, 什么是UI呢? 假设设计师在管理内容方式上, 支持用户选择拖拽文件作为一种管理内容的方式. 这就是UI. 而假设一个用户相比竞品更喜欢这个网站, 因为他喜欢它的简洁, 在上面听歌更加享受. 那么, 这就是UX.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;正如在 &lt;a href=&quot;http://uxpin.com/web-ui-design-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2014网页UI最佳实例&lt;/a&gt;的讨论中,  网页UI是网页组成元素的设计, 展示以及操作方式的组合. 通常来讲, 这些的表现形式是多样的, 因为它们笼统的包含了设计师所能够放入网页的所有东西, 但是幸运的是, Usability.gov, 一个领先的UX规范, 实例等资源整合的网站,  &lt;a href=&quot;http://www.usability.gov/what-and-why/user-interface-design.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用一种简便而又方便的方式归类如下&lt;/a&gt;:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Input(输入) – 文本类输入域, 时间日期类输入域, 下拉列表, 复选框, 列表框, 可点击按钮, 转换键等&lt;/li&gt;&lt;br&gt;&lt;li&gt;Navigation(导航) – 幻灯片, 搜索输入域, 翻页导航, 侧边栏, 标签, 图标等&lt;/li&gt;&lt;br&gt;&lt;li&gt;Sharing(分享) – 好友列表, 关注按钮, 喜欢按钮, 分享按钮, 邀请好友&lt;/li&gt;&lt;br&gt;&lt;li&gt;Information(信息) – 文本域, 提示框, 信息框, 提醒, 图标, 进度条, 窗口等&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;比如, 在 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OS X Yosemite: 为最好的UI努力&lt;/a&gt;一文中. 虽然Yosemite是一个操作系统(而不是网站), 但是其UI背后的原理依然是可以用到网页设计中的. 他们在可点击按钮上所达到的视觉效果让用户在使用系统的时候非常享受, 而它的侧边栏则让用户能够看到更多窗口背后的内容(?), 而它的提醒中心则在完全不打乱当前工作流的情况下提供了你所需要知道的信息.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;最重要的是, 正如Apple在他们的UI设计规范中所陈述的, 这些元素都帮助他们完成了”自定义功能以及一个独到的用户体验”. Yosemite UI最终的目标是允许用户能够快乐的使用这个功能强大的系统, 而不至于因为系统的复杂而受挫.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h4&gt;要让UI的效果看得到&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;UI和UX是完全不同的概念, 但是又有着不可否认的联系.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;如在 &lt;a href=&quot;http://uxpin.com/web-design-patterns.html?utm_source=Web%20UI%20Best%20Practices&amp;amp;utm_medium=e-book&amp;amp;utm_campaign=Web%20UI%20Best%20Practices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2014 网页界面设计示例&lt;/a&gt;中, Google Play掌握了拖拽这一UI技术. 在他们的网站上, 用户可以拖拽歌曲到一个播放列表, 然后拖拽他们进行排序. 最终的结果是, UX因为用户所需要做的仅仅是告诉App他们想要听什么歌曲然后就可以轻松的听歌了而得到了很大的提升. 利用这种方式, 仅仅是一个UI的引入(拖拽)就提升了整个用户体验, 为什么呢? 因为更加方便, 更加可定制化了.&lt;br&gt; &lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/google-play.jpg&quot; alt=&quot;google play&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;接下来我们说个不这么直接的例子. 假设你的很多用户都过早的离开了你的网站, 因为他们不想要注册来使用某些功能. 这显然是一个UX的问题, 因为这是体验导致用户提前离开, 但是你可能会发现其根源还是在UI上. 假设你当前的登录环节有太多的登录信息需要填写. 在这种情况下, 那么快速进入(“lazy signup”)的UI模式可能会是一种解决办法. 这可以让用户不需要注册也能访问绝大多数的站点内容. 而在一段时间的自由访问后, 他们就有可能决定去创建一个账户, 尤其是在他们发现有一些功能是仅对注册成员开放的情况下.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;AirBnB在吸引新用户的时候采取的就是这个策略. 用户如果是非注册成员, 那么也是可以像注册成员那样浏览绝大多数的帖子, 从而让他们也能看到AirBnB所拥有的各种有趣的东西. 但是, 一旦他们发现了一个他们想要预订的房子, 那么他们就需要一个账户才能预订.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/airbnb.jpg&quot; alt=&quot;Airbnb&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;如果UX是通过UI来体现的, 那么UI就是通过设计环节, 比如速描, 线框, 原型制作等来创造的. 线框和原型就是一些简单的线条, 是设计师们在创造真正的网站之前所制作的设计蓝图. 通常是从手绘在纸巾上的草稿, 然后用类似 &lt;a href=&quot;http://www.uxpin.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UXPin&lt;/a&gt;和Balsamiq等工具制作出来的数字原型.  这可以说是最重要的环节了, 设计师们必须系统的, 在理论上想清楚什么样的UI将会创造出预期的体验. 就如同建造一栋房屋, 你不能在蓝图还没想清楚的情况下就动手施工了.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;想要进一步了解线框原型的, 可以前往 &lt;a href=&quot;http://uxpin.com/guide-to-wireframing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线框原型规范&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h4&gt;我们为什么要创建用户界面而不是用户体验呢&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Shawn Borsky, Rivet Games的UI/UX首席设计师,  &lt;a href=&quot;http://designshack.net/articles/graphics/the-difference-between-ui-and-ux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;告诫我们UX不仅仅是UI的结果&lt;/a&gt;. 据他所说, UX是”一个品牌的核武器”, 而一个品牌本身则是”一个人对公司或者组织的所有感受的累积”. 这就使得一个全面的UX绝不仅仅是UI的目标, 而是所有, 用户和这个组织所进行的交互的综合目标.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;一个网站的每一个细节都会对它的用户体验以及用户从而形成的对这个网站的印象有所影响 – 但是网站设计师往往是不能直接控制这种体验的. 就如同下面这副画所描述的, 我们很容易把自己的焦点只集中到UI上, 毕竟UI是有形的(就好比勺子一样), 而UX这种体验的东西是无形的(就好比一顿早餐的愉悦感一样).&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/ui-and-ux.png&quot; alt=&quot;ui and ux&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;同样的, 如果你正在做一个重要的晚餐, 你可能会想在其中花很多的心思, 不是吗? 你手选出最好的调料, 选用最佳的食谱, 然后小心的按照上面说的一步步完成,  甚至最后你会在盘子中心放上一个漂亮的装饰来营造一个好的氛围. 那么, 网站也是如此, 你希望能够把每个部分都能够设计的足够完美, 让你的每个访客都能够愉快的浏览. 你可能会花费几个小时甚至几天的时间来设计, 准备这道菜, 但这只是最顿完美的晚餐的一部分. 这也是为什么只有当你装着UX在怀里的时候再去注意UI的细节才有价值.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;如果一个UI是你花心思, 集中注意力, 很小心的制作的, 那么它一定能够在UX中得到体现. 如果一个UI是你花了一点功夫赶出来的, 或者里面有一些大的疏忽, 那么UX也会反映出来的. 一个关于UI有疏忽的例子就是iPhone上的Shift键(虽然我们谈论的是网页设计, 但是移动设备在UI和UX的问题上也不能免俗的):&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/black.png&quot; alt=&quot;black&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/white.png&quot; alt=&quot;white&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;上面的图片中, 哪个Shift键是激活状态的, 哪个不是呢? 在上面的键盘示意图中, 有些键始终都是灰色背景, 有些则始终都是白色背景, 但是Shift键这两种背景都有, 依赖于它的状态是否是激活的. 这是一个非常糟糕的设计, 虽然所有功能都正常, 而且用户依然可以使用Shift键. 但是结果呢? 用户(如在UXPin)经常不得不删掉刚打的词, 从新打过, 这让我们非常不爽… 也就产生了非常不好的用户体验.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;(说实话, 上面到底哪个是激活态?! 在UXPin, 我们使用iPhone已经6年了, 但我们始终没搞清楚这个…)&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;再比如一个在 &lt;a href=&quot;http://uxpin.com/web-ui-design-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网页UI最佳实例&lt;/a&gt;中的示例, 哪怕是流行站点如LivingSocial中也存在着非常糟糕的UI设计:&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/input.png&quot; alt=&quot;input ux&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这是你在首次进入网站时看到的一个弹框. 问题在于… 完全没有取消的选项. 这意味着那些谨慎的用户们, 因为不愿意提供自己的邮箱, 就只能立刻离开了. 可能这也算是一个迫使用户提供自己的邮箱的一个国际惯例了… 但是你真的愿意自己的网站的体验和这个傻缺的一样?&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;如今, 注意到UI上没啥大问题–配色也不错, 按钮看起来也很有点击欲望 – 但是用户体验很恶心已经是一个非常重要的事情了. 这也算是虽然有好的UI但是却没有好的体验的典型例子了. Marcin Treder, UXPin的CEO, 相信一个糟糕的用户体验只能在特定目标下有限度的接受. “有时候你会看到那种有着长长的, 复杂的表格, 所有的标签都左对齐着, 这是一种很糟糕的阅读体验”, Treder 说”但是另一方面, 你通过这种方法能够避免那些胡乱填的人从而能够获得比较好的数据质量, 而这也正式你的目标所在.”&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;我们正在挑选一些 &lt;a href=&quot;http://baduiuxdesign.tumblr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;糟糕的UI设计样例&lt;/a&gt;, 仅仅是因为这些比较容易被注意到, 而且也比号的设计更有趣不是吗? 这也是因为一个好的UI, 是那种你感觉不到的好. 就好像一个好的电影让你看的都忘记自己在电影院里, 一个好的UI也会让用户沉浸其中而不会注意到的. 甚至都没有注意到创造出这么好的UX的UI.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h4&gt;UI是如何塑造UX的&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;理论讲的差不多了, 我们接下来看看UI选择是如何直接影响UX的吧.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/ui-ux-design.jpg&quot; alt=&quot;ui ux design&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;上述例子都是关于UI是如何影响UX的粗略描述, 想要看一个更加细节性的解释, 可以看看 &lt;a href=&quot;http://uxpin.com/web-design-patterns.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2014网页UI设计模式&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;虽然UI塑造了UX, 但是你首先要做的事情还是决定好UX, 然后再去找对应的UI. 类似的, 如果你的UX有问题, 那么最好的方法和确认问题所在就是去UI上找问题, 并且修正它.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h4&gt;学习用户体验的用户体验&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;要理解UX和UI之间的区别仅仅才刚开始 – 建立一个好的网站的关键依赖于你对这两个概念之间的联系的逐步了解. 虽然很多网页设计是割裂且独立的, 但是UX和UI多数情况下是直接联系在一起的.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/11/UX1.png&quot; alt=&quot;UX&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;如上所示, 想要创建一个有效的用户体验需要很多东西, 远不止是视觉. 视觉和听觉设计只是UI设计的一小部分元素. 当你无法制你网站的UX时, 你可以试试控制你的UI – 确保你有一个好的UX预期然后恰当的设计你的UI.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;强烈推荐查阅: &lt;a href=&quot;http://uxpin.com/web-ui-design-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网页UI最佳实例&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Source:&lt;/strong&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;a href=&quot;http://designmodo.com/ux-ui/&quot; title=&quot;UX&amp;UI&quot; target=&quot;_blank&quot;&gt;原文链接: It’s Not UX vs UI, It’s UX &amp;amp; UI&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/article&gt;
</summary></url><url><title>How to Create a web design style guide</title><loc>http://taoalpha.me/blog/2014/11/10/read-t-how-to-create-a-web-design-style-guide/</loc><publish>2014-11-10T09:00:00.000Z</publish><summary>&lt;h4&gt;如何制作一个网页设计样式规范&lt;/h4&gt;

&lt;p&gt;现如今, 做网站变的越来越复杂, 而且通常都已经不只是一个人的活了, 这就使得确保设计的一致性和优越性都能够符合商业目的并且有足够好的用户体验变的非常重要.&lt;/p&gt;

&lt;p&gt;而确保不同分工的人能够很好的切合彼此同时也为了从开发者手上拯救悲催的设计师, 有一个很好的方法就是制作设计文档或者一个网页设计样式标准.&lt;/p&gt;

&lt;p&gt;如果有一个样式标准的话, 对于在不同页面上保持一致的体验是有很大帮助的. 它同时还对确保以后的更新迭代, 第三方的产品接入都能够很好的融入整个产品, 成为产品和谐的一部分也有所帮助. &lt;/p&gt;

&lt;p&gt;Luke Clum 去年曾经浅谈过这一话题: &lt;a href=&quot;http://designmodo.com/style-guides/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网页设计第一步之应用样式标准&lt;/a&gt;. 今天我则会更加深入一些的探讨下如何为你的项目创造一个网页设计样式规范这一问题.&lt;/p&gt;

&lt;h5&gt;什么是样式规范?&lt;/h5&gt;

&lt;p&gt;一个样式规范通常是一些设计好的元素, 图形以及设计师和开发者应当遵循的一些规则组成的, 是为确保网站的不同部分能够保持统一从而创造一致的用户体验.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/airbnb-style-guide.jpg&quot; alt=&quot;airbnb style guide&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;h5&gt;为什么说它很重要呢?&lt;/h5&gt;

&lt;p&gt;对于一个大型网站项目或者app项目而言, 它通常是多个人员共同协作完成的, 那么这种情况下, 样式规范就非常重要了, 因为要依赖样式规范来确保每个人不会因为个体差异而产生较大的理解偏差. 在开发环节中, 如果能够有定义完整的元素标准, 那么开发者就能够复用这些样式, 省事很多了. 更何况, 有了规范, 开发者们会更加清楚他们所需要编写的对象了.&lt;/p&gt;

&lt;h5&gt;制作一个网页设计样式规范&lt;/h5&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;学习品牌&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;首先, 你需要学习你服务的品牌, 理解其所代表的含义. 试着去了解品牌背后的故事, 观察它的团队, 找到这一公司的任务, 目标以及价值体现. 只有深入的了解一个品牌后, 你才能做出一个在视觉上以及情感上都能体现这一公司的样式规范出来.&lt;/p&gt;

&lt;p&gt;如果你是一个不会写代码的设计师, 那么就打开PS, 做个文档, 写上标题, 加上一个简短的介绍说清楚文档的内容和目的即可.&lt;/p&gt;

&lt;p&gt;如果你可以写代码, 那么最好是能够直接做出一个html文档, 写好能够复用的样式代码块, 从而可以让开发者们更容易的复用.&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;定义字体&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;根据 &lt;a href=&quot;http://ia.net/blog/the-web-is-all-about-typography-period/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oliver Reichenstein&lt;/a&gt;所说, 字体占据了网页设计的95%.&lt;/p&gt;

&lt;p&gt;你必须要选一个正确的字体, 因为它将会是你和用户之间最重要的一个沟通工具了.&lt;/p&gt;

&lt;p&gt;选好字体后要同时标好层级关系. 一共有标题类:h1-h6, 再加上正文字体, 粗体以及斜体这些情况都要考虑到. 同时考虑下可能会用到的小字号链接的字体, 介绍文本等. 提供出字体所属家族, 字体粗细以及颜色.&lt;br&gt; &lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/Style-Guides.jpg&quot; alt=&quot;Style Guides&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;调色板&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;人们对色彩的认知和感受, 以及人们对于那些知名品牌的色彩认知都是非常不可思议的. 想一下可口可乐, 我敢说你脑海中立刻一片红色~&lt;/p&gt;

&lt;p&gt;首先, 你需要先设定样式规范的主色调, 通常主色应该不超过三个色调.  而在有些时候, 你可能需要选择一些备选色, 甚至第二备选色来渲染你的界面, 所以确保你把你的色调定义好. 另外要加上一些类似白色, 灰色, 黑色的中性色到你的主色组中.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/color-palette.jpg&quot; alt=&quot;color palette&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;语调&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;这里的语调算是我引入的一个概念了. 比如你在制作样式规范之前已经了解了这个品牌, 发现这个品牌是一个比较时尚, 比较潮流的品牌. 那么如果你的那些提示语都没有什么倾向的话, 你就需要定义你的语调倾向. 可以简单的举个例子, 语调要足够专业但又足够有趣温馨就行. 比如与其使用”你遇到了404错误”, 你可以换一种说法”哦, 孩子, 你刚刚弄坏了互联网…404错误”. 而如果语调主旨比较正式, 你就不应该这么做了~ 要记得, 智慧往往体现在细节上.&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;图标&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;图标已经存在几千年了, 远比语言, 文字都要古老. 所以好好利用图标, 能够让你的项目更加友好, 图标可以更好的和用户交互, 更容易理解, 更清楚的表情达意. 选择一个合适的图标往往能够赋予内容比色彩, 图像都要多的意义.  当使用图标的时候, 请确保仔细考虑了目标用户, 以及它们的历史, 宗教等信息, 这样你才能保证避免一些误解的产生. 还有一个值得一说的事情就是, 要结合品牌自身和其价值, 你不会愿意在一个大型的银行网站上使用手绘的图标的.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/iconfinder.jpg&quot; alt=&quot;iconfinder&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/noun.jpg&quot; alt=&quot;Icons&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;图像&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;图胜千言. 确保规范中包含网站中使用图片的样式和方向. 以及, 一定要考虑下品牌和其价值, 目标. 比如, 一个水资源的慈善机构会使用一个突出的画面来表现一种强烈的情感, 从而引发人们对自身所处环境的感激, 感激自己能够生活在一个基本资源, 如水, 食物, 电力, 教育都俱全的环境中.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/images.jpg&quot; alt=&quot;images&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;表格&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;正是因为表格, 才能让你的网站和用户有了很好的动态交互, 用户输入数据, 而你则操纵这些数据从而完成某个工作.&lt;/p&gt;

&lt;p&gt;确保建立一个层级结构并且尽可能增加不同形式的反馈: 激活态, 鼠标悬浮态, 以及错误提示, 警告和成功等附加信息, 比如密码过弱, 邮箱不正确或者仅仅是个简单的成功信息也可以: 比如”邮件已发送”~&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;按钮&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;按钮是一个集成体, 集合了色彩, 表格以及语态. 而依赖于这些已有的部分, 就可以创造外表和功能都一致的按钮设计.&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;留白&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;留白怎么在一个样式规范中体现呢? 提及留白这一点是非常重要的. 它可以是一个栅格式布局的形式, 也可以是在标题, 按钮, 图像, 表格和其他元素之间的留白.&lt;/p&gt;

&lt;p&gt;合适的留白是非常重要的, 因为它的存在让元素更加自然, 宽松, 同时一致的留白会让你的网站更加专业, 结构清晰.&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;对于错&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;最后, 一定要加上一个”对于错”的环节, 就好像一个FAQ一样来列举常见的一些陷阱和错误, 并给予正确的样子作为参考.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/twitter.jpg&quot; alt=&quot;twitter brand&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;h5&gt;示例&lt;/h5&gt;

&lt;p&gt;这有一些很好的样式规范示例, 可以作为你创建自己的样式规范的灵感来源. 需谨记的是这些规范都收到了所属组织本身结构, 视野, 任务以及价值观的很大影响. 有一些可能会和你所属项目的规则并不一致, 甚至有所冲突, 所以不要盲从, 仅作为参考即可.&lt;/p&gt;

&lt;h6&gt;Spotify&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.spotify.com/download/guidelines/ux-with-other-brands.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/spotify.jpg&quot; alt=&quot;spotify&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;Dropbox&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/branding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/dropbox.jpg&quot; alt=&quot;dropbox&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;Kickstarter&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kickstarter.com/help/style_guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/kickstarter.jpg&quot; alt=&quot;kickstarter&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;Lonelyplanet&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;http://rizzo.lonelyplanet.com/styleguide/design-elements/colours&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/lonelyplanet.jpg&quot; alt=&quot;lonelyplanet&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;The best way to find Guides&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;http://findguidelin.es/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/09/guides.jpg&quot; alt=&quot;guides&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;结论&lt;/h5&gt;

&lt;p&gt;一定要先深入的学习了解设计对象品牌的价值和内涵, 这样才能让你的样式规范拥有更好的一致性, 才能成为一个好产品的基础.&lt;/p&gt;

&lt;h5&gt;Source:&lt;/h5&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://designmodo.com/create-style-guides/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文: How to Create a web design style guide&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>For designers, the Customer is Never Right(Even when they are)</title><loc>http://taoalpha.me/blog/2014/09/11/read-t-for-designers-the-customer-is-never-right-even-when-they-are/</loc><publish>2014-09-11T10:00:00.000Z</publish><summary>&lt;p&gt;总的来说文章不错, 尤其是总结的四条让设计师无语的原因哈, 让我不自禁的想起来当初做PM的时候和设计师沟通的情景, 很有带入感哈哈~ 谨以此文献给所有设计师们~&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;“客户至上”&lt;/strong&gt;&lt;/em&gt;的原则是如此的根深蒂固, 以至于反对这一原则变成了一件非常不可能的事情. 在我们很小的时候, 还远没有任何真实世界的应用经验的情况下, 我们就已经学习了这一准则. 即无论如何, 让消费者开心就是你最应该做的. 还有什么更好方式吗? 比从客户进门开始就奉承TA的每一个念头更好的方法?&lt;/p&gt;

&lt;p&gt;[caption width=”570” align=”aligncenter”]&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/08/customer-is-never-right.png&quot; alt=&quot;For Desingers, the Customer is never right&quot; title=&quot;&quot;&gt;For Desingers, the Customer is never right[/caption]&lt;/p&gt;

&lt;p&gt;每一个设计师最终都会得到这个结论的. 尤其是当你作为一个自由职业者或者一个小企业的经营者, 你工作越久, 这一点就看得越清楚. 实际上, 即便在技术角度上客户是对的, 他们依然在一些方面是错误的. 因为无论他们能给项目规划带来多少亮点, 传达多少细节, 他们依然雇佣了你.  他们有些决定是基于缺乏相应的天赋, 知识以及经验的情况下作出的.&lt;/p&gt;

&lt;p&gt;这就创造设计领域一个非常有趣的悖论:  客户提供的越多, 产生的帮助越小. 下面这四条就是你应该放弃那”顾客至上”原则的主要原因,  来自Clients From Hell非常准确的报道.&lt;/p&gt;

&lt;h2&gt;他们不知道他们到底要什么.&lt;/h2&gt;

&lt;p&gt;[caption width=”570” align=”aligncenter”]&lt;a href=&quot;http://clientsfromhell.net/post/82379675961/i-need-this-logo-redone-it-should-look-like-the#disqus_thread&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/08/cfh1.png&quot; alt=&quot;A client who then offered to pay me in haircuts&quot; title=&quot;A client who then offered to pay me in haircuts&quot;&gt;&lt;/a&gt;A client who then offered to pay me in haircuts[/caption]&lt;/p&gt;

&lt;p&gt;当你第一次听客户说”做你想做的”时候, 你一定感觉像是听到天使的声音, 动听无比.  是的, 你会在忍受客户那些完全没有道理可言的需求之下, 尽情的展示你的技艺.&lt;/p&gt;

&lt;p&gt;也许你觉得这种失望的感觉是暂时的,  你会在之后大展身手的. 很遗憾, 你的客户是不会给你这个机会的. 更多时候, 在你拿出一个草图后, 他们会立刻给你提供一堆的小变动.  看到了吧, 他们不是没想法, 他们只是没有和你分享他们的想法. 当然, 你又不会读心术, 你自然不知道.&lt;/p&gt;

&lt;p&gt;其实, 他们可能真的和你分享过他们想要什么. 他们可能有一个非常具体的需求描述着自己像要什么. 不过可能是个非常糟糕的点子, 或者完全不可行… 亦或者, 他们就是没啥想法, 但是非常不幸的是他们觉得自己有… 这就让你说服他们变得非常困难, 当然… 你在整个项目过程中都会遇到这个问题的.&lt;/p&gt;

&lt;h2&gt;他们不知道改如何表达自己想要的是什么&lt;/h2&gt;

&lt;p&gt;[caption width=”570” align=”aligncenter”]&lt;a href=&quot;http://clientsfromhell.net/post/89956899656/client-can-you-make-it-less-black-like-half#disqus_thread&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/08/cfh2.png&quot; alt=&quot;They don't know how to explain what they want&quot; title=&quot;They don't know how to explain what they want&quot;&gt;&lt;/a&gt;They don’t know how to explain what they want[/caption]&lt;/p&gt;

&lt;p&gt;继续说那些有”想法”的客户, 他们的脑袋中可能确实有点存货发酵出些好东西. 也许, 可能他们脑海中的那个画面真的超级棒. 可能他们想象中的网站/图标/宣传册甚至可以成为设计界的Sistine Chapel. 那么你可能有机会成为早就这一伟大的设计师, 成为一个艺术殿堂的大师级作品的创作者, 创造出某种设计流派的设计大师.&lt;/p&gt;

&lt;p&gt;这些都没有意义, 你可能永远都无法知道你的客户脑海中的那个想法到底是什么.  因为没有客户能够清楚的解释描绘出他们的需求到底是什么样的. 这其实并不怪他们. 即便我们作为设计师, 有些时候我们也会觉得语言是那么的匮乏, 无法表达自己的想法. 当然这也是为啥我们先从草稿设计开始的原因.&lt;/p&gt;

&lt;p&gt;不幸的是, 随着无数次的”小修改”, 诸如”我只是觉得这块是不是太红了些呢? 就是… 你懂我的意思?”, 想要保持耐心, 礼貌变得越来越难.&lt;/p&gt;

&lt;h2&gt;他们不注重细节&lt;/h2&gt;

&lt;p&gt;[caption width=”570” align=”aligncenter”]&lt;a href=&quot;http://clientsfromhell.net/post/89962538710/client-this-promo-leaflet-youve-designed-is#disqus_thread&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/08/cfh3.png&quot; alt=&quot;They don't pay attention to the details&quot; title=&quot;They don't pay attention to the details&quot;&gt;&lt;/a&gt;They don’t pay attention to the details[/caption]&lt;/p&gt;

&lt;p&gt;客户经常觉得他们可以把整个任务的设计环节都派送给你. 当然实际上也确实是的. 但是在很多特定的环节中我们又必须要考虑他们的意见.&lt;/p&gt;

&lt;p&gt;我遇到过很多次这种情况: 我的一个客户在某个时候支持了某个部分的设计, 甚至可以说是赞扬的. 但紧接着, 当我们提交最终设计时, 他们又开始针对同样的部分开始抱怨, 指出种种问题. 这可谓是当今世界最让人沮丧的事情之一了.&lt;/p&gt;

&lt;p&gt;迄今为止, 我找到的避免此类情况发生的一个最好方式就是我们必须假设每个客户都完全不会注意细节的. 那么在这种假设下, 我就可以在各个环节中稍微的含糊一些来保证他们每个环节都能够满意. 直白的询问客户的喜恶会有一定的帮助, 但不是免死金牌. 因为很有可能你会发现人类是多么的善于说谎.&lt;/p&gt;

&lt;h2&gt;他们从不对我们投入的时间和精力表示感激&lt;/h2&gt;

&lt;p&gt;[caption width=”570” align=”aligncenter”]&lt;a href=&quot;http://clientsfromhell.net/post/81580003737/im-transcribing-some-audio-to-text-client-its#disqus_thread&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://designmodo.com/wp-content/uploads/2014/08/cfh4.png&quot; alt=&quot;They don't appreciate the effort and time a project takes&quot; title=&quot;They don't appreciate the effort and time a project takes&quot;&gt;&lt;/a&gt;They don’t appreciate the effort and time a project takes[/caption]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;“分分钟搞定的事儿”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;每次听到这句话你是不是都觉得后脖子上的头发都竖起来了? 每个设计师都听到过这句话, 而每个设计师都是极为厌恶这句话的. 这个工作不可能只花费几分钟解决的, 它并不是那么的简单. 当然, 客户总是希望你能眨眼之间就搞定了, 不费吹灰之力.&lt;/p&gt;

&lt;p&gt;问题在于他们并不清楚设计定稿期间的各个流程和环节. 就如同你可能不理解他们所关心的这个网站一样. 这也是你为什么要尽量在设计的每个环节都告知客户, 让他们了解项目的进度以及每个部分如果复查的话需要多久, 当然也要确保他们知道你不是在免费工作的. 毕竟, 如果他们觉得这事那么的简单, 只需分分钟搞定的话, 那么他们不如自己做呗. 不是吗?&lt;/p&gt;

&lt;h2&gt;礼貌的忽略客户&lt;/h2&gt;

&lt;p&gt;没有什么能够消除上述这4个问题的. 所以最后你只需要保证礼貌, 但是要坚决的, 告诉他们你的原则和规定(请事先订好原则, 确保没什么混淆的地方), 不接受任何越线的事情.&lt;/p&gt;

&lt;p&gt;知道什么时候开掉一个客户是很重要的. 有一些”禁区”是你不能够忽视的. 希望, 你能够通过一次小小的谈话就解决所有的问题, 那么那些非常不愉快的流程就没有必要了.&lt;/p&gt;

&lt;p&gt;如果他们提出了那个”客户至上”的原则怎么办? 冷静的告诉他们那只是一个从来没有应用到设计师身上的原则而已.&lt;/p&gt;
</summary></url><url><title>27 个工作情景的英文写作模板</title><loc>http://taoalpha.me/blog/2014/11/25/read-t-27-english-writing-template/</loc><publish>2014-11-25T09:00:00.000Z</publish><summary>&lt;p&gt;以后译系列会略作调整, 采取不完全译法, 我会尽量保证原文的意义不变的同时, 捡重点的来翻译和分享~哈&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.forbes.com/sites/dailymuse/2014/11/18/27-pre-written-templates-for-your-toughest-work-emails/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文&lt;/a&gt;很实用, 尤其是对于在工作中要经常写英文文档的人士以及广大的留美同志们…&lt;/p&gt;

&lt;p&gt;沟通总是一件不容易的事情.  &lt;a href=&quot;http://www.mckinsey.com/insights/high_tech_telecoms_internet/the_social_economy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2012年麦肯锡的一个报告&lt;/a&gt;就指出那些高效的办公人士往往也会花费28%的工作时间来处理邮件, 而如今这个数字还在增长之中.  而除了这种时间上的花销之外, 还有很多精神上的花费, 需要思考如何回复各种邮件, 各种求助, 拒绝甚至是搞砸了后自己要发的认错邮件.&lt;/p&gt;

&lt;p&gt;为了帮助你最大化的利用你的时间和精力, 下面这些现成的模板就能够帮助你尽快的梳理思绪, 万事开头难, 有了这些模板, 自然会加速很多啦. &lt;/p&gt;

&lt;p&gt;模板按照不同的类别分为”找工作”,”工作中”,以及”管理”三类, 下面一一列举一下:&lt;/p&gt;

&lt;h4&gt;找工作篇:&lt;/h4&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;当你需要通过你的社交圈来帮助你找一份工作时:&lt;/strong&gt; 通过自己的朋友圈来找工作是最为简单的一个事情了, 毕竟大家一起帮助你找比你一个人孤军奋战要好得多, 机会也会更多, 不是吗? 当然, 想要别人帮助你, 自然就需要尽可能让这个帮助过程越容易越好了.  [&lt;a href=&quot;https://www.themuse.com/advice/help-me-find-a-job-emails-to-send-to-your-network&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要一份来自梦想公司的内部推荐:&lt;/strong&gt; 如果你想要在一个梦寐以求的公司工作,  然后你恰巧发现你认识的一个朋友正好和公司里面的人认识. 那么让这个朋友去引荐你就是一个好的方式, 如果觉得直接询问不好意思的话, 就可以通过邮件来表述喽. [&lt;a href=&quot;https://www.themuse.com/advice/how-to-ask-for-a-referral-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你想要写一个完美的介绍信强调自己的技能:&lt;/strong&gt; 你的介绍信应该不只是列举自己的工作经历(那应该是你的简历所应该做的事情). 你要在其中突出你的技能, 告诉雇主自己的独特之处.  [&lt;a href=&quot;https://www.themuse.com/advice/the-perfect-cover-letter-template-to-show-off-your-skills&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;面试后的感谢信:&lt;/strong&gt; 面试后感谢信是个很好的习惯, 经常能发挥出意想不到的效果.  [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-write-an-interview-thankyou-note-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你想要寄送一封真的很突出的感谢信:&lt;/strong&gt; 如果你是去面试了自己的梦想公司, 你可能就需要好好准备一下自己的感谢信.  [ &lt;a href=&quot;https://www.themuse.com/advice/emails-that-land-jobs-the-best-way-to-shine-in-a-followup-note&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你一周或者两周前提交的申请, 想要确认下进度:&lt;/strong&gt; 一直听不到什么回信? 如果已经好几周了, 那么你就可以发个信问问喽 [&lt;a href=&quot;https://www.themuse.com/advice/how-to-follow-up-on-a-job-application-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要谢绝某个offer:&lt;/strong&gt; 如果你通过了面试, 但是你最后想要拒绝这个offer, 那么你也可以发一封解释信, 而不是冷冰冰的拒绝他人, 得给自己留些后路~ [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-gracefully-turn-down-a-job-offer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;h4&gt;工作篇&lt;/h4&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;当你不知道对方要的是什么时:&lt;/strong&gt; 有时候会出现这种情况, 对方邮件内容过于含蓄, 模糊, 你不知道对方想要什么, 所以这种情况下你可能需要回复对方来确认对方到底在说什么. [ &lt;a href=&quot;https://www.themuse.com/advice/the-4-most-ridiculous-emails-in-your-inboxand-how-to-answer-them&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要学会拒绝一些事情:&lt;/strong&gt; 说不是一个不容易的事情, 但是你又必须要学会这一点. [ &lt;a href=&quot;https://www.themuse.com/advice/just-say-no-7-canned-responses-to-use-at-work&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要学会对那些你真心想要帮助的人说不:&lt;/strong&gt; 当你对某个你十分想要帮助的人说不的时候,  会尤其的难.  但是你必须要学会这一点. [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-say-no-to-anyone-even-a-good-friend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;如果你收到了一个内容非常丰富(充斥着各种想法, 注意和任务清单)的邮件:&lt;/strong&gt; 对于这种内容满满的邮件, 你回复时可能要区分下来信的是你的老板还是同事, 但是核心都是你要确定以下任务的优先级. [ &lt;a href=&quot;https://www.themuse.com/advice/the-4-most-ridiculous-emails-in-your-inboxand-how-to-answer-them&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要更多的信息才能进行回复:&lt;/strong&gt; 当你收到一封邮件向你请教的问题是你需要更多的信息才能回答的, 那么你就可以回复邮件人来获取更多的信息. [&lt;br&gt;&lt;a href=&quot;https://www.themuse.com/advice/the-4-most-ridiculous-emails-in-your-inboxand-how-to-answer-them&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你的同事在给一个项目火上浇油的时候:&lt;/strong&gt; 如果你的同事是一个只会越帮越忙的人, 那么想到一个不伤害对方而又能让对方接受的方法是很难的, 你必须要意识到: 你这么做是为了大家的生活都能够更加轻松… 那么你就需要好好斟酌自己的用词了. [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-gently-tell-a-colleague-youre-overcomplicating-thislike-a-lot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;See the Script&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你工作中遇到的冲突, 而你需要告诉你的老板:&lt;/strong&gt; 和同事产生摩擦后立刻找老板不是个好习惯, 你更应该先尝试自己解决, 不给老板找麻烦. 但是如果问题一直不断, 你又解决不了,那么, 你最好还是找经理来解决一下比较好. 此时你可以用下面的模板. [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-talk-to-your-boss-about-a-coworker-you-hate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt; ]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你想要拒绝一个项目时:&lt;/strong&gt; 如果你被要求做一个不想要做的项目时, 你可以写信给老板, 当然, 肯定不能很直白的告诉老板”没门”… 这个时候你就可以用更好的方式来拒绝这些你觉得无价值又浪费时间的事情. [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-nicely-say-no-to-an-unwanted-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;离职时:&lt;/strong&gt; 辞呈是个很讲究的事情, 而且提出离职请求是个很难开口的事情, 下面的模板可以帮助你. [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-write-a-resignation-letter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;See the Script&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;h4&gt;管理篇&lt;/h4&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你想要邀请一个候选人来面试:&lt;/strong&gt; 无论是你是第一次通知人来面试, 还是说已经发烦了这类邮件, 你都可以用这个模板来提供一个非常贴心的邮件邀请. [  &lt;a href=&quot;https://www.themuse.com/advice/how-to-invite-a-candidate-to-interview-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;给一个候选人offer:&lt;/strong&gt; 想要给某人发个offer? 简单, 用下面的模板吧. [ &lt;a href=&quot;https://www.themuse.com/advice/sending-a-job-offer-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你想要拒绝一个候选人:&lt;/strong&gt; 这可能比较痛苦, 技巧是尽量简短直接… [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-turn-down-a-candidate-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;如果你搞砸了, 你需要告诉你的客户时:&lt;/strong&gt; 告知用户你搞砸了是个很难的事情… 但是它也会在另一方面展示你的诚实和解决问题的态度. 所以一定要慎重而且尽快的发送. [  &lt;a href=&quot;https://www.themuse.com/advice/crisis-communications-102-what-to-say-and-how-to-say-it&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要写一个LinkedIn推荐的时候–急:&lt;/strong&gt; 当你接到邀请要给某人在linkedIn上写推荐信时, 不要犹豫. 按照下面的模板填完就能保证你在5分钟内解决它. [  &lt;a href=&quot;https://www.themuse.com/advice/your-5minute-guide-to-writing-an-amazing-linkedin-recommendation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要一个引荐时:&lt;/strong&gt; 当你发现一个朋友或者同事认识一个你相当想认识的人时. 你如何合适的请求对方帮你做一个引荐呢? [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-ask-for-an-introduction-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你被请求做一个引荐时:&lt;/strong&gt; 当你被请求为他人做一个引荐时. 你不能立刻就介绍两人, 而应该确认一下被引荐的人是否同意, 那么你可以先发个邮件询问以下TA. [ &lt;a href=&quot;https://www.themuse.com/advice/the-double-optin-intro-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;如何做引荐呢:&lt;/strong&gt; 当两方都没问题后, 你就可以正式做引荐了. [ &lt;a href=&quot;https://www.themuse.com/advice/making-a-professional-introduction-an-email-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要解释你的所做时:&lt;/strong&gt; 无论是在网络还是在现实中,向一个新认识的人介绍自己的工作总是比较蛮烦的, 而想要做的有趣而又有效果的话, 就需要一些技巧了. 提示: 不要直白的说出你的头衔. [ &lt;a href=&quot;https://www.themuse.com/advice/how-to-tell-people-what-you-doand-be-remembered&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;你需要一个客户帮你引荐其他客户时:&lt;/strong&gt; 如果你有一些很好的客户, 并且希望他们能帮你引荐更多的客户, 那么下面的模板可以帮助你. [  &lt;a href=&quot;https://www.themuse.com/advice/the-best-way-to-win-new-clients&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看模板&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;邮件过多的时候:&lt;/strong&gt; 很多时候你没有时间处理那么多的邮件的, 但又不能放着不管的话, 你可以利用一些策略或者简短回复来拒绝他们. [  &lt;a href=&quot;https://www.themuse.com/advice/how-to-respond-to-informational-interview-requests-when-you-dont-have-time&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;See the Scripts&lt;/a&gt;]&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;这篇文章原载于:  &lt;a href=&quot;http://themuse.com/advice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Daily Muse&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>15 essential Sass mixins</title><loc>http://taoalpha.me/blog/2014/11/17/read-t-15-essential-sass-mixins/</loc><publish>2014-11-17T08:00:00.000Z</publish><summary>&lt;h4&gt;Source:&lt;/h4&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://www.developerdrive.com/2014/11/15-essential-sass-mixins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文: 15 essential Sass Mixins&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;h3&gt;15 个必备的Sass mixins&lt;/h3&gt;

&lt;p&gt;现在有很多成套的sass mixin库, 比如我个人很喜欢的 &lt;a href=&quot;http://bourbon.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bourbon&lt;/a&gt;和非常流行的 &lt;a href=&quot;http://compass-style.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Compass&lt;/a&gt;. 但是有时候, 实际上是多数情况下, 可能从中选一些结合自己的mixin才是最适合自己的.&lt;/p&gt;

&lt;p&gt;过于依赖一个工具总是不好的, 而且如果你想让sass的mixin通过@include来调用的话, 那么你就更应该试着写写自己的mixin了~&lt;/p&gt;

&lt;p&gt;sass的mixin的应用范围是非常广泛的, 而以下这15个mixin则是每个开发者都应该有的:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;box-sizing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;sass就像所有的预处理器一样, 能够很好的处理浏览器前缀的. 下面这个mixin是用于处理box-sizing这个前缀的:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin box-sizing($type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-box-sizing:$type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -moz-box-sizing:$type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; box-sizing:$type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @include box-sizing(border-box);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Opacity&lt;/strong&gt;&lt;br&gt;除了浏览器前缀之外, 还让人无比反感但又经常使用的就是透明度的问题了, 尤其是老版本的IE. 下面这个mixin则可以帮助你解决这个问题:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin opacity($opacity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    opacity: $opacity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filter: alpha(opacity=($opacity * 100));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法也很简单:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@include opacity(0.5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;column-width&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这又是一个mixin处理浏览器前缀的极好例子:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin column-width ( $value: 150px ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-column-width: $value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -moz-column-width: $value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  column-width: $value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include column-width(150px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;circle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一旦你为 &lt;em&gt;border-radius&lt;/em&gt;做了mixin后, 你就可以在其他的mixin中使用它了, 下例就是典型:&lt;/p&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;mixin&lt;/span&gt; circle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;border-radius&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include circle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;font-size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mixin对于边试边调是极好的, 下例的font-size的mixin就可以通过简单的修改rem来调整字体大小了, 而rem也仅会在支持它的浏览器中起作用.&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin font-size($size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; font-size:$size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; font-size: ($size / 16px) * 1rem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include font-size(14px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;box-shadow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样还是处理浏览器前缀问题的:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: #000000 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -webkit-box-shadow: $h $v $b $s $c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -moz-box-shadow: $h $v $b $s $c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  box-shadow: $h $v $b $s $c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;用法很简单:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include box-shadow(8px, 8px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;xPos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你还可以使用mixin来简化代码, 下面例子就是让你把元素沿横轴定位时使用:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin xPos($x)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transform:translateX($x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -moz-transform:translateX($x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -ms-transform:translateX($x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; transform:translateX($x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;用法很简单:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include xPos(50px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;vertical-align&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;纵向居中一个元素是很费劲的一件事, 不过下面这个mixin则可以给你很大的帮助:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;mixin&lt;/span&gt; vertical-align &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;tag&quot;&gt;relative&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;top&lt;/span&gt;: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-webkit-transform&lt;/span&gt;: &lt;span class=&quot;tag&quot;&gt;translateY&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;-50&lt;/span&gt;%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-ms-transform&lt;/span&gt;: &lt;span class=&quot;tag&quot;&gt;translateY&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;-50&lt;/span&gt;%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;tag&quot;&gt;translateY&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;-50&lt;/span&gt;%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;用法很简单:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include vertical-align();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;flexbox&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mixin在处理类似flexbox的问题时非常有效: .&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin flexbox&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; display:-webkit-box; // old&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; display:-moz-box; // old&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; display:-ms-flexbox; // ie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; display:-webkit-flex; // new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; display:flex; // new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;用法很简单:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include flexbox();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;flex&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一旦通过mixin设定 &lt;em&gt;display&lt;/em&gt; 属性为 &lt;em&gt;flex,&lt;/em&gt; 那么你就也需要一个mixin来设定 &lt;em&gt;flex&lt;/em&gt; 属性了:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin flex($values) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-box-flex: $values;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -moz-box-flex: $values;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -ms-flex: $values;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-flex: $values;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; flex: $values;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include flex(1, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;flex-order&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再加一个设定order的:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin flex-order($order)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-box-ordinal-group: $order; // old&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -moz-box-ordinal-group: $order; // old&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -ms-flex-order: $order; // ie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-order: $order; // new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; order: $order; // new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;用法很简单:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include flex-order(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;flex-direction&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mixin也是支持sass中的 &lt;em&gt;@if&lt;/em&gt;, &lt;em&gt;@else if,&lt;/em&gt; 以及 &lt;em&gt;@else&lt;/em&gt; 等语句的, 可以用来把2个不同的mixin合并到一起:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;flex-direction&lt;/span&gt;($direction)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; $direction == column&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-webkit-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:vertical&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-moz-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:vertical&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-ms-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:column&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-webkit-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:column&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:column&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-webkit-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:horizontal&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-moz-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:horizontal&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-ms-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:row&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;-webkit-flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:row&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:row&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include flex-direction(column);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;gradient&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码尽量要简单, 不过在必要的时候, mixin比较臃肿也是情有可原的.下面这个例子是为不同浏览器设定渐变效果的mixin, 只需要3个参数就能实现很好的渐变效果:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin gradient($start-color, $end-color, $orientation)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: $start-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @if $orientation == vertical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // vertical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -webkit-linear-gradient(top, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -o-linear-gradient(top, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -ms-linear-gradient(top, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: linear-gradient(to bottom, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @else if $orientation == horizontal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // horizontal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -webkit-linear-gradient(left, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -o-linear-gradient(left, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -ms-linear-gradient(left, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: linear-gradient(to right, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // radial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -o-radial-gradient(center, ellipse cover, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: -ms-radial-gradient(center, ellipse cover, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background: radial-gradient(ellipse at center, $start-color 0%,$end-color 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include gradient(#ff00ff, #ff00cc, vertical);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;ghost-button&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你想要紧随潮流的话, 你可以利用下面这个mixin来创建一个 &lt;a href=&quot;http://www.developerdrive.com/2014/10/how-to-make-a-ghost-button-in-css3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ghost button&lt;/a&gt;, 上面的例子是我们几周前做的. 通过 &lt;em&gt;&amp;amp;:hover&lt;/em&gt; 属性可以让我们指定其hover的状态:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@mixin ghost-button($font, $font-size, $font-color, $border-size, $border-color, $padding, $transition-speed, $hover-color)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; display:inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; text-decoration:none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; text-transform:uppercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; font-family: $font;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; font-size: $font-size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; color:$font-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; border:$border-size solid $border-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; padding:$padding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transition: color $transition-speed, background $transition-speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; transition: color $transition-speed, background $transition-speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;amp;amp;:hover&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; background:$border-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; color:$hover-color;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;用法很简单:&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include ghost-button(“Trebuchet”, 12px, #ffffff, 5px, #34dec6, 4px, 300ms, #000000 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;break-point&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过使用 &lt;/span&gt;&lt;em&gt;@content&lt;/em&gt; 语句, 我们甚至可以把内容也加入include中去, 在此基础上建立断点. 当然你不应该仅仅根据设备尺寸来设定断点, 不过下面的例子中还是简单的分为了PC和手机端:&lt;/p&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;break-point&lt;/span&gt;($point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; $point == desktop&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; only screen and (max-width:&lt;span class=&quot;number&quot;&gt;50em&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;content;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @else if $point == mobile&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; only screen and (max-width:&lt;span class=&quot;number&quot;&gt;20em&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;content;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用法很简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; margin:5em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @include break-point(mobile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; margin:2em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</summary></url><url><title>Success happens overnight(译)--很好的解释&quot;一夜成名&quot;的真相</title><loc>http://taoalpha.me/blog/2013/06/11/read-success-happens-overnight-translated-a-good-explanation-overnight-truth/</loc><publish>2013-06-11T09:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;From UXMYTH{Myth # 32} Success happens overnight–成功总是发生在一夜之间的&lt;/h4&gt;&lt;br&gt;苹果iPod的出现几乎立刻就把MP3播放器市场整了个天翻地覆,不是吗?亚马逊 也几乎是一下子改变了整个书类的销售方式,不是吗?好吧,世界上它们并没有那么夸张…虽然外界看起来好像是这样的.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;事实上,即便是对于互联网企业,也往往需要多年的努力才能获得一夜成名. 多年的辛苦工作,学习,试验以及一路上无数的失败.有时候甚至还要追逐一个几乎所有人都不喜欢的项目,比如当初随着Gmail开发的”Crazy Javascript stuff”.&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;那些看起来很写意的成功也往往花费了很长的时间去实现的.&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Amazon&lt;/strong&gt;:亚马逊成立于1994年,但是直到1996年才增加了书评的功能.一开始他们主要努力于获取用户.他们一直到1998年才增加了CDs类的商品,而直到2001年它们甚至都没有获得利润.而这一点很容易被人忽略,从而以为它们在此之前就获得了成功…&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;:Twitter的创始人Biz Stone在创立Twitter之前,已经在Blog,移动和社交等领域从事产品工作长达八年之久.他自己说:”时机,耐心,花费十年努力才最终让你似乎一夜成名”.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Apple iPod&lt;/strong&gt;:iPod的一夜成名背后有着三年的努力付出.”第一款的iPod是在2001年发布的,在一年内,苹果就改进了它的功效性而发布了第二版.但是直到2004年的第四版才开始出现脱销的盛况.”&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;37signals&lt;/strong&gt;:当我们五年前开始Basecamp的时候,我想我们只有不到2000人订阅我们的RSS.即便算上那些时不时只是过来看一下的用户也只多了几千人.所以猜测我们初始的用户不到5000人还是蛮合理的.从今天来看,它的规模是非常小的.但是当初那些用户也是我们花费了多年的时间建立起来的.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;Gmail&lt;/strong&gt;:我们是在2001年8月开始Gmail项目的.在很长的一段时间里,几乎所有人都不喜欢它…有不少的一些人认为我们应该关闭这个项目,或者重启这个项目,并将它作为一个企业级产品,再加上本地客户端软件,而不是所谓的crazy Javascript stuff.甚至到2004年4月1日,也就是开启2年半后,许多Google内部的人都预测它最终将走向灭亡…&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;AngryBirds&lt;/strong&gt;:愤怒的小鸟是一款非常成功的手机游戏.但是Rovio本身在做到这一点之前已经经历过30多款手机游戏了…&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;FedEx&lt;/strong&gt;:Frederick W.Smith在1965年的时候想到了这个快递寄送服务的主意,在1973年的时候成立了FedEx,当时第一天只有7个包裹,而在事业初期的26个月里,它就损失了2900万美金,但是仅仅到70年代末它就获得了成功.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;strong&gt;The Beatles&lt;/strong&gt;:披头士似乎是在1964年在Ed sullivan的表演中,突然出现并引爆了整个世界.但是它们其实从1957年就开始在Liverpool和Hamburg的小酒吧中玩音乐了,而且在他们获得了广大影响力的早期,它们第一个关键意义的成功,Sgt Peppers是在1967年发布的.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;…或者看下&lt;strong&gt;Tiger Woods&lt;/strong&gt;:虽然他是世界上最年轻的获得大师赛冠军的高尔夫选手,他也是花费了他整个人生在练习的.”他是一个少年天才,在两岁前就开始接触高尔夫了.”&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;还有更多的一些关于一夜成名的看法:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;一夜成名的概念对于任何希望长期并稳定可持续发展的企业而言都是一种误导甚至非常有害的.无论是何种商业,巨大的成功都是花费了多年的努力汗水才建立起来的,而且很少有反例(即很少有不劳而获的).”Spotify的联合创始人Daniel Ek说道.”一夜成名的背后往往有着长时间的努力积累.简单的总结就是:更努力的工作,把一件事做到更好,做得更快,让自己变得更加强壮,比之前更好,一小时接着一小时的,我们的工作从来没有结束的时候.”&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Seth Godin认为”一直以来,一些人说服自己去相信只有一种成功值得拥有,那就是’一夜成名’,那种如果你不在第一周内达到巅峰,那么你就等同于失败了.那种如果你的交互界面没有完美到跳出界面本身,或者你的新店没有在开张的时候门口就排了5000人的队,那么你就都已经输了”.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Barrie Bergman曾在他的ChangeThis宣言中这样写道”个人来说,我从来没遇到过一夜成名的好事.我曾经遇到过那些在很长的时间里都做得好好的人,只是突然被发现了而已.然后所有人都假设这些人都是无名氏,就那么突然一夜成名了.”&lt;/li&gt;&lt;br&gt;    &lt;li&gt;“一夜成名真的也就是一夜而已.” Jonathan Fields.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;当然,YouTube算是一个例外了.不过想想即便是他们也花费了五年的时间才开始盈利.&lt;/p&gt;
</summary></url><url><title>Reloading Python Modules</title><loc>http://taoalpha.me/blog/2015/02/16/read-reloading-python-modules/</loc><publish>2015-02-16T13:00:00.000Z</publish><summary>&lt;p&gt;&lt;a href=&quot;http://www.indelible.org/ink/python-reloading/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reloading Python Modules&lt;/a&gt;是一篇10年的老文了. 不过正好最近有看到Python中reload的相关介绍, 推荐了本文, 特地译来加深记忆以及分享给大家:&lt;/p&gt;

&lt;p&gt;Python众多优点中的一个就是可以对代码模块进行重载. 这就允许了开发者即便在Python的编译器运行状态下也可以修改Python代码了. 通常来说,  只需要把对应要重载的模块对象传入 &lt;a href=&quot;http://docs.python.org/3.1/library/imp.html#imp.reload&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;imp.reload()函数&lt;/a&gt;中即可(python 2.x中是通过直接&lt;a href=&quot;http://docs.python.org/2.6/library/functions.html#reload&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reload()&lt;/a&gt;来实现). &lt;/p&gt;

&lt;p&gt;不过这里面还有几个潜在的复杂问题.&lt;/p&gt;

&lt;p&gt;如果一个模块中引入了重载模块的一些symbols, 那么这些symbols不会自动重载. 比如, 我们有一个包含了常量 INTERVAL = 5的A模块, 而模块B则引入了这一常量, 比如通过(from A import INTERVAL). 那么如果我们修改INTERVAL = 10, 然后重载A模块的话, 在B模块中的INTERVAL以及所有基于INTERVAL的值都不会自动更新的.&lt;/p&gt;

&lt;p&gt;解决这一问题的办法就是我们要把B模块也重载一些. 但是要注意的是一定要在A模块重载完后重载B, 不然的话, B还是不能按照更新后的A来执行.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pyunit.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PyUnit&lt;/a&gt;则通过引入了一个 &lt;a href=&quot;http://pyunit.sourceforge.net/notes/reloading.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rollback&lt;br&gt;importer&lt;/a&gt;的方式来处理这类问题. 它会通过重写python的全局引入 &lt;strong&gt;import&lt;/strong&gt;而将引入规则”rolls back”到之前的状态.  这一方法在让编译器还原到前一测试点上非常便捷, 但是却不能算是一个解决实时代码重载的好方法, 因为那些为加载的模块还是不能自动的重载.&lt;/p&gt;

&lt;p&gt;下述介绍了一个很好的模块重载解决方法, 目的是让这一过程更加自动化, 更加透明以及可靠.&lt;/p&gt;

&lt;h4&gt;Recording Module Dependencies&lt;/h4&gt;

&lt;p&gt;在重载前一定要清楚各个模块之间依赖关系, 这样才能很好的设计重载的顺序. 理想的方法是建立一个模块之间的依赖关系图谱. 这可以通过引入一个自定义的import, 并且在程序常规代码部分引入它来实现.&lt;/p&gt;

&lt;p&gt;import builtins&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_baseimport = builtins.__import__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dependencies = dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_parent = None&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def _import(name, globals=None, locals=None, fromlist=None, level=-1):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Track our current parent module.  This is used to find our current&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # place in the dependency graph.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    global _parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    parent = _parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _parent = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Perform the actual import using the base import function.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m = _baseimport(name, globals, locals, fromlist, level)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # If we have a parent (i.e. this is a nested import) and this is a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # reloadable (source-based) module, we append ourself to our parent's&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # dependency list.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if parent is not None and hasattr(m, '__file__'):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l = _dependencies.setdefault(parent, &amp;amp;lt;input type=checkbox&amp;amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l.append(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Lastly, we always restore our global _parent pointer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _parent = parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;builtins.__import__ = _import&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里把内置的&lt;strong&gt;import&lt;/strong&gt;函数(在_baseimport类中)做了简单的修改. 它能够跟踪当前的母模块(依赖模块), 也就是进行import操作的模块. 而最顶层的模块自然是没有依赖模块的.&lt;/p&gt;

&lt;p&gt;而一旦一个模块被成功的引入后, 它就会自动的加入到依赖模块的依赖列表中去. 你可能注意到上述代码中只是关注了那些基于文件的模块 内置的那些扩展则都被忽略了, 这是因为内置的模块是不能够被重载的.&lt;/p&gt;

&lt;p&gt;这就给我们了一个完整的模块依赖关系链, 我们就能够轻松的获取到某个模块相关的所有依赖模块了:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def get_dependencies(m):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;Get the dependency list for the given imported module.&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _dependencies.get(m.__name__, None)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;Reloading Modules&lt;/h4&gt;

&lt;p&gt;在知道了相关的依赖模块关系后, 我么就可以建立一个依赖模块重载路线了:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import imp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def _reload(m, visited):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;Internal module reloading routine.&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = m.__name__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Start by adding this module to our set of visited modules.  We use&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # this set to avoid running into infinite recursion while walking the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # module dependency graph.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    visited.add(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Start by reloading all of our dependencies in reverse order.  Note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # that we recursively call ourself to perform the nested reloads.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deps = _dependencies.get(name, None)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if deps is not None:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for dep in reversed(deps):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if dep not in visited:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _reload(dep, visited)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Clear this module's list of dependencies.  Some import statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # may have been removed.  We'll rebuild the dependency list as part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # of the reload operation below.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        del _dependencies[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    except KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Because we're triggering a reload and not an import, the module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # itself won't run through our _import hook.  In order for this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # module's dependencies (which will pass through the _import hook) to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # be associated with this module, we need to set our parent pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # beforehand.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    global _parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _parent = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Perform the reload operation.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imp.reload(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # Reset our parent pointer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _parent = None&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def reload(m):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;Reload an existing module.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Any known dependencies of the module will also be reloaded.&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _reload(m, set())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述reload()函数通过递归方式去按照相反顺序依次reload所有和这一模块相关的模块, 而最后再reload以下自身. 它通过&lt;strong&gt;visited&lt;/strong&gt;属性的设置来避免出现无限死循环. 同时在reload的时候它会自动重建模块的依赖关系, 来确保他们能精确的反映出模块的更新状态.&lt;/p&gt;

&lt;h4&gt;Custom Reloading Behavior&lt;/h4&gt;

&lt;p&gt;有时候reload模块的时候可能需要执行一些其他的操作或者逻辑. 比如, 重新初始化一些预加载的状态. 而为了支持这一点, 我们需要让我们的reload函数去寻找一个模块级函数&lt;strong&gt;reload&lt;/strong&gt;(). 这一函数可以在一个成功的重载后被调用, 且能保留重载前的状态.&lt;/p&gt;

&lt;p&gt;这种情况下, 我们就不能简单的直接调用imp.reload()了:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# If the module has a __reload__(d) function, we'll call it with a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# copy of the original module's dictionary after it's been reloaded.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;callback = getattr(m, '__reload__', None)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if callback is not None:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d = _deepcopy_module_dict(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imp.reload(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    callback(d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imp.reload(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;_deepcopy_module_dict()&lt;/code&gt;的作用是帮助我们避免&lt;code&gt;deepcopy()&lt;/code&gt;一些不支持或者不需要的数据.&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def _deepcopy_module_dict(m):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;Make a deep copy of a module's dictionary.&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    import copy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # We can't deepcopy() everything in the module's dictionary because&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # some items, such as '__builtins__', aren't deepcopy()-able.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # To work around that, we start by making a shallow copy of the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # dictionary, giving us a way to remove keys before performing the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # deep copy.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d = vars(m).copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    del d['__builtins__']&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return copy.deepcopy(d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;Monitoring Module Changes&lt;/h4&gt;

&lt;p&gt;对于重载而言, 能够自动检测模块的变化而进行自动重载那是最好不过了. 那么, 实际上我们确实有很多方式来检测一个文件的变化情况. 这里使用的是一个后台线程以及 &lt;a href=&quot;http://docs.python.org/library/os.html#os.stat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stat()&lt;/a&gt;这个系统函数的调用来检测文件上一次修改时间, 从而确定其更新状态. 一旦检测到一个文件被更新, 那么就会把这一文件名加入到一个 &lt;a href=&quot;http://docs.python.org/library/queue.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;thread-safe queue&lt;/a&gt;&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import os, sys, time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import queue, threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_win = (sys.platform == 'win32')&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ModuleMonitor(threading.Thread):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;Monitor module source file changes&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self, interval=1):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        threading.Thread.__init__(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.daemon = True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.mtimes = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.queue = queue.Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.interval = interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def run(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while True:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self._scan()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.sleep(self.interval)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def _scan(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # We're only interested in file-based modules (not C extensions).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        modules = [m.__file__ for m in sys.modules.values()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if '__file__' in m.__dict__]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for filename in modules:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # We're only interested in the source .py files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if filename.endswith('.pyc') or filename.endswith('.pyo'):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                filename = filename[:-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # stat() the file.  This might fail if the module is part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # of a bundle (.egg).  We simply skip those modules because&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # they're not really reloadable anyway.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stat = os.stat(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            except OSError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # Check the modification time.  We need to adjust on Windows.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mtime = stat.st_mtime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if _win32:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mtime -= stat.st_ctime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # Check if we've seen this file before.  We don't need to do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # anything for new files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if filename in self.mtimes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                # If this file's mtime has changed, queue it for reload.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if mtime != self.mtimes[filename]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    self.queue.put(filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # Record this filename's current mtime.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.mtimes[filename] = mtime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外还可以通过调用原生操作系统的相关函数, 比如 &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa365261%28VS.85%29.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Win32 Directory Change Notification&lt;/a&gt;之类的函数.&lt;/p&gt;

&lt;p&gt;加上我们的reloader()部分:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import imp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import reloader&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Reloader(object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.monitor = ModuleMonitor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.monitor.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def poll(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filenames = set()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while not self.monitor.queue.empty():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                filenames.add(self.monitor.queue.get_nowait())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            except queue.Empty:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if filenames:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self._reload(filenames)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def _reload(self, filenames):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        modules = [m for m in sys.modules.values()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if getattr(m, '__file__', None) in filenames]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for mod in modules:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reloader.reload(mod)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这一模型中, reloader需要循环执行来检测文件的状态, 从而能够计时的响应. 最简单的则是:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r = Reloader()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while True:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r.poll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要看源代码的可以前往:  &lt;a href=&quot;https://github.com/jparise/python-reloader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;complete source code&lt;/a&gt; 本身代码也发布到Python Package Index中, 名称为  &lt;a href=&quot;http://pypi.python.org/pypi/reloader/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reloader&lt;/a&gt;&lt;/p&gt;
</summary></url><url><title>Google又做了一件大好事:干掉了烦人的识别型验证码!</title><loc>http://taoalpha.me/blog/2014/12/04/read-read-google-did-a-good-thing-kill-annoying-type-identification-code/</loc><publish>2014-12-04T14:00:00.000Z</publish><summary>&lt;p&gt;译系列正式转为读系列, 以后都为阅读后自己整理总结成文~ 吸收知识哈哈&lt;/p&gt;
&lt;p&gt;伟大的Google又做了一件大好事啊!! 它干掉了烦人的识别型验证码!!! &lt;a href=&quot;http://venturebeat.com/2014/12/03/google-boils-down-the-captcha-to-a-simple-checkbox-to-prove-youre-not-a-bot/#ref=muzli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文&lt;/a&gt;简单介绍了一下这一新的验证码.&lt;/p&gt;

&lt;p&gt;对于验证码, 大家都不会陌生, 无论你是否经常上网, 是否买过东西, 是否看过网络视频, 你一定遇到过验证码!!! 而如今最为常见的几种验证码形式分别是:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;Captcha(Completely Automated Public Turing test to tell Computers and Humans Apart):&lt;/strong&gt; 图片识别, 通过识别一些或模糊或清晰的图片中的文字信息来达到验证”我不是机器人”的效果;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;reCAPTCHA:&lt;/strong&gt; 同样来自Google, 用Captcha的方式做有意义的事情. 其和Captcha的表现形式基本是一致的, 只不过里面的图片不再是预设好的人工生成的那种故意扭曲或者加干扰后的图片, 而是Google的图书扫描项目中那些OCR无法识别的单词(多数是手写体或者不够清晰), 这样你每次输入验证码, 还能帮助Google的Books做的更好哦~(至于如果它自己都不识别, 那么怎么判断输入是否正确, 则是因为通常reCaptcha会提供两个词组, 一个是已知的, 一个是未知的, 所以呢, 在已知的正确的情况下, 未知的正确性就有了一定的保证, 而结合大量的输入, 那么最中获得的结果的正确概率就越高:所以, 面对一些很少有人输入过的验证码, 其实你很有可能输错了部分, 但也通过了~哈); 而继图书项目后, Google又在reCaptcha项目中加入了Google街景的路牌, 街道名识别~ 所以有时候你会遇到那种拍的很模糊的数字图~&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;Puzzle CAPTCHA:&lt;/strong&gt; 在识别类验证码之后, 又出现了这种拼图类的验证码, 操作方式有很多, 有的是图片切分打乱, 需要你重新排列成完整的图片, 有的则是有一块图片从整个图片中脱离出来, 需要你移动回去这种~ 这种有时候也叫做Draggable Captcha~&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;strong&gt;Quiz Captcha:&lt;/strong&gt; 这种则属于问答类的验证码了, 有的时候是一些显而易见的数学计算题或者找规律题, 有的时候则是一些基本常识, 还有些时候甚至是当前往网站名称这类有着明显答案提示的问题~&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;当然, 除了上述的这些, 还有着很多的验证码类型, 但是无论怎样, 为了实现区分人和机器的目的, 都是需要一定操作成本的, 这也是为什么大家很讨厌验证码的原因~&lt;/p&gt;

&lt;p&gt;但是! Google这次新的reCaptcha:No CAPTCHA reCAPTCHA, 就改变了这一点, 它完全干掉了现有的这种繁琐的验证码, 取而代之的是一个简单的checkbox!!! 你只要勾选了这个”我不是机器人”边上的checkbox, 就算是通过了验证~ 似乎感觉这不是进步而是退步? 这样怎么能够实现Captcha的区分人和机器人的目的呢?&lt;/p&gt;

&lt;p&gt;其实这个简单的checkbox里面有着非常复杂的机制, 它会通过你验证码勾选前后的整个表现来判断是否是一个机器人, 一旦有所怀疑, 甚至可以选择变回旧有的那种图形或者其他传统类型的验证码来再次确认. 这些都是基于 &lt;a href=&quot;http://venturebeat.com/2014/09/06/google-shows-its-deep-learning-systems-are-doing-just-fine-thank-you-very-much/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;人工智能方面&lt;/a&gt;很深入的研究和成果.&lt;/p&gt;

&lt;p&gt;目前这种新的Captcha的API已经开放给很多大客户了, 最近在开始接受网站主们的申请了~ 而那些大客户的反馈来看, 其效果是非常不错的: 核心的anti-spam质量虽然文章中没说, 但应该不错, 文章中重点提到了这个新Captcha的一个优点就是可以让用户更快的登录访问网站.&lt;/p&gt;

&lt;p&gt;有兴趣的可以前往&lt;a href=&quot;https://developers.google.com/recaptcha/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google reCaptcha&lt;/a&gt;了解更多详情~&lt;/p&gt;
</summary></url><url><title>网页设计简史</title><loc>http://taoalpha.me/blog/2014/12/05/read-read-a-brief-history-of-web-design/</loc><publish>2014-12-05T09:00:00.000Z</publish><summary>&lt;p&gt;&lt;a href=&quot;http://blog.froont.com/brief-history-of-web-design-for-designers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文&lt;/a&gt;针对网页设计的历史做了简单的介绍, 配上了很多动态图片作为示意, 可以说很简练但是也很完整, 值得一读.&lt;/p&gt;

&lt;p&gt;作者最开始应该是对设计和代码实现都比较有兴趣的, 但随着代码越来越复杂, 实现一个设计的方法越来越多, 但是即便这么多的方法, 都不能保证适用于所有浏览器. 于是作者慢慢对代码层失去了兴趣, 专心开始搞设计了~ 所以本文开篇, 作者提出了一个很好的问题:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;设计和代码部分是如何分开的呢? 而且越分越远?&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;所以相对于设计师该不该学代码的问题, 本文研究的则是设计和代码是如何在网页设计这条路上分道扬镳的呢?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1989–网页设计最黑暗的时期&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/01-Tab_keys-1.gif&quot; alt=&quot;Hello, World!&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以说最开始的网页设计是非常不明朗的, 那个时候屏幕都是黑色背景的命令行状态, 再加上非常有限的屏幕尺寸.  可以说, 那个时候所谓设计能依赖的东西只有那些符号和制表符了… 真可以说那个时候就不存在什么网页设计…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1995 - 网页设计的开端-表格设计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/02-Tables-1.gif&quot; alt=&quot;Table-based design&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;随着可以展示图片的浏览器的诞生, 宣告了网页设计的正式开始. 而在当时, 已经存在于html中的table元素就成为了设计师用来发挥自己设计天赋的绝佳工具. 当时有本著名的书 &lt;a href=&quot;http://www.amazon.com/Creating-Killer-Sites-David-Siegel/dp/1568304331&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating Killer Sites&lt;/a&gt;就是介绍如何用Table布局的. 但是Table的设定本身并不是为了进行页面的设计布局, 而是为了展示结构化的数据, 所以存在了很多的问题, 比如维护这种碎片化的结构是个相当费事的事情… 但是, 因为各种原因, 这种设计方式依然存在流行了很长的一段时间~ 而在这一时期, 切图设计也逐渐变热. 设计师们设计出各种酷炫的布局, 而开发者则将他们拆分成一个个小块然后再拼接在一起. 另一方面, 表格又确实有着一些非常棒的属性: 比如垂直居中. 这些优势和我们后面会说到的grid布局设计极为相像.  但也正因为这种布局结构的麻烦和痛苦, 所以很多开发者们都很不喜欢进行前端编程…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1995-JS的出现&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/03-Javascript-1.gif&quot; alt=&quot;JavaScript&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;JS可谓是对HTML的很好补充. 比如说, 如果我们需要一个弹出窗口, 想要动态的对某些东西进行排序? 那么JS就是最好的选择了.  问题在于JS是基于网页基础结构之上的, 所以它不能和web资源一起载入, 而需要分开进行载入.  所以有种像是html的补丁一样~&lt;/p&gt;

&lt;p&gt;如今我们多数情况下能用CSS实现的基本不用JS实现, 但是当时JS可谓是网页设计的一大救星啊. 即便如今, jQuery此类的JS库依然是前端编程和后端编程(node.js)的热门组件.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1996-设计的黄金时期&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/04-Flash-1.gif&quot; alt=&quot;Flash in web design&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;为了打破当时网页设计的限制, 出现了一个前所未有的工具, 而使用它, 设计师们的工作变的无比的自由! 任意的形状, 布局, 动画, 交互, 字体, 随便搞. 这个工具就是–&lt;strong&gt;Flash&lt;/strong&gt;. 把需要的资源打包到一起, 然后交给浏览器去展示就行了. 这就意味着只要用户拥有最新的flash插件, 那么只需要等待一段载入时间, 那么它就能呈现出非常绚烂的结果. 这可以说是网页设计的黄金时期, 出现了无数的飞溅式设计, 介绍动画, 以及各式各样的交互效果. 但不幸的是, 它的不够开放或者说对搜索引擎非常不友好以及处理本身耗费的资源过多等特性, 都导致其终将被舍弃. 而随着Apple决定在他们的iPhone上直接抛弃了Flash的支持, Flash就开始走向了衰亡(至少对网页设计来说是的).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1998-CSS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/05-CSS-2.gif&quot; alt=&quot;CSS&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;CSS大概和Flash同时期出现的, 作为一个解决设计布局的更好的方法而出现在设计师面前.  基本的想法就是把网页内容层和展示样式层分离开. 所以外观展现和样式类型都由CSS来决定, 而内容则由HTML决定. 第一版的CSS当然远没有如今的这么灵活, 丰富, 但是这还不是当时最大的问题. 当时最重要的问题是各大浏览器的支持率. CSS花费了几年的时间才让很多浏览器开始支持它, 而且最初还有着很多各式各样的问题存在.  而在当时, 一个浏览器更新支持一个新功能, 而其他浏览器还没有支持这种让开发者痛苦至死的事情(即便到如今依然有这个问题…尤其是在国内: IE6,7..永恒的恨啊..)已经开始出现. &lt;/p&gt;

&lt;p&gt;值得说明的是: CSS并不是一种编程语言, 它更像一种声明性语言. 我们可以讨论设计师是不是需要编程, 但是设计师需不需要了解CSS的工作原理则是完全不需要讨论的事情.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2007-移动端的升起-网格布局和框架的时代&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/06-Grids-1.gif&quot; alt=&quot;Grids and frameworks&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;在移动端浏览网页对当时的设计师而言是个非常大的挑战. 不说布局, 单就是它引发的内容问题(content-parity)就是个挺麻烦的事情: 在小屏幕下展示时和大屏一样呢? 还是要精简一些呢? 在小屏幕上如何投放那些晃眼的广告呢? 速度也是个问题, 毕竟加载资源过多的话网费就够你喝一壶的了. 首先提出的解决方案是网格布局法. 而经过几次迭代厚, 960 grid system成功的普及开来, 而这种12列的布局方式页逐渐成为设计师们日常使用的布局结构了.  而下一步解决的问题就是常用的各个组件, 比如表格, 导航, 按钮这些元素的复用. 基本的想法是, 制作一个元素的库来存储这些代码. 而最后的胜出者就是如今大名鼎鼎的Bootstrap和Foundation了~  而随着网页和app的界限逐渐消失, 这些框架变的更加流行. 但是所有的设计看起来都是蛮像的, 而设计师如果完全不理解代码工作的原理那么也是无法发现他们的区别的.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010-响应式设计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/07-Responsive-3.gif&quot; alt=&quot;Responsive web design&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ethan Marcotte决心改变当时的设计方式, 想要用同一套内容但是不同的布局来自动的适应不同的屏幕尺寸(厉害啊!), 于是, 响应式布局就出现了. 从技术上, 还是使用HTML和CSS, 所以倒也不是一个新的技术. 但是如今对响应式依然存在了很多的误解. 对于一个设计师而言, 响应式往往意味着要进行多布局的设计. 对于客户而言, 就是单纯的: 这个网站在手机上也能看的比较舒服. 对开发者而言, 则设计了很多方面, 包括图像的展示, 下载速度, 是否移动居先等等问题. 而这里最大的好处就是内容, 它能够保证网站内容的完整性和一致性. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;其实响应式的问题目前也主要集中在加载层面, 毕竟响应式会导致在手机上也会加载几乎全套的资源, 这必然会导致加载速度受到影响. 而包含了各个尺寸样式的css文件也会导致加载速度的变慢~ 不过! 随着技术手段的提升和网络速度的提高, 这些问题想来也不会是什么大的问题吧.&lt;br&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010-扁平化时代&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/08-Flat-2.gif&quot; alt=&quot;Flat design&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;为不同布局状态设计是很费力的一件事, 而简化设计流程, 去掉那些烦人的阴影效果以及仿真化的细节, 自然能够让设计变的容易很多. 这就是扁平化设计, 其极大的简化了元素的细节, 重回设计的根本–为内容服务.  而那些酷炫的按钮则被图标取代, 使我们能够使用位图以及icon字体. 有趣的是, 这在一定程度上和网页的起始阶段很像, 不是吗? 果然是回归根本啊…哈哈&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2014-光明的未来&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.froont.com/content/images/2014/12/09-Future-1.gif&quot; alt=&quot;The future of the web design&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;网页设计说白了就是设计师制作的视觉效果在浏览器中呈现罢了. 想象以下, 未来设计们可能只需要拖动下元素, 就能够获得一个简洁的代码文件, 而不在需要手写代码, 这多给力啊. 哪怕不能做到那些酷炫的效果, 仅仅单纯的静态页面和简单的交互也是相当不错的事情呢. 再想象以下未来开发者们再也不用担忧浏览器兼容的问题, 而只需要集中精力解决那些真正的问题, 那TM该是多美好的未来啊…&lt;/p&gt;

&lt;p&gt;如今技术上已经出现了一些光明未来的曙光: 比如CSS中新引入的一些属性, vh, vw就容许布局上有更好的灵活性. Flexbox则帮助更好的布局, 不再需要那么多的代码, 只用一行就能制作很棒的布局了. 而那些现成的做好的各个组件, 比如注册登录等等, 都让网页设计变的更加容易更加流畅. &lt;/p&gt;
</summary></url><url><title>Knowledge vs Intelligence</title><loc>http://taoalpha.me/blog/2014/11/21/read-knowledge-vs-intelligence/</loc><publish>2014-11-21T10:00:00.000Z</publish><summary>&lt;p&gt;大约一周前, 我在开发我一个小产品的时候遇到了一个很严重的问题. 我花了好几个晚上的时间去解决这个问题, 但是依然没有什么进展, 这让我很沮丧.&lt;/p&gt;

&lt;p&gt;之后的一个晚上, 我正在和 &lt;a href=&quot;https://twitter.com/olivierlacan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Olivier Lacan&lt;/a&gt;视讯, 我们讨论了这个问题. 因为他是我的一个非常好的朋友, 所以他建议我把我的桌面分享给他来让他看看. 我正在研究 &lt;a href=&quot;http://laravel.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel&lt;/a&gt;一个全新的PHP的框架, 也是Olivier从来没用过的一个框架(当然其实他连PHP都不用的). 但是他很聪明而且是一个很伟大的开发者, 所以我很愉快的接受了他的要求.&lt;/p&gt;

&lt;p&gt;我们开始梳理整个代码库, 我带着他过了一遍整个应用和框架,  他则见或提出一些内部系统的尖锐问题. 因为Olivier并不是非常熟悉Laravel, 所以他问的问题就和我不同, 而这些问题则指向了一个有趣的部分, 而这个部分正是我一个人想的时候没有注意到的. 而在一个小时的debug后, 我们找到问题的根源并且解决了它.&lt;/p&gt;

&lt;p&gt;我之前曾谈论过有关 &lt;a href=&quot;http://acolangelo.com/blog/switch-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“编码交换”&lt;/a&gt;的话题, 就是把自己的电脑与他人交换, 然后尝试解决对方的问题–但是这次则是另一个问题. 这是一个类似 &lt;a href=&quot;http://en.wikipedia.org/wiki/Rubber_duck_debugging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传统的 “橡皮鸭”&lt;/a&gt;的问题, 不同的是有一个可信任的聪明的朋友.&lt;/p&gt;

&lt;p&gt;这里的关键在于知识和智慧之间的区别. 知识是关于技能, 以及经历和从中获取的信息的集合. 智慧则是应用知识的能力.  一个人缺乏某个领域的知识不代表他们不能应用自己的智慧来帮助解决对应的问题.&lt;/p&gt;

&lt;p&gt;知识是很好的, 但是它总会随着技术和科技的 &lt;a href=&quot;http://alistapart.com/blog/post/overwhelmed-by-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;兴起没落&lt;/a&gt;而渐渐消失掉. 但是智慧则不会. 它跨越了技术和科技之间的壁垒, 这就是最大的区别了.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://alistapart.com/blog/post/knowledge-vs-intelligence&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Knowledge vs Intelligence&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;
</summary></url><url><title>Introduction To Usability(译)</title><loc>http://taoalpha.me/blog/2013/06/13/read-introduction-to-usability-translated/</loc><publish>2013-06-13T09:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Introduction To Usability&lt;/h4&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;如何定义可用性?如何,什么时间,什么地方来提升?为什么你要关注可用性?这是一个关于核心的可用性概念的介绍以及回答一些基本的问题.&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What–Definition Of Usability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可用性是一个表征质量的属性,用以描述用户界面在使用性上的难易程度.”Usability”这个词本身也有用以提升设计过程中易用性的方法的含义.&lt;/p&gt;
&lt;p&gt;可用性主要通过以下5个部分的特点组成:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;易学性:对于用户而言,第一次使用时完成基础任务的难易程度?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;高效性:一旦用户学会了之后,他们完成任务的效率有多高?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;记忆性:当用户在一段时间的不用后再次返回时,他们重新熟练的容易性如何?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;错误率:用户会犯多少错误,这些错误的严重程度如何,以及他们从这些错误中脱身的难易程度?&lt;/li&gt;&lt;br&gt;    &lt;li&gt;满意度:用户使用这一设计的满意度如何?&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;此外还有很多重要的品质属性.其中比较关键的一个就是实用性,表征的是设计的功能性:它所做的都是用户所需的吗?&lt;/p&gt;
&lt;p&gt;可用性和实用性都是同等重要的,而且它们一起决定了设计是否有用:如果某物很容易但却不是你想要的也是没啥意义的. 虽然对于幻想那种可以做任何你想做的事情的系统也不见得是好的,但是如果你的交互界面很难用的话,你是不可能做到这一点的.为了研究一个设计的实用性,你可以用提升易用性同样的研究方法.&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;Definition: Utility—它是否提供了你所需要的功能;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Definition: Usability–这些功能用起来的难度和满意度如何.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;Definition: &lt;strong&gt;Useful = Usability + Utility&lt;/strong&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;strong&gt;Why Usability is Important(为什么可用性这么重要)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在网络上,可用性是一个必须要考虑的生存条件.如果一个网站非常难用,人们就会离开.如果一个公司的主页不能描述清楚公司提供的产品或者服务,用户可以做什么等,人们也会离开.如果用户在一个网站迷路了,他们就会离开.如果一个网站的信息很难阅读或者无法回答用户的关键问题,他们也会离开. 注意到一个模式了吗?根本不存在这样的情况:用户费劲的阅读说明书或者花费很多时间去理解一个界面.外面还有无数的网站等待用户去选择,离开是用户在感到难用时的第一选择.&lt;/p&gt;
&lt;p&gt;电子商务的第一条定律就是&lt;em&gt;如果用户无法找到产品,他们就无法购买这个产品.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于企业内部网络,可用性就是一个关乎员工生产力的事情了.用户如果花费太多的时间在内部网络或者纠结于思考那些困难的指令,那么也就等同于在浪费着你付给他们工作的薪水了.&lt;/p&gt;
&lt;p&gt;目前最佳的财政预算是将设计项目预算的10%留给可用性上.平均来讲,这些大概是一个网站期望的质量标准的2倍左右,而且大概是一个内部网络质量标准花费的两倍略低一些.对于软件或者实际的物理商品,强调设计过程的易用性,所致的提升效果会相对较小,但是依然很显著.&lt;/p&gt;
&lt;p&gt;对于内部的设计项目,应该考虑将培训预算砍掉一半,而将易用性方面的预算加倍,以及加倍做事的员工的时薪.对于外部的设计,则应该考虑加倍销售的预算以及注册用户和用户引导的预算,同时加倍那些对你的设计项目有提升动机的预期计划.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Improve Usability(如何提升易用性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在研究易用性上有很多方法,但是最主要最基础最有用的就是用户测试了,它包含了以下三个部分:&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;找到一些典型的用户,比如电子商务网站的消费者或者内部网络的员工(在后者的情况下,他们应该是在你们部门之外工作的);&lt;/li&gt;&lt;br&gt;    &lt;li&gt;让用户实施一些有代表性的任务;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;观察用户做了什么,那些地方成功了,哪些地方他们遇到了问题,而且闭上你的嘴,而让用户讲出他们想说的;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;逐一分别的测试用户,让他们独立解决任何问题是很重要的,.如果你帮助他们或者把他们的注意力指引向屏幕的任何部分,你都让实验结果受到了污染;&lt;/p&gt;
&lt;p&gt;为确定一个设计最重要的易用性问题,测试5个用户就基本足够.预期去运行一个大型的,昂贵的项目研究,还不如使用这些资源进行一个小规模的测试,并且逐一重新审视你的设计,这样你才能在确定问题后修正你的易用性瑕疵.迭代设计是一个而方法来提升你的体验质量.你和用户测试的版本和界面设计越多,效果越好.&lt;/p&gt;
&lt;p&gt;用户测试和焦点小组是不同的,焦点小组是一种相对较差的方式来评估设计的易用性.焦点小组常用于市场调研,但是为了评价交互设计,你必须足够近的观察一个用户利用你的设计界面去完成一个任务.通过聆听用户所说的会有误导:你必须去亲自观察他们真正做的是什么.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When to Work on Usability(什么时候注意易用性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;易用性在设计过程的每一步中都占据一定的地位.对于多个研究的需要也是我推荐把个人独立的研究尽快而又便宜的完成的原因之一:&lt;/p&gt;
&lt;p&gt;&lt;ol&gt;&lt;br&gt;    &lt;li&gt;在开始一个新的设计之前,测试旧有的设计来确定其中好的部分,这样你就可以保留这些部分并加以强化,同时知道哪些对用户造成困扰的部分.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;除非你在一个内部网络中工作,测试你竞争者的设计可以廉价的获取到一组相对较好的设计界面,而且这些都和你的设计有着很多共同的特性.(如果你工作于一个内部网络,那么可以通过阅读内部的设计年刊来学习其他的设计).&lt;/li&gt;&lt;br&gt;    &lt;li&gt;针对用户在他们的日常生活中是如何表现的做一个实地的考察;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;对一个或者更多的新设计注意制作纸质原型并加以测试.你投资在这些设计的时间越少,效果越好,因为你需要根据测试结果来修改他们(就是不用花费太多的时间去做特别精致的原型)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;通过多次迭代后,对最优秀的那个设计不断修改来完善它,逐渐的从低质量的原型到高质量的电子原型展示.每一次迭代都需要测试.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;观察那些和建立可用性规则先关的设计,无论是你早期的研究还是公开的研究.&lt;/li&gt;&lt;br&gt;    &lt;li&gt;一旦你决定了并且开始着手最终的设计,再次测试一次.一些微小的可用性问题经常在实施的时候出现.&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;&lt;br&gt;不要抵制用户测试,除非你已经有了一个完成的设计了.如果你已经有了一个成品,那么再去修复绝大多数测试没有覆盖到的关键问题就会变得不可能了.像这一类的问题大多是比较偏向结构方面的,而修复他们将会需要对主要部分的重构.&lt;/p&gt;
&lt;p&gt;想要获得一个高质量的用户体验唯一的方法就是在设计的早期就开始用户测试,并一直持续的在接下来的每一步实施它.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where to Test(在哪里测试)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你每周至少实施一次用户测试,那么专门建立一个可用性实验室就有必要的了.但对绝大多数公司,在一个会议室或者办公室里进行一次测试就已经不错了,只要你关上门隔开干扰就可以了.重点在于你要有真实的用户,并且可以在他们测试的过程中陪坐一旁.你唯一需要的设备就是一个笔记本.&lt;/p&gt;
</summary></url><url><title>How Users Read on the Web(译)</title><loc>http://taoalpha.me/blog/2013/06/04/read-how-users-read-on-the-web-translation/</loc><publish>2013-06-04T10:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;em&gt;本文主要是针对网页上的文字排版对于用户阅读的影响,列举了三种不同的处理方式以及混合情况下对网页可用性的提升效果.&lt;/em&gt;&lt;/h4&gt;&lt;br&gt;他们从不阅读。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;人们极少逐字逐句地阅读网页上的内容，他们只是扫视页面，选取某些字词语句来阅读。 在关于人们如何阅读网站的研究中，我们发现大概79%的测试用户对于任何他们进入的页面都是采用扫视的方式阅读，只有16%的用户 是逐字阅读的。(更新：一个新的研究发现用户在阅读email时比阅读网站更加散漫。)&lt;/p&gt;
&lt;p&gt;所以，网页需要提供可以扫视的文本信息，利用：&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;高亮关键字(超文本链接是高亮的一种形式，字体和颜色变化也是高亮的形式)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;有意义的子标题(不算作很明智的选择)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;符号列表&lt;/li&gt;&lt;br&gt;    &lt;li&gt;一个段落一个主题(如果用户没有段落中前几个词所吸引的话,那么他们会跳过剩下的所有)&lt;/li&gt;&lt;br&gt;    &lt;li&gt;倒金字塔风格,先说结论&lt;/li&gt;&lt;br&gt;    &lt;li&gt;相比传统的写作而言,字数至少要减少一半&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;我们发现可信性对于网页用户而言是非常重要的,因为对于网页信息背后的作者以及网页是否可以信任是不清楚的.可信性可以通过高质量的图片/优秀的写作以及向外的超文本连接来提高.外链表现出作者已经做完了该做的,并不担心用户访问别的站点.&lt;/p&gt;
&lt;p&gt;用户厌恶”商业感”,通过主观的自我夸赞和宣言(有史以来最经典的)来提升写作风格在当下的网页中已经不再使用了.网页用户非常忙碌的,他们想要得到最直接的结果.还有,如果用户清晰的看到网站在夸大,可信性会一落千丈的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;衡量提高网页写作风格带来的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为衡量一些我们已经确认的内容指南所带来的影响,我们制作了想通网站的五个不同的版本(形同的基础信息;不同的措辞;相同的站点导航).接着我们让用户在不同的网站下完成相同的任务.正如下表中所示,易用性在简介版本以及浏览性版本的网站中得到了很明显的提升(58%以及47%的提高).而且当我们将三种 方式整合到一起来提升写作风格,形成一个单一的站点,结果会更加炫目:124%的易用性提升.&lt;/p&gt;
&lt;p&gt;&lt;table border=&quot;solid&quot;&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h6&gt;网页版本&lt;/h6&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h6&gt;示例段落&lt;/h6&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;th&gt;&lt;/th&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h6&gt;可用性提升&lt;/h6&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;促销对照组&lt;/strong&gt; 使用的就是常规商业网站使用的风格&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;Nebraska is filled with internationally recognized attractions that draw large crowds of people every year, without fail. In 1996, some of the most popular places were Fort Robinson State Park (355,000 visitors), Scotts Bluff National Monument (132,166), Arbor Lodge State Historical Park &amp;amp; Museum (100,000), Carhenge (86,598), Stuhr Museum of the Prairie Pioneer (60,002), and Buffalo Bill Ranch State Historical Park (28,446).&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;0% (by definition)&lt;/td&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;简洁版本&lt;/strong&gt;只有对照组的一半字数&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;In 1996, six of the best-attended attractions in Nebraska were Fort Robinson State Park, Scotts Bluff National Monument, Arbor Lodge State Historical Park &amp;amp; Museum, Carhenge, Stuhr Museum of the Prairie Pioneer, and Buffalo Bill Ranch State Historical Park.&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;58%&lt;/td&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;&lt;strong&gt;扫描式布局&lt;/strong&gt; 和对照组文本一致,但采用易于扫视的格式&lt;/td&gt;&lt;/p&gt;
&lt;p&gt;&lt;td&gt;Nebraska is filled with internationally recognized attractions that draw large crowds of people every year, without fail. In 1996, some of the most popular places were:&lt;/td&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fort Robinson State Park (355,000 visitors)&lt;/li&gt;
&lt;li&gt;Scotts Bluff National Monument (132,166)&lt;/li&gt;
&lt;li&gt;Arbor Lodge State Historical Park &amp;amp; Museum (100,000)&lt;/li&gt;
&lt;li&gt;Carhenge (86,598)&lt;/li&gt;
&lt;li&gt;Stuhr Museum of the Prairie Pioneer (60,002)&lt;/li&gt;
&lt;li&gt;Buffalo Bill Ranch State Historical Park (28,446).&lt;br&gt;&lt;td&gt;47%&lt;/td&gt;&lt;br&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;&lt;strong&gt;客观的语言&lt;/strong&gt; 利用中立而不是主观自负或者言过其实的语言(其他都和对照组一致)&lt;/td&gt;&lt;br&gt;&lt;td&gt;Nebraska has several attractions. In 1996, some of the most-visited places were Fort Robinson State Park (355,000 visitors), Scotts Bluff National Monument (132,166), Arbor Lodge State Historical Park &amp;amp; Museum (100,000), Carhenge (86,598), Stuhr Museum of the Prairie Pioneer (60,002), and Buffalo Bill Ranch State Historical Park (28,446).&lt;/td&gt;&lt;br&gt;&lt;td&gt;27%&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;&lt;strong&gt;整合版本&lt;/strong&gt;以上三种写错风格修改的集合.&lt;/td&gt;&lt;br&gt;&lt;td&gt;In 1996, six of the most-visited places in Nebraska were:&lt;/td&gt;&lt;/tr&gt;&lt;/li&gt;
&lt;li&gt;Fort Robinson State Park&lt;/li&gt;
&lt;li&gt;Scotts Bluff National Monument&lt;/li&gt;
&lt;li&gt;Arbor Lodge State Historical Park &amp;amp; Museum&lt;/li&gt;
&lt;li&gt;Carhenge&lt;/li&gt;
&lt;li&gt;Stuhr Museum of the Prairie Pioneer&lt;/li&gt;
&lt;li&gt;Buffalo Bill Ranch State Historical Park&lt;br&gt;&lt;td&gt;124%&lt;/td&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;在客观语言版本中可用性获得了27%的提升着实让我们吃惊了.我们期待用户可以喜欢这个版本胜过对照组(实际上也确实是这样的),但是我们认为评价标准对于任意一种语言而言都是一样的.正如预计的那样,我们的四种评价标准(时间错误内存网站结构)都获得了客观风格比原始的促销版本更好一些的结论.我们用以解释这一发现的猜想是促销性语言为用户强加了认知的负担,必须让用户花费精力去过滤夸张的表象从而获得事实. 当人你们在阅读一个以”Nebraska是一个充满了国际公认景点的地方”开头的地方,他们的第一反应是”不,不是的”,并且这一想法将会降低他们使用网站的速度,分散他们的注意力.&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>52WeeksOfUX-第一周(译)</title><loc>http://taoalpha.me/blog/2013/06/11/read-first-week-of-52weeksofux-translated/</loc><publish>2013-06-11T12:00:00.000Z</publish><summary>&lt;p&gt;&lt;/p&gt;&lt;h5&gt;The First Rule of UX(UX第一定律)&lt;/h5&gt;&lt;br&gt;“你不得不交流.所有的行为本质都是一种交流.因为行为本身没有一个完全相反的概念(没有反=行为的概念),所以不可能不去交流.(&lt;code&gt;这个因为所以没有看懂啊&lt;/code&gt;)”–Paul Watzlawick关于沟通的第一公理.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这是UX的第一条规则.设计师所做的任何事都会对用户体验造成影响.从一个有一天添加的设计元素到一个关键信息的疏忽遗漏,每一个决定都在塑造着我们设计服务的用户的未来模型.&lt;/p&gt;
&lt;p&gt;因此,任何一个好的设计师的首要目标都是传达预期的信息…这可以促进用户体验的提升.文案,文本颜色,表格的对齐,导航链文字标题的大小写–即便是没有设计模式,也都是沟通的一部分.&lt;/p&gt;
&lt;p&gt;了解了这些,我们可以问这样的一个问题(最好也能回答):”这个元素和我想要向用户传达的信息是相辅呢?还是相悖呢?”而且,通过询问这些,你可以重新定义改善一些细节;一些经常不被注意的细节,而这些通常组成了最终的用户体验.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;What makes the user experience?&lt;/h5&gt;&lt;br&gt;用户体验是由一个用户和你的品牌,公司,组织的全部交互所组成的.这将可能包含于你的软件的交互,与你网站的交互,与你电话服务中心的交互,与广告的交互,以及在他人电脑上指指点点的交互,与一个移动应用的交互,与你Twitter账户的交互,与你通过邮件的交互,可能甚至是面对面的交互.这些交互的总和构成了用户体验.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;交互设计师就是在这个时候发挥作用的.他们的一部分指责就是让所有的交互都灵活,包含所有软件,文案,图形,布局,用户流动,物理体验的各个方面.对于一个体验而言,如果一部分极好而另一部分极差,那才是羞耻.内聚力是非常重要的.&lt;/p&gt;
&lt;p&gt;用户体验贯穿了很多的实际工作.以建筑为例,如果一个建筑师被雇佣来为一个财力雄厚的客户创造一种很棒的用户体验,他们将不会止步于设计人们的居住环境.他们会花时间花精力去关注周边的绿化,车道的弧线,每个角度的视觉感受..可能甚至是客户可能打招呼的方式以及桌椅摆放的方式.所有的这些触点对于一个大型的系统都是重要的组成部分..而房屋仅仅只是这块大拼图的一片而已.&lt;/p&gt;
&lt;p&gt;网页设计师,传统观点中的网页创建者,现在有了更广的领域.因为用户体验设计时的环境比以前变的更广了.所以,我们必须调整我们的设计方法,包含用户体验的方方面面.&lt;/p&gt;
</summary></url><url><title>设计心理学系列(1) - 网络心理学</title><loc>http://taoalpha.me/blog/2015/05/08/read-design-psychology-1-cyber-psychology/</loc><publish>2015-05-08T12:00:00.000Z</publish><summary>&lt;h2 id=&quot;u4EC0_u4E48_u662F_u7F51_u7EDC_u5FC3_u7406_u5B66_3F&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u662F_u7F51_u7EDC_u5FC3_u7406_u5B66_3F&quot; class=&quot;headerlink&quot; title=&quot;什么是网络心理学?&quot;&gt;&lt;/a&gt;什么是网络心理学?&lt;/h2&gt;&lt;p&gt;网络心理学是随着互联网等新技术出现以及发展而逐渐发展起来的一门新兴科学. 它所研究的领域就是网络与心理学的结合, Cyberpsychology本身由两个词合并而成, 前者Cyber是取自Cybernetics, 代表着对于机械控制和与之通信的研究, 代表着对新兴网络领域的研究, 而心理学则是对人脑和行为学的研究. 两者的集合即表明了Cyberpsychology的研究领域主要集中在了人与新兴机器系统(包含虚拟系统)的心理学研究.&lt;/p&gt;
&lt;h2 id=&quot;u7F51_u7EDC_u5FC3_u7406_u5B66_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#u7F51_u7EDC_u5FC3_u7406_u5B66_u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;网络心理学简介&quot;&gt;&lt;/a&gt;网络心理学简介&lt;/h2&gt;&lt;h3 id=&quot;u6F14_u5316_u5386_u53F2&quot;&gt;&lt;a href=&quot;#u6F14_u5316_u5386_u53F2&quot; class=&quot;headerlink&quot; title=&quot;演化历史&quot;&gt;&lt;/a&gt;演化历史&lt;/h3&gt;&lt;p&gt;Cyberpsychology最开始是集中关注于人在操作机器以及与机器交互的过程中的心理学变化, 后来随着电脑的出现以及普及, 互联网的诞生以及发展, 加上新兴智能机器的出现和发展, 都使得Cyberpsychology的研究重点放到了互联网上面. 而随着虚拟现实技术的出现, Cyberpsychology的研究范围再一次的增广, 可以说, Cyberpsychology的研究范围基本会随着cyberspace的领域增长而延伸.&lt;/p&gt;
&lt;p&gt;通常认为&lt;a href=&quot;http://www-usr.rider.edu/~suler/psycyber/suler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;John Suler&lt;/a&gt;, 来自Rider University的心理学教授, 是Cyberpsychology的奠基人. Suler教授是最早开始关注与网络对人们心理变化带来的影响, 其出版的The Psychology of Cyberspace一书也是被认为最早整合性的Cyberpsychology学术作品.&lt;/p&gt;
&lt;p&gt;从1960年代, 计算机开始出现网络系统, 到1980年代世界性互联出现, 领域内专家, 极客作为初始用户. 又过了10年, 随着超链接的出现, 衍生了一个对普通人更友好的万维网. 全球互联网正式诞生.&lt;/p&gt;
&lt;p&gt;随着人们对互联网的使用越来越频繁, 开始逐渐有心理学研究人员关注到这一领域, 慢慢促成了Cyberpsychology的诞生. 而随着互联网对人们生活的侵入越发全面, 这一领域也越来越收到人们的重视, 而随着互联网的发展, 新技术的出现, 这一领域也在不断的自我演进. &lt;/p&gt;
&lt;p&gt;很多人都预言未来毫无疑问将会是网络的时代, 而随着智能设备, 智能家居以及虚拟现实的出现, 都让这一预言变的更加可信. 所以研究人与网络的交互过程对人类本身的影响反馈是非常重要而值得的.&lt;/p&gt;
&lt;p&gt;参考视频: &lt;a href=&quot;https://www.youtube.com/watch?v=4C8qpN0Qafo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Birth of CyberPsychology&lt;/a&gt; - 需翻墙&lt;/p&gt;
&lt;h3 id=&quot;u5305_u542B_u65B9_u5411&quot;&gt;&lt;a href=&quot;#u5305_u542B_u65B9_u5411&quot; class=&quot;headerlink&quot; title=&quot;包含方向&quot;&gt;&lt;/a&gt;包含方向&lt;/h3&gt;&lt;p&gt;目前人们对于Cyberpsychology的研究方向都还集中在那些因网络出现而造成的明显影响之中, 尤其是那些负面影响, 目前大体的一些主流热门话题都围绕在以下几个方面:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络成瘾问题;&lt;/li&gt;
&lt;li&gt;网络身份与自我认知问题;&lt;/li&gt;
&lt;li&gt;网络关系问题;&lt;/li&gt;
&lt;li&gt;网络与现实的表现差别问题;&lt;/li&gt;
&lt;li&gt;网络人格/性格问题;&lt;/li&gt;
&lt;li&gt;虚拟现实领域;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h2 id=&quot;u7F51_u7EDC_u5FC3_u7406_u5B66_u7684_u7814_u7A76&quot;&gt;&lt;a href=&quot;#u7F51_u7EDC_u5FC3_u7406_u5B66_u7684_u7814_u7A76&quot; class=&quot;headerlink&quot; title=&quot;网络心理学的研究&quot;&gt;&lt;/a&gt;网络心理学的研究&lt;/h2&gt;&lt;h3 id=&quot;u77E5_u540D_u4EBA_u58EB&quot;&gt;&lt;a href=&quot;#u77E5_u540D_u4EBA_u58EB&quot; class=&quot;headerlink&quot; title=&quot;知名人士&quot;&gt;&lt;/a&gt;知名人士&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Dr. John Suler - The founder of the Cyber Psychology&lt;/li&gt;
&lt;li&gt;J. &amp;amp; Parker - The author of the Cyberpsychology&lt;/li&gt;
&lt;li&gt;Bernard Luskin - Launched the first MA/Ph.D program in Media Psychology&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u91CD_u8981_u671F_u520A&quot;&gt;&lt;a href=&quot;#u91CD_u8981_u671F_u520A&quot; class=&quot;headerlink&quot; title=&quot;重要期刊&quot;&gt;&lt;/a&gt;重要期刊&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jcmc.indiana.edu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Journal of Computer Mediated Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cyberpsychology.eu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyberpsychology: Journal of Psychosocial Research on Cyberspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liebertpub.com/publication.aspx?pub_id=10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyberpsychology, Behavior, and Social Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vrphobia.eu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Journal of CyberTherapy &amp;amp; Rehabilitation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u9605_u8BFB_u4E66_u76EE&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u4E66_u76EE&quot; class=&quot;headerlink&quot; title=&quot;阅读书目&quot;&gt;&lt;/a&gt;阅读书目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www-usr.rider.edu/~suler/psycyber/psycyber.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Psychology of Cyberspace by John Suler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Cyberpsychology-Alison-Attrill/dp/0198712588/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyberpsychology by Alison Attrill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Cyberpsychology-Introduction-Human-Computer-Kent-Norman/dp/0521687020/ref=sr_1_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyberpsychology: An introduction to Human-Computer Interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Cyberspace-Romance-Psychology-Online-Relationships/dp/1403945144/ref=sr_1_10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyberspace Romance: The Psychology of Online Relationships&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Psychology-Menu-Selection-Designing-Interaction/dp/089391553X/ref=sr_1_1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Psychology of Menu Selection: Designing Cognitive Control at the Human/Computer Interface (Human/Computer Interaction)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u53C2_u8003_u6587_u732E&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u6587_u732E&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cyberpsychology&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia of Cyberpsychology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://users.rider.edu/~suler/psycyber/psycyber.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The psychology of cyberspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.academia.edu/2373472/Cyber_Psychology_and_Cyber_Sociology_-_Presentation_and_Overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyber Psychology &amp;amp; Cyber Sociology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://w3.uqo.ca/cyberpsy/en/cyberpsy_en.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyberpsychology and Vitrual Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://psycyber.blogspot.com/2006/08/first-decade-of-cyberpsychology.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The first decade of CyberPsychology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2015-05-09 By &lt;/p&gt;
</summary></url><url><title>简述一次网页浏览行为的过程</title><loc>http://taoalpha.me/blog/2014/11/26/read-brief-web-browsing-behavior/</loc><publish>2014-11-26T12:00:00.000Z</publish><summary>&lt;p&gt;&lt;a href=&quot;http://alistapart.com/article/planning-for-performance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文&lt;/a&gt;其实是讲述我们应该如何为性能做更好的考虑, 其中简单介绍了一个request从发出到结果展现的整个过程, 尤其是其在移动网络和常规网络的区别非常有趣, 所以特定分享以下.&lt;/p&gt;

&lt;p&gt;我们的上网行为, 简单来说就是一个浏览器和一个网络服务器之间的数据交换.  而从我们点了确认/提交/Go之后, 到页面开始进行加载, 这个过程基本就是一个请求啦. 拆解一下呢, 我们初始的请求会带着一些参数从浏览器出发发送到一个DNS服务器上去, 它会把URL解析为一个IP地址来找到我们这个URL指向的主机, 然后又DNS向主机发送请求, 获取指定的主机内容, 再返回给我们的浏览器.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://alistapart.com/d/409/3.1.jpg&quot; alt=&quot;Diagram showing how data moves between browsers and servers.&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;整个过程就是如此了. 这基本是我们常规的设备通过wifi或者有限网络浏览网络的全过程了. 那么对于一个连接到移动网络的设备而言, 会多出一步了: 浏览器首先会把请求发送给信号基站, 由信号基站转发给DNS, 然后开始正常的网络请求循环.  而这个多余的过程, 即便是以3G速度而言, 也需要一定的时间, 相对于网络中以百万分之一毫秒来计算, 这个时间绝对不短. 大致算下来, 移动设备联网过程会比Wifi要慢2s之多.&lt;/p&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://alistapart.com/d/409/3.2.jpg&quot; alt=&quot;Diagram showing how data moves on a mobile network.&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;2s看起来比较短, 但实际上对于连300ms的延迟都能感觉到的用户而言, 2s绝对是个灾难性的影响了. 这也是为什么移动网一直比不上wifi的原因了. &lt;/p&gt;

&lt;p&gt;不过幸运的是, LTE和4G的慢慢普及, 相信这种差别一定会降低很多, 以后的访问速度一定会快很多的.&lt;/p&gt;

&lt;p&gt;至于说请求返回浏览器后到页面真正完整展示出来的过程, 其实是浏览器的渲染过程了, 这个很多时候取决于浏览器本身的渲染引擎和机制了. 通常来说, 除了本身的HTML外, 主要有CSS和JS两个资源需要加载, 通常来说, css会优先加载,  在html文档渲染前就会完成加载, 从而不影响HTML的视觉展现, 而JS, 则通常可以后加载. 不过JS和CSS的加载都会影响页面的展示, 通常来说, 两者加载和执行的过程中, 页面是不会渲染展示的, 这一过程称之为Blocking.  当然这个过程你是可以中断的,尤其是中断js的加载很多时候不会影响到页面的视觉效果(前提是js不涉及DOM操作), 这也是为什么有时候你的loading菊花转着转着你叉掉了页面还是会加载出来的原因.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://alistapart.com/d/409/3.3.jpg&quot; alt=&quot;Diagram showing CSS and JavaScript blocking.&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;不过, 图片元素通常是不会被blocking的, 浏览器不会等待一个图片元素加载完成后才进行页面渲染~ 所以经常出现页面加载后, 图片没显示完整的现象.&lt;/p&gt;

&lt;p&gt;这种blocking的机制主要是为了防止裸露的HTML带给用户的糟糕体验, 毕竟如果css在html之后加载, 那么无样式的html会先渲染展示, 然后样式加载完在reflow, 感觉就很痛苦了… 这种闪一下的现象通常叫做: Flash of unstyled content(FOUC). 所以现在浏览器通常都采取blocking的方式来保证用户看到的页面的视觉效果. 而blocking对js而言主要是为了应对document.write这个函数, 其实根本来说也是为了一次性让用户看到比较完整, 好看的内容. 当然, 现在其实很多人都不推荐大家使用document.write这个函数, 毕竟js经常会导致更多的blocking时间, 但是毕竟有人再用… 而且浏览器又没办法提前判断js中用没用这个函数…&lt;/p&gt;

&lt;p&gt;恩, 基本上, 从一个请求发出到页面加载的过程就是这样了~ 如果想要提高性能, 自然也就从这里面涉及的各个方面着手喽~&lt;/p&gt;
</summary></url><url><title>7条规则助你创造优质UI-上篇</title><loc>http://taoalpha.me/blog/2014/11/26/read-7-rules-to-help-you-create-high-quality-ui-part/</loc><publish>2014-11-26T05:00:00.000Z</publish><summary>&lt;p&gt;&lt;a href=&quot;https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-1-559d4e805cda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文&lt;/a&gt;来自Medium, 分为上下两篇, 讲述了在制作UI的时候的7条实用规则, 表示个人喜欢最后一条”steal like an artist”…刚看完”the art of steal”…哈哈&lt;/p&gt;

&lt;p&gt;不说废话.. 本文作者特别强调了下文章的适用对象主要有两种:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;想要尝试自己设计UI的开发者们&lt;/li&gt;&lt;br&gt;&lt;li&gt;想要自己的作品集看起来更优秀或者是想要让自己的UI套装有更好的用户体验, 能卖个好价钱的UX设计师们&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;同时作者还特别说明了一下,  针对那些技术学校毕业的, 已经是UI设计师或者向着UI设计师前进中的孩纸们, 就可能会觉得本文比较枯燥, 乏味, 甚至是错误了. 作者针对此的建议也是: 请不要犹豫关闭本tab, 拜拜不送.&lt;/p&gt;

&lt;p&gt;那么如果你还是本文的受众, 请继续阅读:&lt;/p&gt;

&lt;p&gt;作者背景: 作者是一个UX设计师, 没有什么UI技能. 他很喜欢设计UX, 但是没做多久就发现把UI设计好的好处多多啊:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;我的作品集如果很糟糕的话, 就会反映出我自己在工作和思维过程中可能同样很糟糕&lt;/li&gt;&lt;br&gt;&lt;li&gt;我的那些UX咨询客户们宁愿花钱请一个技艺娴熟的UI设计师做设计而不是向我这样给出一堆手绘草图&lt;/li&gt;&lt;br&gt;&lt;li&gt;我会不会突发奇想的去加入一个创业公司呢? 那么最好有这个技能&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;一般来说UI设计不行的人都会这么给自己找借口: 我的专长是工程(交互等), 我对美学这东西一窍不通. 所以我做出来的东西看起来很丑也是一件很正常的事情.&lt;/p&gt;

&lt;p&gt;接着作者介绍了一下自己如何向着美学前进的, 无外乎就是Google, Dribbble, Pinterest到处搜然后从模仿研究伟大作品开始~ 中间作者给出了一个很不错的建议:&lt;/p&gt;

&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;致广大的呆子们: 如果我现在能够说自己在UI上有所成绩, 那么一切都是因为我研究过一些东西-而不是我对于美学和平衡有什么直觉性的天赋.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;哈哈, 这也是为什么我喜欢这篇文章的原因: 文章并没有什么深奥的理论和赤裸裸的美感炫耀, 而是非常简单的应用技巧, 让你从一个美盲到一个能够做出不错UI的人.&lt;/p&gt;

&lt;p&gt;下面说正题: 规则.&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;Light comes from the sky (光从上面来)&lt;/li&gt;&lt;br&gt;&lt;li&gt;Black and white first (黑白优先)&lt;/li&gt;&lt;br&gt;&lt;li&gt;Double your whitespace(留白要多)&lt;/li&gt;&lt;br&gt;&lt;li&gt;Learn the methods of overlaying text on images (学习各种在图片上加文字的方法)&lt;/li&gt;&lt;br&gt;&lt;li&gt;Make text pop— and un-pop (合理的让文本突出或者不突出)&lt;/li&gt;&lt;br&gt;&lt;li&gt;Only use good fonts (只用好看的字体)&lt;/li&gt;&lt;br&gt;&lt;li&gt;Steal like an artist (像艺术家一样懂得模仿)&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;h4&gt;#1  Light comes from the sky&lt;/h4&gt;

&lt;p&gt;阴影在设计上应用广泛, 而且价值无量, 因为它可以在无形中告诉我们所看到的界面元素是什么. 光产生阴影, 而光从上方向下方照射则是一个非常常规的事情, 以至于一旦我们改变这个规则, 就会显得很诡异, 比如下面这张图片:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/600/1*eFJGYuA67SIzu9pB1MZFKQ.jpeg&quot; alt=&quot;hooooly...shiiiiiit!!!&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;正常的上方投射光会使得元素的顶部为亮层, 阴影则出现在下层, 从而形成一种立体感. 这让我们即便是针对二维的屏幕也能产生三维的感知.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*DTB4xeMLpg0DW6NLOYBehw.png&quot; alt=&quot;3-D layer&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图是作者非常喜欢的一个点击示意图. 单从光方面分析以下里面体现的细节:&lt;/p&gt;

&lt;ol&gt;&lt;br&gt;&lt;li&gt;按前的按钮底部有明显的暗边 – 因为光没有找到.&lt;/li&gt;&lt;br&gt;&lt;li&gt;按前的按钮上部分要比下面略微亮一些 – 这是在模拟一种轻微的弧状凸面, 上部因为反光会更加明亮&lt;/li&gt;&lt;br&gt;&lt;li&gt;按前的按钮边缘有非常轻微的阴影 – 在放大的图层中看到的比较明显&lt;/li&gt;&lt;br&gt;&lt;li&gt;按下的按钮, 虽然下部依然没有上部亮, 但是整体都变暗了 – 因为按下后, 感觉按钮就被压到平面里面, 阳光就不容易照到了(至于你说我们实际生活中看到的按下的按钮显得更暗, 那是因为我们的手挡住光线所致..)&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;p&gt;就这么个小按钮就能够反映出很多的细节. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*4FCAIgmJa8BuildjlnsDeA.png&quot; alt=&quot;apple button&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;上面是iOS 6下的一个实例, 虽然可能有些过时了, 不过单纯从说明问题的角度来说还是可以的.&lt;/p&gt;

&lt;p&gt;里面涉及的光照应用就不多说了, 直接看图就能看出些了~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*gWuSN3QN9dSeVwSP2LZVow.png&quot; alt=&quot;old hubster&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;还有向上面这种, 通过明暗来表现一中凹陷堎的效果.&lt;/p&gt;

&lt;p&gt;概括来说:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;通常为凹进去的元素有&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;文本输入域&lt;/li&gt;&lt;br&gt;&lt;li&gt;按下的按钮&lt;/li&gt;&lt;br&gt;&lt;li&gt;滑轨&lt;/li&gt;&lt;br&gt;&lt;li&gt;未选中的单选按钮&lt;/li&gt;&lt;br&gt;&lt;li&gt;复选框&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;通常为凸出的元素有:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;未按下的按钮&lt;/li&gt;&lt;br&gt;&lt;li&gt;滑块&lt;/li&gt;&lt;br&gt;&lt;li&gt;下拉触发按钮&lt;/li&gt;&lt;br&gt;&lt;li&gt;卡片&lt;/li&gt;&lt;br&gt;&lt;li&gt;单选按钮中的按钮部分&lt;/li&gt;&lt;br&gt;&lt;li&gt;弹出框&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;如果你仔细观察以下, 你就会发现它的应用无处不在.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么, 对于扁平化设计, 又该怎么说呢?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*YAB8zDDxCmvegvxCu7d8kw.png&quot; alt=&quot;flat ios7&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;iOS 7开始, 苹果引入了扁平化设计, 去掉了所有的阴影啊等等拟物化的细节.  就此而言, 作者并不欣赏, 作者虽然也很喜欢简单明了, 但是他认为这种扁平化设计绝非能够盛行不衰的设计风格, 作者认为还是模拟现实的拟物化更加自然.&lt;/p&gt;

&lt;p&gt;不过鉴于如今扁平化风行, 所以作者比较推荐半扁平化设计. 其实是在扁平的基础上加入了层级关系, 保留了阴影形成的立体感.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*gWvCSNxqNjyYaq4IF31ZhQ.png&quot; alt=&quot;OS X Yosemite&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;我觉得吧. 这块没什么对错, 扁平化设计有很多好处毋庸置疑, 拟物化设计的自然美感和各种细节都让人着迷. 但是拟物化本身的特点是来源于让你们更自然的使用科技产品, 把生活中的东西搬到电子中去, 但是, 在产品适应人的过程中, 人也在适应着产品, 所以apple盛行的今天, 其形成了扁平化的设计风格, 也是基于用户对于拟物的需求已不那么必要, 很多拟物的元素甚至都消失在历史长河中去了.  光线也不在局限在日光上了, 如今不夜已经不再是个夸张了. 年轻人, 尤其是年轻的消费者喜欢新颖, 喜欢未来感十足的产品, 而扁平化带来的就是这样的感觉.  当然, 也不是只有扁平化能带来这种未来感, 像我, 就更喜欢material design的层级立体平面. anyway, 人类适应了科技, 自然不再需要更多的现实参照物来去运用科技了.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;哈哈, 刚写完上面的话就看到作者谈及了material design. MD是一种统一的视觉表现, 核心就是去模拟真实的物理世界(注意! 这里是物理世界哦, 不是现实世界, 所以科技感有了, 立体感也有了).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*TtuBo6cCUTyP8XIYGSrIyg.png&quot; alt=&quot;material design demo&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/600/1*sHg3HCEciqqAk1xE8qMrdg.png&quot; alt=&quot;material design demo 2&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以感觉出作者对material design还是比较欣赏的. 作者也承认拟物化(即模仿现实世界)有点过时了, 但是作者相比于纯粹的扁平化, 更欣赏半扁平的那种设计.&lt;br&gt; &lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*Zqcjyz-oIqZZojyYyWVl2Q.png&quot; alt=&quot;flat&quot; title=&quot;&quot;&gt;&lt;br&gt;这也是纯粹的扁平哦~ 哈哈&lt;/p&gt;

&lt;h4&gt;#2: Black and White First&lt;/h4&gt;

&lt;p&gt;在设计初完全使用灰阶作图而不加任何颜色可以让设计更加纯粹, 且暂时不用考虑最复杂的视觉设计元素–颜色, 而聚焦在布局上.&lt;/p&gt;

&lt;p&gt;如今到处都在喊”移动居先”, 设计师们也都在响应式设计的路上越走越远… 这都要求你更多的关注页面的布局, 在移动端是什么样, 在大屏上又是怎样.&lt;/p&gt;

&lt;p&gt;这种限制其实很好, 因为它有助于帮助我们思考. 我们需要从小屏开始, 这通常比较困难, 但是想清楚了小屏的用法, 那么再去应用到大屏上就会容易很多了.&lt;/p&gt;

&lt;p&gt;而 Black and White First则是另一个类似的限制. 如何让一个app显得很高端大气实用, 但是又不实用任何的颜色是一个困难的问题, 在解决了这个之后, 再去以颜色辅助.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*qheNNhQhjjwxMeJ5XGocsA.png&quot; alt=&quot;gray scale&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;使用灰阶可以免除很多颜色的干扰. 毕竟颜色加多了很容易毁掉你的设计的.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/1213/1*YxV7C-nHHir-PSbJ4-jqhQ.png&quot; alt=&quot;gray scale 1&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*RckBhZxKQfveClU7rwGuyg.jpeg&quot; alt=&quot;gray scale 2&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/400/1*EnbssykGOuXeXMV3AQFyjw.png&quot; alt=&quot;gray scale 3&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;灰阶设计完事了, 就要进入第二步: 上色了.&lt;/p&gt;

&lt;p&gt;最简单的上色方法是只用单色.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/1213/1*YxV7C-nHHir-PSbJ4-jqhQ.png&quot; alt=&quot;add color 1&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/882/1*pds21170RP-6ZIkuSxgI2Q.png&quot; alt=&quot;add color 2&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;只用一种色的好处是能够非常明显的强化你的亮色元素.&lt;/p&gt;

&lt;p&gt;如果一种色不够, 那么你就可以尝试2种色或者多种色但是用同样的饱和度(通过调节同一个颜色的饱和度和亮度, 就可以得到一系列的颜色, 有强有弱, 轻重点和内容跟你一区分.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*_fM8VVYx7hMgdJ_Wy24AXg.png&quot; alt=&quot;hue colors&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;#3:  Double your whitespace&lt;/h4&gt;

&lt;p&gt;留白是门艺术! 真的, 在不加任何样式的html上你就能看到样式给html带来的巨大变化!!!… 毫无美感… 我们需要留白来帮助你更好的布局自己的元素, 不是满满的就都是爱了…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/1067/1*qFwXZ_05pRv2OtiaJHIp6Q.jpeg&quot; alt=&quot;whitespace&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图是一个music player的设计示意图. 里面就有很多的留白示例, 可以重点关注下左侧菜单栏和顶部的导航栏, 搜索框. 都是大量留白, 让人赏心悦目.&lt;/p&gt;

&lt;p&gt;那么, 怎么留白呢?&lt;/p&gt;

&lt;p&gt;你可以按照下述的步骤试试看:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;在行与行之间加上些空白;&lt;/li&gt;&lt;br&gt;&lt;li&gt;在元素与元素之间加上空白;&lt;/li&gt;&lt;br&gt;&lt;li&gt;在一组元素与另一组元素之间加上空白;&lt;/li&gt;&lt;br&gt;&lt;li&gt;看看哪种有效果, 就用之;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;下一篇介绍剩下的四种~&lt;/p&gt;
</summary></url><url><title>像TED一样演讲</title><loc>http://taoalpha.me/blog/2015/06/25/book-speaking-like-people-on-ted/</loc><publish>2015-06-25T09:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8981&quot;&gt;&lt;a href=&quot;#u6982_u8981&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;今天顺带读完了这本”像TED一样演讲”, 作者上一部和演讲相关的书是”乔布斯的魔力演讲”. 归纳了下书中的核心点, 记录分享给大家. 这一类的书干货其实能占到全书1/10就已经算不错了~ 所以一般看起来也比较快.&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;u60C5_u611F_u5171_u9E23&quot;&gt;&lt;a href=&quot;#u60C5_u611F_u5171_u9E23&quot; class=&quot;headerlink&quot; title=&quot;情感共鸣&quot;&gt;&lt;/a&gt;情感共鸣&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;释放你内心的热情 =&amp;gt; 热情可以传染;&lt;/li&gt;
&lt;li&gt;掌握讲故事的艺术 =&amp;gt; 故事可以刺激并吸引人脑的注意力, 拉近你与听众的距离;&lt;ul&gt;
&lt;li&gt;与演讲主题相关的个人故事;&lt;/li&gt;
&lt;li&gt;与演讲主题相关的他人故事;&lt;/li&gt;
&lt;li&gt;关于产品或者品牌的某个故事;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让演讲好像好友交谈一样自然;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u5236_u9020_u65B0_u5947&quot;&gt;&lt;a href=&quot;#u5236_u9020_u65B0_u5947&quot; class=&quot;headerlink&quot; title=&quot;制造新奇&quot;&gt;&lt;/a&gt;制造新奇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给人们一个看世界的新视角;&lt;/li&gt;
&lt;li&gt;设计让观众惊掉下巴的环节 =&amp;gt; 触发神经学家所说的讲情绪, 让记忆更加深刻;&lt;/li&gt;
&lt;li&gt;用幽默给你的演讲加分;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u4EE4_u4EBA_u96BE_u5FD8&quot;&gt;&lt;a href=&quot;#u4EE4_u4EBA_u96BE_u5FD8&quot; class=&quot;headerlink&quot; title=&quot;令人难忘&quot;&gt;&lt;/a&gt;令人难忘&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;严格遵守18分钟的时间规则 =&amp;gt; 有约束才有创造力;&lt;/li&gt;
&lt;li&gt;抓住观众吸引力的魔法, 多感官体验 =&amp;gt; 让内容视觉化;&lt;/li&gt;
&lt;li&gt;表现最真实的自己;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u4E66_u4E2D_u6D89_u53CA_u5230_u7684TED_28_u90E8_u5206_29&quot;&gt;&lt;a href=&quot;#u4E66_u4E2D_u6D89_u53CA_u5230_u7684TED_28_u90E8_u5206_29&quot; class=&quot;headerlink&quot; title=&quot;书中涉及到的TED(部分)&quot;&gt;&lt;/a&gt;书中涉及到的TED(部分)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/bryan_stevenson_we_need_to_talk_about_an_injustice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bryan Stevenson: We need to talk about an injustice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/dan_ariely_on_our_buggy_moral_code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dan Ariely: Our buggy moral code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SpIxZiBpGU0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Truly sustainable economic development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ted.com/talks/jennifer_granholm_a_clean_energy_proposal_race_to_the_top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jennifer Granholm: A clean energy proposal – race to the top!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Amy Cuddy: Your body language shapes who you are&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ted.com/talks/robert_ballard_on_exploring_the_oceans&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Robert Ballard: The astonishing hidden world of the deep ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hans Rosling: The best stats you’ve ever seen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ted.com/talks/mary_roach_10_things_you_didn_t_know_about_orgasm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mary Roach: 10 things you didn’t know about orgasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/bill_gates_unplugged&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bill Gates: Mosquitos, malaria and education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/jill_bolte_taylor_s_powerful_stroke_of_insight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jill Bolte Taylor: My stroke of insight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ted.com/talks/stephen_hawking_asks_big_questions_about_the_universe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stephen Hawking: Questioning the universe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ted.com/talks/david_christian_big_history&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;David Christian: The history of our world in 18 minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (1)</title><loc>http://taoalpha.me/blog/2015/06/17/book-reading-javascript-the-definitive-guide-1/</loc><publish>2015-06-17T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;“JavaScript: the definitive guide”可谓是JS入门必读数目之一了. 今天正好读到第7章, 做一简单总结. 前7章的内容都集中在JS中的基本知识上, 包含了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据类型: 最简单的primitive datatypes: string, number, boolean , 两个空值类型: null, undefined(通常认为空值类型属于promitive的一种),以及稍微复杂点的: object类型;&lt;/li&gt;
&lt;li&gt;变量问题: 变量规则, 变量作用域问题;&lt;/li&gt;
&lt;li&gt;基础表达式和操作符: 操作符的优先级问题, 多操作数和单操作数以及执行顺序等;&lt;/li&gt;
&lt;li&gt;陈述语句: 包含了if/for/while/do/with/switch(case)/break/continue/return/var/identifiers/empty statement等等;&lt;/li&gt;
&lt;li&gt;Object: json格式object以及常规的array类型对象的分别介绍以及自身结构属性, 异同点等;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u5FC3_u5F97&quot;&gt;&lt;a href=&quot;#u5FC3_u5F97&quot; class=&quot;headerlink&quot; title=&quot;心得&quot;&gt;&lt;/a&gt;心得&lt;/h2&gt;&lt;h3 id=&quot;break/continue__u540E_u63A5_label_3A&quot;&gt;&lt;a href=&quot;#break/continue__u540E_u63A5_label_3A&quot; class=&quot;headerlink&quot; title=&quot;break/continue 后接 label:&quot;&gt;&lt;/a&gt;break/continue 后接 label:&lt;/h3&gt;&lt;p&gt;  break/continue是通常用于for/white/do等循环语句中用以做状态判断的, 但本身其还有另一种用法, 就是通过后接标记语句的用法来是break或者continue能针对标记语句操作, 比如下面这个跳出多层嵌套的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;test:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt; i*&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// continue test; 也是同样的用法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但需要注意的即使:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;continue 语句(带有或不带标签引用)只能用在循环中;&lt;/li&gt;
&lt;li&gt;break 语句(不带标签引用),只能用在循环或 switch 中;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;with__u8BED_u53E5&quot;&gt;&lt;a href=&quot;#with__u8BED_u53E5&quot; class=&quot;headerlink&quot; title=&quot;with 语句&quot;&gt;&lt;/a&gt;with 语句&lt;/h3&gt;&lt;p&gt;在js中经常涉及到变量作用域的问题, 而with语句的存在就是可以将某个object放入到其子语句的作用域链中, 什么意思呢? 首先通常来说, 在函数内, 其作用域链由全局作用域(全局对象)和本地作用域(local对象)组成, 我们在引用变量的时候就是在作用域链上逐个查询. 而with的作用就是把某个object插入到作用域链中去, 从而能够直接访问其子元素:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;nae&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;hhh&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;results&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;(a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nae)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: &quot;hhh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nae = &lt;span class=&quot;string&quot;&gt;&quot;sl&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;(a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nae)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: &quot;hhh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 证明with引入的作用域甚至还在global域之上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过呢, 通常很少人会去用&lt;code&gt;with&lt;/code&gt;的, 因为它过于吃力不讨好了, 其对性能的影响是没有什么优化空间的, 与其使用&lt;code&gt;with&lt;/code&gt;, 不如直接定义全局变量或者变量的简写(有一种with的用法是为了省略书写冗长的变量名)更为方便了.&lt;/p&gt;
&lt;h3 id=&quot;sort_u5185_u5D4C_u6BD4_u8F83_u51FD_u6570_3A&quot;&gt;&lt;a href=&quot;#sort_u5185_u5D4C_u6BD4_u8F83_u51FD_u6570_3A&quot; class=&quot;headerlink&quot; title=&quot;sort内嵌比较函数:&quot;&gt;&lt;/a&gt;sort内嵌比较函数:&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sort()&lt;/code&gt;本身作为array类型内置的几个函数之一, 默认通常是按照字母表来排序的, 但是其本身也是支持自定义排序规则的, 只需要我们把规则传入即可:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以数字序列为例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [12,8,5,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a - b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回&amp;lt;0, 则a排在b前面, &amp;gt;0 则b在前面, =0则表示相等;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [3,5,8,12]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;利用这一方法你就可以定制你的排序规则了, 甚至可以按照奇偶性排序都可以做到~ 比如 偶数在前: &lt;code&gt;return a % 2-b % 2;&lt;/code&gt; 哈哈&lt;/p&gt;
&lt;h3 id=&quot;concat_2Cslice_2Csplice&quot;&gt;&lt;a href=&quot;#concat_2Cslice_2Csplice&quot; class=&quot;headerlink&quot; title=&quot;concat,slice,splice&quot;&gt;&lt;/a&gt;concat,slice,splice&lt;/h3&gt;&lt;p&gt;这三个函数分别都是对array类型的元素进行母串增减获取子串而出现的, 其中有几点需要注意的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;concat()&lt;/code&gt;函数支持数字多参数分别传入, 也支持数组传入的形式, 效果都是一样的, 但是&lt;code&gt;concat()&lt;/code&gt;不支持递归解套, 即如果你传入的是多层嵌套的数组, &lt;code&gt;concat()&lt;/code&gt;只会解套一次; 此外, &lt;code&gt;concat()&lt;/code&gt;的操作是不影响母串的;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice&lt;/code&gt;和&lt;code&gt;splice&lt;/code&gt;都可以用于获取子数组使用的, 其区别主要有两点, &lt;code&gt;slice()&lt;/code&gt;接受的两个参数都代表的是index, 分别是起始次序到终止元素次序, 取子串时计算首位参数的元素,不计算第二位参数所代表的元素, 而&lt;code&gt;splice&lt;/code&gt;则传入的两个参数分别是起始元素次序和要截取元素个数,即同样都是&lt;code&gt;(1,2)&lt;/code&gt;, 后者代表截取第二个元素起始共计两个元素的子串, 前者则只获取第二个元素; 此外, &lt;code&gt;slice()&lt;/code&gt;返回子串而不修改原数组, &lt;code&gt;splice()&lt;/code&gt;则会在返回子串的同时修改原数组(原数组为去除子串的结果);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice()&lt;/code&gt;除了可以用获取子串外, 还能用于给母串添加元素. &lt;code&gt;splice()&lt;/code&gt;可以接受超过2个参数, 从第三个参数起, 多出来的参数都是作为插入元素的, 执行的顺序则是删减完后当前位置插入, 即&lt;code&gt;splice(2,2,1,3,4)&lt;/code&gt;表示的就是删掉第三个元素开始共计两个元素, 然后在同样的位置插入1,3,4三个元素, 同时, &lt;code&gt;splice()&lt;/code&gt;也接受数组传入, 但是它不主动进行解套;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了&lt;code&gt;splice()&lt;/code&gt;, 上面的&lt;code&gt;sort()&lt;/code&gt;的操作也是针对&lt;code&gt;a&lt;/code&gt;数组进行的操作, 其结果也是针对a生效的, 即a的值是会被改变的;&lt;/p&gt;
&lt;h3 id=&quot;pop_2Cpush_2Cshift_2Cunshift&quot;&gt;&lt;a href=&quot;#pop_2Cpush_2Cshift_2Cunshift&quot; class=&quot;headerlink&quot; title=&quot;pop,push,shift,unshift&quot;&gt;&lt;/a&gt;pop,push,shift,unshift&lt;/h3&gt;&lt;p&gt;除了&lt;code&gt;splice()&lt;/code&gt;之外, 我们通常用于直接操作母串增减的就是&lt;code&gt;pop,push,shift,unshift&lt;/code&gt;四个了, 下面简单介绍下四者的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pop, push分别代表对母串最后一个元素的进出栈操作, pop是弹出最后一个元素, push则是在最后一个元素的后面继续压入新元素, 同样也支持数组元素压入, 但是不自动解套;&lt;/li&gt;
&lt;li&gt;shift, unshift和pop,push基本类似, 不同的地方在于操作的位置和后者相反, 是在栈头的位置, 即首位元素处; shift用于移出首位元素, unshift用于在首位增加元素, 接受数组, 也不自动解套, 同时多参数传入时, 作为整体一次性压入, 即&lt;code&gt;unshift(2,3)&lt;/code&gt;,压入后为&lt;code&gt;[2,3,...]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里比较独特的就是&lt;code&gt;unshift&lt;/code&gt;多参数的压入问题了, 按我的预期其实是逐个元素压入, 这样顺序就是和传参相反, 但结果确实整体压入, 顺序与传参一致了~&lt;/p&gt;
&lt;h2 id=&quot;u8C1C_u9898&quot;&gt;&lt;a href=&quot;#u8C1C_u9898&quot; class=&quot;headerlink&quot; title=&quot;谜题&quot;&gt;&lt;/a&gt;谜题&lt;/h2&gt;&lt;p&gt;书中第七章介绍说在array中如果直接赋值的index是超限(&amp;gt;2^32-1), 负值或者对应表达式的结果是此类值时, 会自动转为string传入定义, 这就引发了一个问题: 一旦如此定义后, 此变量还是array吗?&lt;/p&gt;
&lt;p&gt;我在console中简单的测试了下:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a.length == 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;hehe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [1,2,3]  where is a[-1.2] ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: &quot;hehe&quot;  WTF???&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 3 ??&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [1,2,3,-1.2:'hehe']&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ouput: True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[&lt;span class=&quot;string&quot;&gt;&quot;h&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;hh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [1,2,3,-1.2:&quot;hehe&quot;,h:&quot;hh&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题: a依然还是一个Array(亦或者不是?), 但用json定义的方式赋值的那几个值还是有效的, 可获取的, 但是为什么直接print出来的时候没有这些值呢, 甚至长度都不包含定义的这几个指? 为什么console.log()可以打出来呢?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;猜测解释&lt;/strong&gt;: a最初被定义为array, 但是却被json方式传值, 存储到了其内存中, 但是调用a时依然按照array来打印, 所以会自动滤除掉不符合array的几个值(只会按照index来找值). 但是console.log()是打出来其存储内容, 所以就按照其内存存储形式打印出来了.&lt;/p&gt;
</summary></url><url><title>JavaScript 阅读阶梯清单</title><loc>http://taoalpha.me/blog/2015/06/10/book-must-read-list-of-javascript/</loc><publish>2015-06-10T09:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;今天翻完了&lt;code&gt;Getting Good With JavaScript&lt;/code&gt;, 对于其精华浓缩的设计很欣赏, 很适合有一定无基础或者有一定基础但觉得野路子出身想要夯实一下的人读. 而在文末的Appendix A中作者提到的这个 &lt;a href=&quot;http://blog.reybango.com/2010/12/15/what-to-read-to-get-up-to-speed-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rey Bango’s Must-Read list of JavaScript&lt;/a&gt; 确实在是本书的又一大收获. 特转来分享~&lt;/p&gt;
&lt;h2 id=&quot;u57FA_u7840_u5165_u95E8&quot;&gt;&lt;a href=&quot;#u57FA_u7840_u5165_u95E8&quot; class=&quot;headerlink&quot; title=&quot;基础入门&quot;&gt;&lt;/a&gt;基础入门&lt;/h2&gt;&lt;p&gt;所谓入门自然是以打牢基础为目的, 所以下列书都是以基础概念为主, 算是领路之书(考虑到国情需要, 我都尽可能替换为豆瓣链接了):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/2994925/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript: The Good Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1481218/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Professional JavaScript for Web Developers (Wrox Programmer to Programmer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3022779/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ppk on JavaScript, 1/e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1757853/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beginning JavaScript with DOM Scripting and Ajax: From Novice to Professional (Beginning: from Novice to Professional)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/19933548/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u521D_u7AA5_u95E8_u5F84&quot;&gt;&lt;a href=&quot;#u521D_u7AA5_u95E8_u5F84&quot; class=&quot;headerlink&quot; title=&quot;初窥门径&quot;&gt;&lt;/a&gt;初窥门径&lt;/h2&gt;&lt;p&gt;一旦你入了门, 就可以修炼中级秘术了~ 可以看到有两条中级秘术和入门级是一样的, 哈 这就和基础功打的够扎实, 基本拳脚也能当秘术使唤的~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1481218/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Professional JavaScript for Web Developers (Wrox Programmer to Programmer)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript: The Definitive Guide&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eloquent JavaScript - Online&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5436113/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM Scripting: Web Design with JavaScript and the Document Object Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u9AD8_u624B_u4E4B_u8DEF&quot;&gt;&lt;a href=&quot;#u9AD8_u624B_u4E4B_u8DEF&quot; class=&quot;headerlink&quot; title=&quot;高手之路&quot;&gt;&lt;/a&gt;高手之路&lt;/h2&gt;&lt;p&gt;一旦确保自己有了一个牢靠的基础后, 我们就可以开启自己的高手之路了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/4183808/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;High Performance JavaScript (Build Faster Web Application Interfaces)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/24835411/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Object-Oriented JavaScript: Create scalable, reusable high-quality JavaScript applications and libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5252901/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6895075/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pragmatic Guide to JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/1949853/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro JavaScript Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptrocks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/3176860/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secrets of the JavaScript Ninja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u9020_u7269_u4E3B_u6A21_u5F0F&quot;&gt;&lt;a href=&quot;#u9020_u7269_u4E3B_u6A21_u5F0F&quot; class=&quot;headerlink&quot; title=&quot;造物主模式&quot;&gt;&lt;/a&gt;造物主模式&lt;/h2&gt;&lt;p&gt;下面这些就是正儿八经的神级模式了… 当你已经把javascript里里外外摸得门清的时候, 就可以试试调整下面的了… 有一种去看汇编原理的感觉了… 开始研究底层源码了…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Standard ECMA-262 ECMAScript Language Specification 3rd edition (December 1999) – PDF File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Standard ECMA-262 ECMAScript Language Specification 5th edition (December 2009)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;JS_u76F8_u5173blog_u5206_u4EAB&quot;&gt;&lt;a href=&quot;#JS_u76F8_u5173blog_u5206_u4EAB&quot; class=&quot;headerlink&quot; title=&quot;JS相关blog分享&quot;&gt;&lt;/a&gt;JS相关blog分享&lt;/h2&gt;&lt;p&gt;除了书籍之外, 作者还推荐了一些可以订阅查看的博客~ 我根据其目前存活情况, 主题变更情况简单筛选了下(多数都已经失效了)~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dailyjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DailyJS&lt;/a&gt; - 强烈赞同, 很值得订阅!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Weekly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yui/theater/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YUI Theatre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://feeds.feedburner.com/reybango/zSyW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rey Bango&lt;/a&gt; 作者本人哈哈&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (8)</title><loc>http://taoalpha.me/blog/2015/06/27/book-javascript-the-definitive-guide-8/</loc><publish>2015-06-27T12:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;先说题外话: 昨天读到中途转去忙把以前的旧文章移植过来, 昨夜就已完成, 主要通过python解析了导出来的xml文本, 然后获取对应的时间信息和url信息组成符合jekyll规则的文件名, 再利用文本拼接出每个文件中固有的头和主体, 本来计划用&lt;a href=&quot;https://github.com/aaronsw/html2text&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html2text&lt;/a&gt;来把每个博文转为markdown, 不过后来源码有些问题, 对部分博文识别不好, 我也没时间细改, 所以就干脆拼接了html到主体中去.&lt;/p&gt;
&lt;p&gt;主要导入了当初写的&lt;a href=&quot;!--￼3--&amp;gt;/tag/Patch/&quot;&gt;Patch系列&lt;/a&gt;和针对UX写的&lt;a href=&quot;!--￼4--&amp;gt;/tag/译系列/&quot;&gt;翻译系列&lt;/a&gt;. 分别归类到了&lt;a href=&quot;!--￼5--&amp;gt;/tech&quot;&gt;Tech&lt;/a&gt;和&lt;a href=&quot;!--￼6--&amp;gt;/dandp&quot;&gt;DandP&lt;/a&gt;目录下. 有兴趣的可查看之~&lt;/p&gt;
&lt;p&gt;今天来继续完结&lt;code&gt;JavaScript: the Definitive Guide&lt;/code&gt;一书.&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;Chapter_20_-_Client-side_Storage&quot;&gt;&lt;a href=&quot;#Chapter_20_-_Client-side_Storage&quot; class=&quot;headerlink&quot; title=&quot;Chapter 20 - Client-side Storage&quot;&gt;&lt;/a&gt;Chapter 20 - Client-side Storage&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application cache&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;为了丰富web app的功能, 或者说让web app更加的像native app, 就有了&lt;code&gt;application cache&lt;/code&gt;这个机制, 从而让离线对于web app来说成为了可能;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application cache&lt;/code&gt;存储所有的静态格式, 包含&lt;code&gt;html&lt;/code&gt;,&lt;code&gt;css&lt;/code&gt;,&lt;code&gt;javascript&lt;/code&gt;,&lt;code&gt;images&lt;/code&gt;等等, 所有和web运行相关的资源文件;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application cache&lt;/code&gt;不作为常规&lt;code&gt;cache&lt;/code&gt;而被轻易清理掉, 它会一直保持直到被要求删除或者用户手动删除;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Manifest&lt;/code&gt;: 为了能够让浏览器将网页存储到&lt;code&gt;application cache&lt;/code&gt;里, 我们需要一个&lt;code&gt;manifest&lt;/code&gt;文件, 并将之引入到html的head中&lt;code&gt;&amp;lt;html manifest=&amp;quot;myapp.appcache&amp;quot;&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;此文件必须以&lt;code&gt;CACHE MANIFEST&lt;/code&gt;为起始行;&lt;/li&gt;
&lt;li&gt;列出所有需要加入application cache里的文件, 用相对路径, 相对与manifest文件而言;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;表示注释, 空行自动忽略;&lt;/li&gt;
&lt;li&gt;此文件生效的前提是其MIME属性为&lt;code&gt;text/cache-manifest&lt;/code&gt;, 即&lt;code&gt;Content-Type&lt;/code&gt;这个header属性, 通常你需要自行在server中添加对应的规则;&lt;/li&gt;
&lt;li&gt;如果网页由多个html组成, 则每个html都需要使用&lt;code&gt;&amp;lt;html manifest=&amp;quot;myapp.appcache&amp;quot;&amp;gt;&lt;/code&gt;声明, 指向同一个appcache文件即可;&lt;/li&gt;
&lt;li&gt;一旦缓存, 则所有资源文件都从缓存中获取, 未列出的资源不予加载;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Complex Manifest&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;manifest&lt;/code&gt;支持复杂规则, 其支持多个&lt;code&gt;section&lt;/code&gt;, 包含了&lt;code&gt;NETWORK:&lt;/code&gt;,&lt;code&gt;FALLBACK:&lt;/code&gt;这两类, 还要加上默认的&lt;code&gt;CACHE:&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NETWORK:&lt;/code&gt;: 所有不予cache必须要从网络获取的资源, 可以设定路径, 支持通配符&lt;code&gt;*&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FALLBACK:&lt;/code&gt;: 如其名, 优先从网络获取, 无法获取时从本地获取, 所以其每行指定两个url;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Update&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;Application Cache&lt;/code&gt;而言, 其更新主要依照&lt;code&gt;manifest&lt;/code&gt;, 浏览器会自动在情况允许时帮助你查看&lt;code&gt;manifest&lt;/code&gt;是否更新, 如有, 则重新缓存所有文件;&lt;/li&gt;
&lt;li&gt;注意: 浏览器不会自动帮你查看缓存的文件是否更新, 只查看&lt;code&gt;manifest&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;通常可以使用&lt;code&gt;#&lt;/code&gt;加一行version的注释行来强制更新;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;applicationCache.onupdateready&lt;/code&gt;: application cache提供了状态函数来指示其更新的进度, 你可以针对其加以操作, 还包含&lt;code&gt;onchecking&lt;/code&gt;,&lt;code&gt;onnoupdate&lt;/code&gt;,&lt;code&gt;ondownloading&lt;/code&gt;,&lt;code&gt;onprogress&lt;/code&gt;,&lt;code&gt;oncached&lt;/code&gt;,&lt;code&gt;onerror&lt;/code&gt;,&lt;code&gt;onobsolete&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;除了上述事件外, 还可以通过&lt;code&gt;applicationCache.status&lt;/code&gt;来探测其状态: &lt;code&gt;ApplicationCache.UNCACHED =&amp;gt; (0)&lt;/code&gt;,&lt;code&gt;ApplicationCache.IDLE =&amp;gt; (1)&lt;/code&gt;,&lt;code&gt;ApplicationCache.CHECKING =&amp;gt; (2)&lt;/code&gt;,&lt;code&gt;ApplicationCache.DOWNLOADING =&amp;gt; (3)&lt;/code&gt;,&lt;code&gt;ApplicationCache.UPDATEREADY =&amp;gt; (4)&lt;/code&gt;,&lt;code&gt;ApplicationCache.OBSOLETE =&amp;gt; (5)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swapCache()&lt;/code&gt;: 清楚旧或者废弃的缓存;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Delete&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;很简单, 删除&lt;code&gt;manifest&lt;/code&gt;, 去掉html中的引用即可;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# appVersion: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CACHE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myapp.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myapp.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myapp.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;videos/ offline_help.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgi/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就算是一个最基本的&lt;code&gt;manifest&lt;/code&gt;了.&lt;/p&gt;
&lt;h3 id=&quot;Chapter_21_-_Scripted_Media_and_Graphics&quot;&gt;&lt;a href=&quot;#Chapter_21_-_Scripted_Media_and_Graphics&quot; class=&quot;headerlink&quot; title=&quot;Chapter 21 - Scripted Media and Graphics&quot;&gt;&lt;/a&gt;Chapter 21 - Scripted Media and Graphics&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Images&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onmouseover&lt;/code&gt;: 鼠标&lt;code&gt;hover&lt;/code&gt;移入事件;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onmouseout&lt;/code&gt;: 鼠标&lt;code&gt;hover&lt;/code&gt;移出事件;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new Image()&lt;/code&gt;: 通过创建一个&lt;code&gt;Image&lt;/code&gt;对象, 可以赋予其&lt;code&gt;src&lt;/code&gt;属性从而实现预加载的功能;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Audio&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(new Audio()).canPlayType(type)&lt;/code&gt;: 检测某种类型的文件是否能播放;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;play()&lt;/code&gt;: 播放;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialTime&lt;/code&gt;: 初始播放进度;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: 文件总时长;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currentTime&lt;/code&gt;: 当前播放进度;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muted&lt;/code&gt;: boolean, 是否静音;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volume&lt;/code&gt;: 音量值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controls&lt;/code&gt;: boolean, 是否显示控件;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt;: boolean, 是否循环;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preload&lt;/code&gt;: 是否预加载以及预加载类型, &lt;code&gt;metadata&lt;/code&gt;表示加载时长,帧速等, &lt;code&gt;auto&lt;/code&gt;表示尽可能预加载更多的内容, &lt;code&gt;none&lt;/code&gt;什么都不预加载;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt;: boolean, 是否自动播放;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playbackRate&lt;/code&gt;: 播放速度(1.0 == normal speed);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readyState&lt;/code&gt;: 加载情况(0,1,2,3,4)=&amp;gt;(尚未加载, 已加载但当前位置未加载, 当前位置已开始加载但是不足以开始播放(下一帧还没加载好),已加载且足够播放但是不足以播放到结尾,加载基本足够可以播放至结束)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;networkState&lt;/code&gt;: 当前媒体文件使用网络的情况(0,1,2,3)=&amp;gt;(还没开始, 没开始但可能已经加载完或者预加载设置为none, 正在使用中, 无法找到资源);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt;: 错误信息(1,2,3,4)=&amp;gt;(用户手动停止, 类型正确网络不通畅, encoding问题, 类型不支持)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Video&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;2015-06-27/Video-Event-Type.png&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SVG: Scalable Vector Graphics&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SVG算是一种xml格式的矢量图类型;&lt;/li&gt;
&lt;li&gt;最新的主流浏览器基本都支持直接在&lt;code&gt;img&lt;/code&gt;中嵌入svg, 部分老的浏览器依然只支持使用&lt;code&gt;object&lt;/code&gt;标签: &lt;code&gt;&amp;lt;object data=&amp;quot;sample.svg&amp;quot; type=&amp;quot;image/svg+xml&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一定程度上SVG很像&lt;code&gt;canvas&lt;/code&gt;, 不过它是通过XML的属性来实现的(比如通过&lt;code&gt;&amp;lt;line x1=&amp;#39;50&amp;#39; y1=&amp;#39;5.000&amp;#39; x2=&amp;#39;50.00&amp;#39; y2=&amp;#39;10.00&amp;#39;/&amp;gt;&lt;/code&gt;来画线);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Canvas&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为HTML5引入的一个可谓是最重要的标签之一, canvas的存在极大的丰富了网络的表现形式;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canvas&lt;/code&gt;和js的关系紧密, 因为其绘画的实现方式就是通过js;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canvas.getContext(&amp;#39;2d&amp;#39;/&amp;#39;3d&amp;#39;)&lt;/code&gt;: 通过它创建的对象就可以在画布上尽情挥洒了;&lt;/li&gt;
&lt;li&gt;很多canvas的函数本质都是数学坐标的公式运算!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我会在后面阅读的&lt;a href=&quot;http://book.douban.com/subject/6383126/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 Canvas&lt;/a&gt;中更加详细的研究canvas的各种用法~ 敬请期待~&lt;/p&gt;
&lt;img class=&quot;2015-06-27/canvas-api.png&quot;&gt;  
&lt;h3 id=&quot;Chapter_22_-_HTML5_APIs&quot;&gt;&lt;a href=&quot;#Chapter_22_-_HTML5_APIs&quot; class=&quot;headerlink&quot; title=&quot;Chapter 22 - HTML5 APIs&quot;&gt;&lt;/a&gt;Chapter 22 - HTML5 APIs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Geolocation:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;navigator.geolocation.getCurrentPosition()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navigator.geolocation.watchPosition()&lt;/code&gt;: 在用户位置变化时唤醒;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navigator.geolocation.clearWatch()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/agrayson/pen/IvjCi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;History Management:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pushState()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replaceState()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/lodr/pen/ldcwk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross-Origin Messaging:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onmessage()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/matt-west/pen/lpExI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Workers:&lt;ul&gt;
&lt;li&gt;通常来说, js的执行是单线程的, 不支持多线程, 利用&lt;code&gt;Worker&lt;/code&gt;可以稍稍的模拟下多线程;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Worker&lt;/code&gt;开启的执行不能对window和Dom有任何的操作, 和主线程只能通过&lt;code&gt;postMessage()&lt;/code&gt;来交互;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Worker&lt;/code&gt;对象的工作域是&lt;code&gt;WorkerGlobalScope&lt;/code&gt;, 完全和主线程工作域不同;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Worker&lt;/code&gt;支持&lt;code&gt;importScripts&lt;/code&gt;来引入其需要的js库;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/lodr/pen/qpfEy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt; - 因为跨域问题, 所以这里不能执行, 不过代码很简单, 很好理解, 有兴趣的可以download到本地测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Typed Arrays and ArrayBuffers:&lt;ul&gt;
&lt;li&gt;HTML5 的数组类型变的更加强大, 开始出现类似&lt;code&gt;Int8Array()&lt;/code&gt;,&lt;code&gt;Uint8Array()&lt;/code&gt;等多种新形式;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/lodr/pen/ymlgt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blobs:&lt;ul&gt;
&lt;li&gt;算是存储的一种新形势, 浏览器通常可以存储&lt;code&gt;Blobs&lt;/code&gt;到内存或者硬盘中, &lt;code&gt;blobs&lt;/code&gt;本身更是可以代表任何数据, 以二进制的形式;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/davidelrizzo/pen/cxsGb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Filesystem API: 开启本地文件交互时代;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/lodr/pen/aHwtn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client-Side Databases: 主要为IndexedDB;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/gtorodelvalle/pen/puBoE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Sockets: 一种相对http来说的新网络协议;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/matt-west/pen/tHlBb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例 codepen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面针对HTML 5的各个API给出了一个对应的实例, 毕竟看着具体的代码和例子才有意思哈哈&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript the Definitive Guide 6th edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (7)</title><loc>http://taoalpha.me/blog/2015/06/26/book-javascript-the-definitive-guide-7/</loc><publish>2015-06-26T06:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;Chapter_15_-_Scripting_Documents&quot;&gt;&lt;a href=&quot;#Chapter_15_-_Scripting_Documents&quot; class=&quot;headerlink&quot; title=&quot;Chapter 15 - Scripting Documents&quot;&gt;&lt;/a&gt;Chapter 15 - Scripting Documents&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Selecting:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.getElementById(id)&lt;/code&gt;: 通过id, 一个id对应一个元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.getElementsByName(name)&lt;/code&gt;: 通过name, 可多个;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.getElementsByTagName(tagname)&lt;/code&gt;: 通过标签名;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.getElementsByClassName(class_name)&lt;/code&gt;: 通过类名;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelectorAll(css_selector)&lt;/code&gt;: 通过css的选择器, 返回所有匹配;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelector(css_selector)&lt;/code&gt;: 返回首个匹配;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trees of Nodes:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parentNode&lt;/code&gt;: 父节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;childNodes&lt;/code&gt;: 子节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstChild, lastChild&lt;/code&gt;: 首个或者最后一个子节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextSibling, previousSibling&lt;/code&gt;: 下一或者上一兄弟姐妹节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeType&lt;/code&gt;: 节点类型, Document 节点返回9, 元素节点返回1, 文本节点返回3,注释节点返回8, DocumentFragment节点返回11;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeValue&lt;/code&gt;: 当前节点的文本内容;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodeName&lt;/code&gt;: 标签名, 大写;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trees of Elements: 忽略所有的文本节点和注释节点;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;firstElementChild, lastElementChild&lt;/code&gt;: 返回首个或者最后一个元素节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextElementSibling, previousElementSibling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;childElementCount&lt;/code&gt;: 返回子元素节点的个数;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attributes of Elements:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getAttribute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setAttribute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasAttribute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeAttribute()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dataset Attributes: 由HTML5引入, 所有带&lt;code&gt;data-&lt;/code&gt;前缀的属性都算是合法的html元素属性.&lt;/li&gt;
&lt;li&gt;Element Content:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outerHTML&lt;/code&gt;: 包含匹配元素自身标签;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertAdjacentHTML()&lt;/code&gt;: 允许指定插入位置&lt;code&gt;beforebegin, afterbegin, beforeend or afterend&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textContent&lt;/code&gt;: IE不支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;innerText&lt;/code&gt;: IE支持, 功能同上;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating,Inserting, and Deleting Nodes&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createElement(tag_name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.createTextNode(text)&lt;/code&gt;: 创建文本节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.createComment(text)&lt;/code&gt;: 创建注释节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.createDocumentFragment()&lt;/code&gt;: 创建孤立节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_name.cloneNode()&lt;/code&gt;: 复制当前节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element_node.appendChild(element_node_2)&lt;/code&gt;: 由后插入;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element_node.insertBefore(element_node_2)&lt;/code&gt;: 由前插入;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeChild()&lt;/code&gt;: 移除当前节点&lt;code&gt;n.parentNode.removeChild(n);&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replaceChild()&lt;/code&gt;: 替换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DocumentFragment: 孤立节点, 其没有母节点(null), 当&lt;code&gt;appendChild()&lt;/code&gt;等操作针对其时, 操作执行对象自动变为其所有子节点, 且操作完成后, 其自身为空;&lt;/li&gt;
&lt;li&gt;viewport: 表示实际展示内容的窗口, 在顶层网页中为去除浏览器菜单等等之外的部分, 而在&lt;code&gt;iframe&lt;/code&gt;中则为&lt;code&gt;iframe&lt;/code&gt;定义的frame大小;&lt;/li&gt;
&lt;li&gt;document: 表示页面内容的窗口, 通常都大于viewport;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBoundingClientRect()&lt;/code&gt;: 返回节点的长宽,上下左右边界属性&lt;code&gt;width,height,top,left,bottom,right&lt;/code&gt;, &lt;strong&gt;返回的结果是基于viewport的&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.elementFromPoint()&lt;/code&gt;: 返回x,y处的元素节点 - 根据z-index, 从外到内的返回;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll(), scrollTo(), scrollBy()&lt;/code&gt;: 窗口滚动控制, 最后的&lt;code&gt;scrollBy()&lt;/code&gt;传入的x,y表示在原有的基础上的增加值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollIntoView()&lt;/code&gt;: 滚动到某个节点;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.forms&lt;/code&gt;: 获取页面中所有form元素;&lt;/li&gt;
&lt;li&gt;其他document属性:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastModified&lt;/code&gt;: 修改时间;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location&lt;/code&gt;: 等同于&lt;code&gt;window.location&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;referrer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;: 之前提到过, 其只保存打开时的当前链接, 不随页面内的动态变化而变化;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_16_-_Scripting_CSS&quot;&gt;&lt;a href=&quot;#Chapter_16_-_Scripting_CSS&quot; class=&quot;headerlink&quot; title=&quot;Chapter 16 - Scripting CSS&quot;&gt;&lt;/a&gt;Chapter 16 - Scripting CSS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;js可以通过&lt;code&gt;node.style&lt;/code&gt;来访问元素样式属性, 可以获取, 赋予; 而通过更加复杂的函数变化, 就可以创造出一些很棒的动效来, 在css3之前, 所有的非gif或者flash动效基本都是通过js实现的.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.getComputedStyle(element,&amp;quot;null or :first-line etc&amp;quot;)&lt;/code&gt;则可以获取某个元素(或者某个元素的伪类)的所有样式属性, 同时获取的值都会自动转为标准的绝对值(比如设定的百分比也会自动计算出来返回),但是其不能赋予;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disableStylesheet()&lt;/code&gt;可以禁止某个元素的所有样式, 如果传入的是数字, 那么会按照&lt;code&gt;document.styleSheets&lt;/code&gt;的顺序查找, 如果是string, 则作为css selector查询对应的元素;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertRule(rules,insert_index), deleteRule(rules)&lt;/code&gt; 即插入整条的结构化的css语句, IE下对应的函数为&lt;code&gt;addRule(),removeRule()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.createStyleSheet&lt;/code&gt;则可以创建一个新的样式表, 等价于在head里面创建一个&lt;code&gt;style&lt;/code&gt;标签;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_17_-_Handling_Events&quot;&gt;&lt;a href=&quot;#Chapter_17_-_Handling_Events&quot; class=&quot;headerlink&quot; title=&quot;Chapter 17 - Handling Events&quot;&gt;&lt;/a&gt;Chapter 17 - Handling Events&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Events的类型&lt;ul&gt;
&lt;li&gt;Device-dependent input events:&lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keypress&lt;/code&gt;, &lt;code&gt;keyup&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, &lt;code&gt;gesturechange&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Device-independent input events: &lt;code&gt;click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User interface events: &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;State-change events: &lt;code&gt;loadstart&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;loadend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;API-specific events: &lt;code&gt;dragstart&lt;/code&gt;, &lt;code&gt;dragenter&lt;/code&gt;, &lt;code&gt;dragover&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;waiting&lt;/code&gt;, &lt;code&gt;playing&lt;/code&gt;, &lt;code&gt;seeking&lt;/code&gt;, &lt;code&gt;volumechange&lt;/code&gt; etc&lt;/li&gt;
&lt;li&gt;Timers and error handlers;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Handlers:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Event Handler Attributes&lt;/code&gt;: &lt;code&gt;onclick=&amp;quot;&amp;quot;&lt;/code&gt;,&lt;code&gt;window.onload = f()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addEventListener(event_name,function,[capturing event handler])&lt;/code&gt;: 添加事件, 最后的&lt;code&gt;capturing&lt;/code&gt;通常为false;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeEventListener()&lt;/code&gt;: 和上面的add相反;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stopPropagation()&lt;/code&gt;: js的事件触发是沿着DOM树向上传递的, 而通过&lt;code&gt;stopPropagation()&lt;/code&gt;就能抑制这一环节;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preventDefault()&lt;/code&gt;: 很多元素有其自身的事件属性, 比如a标签的跳转, form元素的提交, 当我们想要取消其默认事件的发生时, 可以使用此函数来阻止其发生;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说, 这一章内容其实很丰富, 但是其内容多数都是建立在之前的基本内容之上的. 着重需要知道的就是各种不同的事件, 其支持的元素, 类型以及触发的方式即可. 此类用法主要还是多用多练, 可以试试不同的event都包含那些属性~哈哈&lt;/p&gt;
&lt;h3 id=&quot;Chapter_18_-_Scripted_HTTP&quot;&gt;&lt;a href=&quot;#Chapter_18_-_Scripted_HTTP&quot; class=&quot;headerlink&quot; title=&quot;Chapter 18 - Scripted HTTP&quot;&gt;&lt;/a&gt;Chapter 18 - Scripted HTTP&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XMLHttpRequest:&lt;ul&gt;
&lt;li&gt;Ajax: 由js端发起, 通过http请求和服务端交互;&lt;/li&gt;
&lt;li&gt;Comet: 由服务端发起, js如果需要反应则使用Ajax回应, 通常由&lt;code&gt;EventSource&lt;/code&gt;对象处理;&lt;/li&gt;
&lt;li&gt;标准流程:&lt;code&gt;new XMLHttpRequest()&lt;/code&gt;=&amp;gt;&lt;code&gt;open(&amp;#39;type of request&amp;#39;, url,[],[username],[userpassword])&lt;/code&gt;=&amp;gt;&lt;code&gt;setRequestHeader()&lt;/code&gt;=&amp;gt;&lt;code&gt;send([content_body])&lt;/code&gt;&amp;lt;=&lt;code&gt;onreadystatechange&lt;/code&gt;&amp;lt;=&lt;code&gt;customized handler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通常&lt;code&gt;GET&lt;/code&gt;类型的请求我们会通过&lt;code&gt;encodeURIComponent&lt;/code&gt;来进行url拼接, 直接在url中体现, &lt;code&gt;send()&lt;/code&gt;的时候就不用传值了;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;类型的请求通常以json格式传递, 我们需要在&lt;code&gt;send()&lt;/code&gt;中传入&lt;code&gt;JSON.stringify()&lt;/code&gt;的数据, 当然如果是XML的POST, 那么直接传入对应的doc即可, 而像file这类的文件实体, 也是直接传入对应的实体即可;&lt;/li&gt;
&lt;li&gt;起中&lt;code&gt;Header&lt;/code&gt;部分我们只能自行设定部分, 而&lt;code&gt;Content-Length&lt;/code&gt;,&lt;code&gt;Date&lt;/code&gt;,&lt;code&gt;Referer&lt;/code&gt;,&lt;code&gt;User-Agent&lt;/code&gt;等等都由浏览器自动帮我们填上了;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readyState&lt;/code&gt;: UNSENT 0(&lt;code&gt;open()&lt;/code&gt;还没执行); OPENED 1(&lt;code&gt;open()已经执行&lt;/code&gt;);HEADERS_RECEIVED 2(headers已被接收),LOADING 3(正在接受返回),DONE 4(完毕).&lt;/li&gt;
&lt;li&gt;XMLHttpRequest对象有一个&lt;code&gt;onprogress&lt;/code&gt;的属性可以用来检测其执行进度, 它对应的属性值中包含了&lt;code&gt;lengthComputable&lt;/code&gt;, &lt;code&gt;loaded&lt;/code&gt;,&lt;code&gt;total&lt;/code&gt;, 通过这三个就可以做一个简单的进度条跟踪请求的进度了;&lt;/li&gt;
&lt;li&gt;如果是上传行为, 其&lt;code&gt;onprogress&lt;/code&gt;属性存在于&lt;code&gt;XMLHttpRequest_Object.upload.onprogress&lt;/code&gt;之中;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abort()&lt;/code&gt;: 用来取消请求;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EventSource:&lt;ul&gt;
&lt;li&gt;标准流程: &lt;code&gt;new EventSource(&amp;quot;url_to_server_file&amp;quot;)&lt;/code&gt; =&amp;gt; &lt;code&gt;onmessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_19_-_The_jQuery_Library&quot;&gt;&lt;a href=&quot;#Chapter_19_-_The_jQuery_Library&quot; class=&quot;headerlink&quot; title=&quot;Chapter 19 - The jQuery Library&quot;&gt;&lt;/a&gt;Chapter 19 - The jQuery Library&lt;/h3&gt;&lt;p&gt;jQuery流行度的一大证据之一! 哈哈 我计划抽时间好好读一下jQuery的源码, 所以这里只是大概扫了一遍, 基本也都是应用层面的, 多数我差不多都使用过~哈哈&lt;/p&gt;
&lt;h3 id=&quot;Chapter_20_-_Client-Side_Storage&quot;&gt;&lt;a href=&quot;#Chapter_20_-_Client-Side_Storage&quot; class=&quot;headerlink&quot; title=&quot;Chapter 20 - Client-Side Storage&quot;&gt;&lt;/a&gt;Chapter 20 - Client-Side Storage&lt;/h3&gt;&lt;p&gt;我在早先做chrome插件&lt;a href=&quot;zzgary.info&quot;&gt;详见我的portfolio&lt;/a&gt;的时候, &lt;a href=&quot;http://callmet.zzgary.info/2014/02/04/data-storage-patch-day40-web-app-in/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;写过一篇专门介绍web存储的文章&lt;/a&gt;. 恩, 当时写了不少&lt;code&gt;patch&lt;/code&gt;系列, 哈哈, 改天写个脚本全部导出来转移过来.&lt;/p&gt;
&lt;p&gt;恩&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript the Definitive Guide 6th edition&lt;/a&gt; 我现在就去写导入工具… 今天就到这里吧, 明天算是最后一篇就能完结本书啦~&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (6)</title><loc>http://taoalpha.me/blog/2015/06/25/book-javascript-the-definitive-guide-6/</loc><publish>2015-06-25T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;正式进入本书第二部分的内容, 核心主要围绕在浏览器内的js. 包含了最基本的使用方式, 方法, 因浏览器而增加的各种属性方法, 操作css, dom的方法, 以及常用的一些js框架, 库等, 同时还包含了目前浏览器大热的安全领域.&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;Chapter_13_-_JavaScript_in_Web_Browsers&quot;&gt;&lt;a href=&quot;#Chapter_13_-_JavaScript_in_Web_Browsers&quot; class=&quot;headerlink&quot; title=&quot;Chapter 13 - JavaScript in Web Browsers&quot;&gt;&lt;/a&gt;Chapter 13 - JavaScript in Web Browsers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异步:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;: 使浏览器在解析并加载渲染完HTML的DOM后加载此js脚本;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt;: 使浏览器在尽快执行js脚本, 但在下载js脚本时不停止DOM的解析, 优先级高于&lt;code&gt;defer&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;使用方式为在script中增加关键字即可: &lt;code&gt;&amp;lt;script defer src=&amp;quot;deferred.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;注意在使用&lt;code&gt;defer/async&lt;/code&gt;的时候, js中不能使用&lt;code&gt;document.write()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.readyState&lt;/code&gt;的变化过程: &lt;code&gt;loading(async downloading, normal executing) =&amp;gt; interactive (defer/async executing) =&amp;gt; complete(defer/async done, event handlers invoked)&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compatibility Check&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;按照目前的浏览器格局, 基本上一个浏览器就有着一种js的版本, 除了标准版本的基础功能之外, 所有的扩展功能, 各家与各家的实现方式都略有不同, 所以在使用过程中, 就需要我们考虑到兼容性的问题;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can I Use…&lt;/a&gt;, 这是一个非常优秀的检测某个属性, 方法的浏览器支持度, 拿不准的都可以在这里进行查询确认, 其还支持css和html5的检测;&lt;/li&gt;
&lt;li&gt;IE5的时候引入了一个&lt;code&gt;Conditional Comments&lt;/code&gt;的技巧, 是通过特殊的html注释从而让浏览器识别其IE版本, 比如&lt;code&gt;&amp;lt;!--[if lte IE 7]&amp;gt;&amp;lt;![endif]--&amp;gt;&lt;/code&gt;就代表IE7及以下, 而写在这个if里面的内容就会在IE7及以下的浏览器中被识别并作为页面html的一部分而提取出来(仅限IE浏览器), 其他的浏览器都会自动当做注释不理会此部分;&lt;/li&gt;
&lt;li&gt;IE的JS也支持&lt;code&gt;Conditional Comments&lt;/code&gt;, 比如&lt;code&gt;/*@cc_on @if (@_jscript)...@end @*/&lt;/code&gt;, 这里面&lt;code&gt;@cc_on...@*/&lt;/code&gt;是整个&lt;code&gt;Conditional Comments&lt;/code&gt;, 而里面的&lt;code&gt;@if (@_jscript)...@end&lt;/code&gt;则是判断部分, 其中&lt;code&gt;@_jscript&lt;/code&gt;是IE自身js编译器的名称;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Accessibility&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;对于身体原因而有不便的人, js的支持效果会大打折扣, 所以根据这部分人的情况而优化自身的网页结构, 目前也是网页设计的一大核心之一;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Security&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;随着js的发展使用, 其危害性也日益提升;&lt;/li&gt;
&lt;li&gt;目前的保障安全手段主要有:&lt;code&gt;限制其功能&lt;/code&gt;,&lt;code&gt;限制其使用范围和情景&lt;/code&gt;,&lt;code&gt;敏感权限默认关闭虚人工开启&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;The Same-Origin Policy&lt;/code&gt;: js只允许读取与&lt;strong&gt;当前执行环境&lt;/strong&gt;域名相同域名下的windows属性, 那么怎么界定相同域名呢:&lt;ul&gt;
&lt;li&gt;来自不同的网络服务器;&lt;/li&gt;
&lt;li&gt;来自相同的网络服务器, 不同的端口;&lt;/li&gt;
&lt;li&gt;同一网络服务器, 同一端口, 不同的http协议(http,https);&lt;/li&gt;
&lt;li&gt;以上, 都认为是不同域名;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何舒缓此规则:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.domain&lt;/code&gt;: 考虑到同级子域名也会被禁止, 那么通过设定&lt;code&gt;document.domain&lt;/code&gt;为同一母域名即可实现同级子域名的跨域;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cross-Origin Resource Sharing&lt;/code&gt;: 通过http请求新增的&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;头部, 服务器就可以指定其允许跨域的程度了;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cross-document messaging&lt;/code&gt;: HTML5新增了一些很强大的API,&lt;code&gt;cross-document messaging API&lt;/code&gt;就是其中之一, 它允许不同的document之间的js进行通讯;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_14_-_The_Window_Object&quot;&gt;&lt;a href=&quot;#Chapter_14_-_The_Window_Object&quot; class=&quot;headerlink&quot; title=&quot;Chapter 14 - The Window Object&quot;&gt;&lt;/a&gt;Chapter 14 - The Window Object&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Timers:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout()&lt;/code&gt;: 延时触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval()&lt;/code&gt;: 定时循环执行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;: 清除延时触发;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearInterval()&lt;/code&gt;: 清除定时循环;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Location:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.location === document.location&lt;/code&gt; 两者皆为当前页面url, 并随页面url变化而更新;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.URL&lt;/code&gt; 也是指代加载后的当前页面, 但不随页面内动态变化引起的url变化而变化;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Location&lt;/code&gt;这个对象本身包含了多个属性分别指代url的不同部分:&lt;code&gt;protocol&lt;/code&gt;表示网络协议, &lt;code&gt;host, hostname&lt;/code&gt;通常都指示域名,前者包含端口, &lt;code&gt;port&lt;/code&gt;表示端口, &lt;code&gt;pathname&lt;/code&gt;表示以域名根目录为&lt;code&gt;/&lt;/code&gt;的相对路径, &lt;code&gt;search&lt;/code&gt;表示url中&lt;code&gt;?&lt;/code&gt;以后的部分但不包含&lt;code&gt;hash&lt;/code&gt;部分, &lt;code&gt;hash&lt;/code&gt;则是表示url&lt;code&gt;#&lt;/code&gt;以后的部分;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Location&lt;/code&gt;还包含了三个常用的函数:&lt;code&gt;assign()&lt;/code&gt;,&lt;code&gt;replace()&lt;/code&gt;,&lt;code&gt;reload()&lt;/code&gt;, 其中前两者功能都一样, 都是用以加载新页面的, 不过&lt;code&gt;replace()&lt;/code&gt;加载的同时将当前页面从&lt;code&gt;history&lt;/code&gt;中去除了(就是不能后退后之前页面了), 而&lt;code&gt;assign()&lt;/code&gt;还保留着; &lt;code&gt;reload()&lt;/code&gt;就更不用说了, 只是单纯的重载页面;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;History:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;back()&lt;/code&gt;,&lt;code&gt;forward()&lt;/code&gt;: 等价于浏览器的后退,前进按钮;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go(n)&lt;/code&gt;: 接受数字作为参数, 表示向前或者后退n个页面;&lt;/li&gt;
&lt;li&gt;如果页面中有&lt;code&gt;iframe&lt;/code&gt;, 那么其history会自动合并到主界面的history中;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Navigator:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appName&lt;/code&gt;: 浏览器的名称;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appVersion&lt;/code&gt;: 浏览器版本号;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userAgent&lt;/code&gt;: 用户代理, 对应HTTP的&lt;code&gt;USER-AGENT&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;platform&lt;/code&gt;: 操作系统;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onLine&lt;/code&gt;: 是否连通网络, HTML5支持;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geolocation&lt;/code&gt;: 用户地理位置信息, HTML5支持;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javaEnabled()&lt;/code&gt;: 对Java扩展的支持, 非标准;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookiesEnabled()&lt;/code&gt;: 能够设置cookie, 非标准;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Screen:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;,&lt;code&gt;height&lt;/code&gt;: 当前屏幕的长宽尺寸;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;availWidth&lt;/code&gt;,&lt;code&gt;availHeight&lt;/code&gt;: 去除功能区等部分之后的实际展现内容的屏幕尺寸;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;colorDepth&lt;/code&gt;: 显示屏幕的bits-per-pixel;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dialog Boxes:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alert()&lt;/code&gt;: 弹出对话框, 展示传入的信息;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;confirm()&lt;/code&gt;: 自带&lt;code&gt;OK&lt;/code&gt;,&lt;code&gt;Cancel&lt;/code&gt;按钮的对话框, 返回对应的boolean值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prompt()&lt;/code&gt;: 附带输入框, 返回输入的值;&lt;/li&gt;
&lt;li&gt;上述三个类型的对话框的样式结构都无法调整, 是浏览器默认设定的;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showModalDialog()&lt;/code&gt;: 则更加复杂, 它可以支持弹出一个页面, 其接受的第一个参数即为页面的url, 后面的参数则是弹出窗口的属性; &lt;em&gt;在chromium中已经被禁止了&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;onerror handler:&lt;ul&gt;
&lt;li&gt;用于处理错误信息的, 你完全可以定制这个函数来更好的显示js中的错误信息;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Document Elements As Window Properties:&lt;ul&gt;
&lt;li&gt;当一个html元素被赋予了id时, 其id对应名称的全局变量不存在时, 其自动转为全局变量, 属性名称即为id名, 但如果id名已经被使用, 则不生效;&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;&amp;lt;a&amp;gt; &amp;lt;applet&amp;gt; &amp;lt;area&amp;gt; &amp;lt;embed&amp;gt; &amp;lt;form&amp;gt; &amp;lt;frame&amp;gt; &amp;lt;frameset&amp;gt; &amp;lt;iframe&amp;gt; &amp;lt;img&amp;gt; &amp;lt;object&amp;gt;&lt;/code&gt;这样的元素, 其name值和id效果是一样的, 且name值支持多个元素相同, 会自动生成类array形式, 对于&lt;code&gt;iframe&lt;/code&gt;, 对应的属性会指向其内嵌窗口的window对象;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiple Windows and Frames:&lt;ul&gt;
&lt;li&gt;通过js打开的新窗口都可以被js获取到, 并进行操作, 但是需要符合&lt;code&gt;same-origin&lt;/code&gt;的原则;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frame&lt;/code&gt;嵌入的窗口可以通过&lt;code&gt;parent.frames&lt;/code&gt;属性来获取, 也可以通过其自带的&lt;code&gt;contentWindow&lt;/code&gt;来获取;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u8C1C_u9898&quot;&gt;&lt;a href=&quot;#u8C1C_u9898&quot; class=&quot;headerlink&quot; title=&quot;谜题&quot;&gt;&lt;/a&gt;谜题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Q: 在测试&lt;code&gt;same-origin&lt;/code&gt;的时候, 发现有些网站可以设定子域名的&lt;code&gt;document.domain&lt;/code&gt;为母域名, 有些不能? 比如在google的搜索结果页, 就可以, 但是在github pages中想要设置为&lt;code&gt;github.io&lt;/code&gt;就不可以, 会出现&lt;code&gt;&amp;#39;github.io&amp;#39; is a top-level domain.&lt;/code&gt;这样的错误?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript the Definitive Guide 6th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can I Use …&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6725890/location-host-vs-location-hostname-and-cross-browser-compatibility&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;host and hostname&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (5)</title><loc>http://taoalpha.me/blog/2015/06/24/book-javascript-the-definitive-guide-5/</loc><publish>2015-06-24T08:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在十到十二章中, 第十章的正则表达式内容最为丰富, 也是目前应用即为广泛的内容之一. 不过这里也主要是结合js的应用, 实际上正则表达式本身就是一个很值得研究的话题, 有不少书都在谈这个话题, 我后面要读的书目中恰巧就有这么一本, 后面会更加详细的学习以下正则表达式的方方面面.&lt;/p&gt;
&lt;p&gt;十一章算是非常前沿, 高端或者说冷门的点了, 随着浏览器的盛行以及技术的进步, 安全问题始终都是一个很重视的点, 而在这种攻防演练中也促进了js本身的进步, 而主流浏览器本身更是走在了js的最前沿. 各种新的属性都是由他们引入而逐渐成为标准的;&lt;/p&gt;
&lt;p&gt;十二章主要是对走出浏览器的JS做了一个简单的介绍, 而NodeJS的大名在近几年在前后端, 全端领域都可谓是人尽皆知. 我也会在之后阅读相关书籍的时候做更详细的笔记记录.&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;Chapter_10_-_Pattern_Matching_Regular_Expressions&quot;&gt;&lt;a href=&quot;#Chapter_10_-_Pattern_Matching_Regular_Expressions&quot; class=&quot;headerlink&quot; title=&quot;Chapter 10 - Pattern Matching Regular Expressions&quot;&gt;&lt;/a&gt;Chapter 10 - Pattern Matching Regular Expressions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normal repetition characters&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{m,n}&lt;/code&gt; 匹配m-n次;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m,}&lt;/code&gt; 匹配至少m次;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m}&lt;/code&gt; 匹配恰好m次;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 匹配0或1次;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; 匹配1或多次;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 匹配0或多次;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nongreedy repetition&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;??&lt;/code&gt;, &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;*?&lt;/code&gt; 在常规的匹配后加上&lt;code&gt;?&lt;/code&gt;就能让匹配尽可能发生的短, 它会在允许范围内, 找到尽可能短的匹配;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alternation, Grouping, Reference&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; 表示匹配前者或者后者;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(...)&lt;/code&gt; 成组, 以组的形式来使用&lt;code&gt;*,+,?&lt;/code&gt;等, 同时会记录组的匹配以用于&lt;code&gt;Reference&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?:...)&lt;/code&gt; 只是成组, 不记录匹配, 不能用于&lt;code&gt;reference&lt;/code&gt;, 也不算做&lt;code&gt;reference&lt;/code&gt;的序号中去;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt; 引用, n表示序号, 从1开始, 代表之前第几个group的匹配, 用于匹配开头结尾相同且多样的有奇效:&lt;code&gt;/([&amp;#39;&amp;quot;])[^&amp;#39;&amp;quot;]*\1/&lt;/code&gt; 匹配单引号或者双引号内的内容;&lt;/li&gt;
&lt;li&gt;需要注意的就是, &lt;code&gt;reference&lt;/code&gt;不能用于&lt;code&gt;[]&lt;/code&gt;的&lt;code&gt;character class&lt;/code&gt;之中!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;anchor characters&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;: 匹配开头;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;: 匹配结尾;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt;: 匹配词边界, &lt;code&gt;/\bJava\b/&lt;/code&gt; =&amp;gt; &lt;code&gt;Java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\B&lt;/code&gt;: 匹配非词边界, &lt;code&gt;/\B[Ss]cript\B/&lt;/code&gt; =&amp;gt; &lt;code&gt;JavaScript, postscript...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?=p&lt;/code&gt;: 表示内容需要匹配p规则,但是返回的命中中不包含这部分;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?!p&lt;/code&gt;: 表示内容不匹配p规则;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: 大小写敏感, 即区分大小写;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt;: 全局匹配, 默认是匹配首个;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: 多行匹配;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String Methods for Pattern Matching&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;search()&lt;/code&gt;: 返回匹配词的位置或者-1代表无返回;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;: 支持正则匹配替换, 同时支持替换时使用&lt;code&gt;$n&lt;/code&gt;代表是正则匹配的引用, 比如&lt;code&gt;text.replace(/&amp;quot;([^&amp;quot;]*)&amp;quot;/g, &amp;#39;“$1”&amp;#39;);&lt;/code&gt;即替换&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;为&lt;code&gt;“”&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match()&lt;/code&gt;: 返回包含了匹配的结果, 返回结构为数组格式;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;: 接受正则匹配作为其分隔符, 比如: &lt;code&gt;&amp;quot;1, 2, 3&amp;quot;.split(/\s*,\s*/); =&amp;gt; [&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;]&lt;/code&gt;, 就去掉了本来直接&lt;code&gt;split()&lt;/code&gt;多余的空格;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegExp prototype method&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;: 基本等同&lt;code&gt;match()&lt;/code&gt;, 不过接受的是string类型去匹配, 而由正则去调用, 当表达式加了全局flag后, &lt;code&gt;exec()&lt;/code&gt;每次执行会记录其上次匹配的位置并从此开始新的匹配, 比如:&lt;code&gt;var pattern = /Java/g;pattern.exec(&amp;quot;JavaScript is more fun than Java!&amp;quot;).indexpattern.exec(&amp;quot;JavaScript is more fun than Java!&amp;quot;).index&lt;/code&gt;就会相继输出&lt;code&gt;0,28&lt;/code&gt;两个位置;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test()&lt;/code&gt;: 用以检测表达式是否匹配了传入的string, 其执行逻辑(g模式下记录上次匹配位置)和&lt;code&gt;exec()&lt;/code&gt;一样;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_11_-_JavaScript_Subsets_and_Extensions&quot;&gt;&lt;a href=&quot;#Chapter_11_-_JavaScript_Subsets_and_Extensions&quot; class=&quot;headerlink&quot; title=&quot;Chapter 11 - JavaScript Subsets and Extensions&quot;&gt;&lt;/a&gt;Chapter 11 - JavaScript Subsets and Extensions&lt;/h3&gt;&lt;p&gt;本章主要介绍一些目前主流浏览器支持但是还没有写入JavaScript官方版本中的一些js语言的子集(非官方版本)和扩展属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subsets&lt;/code&gt;: 通常是为了确保不确定安全性的代码能够安全的运行而出现的(除了Crockford’s JavaScript: The Good Parts);&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://adsafe.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ADsafe&lt;/a&gt;, 最早一个因为安全因素设计的子集语言, 会禁止对绝大多数全局变量的访问;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepen.com/blog/2008/08/01/secure-mashups -with-dojoxsecure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dojox.secure&lt;/a&gt;: 算是&lt;a href=&quot;http://dojotoolkit.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dojo toolkit&lt;/a&gt;的一个扩展;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/google-caja/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caja&lt;/a&gt;: 其包含了两个子集, 一个是&lt;code&gt;Cajita&lt;/code&gt;, 比较严格, 类似ADsafe 和 dojox.secure; 还有个是&lt;code&gt;Valija&lt;/code&gt;, 则比较接近如今ECMAScript 5的&lt;code&gt;strict mode&lt;/code&gt;了;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://websandbox.livelabs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Microsoft Web Sandbox&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBJS&lt;/a&gt;: facebook使用的一个自己;&lt;br&gt;通常子集都需要对应一个&lt;code&gt;verifier&lt;/code&gt;, 来确保代码符合其要求;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extensions&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;: 声明常量, 比如: &lt;code&gt;const pi = 3.14;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;: 块变量声明, 相当于缩小版的var, 作用域仅存活在最近的一个块结构里, 你可以用&lt;code&gt;{}&lt;/code&gt;来自行创建一个block;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destructing&lt;/code&gt;: 允许多变量结构化赋值: &lt;code&gt;let [x,y] = [1,2];let [r,theta] = polar(1.0, 1.0); function polar(x,y){...};&lt;/code&gt;甚至这种&lt;code&gt;all = [first,second] = [1,2,3,4];&lt;/code&gt; 或者这种&lt;code&gt;let transparent = {r:0.0, g:0.0, b:0.0, a:1.0}; let {r:red, g:green, b:blue} = transparent;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for/each&lt;/code&gt;: 和&lt;code&gt;for/in&lt;/code&gt;循环不同, &lt;code&gt;for/each&lt;/code&gt;遍历对象的属性值而不是属性名, 且可操作类array对象;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for/in&lt;/code&gt;: 从js 1.7(mozilla的js引擎版本号)开始, &lt;code&gt;for/in&lt;/code&gt;也不局限在array和常规object了, 只要是可循环的元素都可以使用了;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yield&lt;/code&gt;: 从python中引入的;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array Comprehensions&lt;/code&gt;:  还是从Python中借用的, &lt;code&gt;let evensquares = [x*x for (x in range(0,10)) if (x % 2 === 0)]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try/catch&lt;/code&gt;: 支持多&lt;code&gt;catch&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_12_-_Server-Side_JavaScript&quot;&gt;&lt;a href=&quot;#Chapter_12_-_Server-Side_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Chapter 12 - Server-Side JavaScript&quot;&gt;&lt;/a&gt;Chapter 12 - Server-Side JavaScript&lt;/h3&gt;&lt;p&gt;随着js的发展, 慢慢的超出了其本身的作用域: 浏览器. 随着Google V8引擎为js包入了unix的常用API: files,processes,streams,sockets等, js开始走出浏览器进入server端了. 正式命名为Node.JS. 想来很多人可能都听过, 因为后面我的数目中也包含了相关的书, 且本章内容也没见过太多, 所以就一起留到以后吧~&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u6587_u732E_3A&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u6587_u732E_3A&quot; class=&quot;headerlink&quot; title=&quot;参考文献:&quot;&gt;&lt;/a&gt;参考文献:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript the Definitive Guide 6th edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (4)</title><loc>http://taoalpha.me/blog/2015/06/23/book-javascript-the-definitive-guide-4/</loc><publish>2015-06-23T07:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;第六版和第五版的最大区别在于ECMAScript 5的引入, 这是目前发布的最新的js版本, 有着最新的属性和函数, 目前主流浏览器基本都已经完全支持. 本文为阅读5-9章内容的笔记总结, 主要是覆盖了JS中的语句和典型对象.&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;Chapter_5_-_Statements&quot;&gt;&lt;a href=&quot;#Chapter_5_-_Statements&quot; class=&quot;headerlink&quot; title=&quot;Chapter 5 - Statements&quot;&gt;&lt;/a&gt;Chapter 5 - Statements&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;switch/case&lt;/code&gt;中使用的是&lt;code&gt;===&lt;/code&gt;进行比较判断的, 而不是&lt;code&gt;==&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with&lt;/code&gt;带入&lt;code&gt;scope chain&lt;/code&gt;的对象只有读取权限, 没有写入功能, 即&lt;code&gt;with&lt;/code&gt;后, 可以获取其代入的对象, 但其内声明的变量都依然归于&lt;code&gt;gloabl&lt;/code&gt;或者&lt;code&gt;local&lt;/code&gt;之中;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debugger&lt;/code&gt;是ECMAScript 5引入的一个新的&lt;code&gt;statement&lt;/code&gt;, 起主要作用是和浏览器结合使用, 用于创建断点以便查错使用;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use strict&lt;/code&gt;也是ECMAScript 5引入的, 严格来说不算&lt;code&gt;statement&lt;/code&gt;而是&lt;code&gt;directive&lt;/code&gt;, 不过两者很是相近; 其使用必须位于js整体的起始位置或者是一个&lt;code&gt;function&lt;/code&gt;主体的起始位置;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use strict&lt;/code&gt;的使用会开启代码的&lt;code&gt;strict mode&lt;/code&gt;, 为了提升效率, 错误追踪以及更好的安全性, 其语法要求会更加严格, 简单列举如下:&lt;ul&gt;
&lt;li&gt;停用&lt;code&gt;with&lt;/code&gt;语句;&lt;/li&gt;
&lt;li&gt;所有变量必须声明才能调用;&lt;/li&gt;
&lt;li&gt;所有独立声明的函数而非对象的方法定义的, 其&lt;code&gt;this&lt;/code&gt;域都默认为&lt;code&gt;undefined&lt;/code&gt;, 而函数如果通过&lt;code&gt;apply&lt;/code&gt;,&lt;code&gt;call&lt;/code&gt;调用, 其&lt;code&gt;this&lt;/code&gt;域为传入对象;&lt;/li&gt;
&lt;li&gt;对未声明变量的赋值或者不能写入的对象进行写入, 都会抛出异常;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt;调用会自动创建临时局部&lt;code&gt;scope&lt;/code&gt;, 不再能直接对母域新建声明了;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments&lt;/code&gt;成为传入参数的硬拷贝, 和传入参数名之间不在绝对相等, 即改变一方不会引起另一方的改变, 同时停用其&lt;code&gt;caller&lt;/code&gt;,&lt;code&gt;callee&lt;/code&gt;方法;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;用于变量, 函数或者函数参数的时候会抛出异常, 操作对象的某个未声明属性也会抛出异常;&lt;/li&gt;
&lt;li&gt;对象(包括函数)创建中不能出现同名属性(参数);&lt;/li&gt;
&lt;li&gt;直接声明的八进制数是不允许的(即0开头的数字);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt;,&lt;code&gt;arguments&lt;/code&gt;作为&lt;code&gt;keywords&lt;/code&gt;对待, 不能赋值, 或赋予其他变量, 也不能用于&lt;code&gt;identifier&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;2015-06-23/javascript-statements.jpg alt=JavaScript Statements title=JavaScript Statements [no-autosize]&quot;&gt;
&lt;h3 id=&quot;Chapter_6_-_Objects&quot;&gt;&lt;a href=&quot;#Chapter_6_-_Objects&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6 - Objects&quot;&gt;&lt;/a&gt;Chapter 6 - Objects&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Property Attributes (ECMAScript 5之后引入可自定义配置, 之前默认三者皆有.)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;writable&lt;/code&gt;: 可赋值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerable&lt;/code&gt;: 可递归;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt;: 可配置 - 可删除也可修改;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object Attributes&lt;ul&gt;
&lt;li&gt;&lt;code&gt;portotype&lt;/code&gt;: 指向当前对象的属性继承对象;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: 指代对象所属类别;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extensible&lt;/code&gt;: 指示当前对象是否能够新增属性 (ECMAScript 5引入);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object Categories and Property Types:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;native object&lt;/code&gt;: js中内置的对象, 包含&lt;code&gt;Arrays, functions, dates, regular expressions&lt;/code&gt;等;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host object&lt;/code&gt;: 由js运行环境所定义的对象, 比如常见的浏览器, 就包含了&lt;code&gt;HTMLElement&lt;/code&gt;对象;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user-defined&lt;/code&gt;: 执行js代码的时候创建的对象;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;own property&lt;/code&gt;: 直接由对象中定义的属性;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherited property&lt;/code&gt;: 由对象的&lt;code&gt;prototype object&lt;/code&gt;继承来的属性;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Prototype&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;任何一个对象(除了&lt;code&gt;Object.protytpe&lt;/code&gt;)的出现都必然包含了第二个对象的存在: &lt;code&gt;new Array() =&amp;gt; Array.prototype&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.prototype&lt;/code&gt;是唯一一个没有母继承的对象了, 它是最顶部的类;&lt;/li&gt;
&lt;li&gt;类似&lt;code&gt;new Array() =&amp;gt; Array.prototype =&amp;gt; Object.prototype&lt;/code&gt;这样的两个&lt;code&gt;prototype&lt;/code&gt;就组成了&lt;code&gt;Array&lt;/code&gt;的&lt;code&gt;prototype chain&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.create()&lt;/code&gt; 是ECMAScript 5引入的新的创建对象的方法, 其接受两个参数, 第一个参数会作为新建对象的&lt;code&gt;prototype&lt;/code&gt;传入, 第二个则是用来描述新对象的属性的. 如果你传入&lt;code&gt;null&lt;/code&gt;, 则新建对象是完全没有&lt;code&gt;prototype&lt;/code&gt;的, 只有&lt;code&gt;Object.create(Object.prototype)&lt;/code&gt;才是等价于我们常用的&lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;new Object()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;获取某个object的未定义属性将返回&lt;code&gt;undefined&lt;/code&gt;, 但是获取&lt;code&gt;undefined&lt;/code&gt;或者&lt;code&gt;null&lt;/code&gt;的某个属性则会抛出异常;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getter&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;setter&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;ECMAScript 5新引入的两个&lt;code&gt;accessor properties&lt;/code&gt;, 分别对应某个属性的调用和赋值;&lt;/li&gt;
&lt;li&gt;只有&lt;code&gt;setter&lt;/code&gt;的属性只有写入权限, 只有&lt;code&gt;getter&lt;/code&gt;的属性则是只读权限;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property attributes&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value, writable, enumerable, and configurable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对应的&lt;code&gt;accessor property&lt;/code&gt;: &lt;code&gt;get, set, enumerable, and configurable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.getOwnPropertyDescriptor(object_name, property_name)&lt;/code&gt; 获取某个属性的特征描述;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.defineProperty(object_name, property_name,{property_attribute:attribute_value})&lt;/code&gt; 对某个属性设定其特征描述;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下例即为利用&lt;code&gt;Object.defineProperty&lt;/code&gt;自定义的一个&lt;code&gt;extend()&lt;/code&gt;函数:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Example 6-3. Copying property attributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Add a nonenumerable extend() method to Object.prototype.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* This method extends the object on which it is called by copying properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* from the object passed as its argument. All property attributes are&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* copied, not just the property value. All own properties (even non-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* enumerable ones) of the argument object are copied unless a property&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* with the same name already exists in the target object. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;extend&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enumerable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Define Object.prototype.extend&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Make it nonenumerable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Its value is this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Get all own props, even nonenumerable ones&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(o); &lt;span class=&quot;comment&quot;&gt;// Loop through them&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; names.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Skip props already in this object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (names[i] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Get property description from o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; desc = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(o,names[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Use it to create property on this Object.defineProperty(this, names[i], desc);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Object Attributes;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; ECMAScript 5引入, 可用于获取某个对象的prototype;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p.isPrototypeOf()&lt;/code&gt; 同上, 用于判断某个对象是否为另一个对象的prototype;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;,&lt;code&gt;Object.preventExtensions()&lt;/code&gt;则分别是用于判断一个object是否是可扩展的, 以及禁止其可扩展性的(此操作不可复原);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.seal()&lt;/code&gt;类似&lt;code&gt;Object.preventExtensions()&lt;/code&gt;, 不过它同时禁掉了&lt;code&gt;properties&lt;/code&gt;的&lt;code&gt;configurable&lt;/code&gt;属性,&lt;code&gt;Object.isSealed()&lt;/code&gt;则是对应用于判断是否&lt;code&gt;sealed&lt;/code&gt;的函数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;比&lt;code&gt;Object.seal()&lt;/code&gt;还要严格,所有属性都变为可读了, 对应的查询函数为:&lt;code&gt;Object.isFrozen()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;,&lt;code&gt;Object.seal()&lt;/code&gt;,&lt;code&gt;Object.freeze()&lt;/code&gt;都是&lt;strong&gt;只针对当前object而言的&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;属性目前基本没啥用, 有点等价或者说更细化的&lt;code&gt;typeOf&lt;/code&gt; or &lt;code&gt;instanceOf&lt;/code&gt;了;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_7_-_Arrays&quot;&gt;&lt;a href=&quot;#Chapter_7_-_Arrays&quot; class=&quot;headerlink&quot; title=&quot;Chapter 7 - Arrays&quot;&gt;&lt;/a&gt;Chapter 7 - Arrays&lt;/h3&gt;&lt;p&gt;这里主要记录ECMAScript 5引入的一些新的方法, 3已有的可以查看 &lt;a href=&quot;/blog/2015/06/18/book-javascript-the-definitive-guide-2/&quot;&gt;阅读笔记-2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forEach(value,index,array_itself)&lt;/code&gt;: &lt;code&gt;array&lt;/code&gt;自身的循环调用函数, 相当于&lt;code&gt;for(i in array_name){}&lt;/code&gt;, 区别在于其不支持&lt;code&gt;break&lt;/code&gt;等可以跳出循环的语句, 如果你想要提前结束循环, 就需要通过&lt;code&gt;try/catch&lt;/code&gt;包裹并利用抛出异常来结束循环;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt;: 也算是循环的一种, 遍历每个元素并传递给传入的函数, 最终返回一个&lt;strong&gt;新数组&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt;: 顾名思义, 这是对数组进行筛选的, 值得一提的是&lt;code&gt;filter()&lt;/code&gt;会自动跳过空白,所以对于稀疏数组通过&lt;code&gt;filter()&lt;/code&gt;可以去除所有空白, 在加上&lt;code&gt;undefined&lt;/code&gt;判断, 就可以去除所有空值了;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;every()&lt;/code&gt; 和 &lt;code&gt;some()&lt;/code&gt;: &lt;code&gt;every()&lt;/code&gt;是当数组每个元素都使传入函数为真的时候返回真, &lt;code&gt;some()&lt;/code&gt;则是只要一个为真即返回为真, 需要注意的事, 对于空数组, &lt;code&gt;every()&lt;/code&gt;会返回真, 而&lt;code&gt;some()&lt;/code&gt;会返回为假;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce(function,initial_value)&lt;/code&gt; 和 &lt;code&gt;reduceRight()&lt;/code&gt;: 通过执行传入函数而对数组元素进行整合,计算,判断, 最终返回一个结果: &lt;code&gt;var max = a.reduce(function(x,y) { return (x&amp;gt;y)?x:y; });&lt;/code&gt;即返回数组的最大值; &lt;code&gt;reduceRight()&lt;/code&gt;与&lt;code&gt;reduce()&lt;/code&gt;一致, 只是循环顺序相反, 从右到左; 当没有声明初始值时, 采用第一个执行元素作为初始值;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexOf()&lt;/code&gt; 和 &lt;code&gt;lastIndexOf&lt;/code&gt;: 顾名思义, 获取数组中某个元素的index, 前者获取首个匹配元素的index, 后者获取最后一个匹配元素的index;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_8_-_Functions&quot;&gt;&lt;a href=&quot;#Chapter_8_-_Functions&quot; class=&quot;headerlink&quot; title=&quot;Chapter 8 - Functions&quot;&gt;&lt;/a&gt;Chapter 8 - Functions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Functions的调用有四种:&lt;ul&gt;
&lt;li&gt;直接调用;&lt;/li&gt;
&lt;li&gt;作为对象的方法调用;&lt;/li&gt;
&lt;li&gt;作为constructor调用;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;call&lt;/code&gt;,&lt;code&gt;apply&lt;/code&gt;方法调用(间接调用);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call()&lt;/code&gt; 和 &lt;code&gt;apply&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;都是间接调用的方法, 允许一个函数临时客串为某个object的方法;&lt;/li&gt;
&lt;li&gt;一定程度上, 可以等价于&lt;code&gt;o.m = f;o.m();delete o.m;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其接受的第一个参数会成为函数运行的&lt;code&gt;this&lt;/code&gt;域, 如果是非strict mode下, 传入&lt;code&gt;null/undefined&lt;/code&gt;则会自动将global作为&lt;code&gt;this&lt;/code&gt;, 而如果传入的是&lt;code&gt;primitive datatype&lt;/code&gt;, 则自动转为对应的&lt;code&gt;wrapper object&lt;/code&gt;, 即&lt;code&gt;string =&amp;gt; String&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;的区别主要体现在后面的参数上, 前者以分散元素传入, 后者则以整体数组形式传入, 所以用&lt;code&gt;apply&lt;/code&gt;可以把原本只支持不定长参数的函数转换为接受数组的函数:&lt;code&gt;var biggest = Math.max.apply(Math, array_of_numbers);&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt;对类array元素处理方式同array元素;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind()&lt;/code&gt;: 很是类似&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;, 本质也是把某个函数作为某个对象的方法调用, 实现则是通过把object和function绑定, 形成一个新函数从而每次调用新函数都等价于调用了&lt;code&gt;object.funtion&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;接受多个参数, 其首个以后的参数都会作为&lt;code&gt;this&lt;/code&gt;域成员代入函数中, 并按序成为函数自身的参数&lt;code&gt;function f(y,z) { return this.x + y + z };var g = f.bind({x:1}, 2);g(3) // 2被赋予了y, 新的3则给了z&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;higher-order function&lt;/code&gt;: 作用于另一个函数之上的函数;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;partial and memoization&lt;/code&gt; 这两个都是&lt;code&gt;function programing&lt;/code&gt;中常用的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;partial&lt;/code&gt;: 类似&lt;code&gt;bind()&lt;/code&gt;这种会把传入参数默认分配到函数自身的部分接受参数上的做法就是&lt;code&gt;partial application&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memoization&lt;/code&gt;: 将函数运行过程的计算结果缓存起来的方式;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, n&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.call(a, n || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用以处理类array元素(转为真正的array)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;partial&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f &lt;span class=&quot;comment&quot;&gt;/*, ... */&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 存储partial的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = array(args, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 取出首位以后的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; i &amp;lt; a.length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a[i] === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) a[i] = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[j++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 这里的arguments是第二层参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 将空元素逐个替换成第二层参数里的值, j自动随着执行+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = a.concat(array(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;, j))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 组成新的参数数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 调用f函数, 并传入参数a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x,y,z&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*y*z&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;partial(f,&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// x:1,y:2,z:3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Return a memoized version of f.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// It only works if arguments to f all have distinct string representations.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;memoize&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cache = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length + &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.join.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; cache) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cache[key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cache[key] = f.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 应用方式类似;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; factorial = memoize(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : n * factorial(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 此时会自动缓存4,3,2的阶乘值. 对于一些复杂的运算, 如此可以很好的加快运算速度.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Chapter_9_-_Classes_and_Modules&quot;&gt;&lt;a href=&quot;#Chapter_9_-_Classes_and_Modules&quot; class=&quot;headerlink&quot; title=&quot;Chapter 9 - Classes and Modules&quot;&gt;&lt;/a&gt;Chapter 9 - Classes and Modules&lt;/h3&gt;&lt;p&gt;除了 &lt;a href=&quot;/blog/2015/06/18/book-javascript-the-definitive-guide-2/&quot;&gt;阅读笔记-2&lt;/a&gt;中包含的, 由于ECMAScript 5所引入的那些&lt;code&gt;object property&lt;/code&gt;自然都可以应用到新的class中, 从而创建更为复杂有效的函数. 其实js中目前不存在class这个关键词, 所以其模仿的class, 说白了就是一个复杂一些的函数对象.&lt;/p&gt;
&lt;p&gt;而因为其内容驳杂繁多, 我么会在后面的应用中有很多实践的机会, 这里就不一一描述了.&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript the Definitive Guide 6th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://osteele.com/sources/javascript/functional/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functional Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (3)</title><loc>http://taoalpha.me/blog/2015/06/22/book-javascript-the-definitive-guide-3/</loc><publish>2015-06-22T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;先说点不相关的… 为了更好的阅读, 所以以后&lt;code&gt;读书笔记&lt;/code&gt;相关的博文都会分拆成4个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概述:&lt;/strong&gt; 算是阅读总结摘要以及类似这段话之类的声明介绍等等;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阅读笔记:&lt;/strong&gt; 这部分主要以阅读过程中的记录为主, 会比较杂, 基本算是逐点记录, 评判相对主观;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;心得:&lt;/strong&gt; 这部分则主要为笔记的延伸, 算是对笔记的一种补充或者说自己的阅读理解消化所得, 有时候也会覆盖到一些使用架桥等等;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谜题:&lt;/strong&gt; 这里主要记录一些没有完全理解的部分, 会加上自己的猜测解答, 当弄懂后会更新&lt;strong&gt;正解&lt;/strong&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DONE.&lt;/p&gt;
&lt;p&gt;本篇是博主重新翻阅了”JavaScript the Definitive Guide(第六版)”的前4章内容(之前 &lt;a href=&quot;/blog/2015/06/17/book-reading-javascript-the-definitive-guide-1/&quot;&gt;&lt;a href=&quot;/blog/2015/06/18/book-javascript-the-definitive-guide-2/&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;&quot;&gt;阅读笔记-2&lt;/a&gt;均是第五版的)后的读书笔记以及心得体会. 内容主要覆盖js的基本用法, 考虑到重复, 这里主要是在上两篇的基础上查漏补缺.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;u9605_u8BFB_u7B14_u8BB0&quot;&gt;&lt;a href=&quot;#u9605_u8BFB_u7B14_u8BB0&quot; class=&quot;headerlink&quot; title=&quot;阅读笔记&quot;&gt;&lt;/a&gt;阅读笔记&lt;/h2&gt;&lt;h3 id=&quot;Chapter_2_-__u57FA_u7840_u77E5_u8BC6&quot;&gt;&lt;a href=&quot;#Chapter_2_-__u57FA_u7840_u77E5_u8BC6&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2 - 基础知识&quot;&gt;&lt;/a&gt;Chapter 2 - 基础知识&lt;/h3&gt;&lt;h4 id=&quot;JS_u80FD_u8BC6_u522B_u7684whitespaces_3A&quot;&gt;&lt;a href=&quot;#JS_u80FD_u8BC6_u522B_u7684whitespaces_3A&quot; class=&quot;headerlink&quot; title=&quot;JS能识别的whitespaces:&quot;&gt;&lt;/a&gt;JS能识别的&lt;code&gt;whitespaces&lt;/code&gt;:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;常规空格: &lt;code&gt;\u0020&lt;/code&gt; # 即url中常见的&lt;code&gt;%20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tab(制表符): &lt;code&gt;\u0009&lt;/code&gt; # js中常见的&lt;code&gt;\t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vertical Tab: &lt;code&gt;\u000B&lt;/code&gt; # &lt;code&gt;\v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Form Feed(翻页/页码分隔符): &lt;code&gt;\u000C&lt;/code&gt; # &lt;code&gt;\f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Nonbreaking Space(不间断空格): &lt;code&gt;\u00A0&lt;/code&gt;  # 通常在html中用来阻止默认连续多空格自动归一的性质(auto collapsing)而使用&lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;, 同时因为软件处理的需要, 使用&lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;能够防止相应的处理器将普通空格转为行分隔;&lt;/li&gt;
&lt;li&gt;Byte order mark: &lt;code&gt;\uFEFF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;any character in Unicode category Zs&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JS_u80FD_u8BC6_u522B_u7684line_terminators_3A&quot;&gt;&lt;a href=&quot;#JS_u80FD_u8BC6_u522B_u7684line_terminators_3A&quot; class=&quot;headerlink&quot; title=&quot;JS能识别的line terminators:&quot;&gt;&lt;/a&gt;JS能识别的&lt;code&gt;line terminators&lt;/code&gt;:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;line feed: &lt;code&gt;\u000A&lt;/code&gt; # &lt;code&gt;\n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;carriage return: &lt;code&gt;\u000D&lt;/code&gt; # &lt;code&gt;\r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line separator: &lt;code&gt;\u2028&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;paragraph separator: &lt;code&gt;\u2029&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;值得一说的是, js是支持unicode作为&lt;code&gt;indentifier&lt;/code&gt;的合法字符的, 但是上述这些则不在其中.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;JS_u7684_u201DUnicode_Escape_Sequences_u201D&quot;&gt;&lt;a href=&quot;#JS_u7684_u201DUnicode_Escape_Sequences_u201D&quot; class=&quot;headerlink&quot; title=&quot;JS的”Unicode Escape Sequences”&quot;&gt;&lt;/a&gt;JS的”Unicode Escape Sequences”&lt;/h4&gt;&lt;p&gt;类似”\u00E9”这种结构的字符在js都代表一种特殊的字符:”unicode”. 如果你在js中使用这些字符, js会自动将其编译为对应的字符(如果是在js的注释中, 则不会编译, 而是以ascii对待), 比如: 示例就会编译为”é”. 而在js中, 这种对等关系是支持的, 即 &lt;code&gt;&amp;quot;\u00E9&amp;quot; === &amp;quot;é&amp;quot;&lt;/code&gt;是为真的.&lt;/p&gt;
&lt;p&gt;但是一定要慎用… 因为unicode变化过多, 有时候输出看起来一样的字符, 其本质不一定一样: &lt;code&gt;&amp;quot;e\u0301&amp;quot;&lt;/code&gt;的输出也是”é”, 但是它相当于是&lt;code&gt;&amp;quot;e&amp;quot;+&amp;quot;\u0301&amp;quot;&lt;/code&gt;组成的.&lt;/p&gt;
&lt;h4 id=&quot;JS_u4E2D_u7684_26quot_3B_3B_26quot_3B&quot;&gt;&lt;a href=&quot;#JS_u4E2D_u7684_26quot_3B_3B_26quot_3B&quot; class=&quot;headerlink&quot; title=&quot;JS中的&amp;quot;;&amp;quot;&quot;&gt;&lt;/a&gt;JS中的&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在JS中, &lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;作为语句结尾并不是必须的, 只有当多语句同行的时候, &lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;才是必须的. 当你没有&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;的时候, js会自动为你添加合适的&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;. 通常它会自动将它没有&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;无法解析代码时候遇到的换行处加以&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;(除了类似return,break, ++, –等, 它会自动将其后的行分隔符作为&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;对待.):&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// js在第一个换行处识别了其语句分割的意义, 但是在 a = 3 的两个分割处都因为它可以识别合并后的语句所以没有作为`&quot;;&quot;`处理.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是上述的成功不意味着js的智能, 更多时候如果我们不合适的使用&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;, 会造成很多奇怪的问题的, 比如以&lt;code&gt;(, [, /, +, -&lt;/code&gt;为起始的语句很可能会被误认为是前一语句的延续. 所以通常来说, js的编码还是比较鼓励使用&lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt;作为语句结尾的.&lt;/p&gt;
&lt;h3 id=&quot;Chapter_3_-__u6570_u636E_u7C7B_u578B&quot;&gt;&lt;a href=&quot;#Chapter_3_-__u6570_u636E_u7C7B_u578B&quot; class=&quot;headerlink&quot; title=&quot;Chapter 3 - 数据类型&quot;&gt;&lt;/a&gt;Chapter 3 - 数据类型&lt;/h3&gt;&lt;h4 id=&quot;Number_3A&quot;&gt;&lt;a href=&quot;#Number_3A&quot; class=&quot;headerlink&quot; title=&quot;Number:&quot;&gt;&lt;/a&gt;Number:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Global viriables:&lt;/strong&gt; &lt;code&gt;Infinity&lt;/code&gt;,&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global Objects:&lt;/strong&gt; &lt;code&gt;Math&lt;/code&gt;,&lt;code&gt;Number&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; 具有唯一性, 其不等于任意值, 包括它自己, &lt;code&gt;0/0&lt;/code&gt;会产生’NaN’, 但是&lt;code&gt;0/0 != NaN&lt;/code&gt;, 如果需要判断一个变量是不是NaN, 需要使用&lt;code&gt;isNaN()&lt;/code&gt;这个内置的函数;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Infinity &amp;lt;==&amp;gt; Number.POSITIVE_INFINITY &amp;lt;==&amp;gt; 1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Infinity &amp;lt;==&amp;gt; Number.NEGATIVE_INFINITY &amp;lt;==&amp;gt; -1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Binary Floating-Point&lt;/code&gt;会导致小数级错误, 比如&lt;code&gt;0.3-0.2 != 0.2-0.1&lt;/code&gt;, 这个属于计算机本身因为二进制编码的原因所致, 所以在比较数字大小的时候要格外小心;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;String_3A&quot;&gt;&lt;a href=&quot;#String_3A&quot; class=&quot;headerlink&quot; title=&quot;String:&quot;&gt;&lt;/a&gt;String:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;immutable ordered sequence of 16-bit values&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string的长度都是按照16-bit来计算的, 所以当如果一个字符超过了16-bit, 则会按照多的计算. 比如: &lt;code&gt;e - \ud835\udc52&lt;/code&gt;, 就需要按照两个16bit计算, 即其长度应为:”2”&lt;/li&gt;
&lt;li&gt;从ECMAScript 5之后就允许string跨行定义了, 只需要在换行的地方加上一个反斜杠&lt;code&gt;\&lt;/code&gt;, 即可.&lt;/li&gt;
&lt;li&gt;转义字符&lt;code&gt;\&lt;/code&gt;如果加在普通字符前, 不会产生任何效果;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof null =&amp;gt; Object&lt;/code&gt; , &lt;code&gt;typeof undefined =&amp;gt; undefined&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null == undefined&lt;/code&gt;, &lt;code&gt;null!==undefined&lt;/code&gt; =&amp;gt; True&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u7C7B_u578B_u8F6C_u6362&quot;&gt;&lt;a href=&quot;#u7C7B_u578B_u8F6C_u6362&quot; class=&quot;headerlink&quot; title=&quot;类型转换&quot;&gt;&lt;/a&gt;类型转换&lt;/h3&gt;&lt;p&gt;javascript是一个很宽松的语言, 我们不需要预先定义变量类型, 而在运算以及执行过程中, js也会自动的帮助我们进行类型转换, 当然为了更好的借助这一特点, 了解下图中的js转换类型的规则还是非常有必要的.&lt;/p&gt;
&lt;img class=&quot;2015-06-22/javascript-type-convertion.jpg alt=JavaScript Type Convertions title=JavaScript Type Convertions [no-autosize]&quot;&gt;
&lt;p&gt;其中object转换 primitive datatype 的话, 一般会按照如下步骤进行:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先会默认调用&lt;code&gt;toString()&lt;/code&gt;函数, 你可以自行定义这一函数, 如果&lt;code&gt;toString()&lt;/code&gt;返回结果正常, 则转换结束;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;toString()&lt;/code&gt;未定义, 或者返回结果非&lt;code&gt;primitive datatype&lt;/code&gt;的话, 会自动调用&lt;code&gt;valueOf()&lt;/code&gt;函数, 同上一步;&lt;/li&gt;
&lt;li&gt;而如果两个都没找到, 那么js将会抛出&lt;code&gt;TypeError&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而根据要转换的是&lt;code&gt;string&lt;/code&gt;还是&lt;code&gt;number&lt;/code&gt;而交换1,2两步( &lt;code&gt;string&lt;/code&gt; 的话先调用&lt;code&gt;toString()&lt;/code&gt;, 且返回值必然会转为string; 如果是&lt;code&gt;number&lt;/code&gt;的话, 则先找&lt;code&gt;valueOf()&lt;/code&gt;, 返回结果为number). 当然至于boolean的话, 所有的object转换到boolean都是true.&lt;/p&gt;
&lt;p&gt;Array转换&lt;code&gt;string&lt;/code&gt;的时候默认的&lt;code&gt;toString()&lt;/code&gt;就是一个&lt;code&gt;join()&lt;/code&gt;调用~ Function的话, 则也可以自己定义&lt;code&gt;toString()&lt;/code&gt;函数.&lt;/p&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x + “” // Same as String(x)&lt;/li&gt;
&lt;li&gt;+x // Same as Number(x). You may also see x-0&lt;/li&gt;
&lt;li&gt;!!x // Same as Boolean(x). Note double !&lt;/li&gt;
&lt;li&gt;在ECMAScript 5的strict模式下, 所有变量君需要声明才能赋值, 否则会报错;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Chapter_4_3A_Expressions_and_Operators&quot;&gt;&lt;a href=&quot;#Chapter_4_3A_Expressions_and_Operators&quot; class=&quot;headerlink&quot; title=&quot;Chapter 4: Expressions and Operators&quot;&gt;&lt;/a&gt;Chapter 4: Expressions and Operators&lt;/h3&gt;&lt;img class=&quot;2015-06-22/javascript-operators.jpg alt=JavaScript Operators title=JavaScript Operators [no-autosize]&quot;&gt;
&lt;p&gt;上图为按照优先级顺序排列下来的操作符(横线分隔的同一组块之间的级别相同).&lt;/p&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;运算顺序不影响赋值顺序, 赋值顺序始终都是严格从左到右的, 比如:&lt;code&gt;h = x+y+z&lt;/code&gt;, 那么赋值顺序始终都是&lt;code&gt;h-&amp;gt;x-&amp;gt;y-&amp;gt;z&lt;/code&gt;; 通常情况下, 这一赋值顺序不会影响之后的计算顺序, 对结果基本没什么影响, 除了一种情况:&lt;/p&gt;
&lt;p&gt;如果前变量的赋值会影响到后面变量的值的话, 比如共用同一个变量, 那么这种情况下, 赋值顺序就&lt;strong&gt;可能&lt;/strong&gt;会对结果产生一定的影响了. 最简单的例子就是&lt;code&gt;z = 2;y = function(){z = 3;return 1};&lt;/code&gt;, 因为y是一个函数, 而它的执行会改变z的值, 所以&lt;code&gt;y()+z&lt;/code&gt;和&lt;code&gt;z+y()&lt;/code&gt;的结果就是不相同的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“+”运算符中的类型转换:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string优先, 只要有两个操作数中有一个是string或者是有&lt;code&gt;toString()&lt;/code&gt;的object, 那么其都会按照string来进行链接运算;&lt;/li&gt;
&lt;li&gt;除非两个都是非string, 才会进行加法运算;&lt;/li&gt;
&lt;li&gt;当”+”作为单操作数时, 则意味着将操作数向number类型转换;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;运算符如果第一个为false, 则不执行第二条判断, 所以可以用这个方法来代替if: &lt;code&gt;(a==b) &amp;amp;&amp;amp; alert(&amp;quot;a equals b&amp;quot;)&lt;/code&gt;就相当于&lt;code&gt;if(a==b) alert(&amp;quot;a equals b&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!(p &amp;amp;&amp;amp; q) === !p || !q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!(p || q) === !p &amp;amp;&amp;amp; !q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a op= b&lt;/code&gt; 和 &lt;code&gt;a = a op b&lt;/code&gt;通常是等价的, 除非a本身的重复赋值会有副作用, 比如 &lt;code&gt;a[i++] += 1&lt;/code&gt;和&lt;code&gt;a[i++] = a[i++] +1&lt;/code&gt;就不一样, 因为后者前后两个&lt;code&gt;i&lt;/code&gt;不同了.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval()&lt;/code&gt;函数会继承当前的scope, 除非eval()被赋予某个新的reference, 那样的话只会使用global的scope;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void&lt;/code&gt;操作数很少用到, 它是个单操作数的操作符, 其用法就是丢弃操作数的返回结果, 然后返回 undefined…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u5FC3_u5F97&quot;&gt;&lt;a href=&quot;#u5FC3_u5F97&quot; class=&quot;headerlink&quot; title=&quot;心得&quot;&gt;&lt;/a&gt;心得&lt;/h2&gt;&lt;h3 id=&quot;whitespaces__u548C_line_terminators&quot;&gt;&lt;a href=&quot;#whitespaces__u548C_line_terminators&quot; class=&quot;headerlink&quot; title=&quot;whitespaces 和 line terminators&quot;&gt;&lt;/a&gt;whitespaces 和 line terminators&lt;/h3&gt;&lt;p&gt;通常在js里面我们使用&lt;code&gt;\s&lt;/code&gt;来统一代表所有其可以识别的&lt;code&gt;whitespace&lt;/code&gt;, &lt;code&gt;line terminators&lt;/code&gt;. 如下例:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;string&quot;&gt;'asd \t asdasd \na asd \f asda dad\rasd\u2028asd\u2029\u00A0'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output 里面有两个换行的符号, 我这里为了演示方便就不换行了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k.replace(&lt;span class=&quot;regexp&quot;&gt;/\n/g&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'-'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 同上,里面的&quot;\r&quot;我也不换行了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k.replace(&lt;span class=&quot;regexp&quot;&gt;/\s/g&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'-'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: &quot;asd---asdasd--a-asd---asda-dad-asd-asd--&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为在console中输出的时候是不换行的, 所以有时候单单看console输出的话, 类似这种编码问题所致的错误就找不出来, 为了省事, 我们可以统一使用&lt;code&gt;\s&lt;/code&gt;来代表所有此类符号.&lt;/p&gt;
&lt;h2 id=&quot;u8C1C_u9898&quot;&gt;&lt;a href=&quot;#u8C1C_u9898&quot; class=&quot;headerlink&quot; title=&quot;谜题&quot;&gt;&lt;/a&gt;谜题&lt;/h2&gt;&lt;p&gt;Q: 按照正常来说&lt;code&gt;Number.MAX_VALUE&lt;/code&gt;加上一个数应该就会自动转为&lt;code&gt;Infinity&lt;/code&gt;, 但实际上, 测试过程中发现, 只有当&lt;code&gt;Number.MAX_VALUE&lt;/code&gt;加上一个&lt;strong&gt;足够大的数&lt;/strong&gt;后才会等与&lt;code&gt;Infinity&lt;/code&gt;, 这是为什么?&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MAX_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 1.7976931348623157e+308&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MAX_VALUE +&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 1.7976931348623157e+308&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MAX_VALUE + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: Infinity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;正解:&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;the sum is computed and rounded to the nearest representable value using IEEE 754 round-to-nearest mode. If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IEEE 754&lt;/p&gt;
&lt;p&gt;In the following two rounding-direction attributes, an infinitely precise result with magnitude at least bemax ( b − ½ b^(1-p) ) shall round to ∞ with no change in sign; here emax and p are determined by the destination format (see 3.3). With:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;roundTiesToEven:&lt;/strong&gt; the floating-point number nearest to the infinitely precise result shall be delivered; if the two nearest floating-point numbers bracketing an unrepresentable infinitely precise result are equally near, the one with an even least significant digit shall be delivered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;roundTiesToAway:&lt;/strong&gt; the floating-point number nearest to the infinitely precise result shall be delivered; if the two nearest floating-point numbers bracketing an unrepresentable infinitely precise result are equally near, the one with larger magnitude shall be delivered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;ECMAScript does not specify which of the round-to-nearest, but it doesn’t matter here because both gives the same result. The number in ECMAScript is “double”, in which&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b = 2&lt;/li&gt;
&lt;li&gt;emax = 1023&lt;/li&gt;
&lt;li&gt;p = 53,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;_&lt;strong&gt;so the result must be at least 2^1024 - 2^970 ~ 1.7976931348623158 × 10^308 in order to round to infinity. Otherwise it will just round to MAX_VALUE, because that is the closer than Infinity.Notice that MAX_VALUE = 21024 - 2971, so you need to add at least 2^971 - 2^970 = 2^970 ~ 9.979202 × 10^291 in order to get infinity.&lt;/strong&gt;_&lt;/p&gt;
&lt;p&gt;Q: &lt;code&gt;&amp;#39;0&amp;#39; == false&lt;/code&gt; 是 true, 为什么 &lt;code&gt;null == false&lt;/code&gt; 就是 false呢?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;猜测解释:&lt;/strong&gt; &lt;code&gt;==&lt;/code&gt;这样的是比较&lt;code&gt;value&lt;/code&gt;的, 而 &lt;code&gt;null&lt;/code&gt;转换为&lt;code&gt;boolean&lt;/code&gt;类型为&lt;code&gt;false&lt;/code&gt;, 并不意味着两者的&lt;code&gt;value&lt;/code&gt;是相同的. &lt;code&gt;==&lt;/code&gt;只会比较&lt;code&gt;value&lt;/code&gt;, 而不会进行转换. 也即&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;两个&lt;code&gt;boolean&lt;/code&gt;类型的其&lt;code&gt;value&lt;/code&gt;也是&lt;code&gt;1,0&lt;/code&gt;. 而&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;的&lt;code&gt;value&lt;/code&gt;则不同, 前者为空, 后者为无.&lt;/p&gt;
&lt;h2 id=&quot;u53C2_u8003_u8D44_u6599_3A&quot;&gt;&lt;a href=&quot;#u53C2_u8003_u8D44_u6599_3A&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5303032/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript the Definitive Guide 6th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode_character_property#General_Category&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_Unicode_characters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List of Unicode Characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.qianxingzhem.com/post-1499.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编码历史介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>JavaScript the Definitive Guide (2)</title><loc>http://taoalpha.me/blog/2015/06/18/book-javascript-the-definitive-guide-2/</loc><publish>2015-06-18T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u6982_u8FF0&quot;&gt;&lt;a href=&quot;#u6982_u8FF0&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;作为JS中的一等公民, &lt;code&gt;function&lt;/code&gt;(函数)始终是JS的核心中的核心. 所以这里单独用一篇笔记来记录&lt;code&gt;JavaScript: the definitive Guide&lt;/code&gt;一书第八章的内容. 主要介绍了函数的定义, 作用域, 参数, 声明以及执行等基础知识, 另外也着重介绍了其高级用法中的&lt;code&gt;closure&lt;/code&gt;. 我将自己觉得重要的, 值得记录的部分都作为心得摘抄如下:&lt;/p&gt;
&lt;h2 id=&quot;u5FC3_u5F97&quot;&gt;&lt;a href=&quot;#u5FC3_u5F97&quot; class=&quot;headerlink&quot; title=&quot;心得&quot;&gt;&lt;/a&gt;心得&lt;/h2&gt;&lt;h3 id=&quot;arguments_u5BF9_u8C61&quot;&gt;&lt;a href=&quot;#arguments_u5BF9_u8C61&quot; class=&quot;headerlink&quot; title=&quot;arguments对象&quot;&gt;&lt;/a&gt;arguments对象&lt;/h3&gt;&lt;p&gt;对每一个function而言, 都自动会有一个内置的&lt;code&gt;arguments&lt;/code&gt;对象, 用它就可以访问传入的参数了. 通常来说&lt;code&gt;arguments&lt;/code&gt;对象我们只会用在不定长传参的函数上, 但&lt;code&gt;arguments&lt;/code&gt;本身带有的一个函数却是可以在某些时刻发挥重要作用的~ 这个函数就是&lt;code&gt;callee&lt;/code&gt;函数:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 递归自我调用函数在解决一些问题的时候是很常用的, 而通常情况下我们都会在函数内调用本函数名即可, 但是如果我们需要实现自我调用的函数正好是一个无名函数呢?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// arguments.callee 即调用当前执行的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.callee(x-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如上, 就实现了一个很简单的&amp;gt;2阶乘计算了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要特别注意的就是&lt;code&gt;callee&lt;/code&gt;作为&lt;code&gt;arguments&lt;/code&gt;对象的一个方法, 是可以跟随&lt;code&gt;arguments&lt;/code&gt;作为参数传递的, 而且其作为参数的时候保持其所指代函数不变.&lt;/p&gt;
&lt;p&gt;既然说到&lt;code&gt;arguments&lt;/code&gt;, 就多说两句喽. 首先&lt;code&gt;arguments&lt;/code&gt;算是一个类array的object. 它本身具有array的一些特性, 比如可以直接调用length函数(通常的object是不能通过&lt;code&gt;.length&lt;/code&gt;直接调用获取长度的, 需要使用&lt;code&gt;Object.keys(object_name).length&lt;/code&gt;才能获得). 但是它本身和&lt;code&gt;array.length&lt;/code&gt;有很大的差别, 其中最大的一个差别就是: 无法通过&lt;code&gt;.length&lt;/code&gt;直接更改数组长度.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.length = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [1,3,4,undefined x 2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)&amp;#125;)(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: [10,1,2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到通过对&lt;code&gt;arguments.length&lt;/code&gt;直接赋值, 并不会影响其本身的长度, 这一点和array本身有很大的差别.&lt;/p&gt;
&lt;p&gt;PS. 上述示例是增加长度, 其实缩减长度也是一样的, 多余的元素会被自动删除. 所以, 通过直接向&lt;code&gt;array.length&lt;/code&gt;赋值也算是一个修改&lt;code&gt;array&lt;/code&gt;长度的方法喽~&lt;/p&gt;
&lt;p&gt;PSS. 通常如果一个函数接受参数比较多的时候, 为了预防因为参数顺序而产生的问题, 可以采取传json格式的object作为参数, 这样就能够通过key而不根据顺序获取参数了.&lt;/p&gt;
&lt;h3 id=&quot;Function_u7684property&quot;&gt;&lt;a href=&quot;#Function_u7684property&quot; class=&quot;headerlink&quot; title=&quot;Function的property&quot;&gt;&lt;/a&gt;Function的property&lt;/h3&gt;&lt;p&gt;请先看下述代码:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f.temp = &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.callee.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f.temp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 2 1 &quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先, 我们看一下我们前两个输出值:&lt;/p&gt;
&lt;p&gt;  如上所述,&lt;code&gt;arguments.length&lt;/code&gt;即代表传入参数的数量, 我们传入了两个参数, 所以这里输出2, 没有任何问题. 那么后面的&lt;code&gt;arguments.callee.length&lt;/code&gt;又是什么呢? 为什么它输出的是1呢? &lt;/p&gt;
&lt;p&gt;  根据之前的介绍, 我们当知道&lt;code&gt;arguments.callee&lt;/code&gt;是代指当前的函数&lt;code&gt;f()&lt;/code&gt;, 那么对应的&lt;code&gt;arguments.callee.length&lt;/code&gt;即我们的函数&lt;code&gt;f&lt;/code&gt;的length了. 对于&lt;code&gt;Function&lt;/code&gt;这个对象而言, 它所拥有的&lt;code&gt;length&lt;/code&gt;这一属性特指其声明的参数数量, 我们应该知道JavaScript作为一个很宽松的语言, 其函数定义后接受的参数是不定长的, 即便传入参数与函数声明的参数不相等也是不会抛出异常的, 那么有时候我们需要获取确保函数接受的参数和其声明的参数数量一致, 就可以使用函数自身的length属性来实现;&lt;/p&gt;
&lt;p&gt;其次, 我们自定义了一个&lt;code&gt;f&lt;/code&gt;的属性&lt;code&gt;temp&lt;/code&gt;, 但是我们实在函数定义之前赋予这个属性的, 为什么依然能够在函数运行中输出呢? &lt;/p&gt;
&lt;p&gt;  这主要是因为js的执行顺序所致. js在载入执行过程中, 首先会将内部声明的函数都定义之后才会正式由上至下的逐次执行. 所以这里虽然我们把&lt;code&gt;f.temp&lt;/code&gt;写在了函数定义之前, 但是js执行过程中, 还是首先定义了函数&lt;code&gt;f&lt;/code&gt;, 接着才开始运行我们的&lt;code&gt;f.temp&lt;/code&gt;赋值语句. 自然就不会报错说&lt;code&gt;f&lt;/code&gt;没有定义了~&lt;/p&gt;
&lt;p&gt;PS. 其实不止是Function, 即便是普通的变量声明, 也是编译和执行分开进行的, 比如&lt;code&gt;var a = 2;&lt;/code&gt;也是拆解为&lt;code&gt;var a; a = 2&lt;/code&gt;两步执行的, 而声明都是发生在编译过程, 待编译过程全部结束后, 才会由上到下一次执行, 这也是为什么, 单纯的声明可以出现在代码的任意部位都不会影响其所在作用域的生效, 不会爆出&lt;code&gt;not defined&lt;/code&gt;的错误;&lt;/p&gt;
&lt;h3 id=&quot;reserved_word_2C_identifier_2C_keyword&quot;&gt;&lt;a href=&quot;#reserved_word_2C_identifier_2C_keyword&quot; class=&quot;headerlink&quot; title=&quot;reserved word, identifier, keyword&quot;&gt;&lt;/a&gt;reserved word, identifier, keyword&lt;/h3&gt;&lt;p&gt;这三个作为基础知识, 可以说是每门语言都共通的概念,  但很多时候我们都不会用到或者不会特意去区分这三个名词, 而最近因为看原版书, 经常会出现三个词的交叉, 所以这里特别google了以下, 试图总结下三者的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;identifier:&lt;/strong&gt; 通常我们把我们定义的变量名, 函数名, 类名, 标签名,宏定义名, 类型名等称为&lt;code&gt;identifier&lt;/code&gt;, 取其标识之意, 用以作为其名称以便代用;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reserved word:&lt;/strong&gt; 与&lt;code&gt;identifier&lt;/code&gt;相对, &lt;code&gt;reserved word&lt;/code&gt;则是指由语言规定而保留的一些词, 这些词有着特定的用途而不能被用作&lt;code&gt;identifier&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyword:&lt;/strong&gt; 作为语言语法的组成部分之一, &lt;code&gt;keyword&lt;/code&gt;通常都会有着特定的含义, 绝大多数的&lt;code&gt;keyword&lt;/code&gt;都是&lt;code&gt;reserved word&lt;/code&gt;, 但也有少量语法中存在&lt;code&gt;keyword&lt;/code&gt;不是&lt;code&gt;reserved word&lt;/code&gt;的情况, 比如&lt;code&gt;fortran&lt;/code&gt;就没有&lt;code&gt;reserved word&lt;/code&gt;的概念, 它的所有&lt;code&gt;keyword&lt;/code&gt;都可以用作&lt;code&gt;identifier&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;reserved word&lt;/code&gt;和&lt;code&gt;keyword&lt;/code&gt;确实在很大程度上是共同的, 除了上述说的类似fortran语言这种情况外, 也存在&lt;code&gt;reserved word&lt;/code&gt;不是&lt;code&gt;keyword&lt;/code&gt;的情况, 比如&lt;a href=&quot;https://en.wikipedia.org/wiki/Reserved_word&quot; title=&quot;reserved word - wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java中的&lt;code&gt;goto&lt;/code&gt;就是一个&lt;code&gt;reserved word&lt;/code&gt;, 但本身又不是一个&lt;code&gt;keyword&lt;/code&gt;, 所以可以说&lt;code&gt;goto&lt;/code&gt;这个词基本在java中是完全废弃的&lt;/a&gt;~ 那他们为啥要定义这个&lt;code&gt;goto&lt;/code&gt;呢?? &lt;a href=&quot;http://stackoverflow.com/questions/2545103/is-there-a-goto-statement-in-java&quot; title=&quot;why keep the goto in java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有一种说法是这样情况通常是为未来版本预留的~ 还有一种说法是JVM作者&lt;strong&gt;James Gosling&lt;/strong&gt;最初加了&lt;code&gt;goto&lt;/code&gt;的支持, 但后来发现完全没必要, 就又去掉了, 但是为了兼容性问题,也一直没有把&lt;code&gt;goto&lt;/code&gt;从&lt;code&gt;reserved word&lt;/code&gt;此表中删去.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS. 很多时候也有人完全不区分&lt;code&gt;reserved word&lt;/code&gt;和&lt;code&gt;keyword&lt;/code&gt;的区别, 完全等同二者为”不能用来做&lt;code&gt;identifier&lt;/code&gt;的词”.&lt;/p&gt;
&lt;h3 id=&quot;closure_-__u95ED_u5305&quot;&gt;&lt;a href=&quot;#closure_-__u95ED_u5305&quot; class=&quot;headerlink&quot; title=&quot;closure - 闭包&quot;&gt;&lt;/a&gt;closure - 闭包&lt;/h3&gt;&lt;p&gt;在javascript中, 一个&lt;code&gt;function&lt;/code&gt;由两部分组成: 函数执行的代码以及代码执行的环境. 而这两个组合到一起后也有个专属的名称, 即&lt;code&gt;closure&lt;/code&gt;. 不过单独一个独立函数的&lt;code&gt;closure&lt;/code&gt;并没有什么值得说的意义, 因为其执行的环境, 即我们称之为&lt;code&gt;scope&lt;/code&gt;的东西, 随着函数的执行开始与结束会自动的被创建并清理掉, 所以通常情况下&lt;code&gt;closure&lt;/code&gt;都单指在嵌套函数中. 当存在嵌套的函数时, 并且函数之外存在一个&lt;code&gt;reference&lt;/code&gt;指向函数的话, 事情就变得好玩多了:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(id++)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f()();f()();f()()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 1,1,1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 每次我们调用`f()`,都会自动创建一个包含了其局部变量`id`的对象, 而嵌套的函数`f()()`会自动继承母函数的作用域;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 但每次随着调用结束, 因为没有任何外部引用, 所以创建的对象都会自动的被回收, 如此就导致每次调用`f()()`都会输出1了;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k = f();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k();k();k()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 1,2,3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 同样是调用`f()`, 但是我们首先引入了一个新的变量`k`引用`f()`函数; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这样随着`f()`的调用和结束, 其创建的`call`对象(即包含了局部变量id的那个对象)就因为还存在外部引用而得以保留&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所以后面连续调用`k()`的过程中, 本身的嵌套函数就始终共享着`call`对象的作用域, 如此每次输出的时候都是先获取了局部变量id, 然后在执行`id++`,所以输出为1,2,3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不喜欢`f()()`这种调用方式, 也不想单独创建新变量来增加引用? 当然可以, 只需要借助下`anonymous function`即可:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(id++)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f();f();f()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: 1,2,3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `anonymous function`是自执行的函数, 这里相当于把之前的`var k = f()`以及`f()`的声明定义合二为一了.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以说上述基本就是&lt;code&gt;closure&lt;/code&gt;最基本的内容了, 而&lt;code&gt;closure&lt;/code&gt;作为js的高级用法之一, 掌握了它, 你就能做很多有意思的操作了. 一个简单的例子就是: &lt;a href=&quot;http://jmvidal.cse.sc.edu/talks/javascript/breakpointsusingclosures.html&quot; title=&quot;Breakpoints using javascript closures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你可以参照closure的原理来模拟实现浏览器探查元素(inspector)的breakpoint功能.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为原作&lt;code&gt;trimpath&lt;/code&gt;上的文章已经无法访问, 所以转载了一个类似的如下, 略作了简单的修改(加了几句更友好的提示和显示每一步的运算结果):&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This function implements a breakpoint. It repeatedly prompts the user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for an expression, evaluates it with the supplied self-inspecting closure,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// and displays the result.  It is the closure that provides access to the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// scope to be inspected, so each function must supply its own closure.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Inspired by Steve Yen's breakpoint() function at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// http://trimpath.com/project/wiki/TrimBreakpoint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inspect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;inspector, title&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression, result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// You can use a breakpoint to turn off subsequent breakpoints by&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// creating a property named &quot;ignore&quot; on this function.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;ignore&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.callee) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Figure out how to prompt the user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// If we were given a title, display that first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (title) message = title + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// If we've already evaluated an expression, display it and its value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (expression) message += &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt; + expression + &lt;span class=&quot;string&quot;&gt;&quot; ==&amp;gt; &quot;&lt;/span&gt; + result + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; expression = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// We always display at least a basic prompt:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message += &lt;span class=&quot;string&quot;&gt;&quot;Enter an expression to evaluate, or just click cancel to see the next step of current calculation.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Get the user's input, displaying our prompt and using the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// last expression as the default value this time.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        expression = prompt(message, expression);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// If the user didn't enter anything (or clicked Cancel),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// they're done and so we return, ending the breakpoint.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!expression) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Otherwise, use the supplied closure to evaluate the expression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// in the scope that is being inspected. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The result will be displayed on the next iteration.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = inspector(expression);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;factorial&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; inspector = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inspect (inspector, &lt;span class=&quot;string&quot;&gt;&quot;Entering factorial()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = result * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                inspect(inspector, &lt;span class=&quot;string&quot;&gt;&quot;factorial() loop with current result:&quot;&lt;/span&gt;+result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inspect(inspector, &lt;span class=&quot;string&quot;&gt;&quot;Exiting factorial()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inspect(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(x);&amp;#125;, &lt;span class=&quot;string&quot;&gt;'Hello'&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过closure, 它就可以检测factorial执行的各个环节, 从而更容易的找到你在不同环节的问题.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然&lt;code&gt;closure&lt;/code&gt;让你可以写出更加复杂的js代码, 但是本身&lt;code&gt;closure&lt;/code&gt;的使用还是要慎重的, 因为&lt;code&gt;closure&lt;/code&gt;需要存储函数对象在内存中而不销毁, 所以如果函数主体庞大, 那么对于内存的压力和运行性能都是会有影响的~&lt;/p&gt;
&lt;h3 id=&quot;Function_constructor&quot;&gt;&lt;a href=&quot;#Function_constructor&quot; class=&quot;headerlink&quot; title=&quot;Function constructor&quot;&gt;&lt;/a&gt;Function constructor&lt;/h3&gt;&lt;p&gt;类似Array, String等都有着一个对应的类, 可以允许你通过&lt;code&gt;new&lt;/code&gt;来创建对象. Function也有自己对应的&lt;code&gt;Function()&lt;/code&gt;类, 可以通过:&lt;code&gt;new Function()&lt;/code&gt;来创建函数, 其接收不定长参数, 最后一个参数始终作为函数运行主体. 不过通常来说这种方法定义函数远没有我们常用的&lt;code&gt;function&lt;/code&gt;关键词来的方便, 所以使用上倒是少了很多~ 不过有几点还是值得注意的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new ClassFunction() 是把function作为constructor的一种用法, 你可以简单的理解为: &lt;code&gt;var cc = new ClassFunction(params)&lt;/code&gt; ==&amp;gt; &lt;code&gt;var cc = new Object();ClassFunction.call(cc,params)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new Function()&lt;/code&gt;不接收函数名参数, 即其创建的都是&lt;code&gt;anonymous function&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new Function()&lt;/code&gt;不继承作用域, 几遍其是在嵌套函数中定义, 也只继承global域, 不会继承上层函数的作用域;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u8C1C_u9898&quot;&gt;&lt;a href=&quot;#u8C1C_u9898&quot; class=&quot;headerlink&quot; title=&quot;谜题&quot;&gt;&lt;/a&gt;谜题&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;The Window&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; object = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name : &lt;span class=&quot;string&quot;&gt;&quot;My Object&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getNameFunc : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(object.getNameFunc()());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output: Object&amp;#123;name:&quot;My Object&quot;&amp;#125;; &quot;The Window&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述定义中, 为什么嵌套函数没有继承上层函数的&lt;code&gt;this&lt;/code&gt;呢? 反而继承了全局的&lt;code&gt;this&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;猜测解答:&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt;这个关键字是个比较特殊的关键字, 它具有一个很有趣的特点就是: 当一个函数作为函数而不是方法来调用的时候, &lt;code&gt;this&lt;/code&gt;指向的是全局对象, 只有当它是方法的时候, 其指向的才是所属对象; 题目来源&lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&quot; title=&quot;Issue 1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰博客&lt;/a&gt;. &lt;/p&gt;
</summary></url><url><title>CoffeeScript Programming with jQuery, rails and Nodejs (1)</title><loc>http://taoalpha.me/blog/2015/06/28/book-coffeescript-programming-with-jquery-rails-and-nodejs/</loc><publish>2015-06-28T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;The notes I took while I was learning the ‘CoffeeScript’. If you are a real beginner with ‘CoffeeScript’, I suggest you start with another book called “The Little Book on CoffeeScript”, it’s better for beginners. And after that, this one is definitely your best choice.&lt;/p&gt;
&lt;p&gt;CoffeeScript is a language which complies to JavaScript. Like the sass or scss to css except that CoffeeScript is not compatible with javascript. So you can not mix the javascript syntax with the CoffeeScript.&lt;/p&gt;
&lt;p&gt;This note is mainly about the fist chapter of the book, a nice introduction for CoffeeScript including the basic syntax.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And to improve my english, I think i will start writing english notes for the english books. ^_^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Notes&quot;&gt;&lt;a href=&quot;#Notes&quot; class=&quot;headerlink&quot; title=&quot;Notes&quot;&gt;&lt;/a&gt;Notes&lt;/h2&gt;&lt;p&gt;CoffeeScript is pretty popular in the community of JavaScript for its simplicity, elegant and readable. Now let us dive into it.&lt;/p&gt;
&lt;p&gt;Instead of  listing the keywords and statements used in CoffeeScript one by one, it would better we learn CoffeeScript from comparing the difference between the CoffeeScript and JavaScript.&lt;/p&gt;
&lt;h3 id=&quot;CoffeeScript_fix_some_ugly_stuffs_in_JavaScript&quot;&gt;&lt;a href=&quot;#CoffeeScript_fix_some_ugly_stuffs_in_JavaScript&quot; class=&quot;headerlink&quot; title=&quot;CoffeeScript fix some ugly stuffs in JavaScript&quot;&gt;&lt;/a&gt;CoffeeScript fix some ugly stuffs in JavaScript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CoffeeScript removes most of the semicolons and the curly braces which used a lot in JavaScript, gives us a clearly view of the code, but you can still use the semicolons if you want, and you still have to use the semicolons if you want to put multiple statements in single one;&lt;/li&gt;
&lt;li&gt;CoffeeScript learns a lot from ruby and python. Like this one: it uses whitespace or indentation, more accurately, to delimit the code blocks instead of braces.&lt;/li&gt;
&lt;li&gt;CoffeeScript removes a lot of parenthesis for many statements and functions, like if..else, while loops and functions with single string parameter. But this is optional, you can still use them if you want. &lt;strong&gt;Notice: you will need parenthesis if you want to call a function without any parameters)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Function: as the first class object in JavaScript, CoffeeScript also does a lot improvements for it.&lt;ul&gt;
&lt;li&gt;If you write js, you will know that the syntax is really ugly when you want to write a anonymous function. Now you can make it pretty beautiful with CoffeeScript;&lt;/li&gt;
&lt;li&gt;CoffeeScript also saves you a lot keystrokes for defining the functions;&lt;/li&gt;
&lt;li&gt;so what are the rules?&lt;ul&gt;
&lt;li&gt;Replace the &lt;code&gt;function&lt;/code&gt; keyword with &lt;code&gt;-&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Drop the parenthesis if there is no argument for the function;&lt;/li&gt;
&lt;li&gt;Put the arguments enclosed with parenthesis in front of the &lt;code&gt;-&amp;gt;&lt;/code&gt;, and if the argument has a default value, you can set it in the parenthesis;&lt;/li&gt;
&lt;li&gt;Drop the curly braces and use indentation for the function body;&lt;/li&gt;
&lt;li&gt;Automatically return the last expression of the function, but if you need return something before, you still need to use the &lt;code&gt;return&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -&amp;gt; alert &lt;span class=&quot;string&quot;&gt;'hi there!'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# the code above won't self-initiating, if you want to do that, you need use parenthesis or the `do` keyword like below:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# (-&amp;gt; alert 'hi there!')()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# do -&amp;gt; alert 'hi there!'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;square&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(n=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt; -&amp;gt;&lt;/span&gt; n * n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# function using splats&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# this is an alternative way for using Array.prototype.slice()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;gpaScoreAverage&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(scores...)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  total = scores.reduce (a, b) -&amp;gt; a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  total / scores.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert gpaScoreAverage(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;78&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;81&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scores = [&lt;span class=&quot;number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;79&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert gpaScoreAverage(scores...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; square;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; alert(&lt;span class=&quot;string&quot;&gt;&quot;hi there!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* the code in comments above will compile to:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (n == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return alert(&quot;hi there!&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [].slice.call(arguments,0) ==&amp;gt;  Array.prototype.slice.call(arguments,0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gpaScoreAverage, scores,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  slice = [].slice;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpaScoreAverage = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scores, total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scores = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;= &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length ? slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) : [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// get the single score value or a list of the scores&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  total = scores.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total / scores.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(gpaScoreAverage(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;81&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scores = [&lt;span class=&quot;number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;79&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(gpaScoreAverage.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, scores));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;CoffeeScript_saves_you_a_lot_of_keystrokes&quot;&gt;&lt;a href=&quot;#CoffeeScript_saves_you_a_lot_of_keystrokes&quot; class=&quot;headerlink&quot; title=&quot;CoffeeScript saves you a lot of keystrokes&quot;&gt;&lt;/a&gt;CoffeeScript saves you a lot of keystrokes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CoffeeScript will declare the variables you need at the top of the function for you automatically. So that means you can’t create the global variables in a function like you can do in JavaScript, actually you can’t use the &lt;code&gt;var&lt;/code&gt; keyword in CoffeeScript. &amp;lt;= many people agree that omitting the &lt;code&gt;var&lt;/code&gt; keyword makes the variables become global is a really bad desgin…&lt;/li&gt;
&lt;li&gt;Object:&lt;ul&gt;
&lt;li&gt;CoffeeScript supports the &lt;code&gt;class&lt;/code&gt; keyword, and it will create a closure to build the class;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;constructor&lt;/code&gt; to initialize some private properties, or just omit it;&lt;/li&gt;
&lt;li&gt;Every function you define in a &lt;code&gt;class&lt;/code&gt; will be added to the object as a prototype method;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;@&lt;/code&gt; as a shortcut for &lt;code&gt;this&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fat arrow&lt;/strong&gt;: When you want to use &lt;code&gt;this&lt;/code&gt; in previous scope instead of the new scope, you need the fat arrow : &lt;code&gt;=&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;super&lt;/code&gt; to call the parent’s method (same name, so just pass the parameter);&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;::&lt;/code&gt; as a shortcut for &lt;code&gt;.prototype&lt;/code&gt;, so you can extend your prototype as this:&lt;code&gt;Vehicle::stop =-&amp;gt; alert &amp;#39;stop&amp;#39;&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vehicle&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Use the constructor to initialize some private properties&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Use @ as this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;constructor&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;property&quot;&gt;@c&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;drive&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(km)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert &lt;span class=&quot;string&quot;&gt;&quot;Drove &lt;span class=&quot;subst&quot;&gt;#&amp;#123;km&amp;#125;&lt;/span&gt; kilometres&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vehicle&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;constructor&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;property&quot;&gt;@odometer&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;drive&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(km)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;property&quot;&gt;@odometer&lt;/span&gt; += km&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; km&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;property&quot;&gt;@msg&lt;/span&gt; = msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;whoisdriver&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;property&quot;&gt;@msg&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;car = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Car&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;car.drive &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert &lt;span class=&quot;string&quot;&gt;&quot;Odometer is at &lt;span class=&quot;subst&quot;&gt;#&amp;#123;car.odometer&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;constructor&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;property&quot;&gt;@name&lt;/span&gt; = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;property&quot;&gt;@mycar&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Car()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;property&quot;&gt;@mycar&lt;/span&gt;.driver =&amp;gt; alert &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;property&quot;&gt;@name&lt;/span&gt;&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mike = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person &lt;span class=&quot;string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# use `=&amp;gt;` to show mike's name instead of the default `john doe` set in Car&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mike.mycar.whoisdriver()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Car, Person, Vehicle, car, mike,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend = function(child, parent) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; parent) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasProp.call(parent, key)) child[key] = parent[key]; &amp;#125; function ctor() &amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.constructor = child; &amp;#125; ctor.prototype = parent.prototype; child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ctor(); child.__super__ = parent.prototype; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; child; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hasProp = &amp;#123;&amp;#125;.hasOwnProperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vehicle = (function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  function Vehicle() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Vehicle.prototype.drive = function(km) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; alert(&lt;span class=&quot;string&quot;&gt;&quot;Drove &quot;&lt;/span&gt; + km + &lt;span class=&quot;string&quot;&gt;&quot; kilometres&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Vehicle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Car = (function(superClass) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extend(Car, superClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  function Car() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.odometer = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Car.prototype.drive = function(km) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.odometer += km;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Car.__super__.drive.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, km);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Car.prototype.name = &lt;span class=&quot;string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Car.prototype.driver = function(msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Car.prototype.whoisdriver = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Car;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(Vehicle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;car = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Car;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;car.drive(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;Odometer is at &quot;&lt;/span&gt; + car.odometer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person = (function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  function Person(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mycar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Car();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mycar.driver((function(_this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; alert(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + _this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mike = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mike.mycar.whoisdriver();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Other_Good_Things&quot;&gt;&lt;a href=&quot;#Other_Good_Things&quot; class=&quot;headerlink&quot; title=&quot;Other Good Things&quot;&gt;&lt;/a&gt;Other Good Things&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CoffeeScript will quote reserved words automatically if you use them in your literal object;&lt;/li&gt;
&lt;li&gt;You can also drop the comma when you define your literal array or literal object only if you put one property per line, you can drop the braces for object, but you need them for array;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;#{variable_name}&lt;/code&gt; to concatenate the string and variables instead of &lt;code&gt;+&lt;/code&gt;, but only use them enclosing with double-quote, the single-quote strings are literal, borrowed from ruby;&lt;/li&gt;
&lt;li&gt;CoffeeScript will always convert the &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; to &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;existential operator: ?&lt;/code&gt; to check whether a variable exists and has a value or not(means not null or undefined);&lt;/li&gt;
&lt;li&gt;Also use the &lt;code&gt;soak: ?.&lt;/code&gt; as a shortcut for ternary statement;&lt;/li&gt;
&lt;li&gt;Support some new keywords like &lt;code&gt;unless&lt;/code&gt;, the opposite to &lt;code&gt;if&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Use plain english aliases for some of the logical operators: &lt;code&gt;is for ===&lt;/code&gt;,&lt;code&gt;isnt for !==&lt;/code&gt;,&lt;code&gt;not for !&lt;/code&gt;,&lt;code&gt;and for &amp;amp;&amp;amp;&lt;/code&gt;,&lt;code&gt;or for ||&lt;/code&gt;,&lt;code&gt;true can also be yes, or on&lt;/code&gt;,&lt;code&gt;false can be no or off&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Support assign multiple values at once;&lt;/li&gt;
&lt;li&gt;CoffeeScript replaces the &lt;code&gt;case&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; with &lt;code&gt;when ... then&lt;/code&gt;, so you can forget about the &lt;code&gt;break&lt;/code&gt;, and it also replaces the &lt;code&gt;default&lt;/code&gt; with &lt;code&gt;else&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;CoffeeScript supports the &lt;code&gt;chained comparisions&lt;/code&gt;: &lt;code&gt;61 &amp;gt; a &amp;gt; 39&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;###&lt;/code&gt; to comment multiple lines. The biggest difference between &lt;code&gt;###&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; is former one will be part of generated javascript;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;b=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a? &amp;amp;&amp;amp; b?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert &lt;span class=&quot;string&quot;&gt;&quot;a.c equals to &lt;span class=&quot;subst&quot;&gt;#&amp;#123;a?.c&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[city, state, country] = [&lt;span class=&quot;string&quot;&gt;&quot;!2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;24&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# or function which returns an object with the same structure as you described before the `=`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;address&lt;/span&gt;: &amp;#123;&lt;span class=&quot;attribute&quot;&gt;street&lt;/span&gt;: myStreet,&lt;span class=&quot;attribute&quot;&gt;room&lt;/span&gt;: myRoom&amp;#125;&amp;#125; = getAddress()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// since we declared the b before, we only need to check if b is null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ((typeof a !== &quot;undefined&quot; &amp;amp;&amp;amp; a !== null) &amp;amp;&amp;amp; (b != null)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&quot;a.c equals to &quot; + (typeof a !== &quot;undefined&quot; &amp;amp;&amp;amp; a !== null ? a.c : void 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var city, country, myRoom, myStreet, ref, ref1, state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ref = [&quot;!2&quot;, &quot;24&quot;, &quot;2&quot;], city = ref[0], state = ref[1], country = ref[2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ref1 = getAddress().address, myStreet = ref1.street, myRoom = ref1.room;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Special_for_List&quot;&gt;&lt;a href=&quot;#Special_for_List&quot; class=&quot;headerlink&quot; title=&quot;Special for List&quot;&gt;&lt;/a&gt;Special for List&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List: CoffeeScript borrowed a lot &lt;code&gt;list comprehensions&lt;/code&gt; from python&lt;code&gt;[ x*2 for x in object_name ]&lt;/code&gt; and ruby.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;: it works nearly the same as in javascript except that it has an opposite keyword in CoffeeScript: &lt;code&gt;until&lt;/code&gt; and both of them can be used as expression and will return a array;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;: the standard statement is &lt;code&gt;[action or mapping] for [selector] in [collection] when [condition] by [step]&lt;/code&gt;. Last &lt;code&gt;by&lt;/code&gt; following with a number would affect the loop step(`i++``);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[f_number..l_number]&lt;/code&gt;: it will create a array with numbers between the fist number and the last number, you can use &lt;code&gt;...&lt;/code&gt;(3 dots) to make the array only contains the numbers in between;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;of&lt;/code&gt;: for key-value pairs of an object, you can use &lt;code&gt;of&lt;/code&gt; to loop them through;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;times = [&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(n*times &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; times -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; var times;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; times = [0, 1, 2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  while (times -= 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results.push(n * times);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()).pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert x &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; flavors &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; x != &lt;span class=&quot;string&quot;&gt;'h'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;###=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var x, i, len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (i = 0, len = flavors.length; i &amp;lt; len; i+=2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x = flavors[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (x !== 'h') &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ages =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;john&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;peter&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;joan&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;name&amp;#125;&lt;/span&gt; is &lt;span class=&quot;subst&quot;&gt;#&amp;#123;age&amp;#125;&lt;/span&gt; years old&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, age &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; ages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;###=&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var age, ages, name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ages = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  john: 25,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  peter: 26,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  joan: 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (name in ages) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age = ages[name];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(name + &quot; is &quot; + age + &quot; years old&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Digest&quot;&gt;&lt;a href=&quot;#Digest&quot; class=&quot;headerlink&quot; title=&quot;Digest&quot;&gt;&lt;/a&gt;Digest&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;For JavaScript:&lt;ul&gt;
&lt;li&gt;Every &lt;code&gt;class&lt;/code&gt; in JS is a function object;&lt;/li&gt;
&lt;li&gt;Only function object has the default prototype, so the normal objects like literal string, number or even string created from String(),any objects created by functions, they all don’t have the default prototype;&lt;/li&gt;
&lt;li&gt;But every object has a default constructor which is exactly the function object who create it;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For CoffeeScript:&lt;ul&gt;
&lt;li&gt;If there is only one line in the body, you can move it in front of the condition &amp;lt;= &lt;code&gt;while/until/for/if...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Puzzle&quot;&gt;&lt;a href=&quot;#Puzzle&quot; class=&quot;headerlink&quot; title=&quot;Puzzle&quot;&gt;&lt;/a&gt;Puzzle&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q1:&lt;/strong&gt; In the second code example above, CoffeeScript create a default extend function for us:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; extend = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;child, parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasProp.call(parent, key)) child[key] = parent[key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Start from here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ctor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.constructor = child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ctor.prototype = parent.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ctor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// End&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Just cannot understand the codes above...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Why we need another function as the child's prototype? We have already copied all the properties from parent, or we just need a beautiful prototype chain? `Car &amp;lt;= ctor() &amp;lt;= Vehicle() &amp;lt;= Object` compared to `Car &amp;lt;= Car &amp;lt;= Object()`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Then why not we just use the child.prototype = new parent() ??? we can still get a good prototype chain. `Car &amp;lt;= Vehicle &amp;lt;= Vehicle &amp;lt;= Object`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  child.__super__ = parent.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hasProp = &amp;#123;&amp;#125;.hasOwnProperty;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</summary></url><url><title>CoffeeScript Programming with jQuery, rails and Nodejs (2)</title><loc>http://taoalpha.me/blog/2015/06/30/book-coffeescript-programming-with-jquery-rails-and-nodejs-2/</loc><publish>2015-06-30T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;After learned the basic syntax of CoffeeScript, I re-wrote all my blog’s js files with CoffeeScript. I have to say, practice is the best way to learn and understand one skill. Especially for coding, if you just read the book and never write a single line by yourself, you will never become a master of it or you may stick in the beginner for ever.&lt;/p&gt;
&lt;p&gt;Today we will finish the book. Talking about how to combine the CoffeeScript with some other web tools we use a lot: jQuery, Rails and Nodejs.&lt;/p&gt;
&lt;h2 id=&quot;Notes&quot;&gt;&lt;a href=&quot;#Notes&quot; class=&quot;headerlink&quot; title=&quot;Notes&quot;&gt;&lt;/a&gt;Notes&lt;/h2&gt;&lt;p&gt;Here I just ignored the second chapter about how to install the coffeescript and nodejs in your computer, if you need some help, feel free to comment below the blog or just visit the &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs&lt;/a&gt; and &lt;a href=&quot;http://coffeescript.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coffeescript&lt;/a&gt; to find a way yourself.&lt;/p&gt;
&lt;h3 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h3&gt;&lt;p&gt;jQuery is the most popular js module people used in their websites or webapps. And using jQuery with CoffeeScript is just like javascript. jQuery is javascript, after all.&lt;/p&gt;
&lt;p&gt;Want to use CoffeeScript with jQuery? Just do it and follow the rules we learn from the basic syntax part. Here I list several examples and if you look it closely, you will find everything you have already known if you read the first chapter carefully. The author of the book shows us another complex examples: &lt;a href=&quot;https://gist.github.com/alecperkins/3363111&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TodoMVC in CoffeeScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BTW: &lt;a href=&quot;http://todomvc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TodoMVC&lt;/a&gt; is a great project which shows you how to write a todo app in all kinds of tools and frameworks.&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; some&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; another&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  some();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return another();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;That's just like the $(document).ready(function()&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# A function using ajax to send mail, which is a new feature I will add to my blog in a few days :)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;property&quot;&gt;@sendMail&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.ajax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'https://mandrillapp.com/api/1.0/messages/send.json'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;'key'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;'message'&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'from_email'&lt;/span&gt;: msg.sender_mail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'from_name'&lt;/span&gt; : msg.sender_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'to'&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;'email'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'TaoAlpha'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;'type'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'to'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'autotext'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'true'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'subject'&lt;/span&gt;: msg.subject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'html'&lt;/span&gt;: msg.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .done (response)-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showAlert(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Thanks for your contribution!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fail (data)-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showAlert(&lt;span class=&quot;string&quot;&gt;&quot;fail&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Sorry! Failed to send the email. Please retry!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# another function to get unique result from an array of objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Array&lt;/span&gt;::getObjectUnique = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a=b=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; -&amp;gt;&lt;/span&gt; b.push data[id];data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (add i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; @ &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; b.indexOf(i[id]) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// You can see that you have saved a lot of keystrokes and the codes look more clean and beautiful.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Because coffeescript doesn't support declare global variables directly, and if we want to use the function in other script, we need to declare it into the `this` scope.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.sendMail = function(msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: 'POST',&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: 'https://mandrillapp.com/api/1.0/messages/send.json',&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      'key': '',&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      'message': &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        'from_email': msg.sender_mail,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        'from_name': msg.sender_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        'to': [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            'email': '',&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            'name': 'TaoAlpha',&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            'type': 'to'&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        'autotext': 'true',&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        'subject': msg.subject,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        'html': msg.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).done(function(response) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return showAlert(&quot;success&quot;, &quot;Thanks for your contribution!&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;).fail(function(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return showAlert(&quot;fail&quot;, &quot;Sorry! Failed to send the email. Please retry!&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# get unque result for array of objects&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Array.prototype.getObjectUnique = function(id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var a, add, b, i, j, len, results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = b = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  add = function(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.push(data[id]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  for (j = 0, len = this.length; j &amp;lt; len; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = this[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (b.indexOf(i[id]) === -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      results.push(add(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Rails&quot;&gt;&lt;a href=&quot;#Rails&quot; class=&quot;headerlink&quot; title=&quot;Rails&quot;&gt;&lt;/a&gt;Rails&lt;/h3&gt;&lt;p&gt;Ruby on Rails is a web framework that came around in 2004. And it soon became quite popular. Actually many people believe that Rails saved the ruby…&lt;/p&gt;
&lt;p&gt;Check this:&lt;a href=&quot;http://rubyonrails.org/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to download and install Rails&lt;/a&gt; if you haven’t installed it.&lt;/p&gt;
&lt;h4 id=&quot;Rails_u2019s_principles&quot;&gt;&lt;a href=&quot;#Rails_u2019s_principles&quot; class=&quot;headerlink&quot; title=&quot;Rails’s principles&quot;&gt;&lt;/a&gt;Rails’s principles&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Convention over configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rails is designed to assume that the programmer will follow certain known conventions, which if used, provide great benefit and much less need to configure the framework.That means that the framework makes assumptions on how a typical application should be built and structured and it doesn’t try to be overly flexible and configurable. This helps you spend less time on mundane tasks like configuring and wiring up an application architecture and more time on actually building your app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Don’t repeat yourself, or DRY&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Every piece of knowledge must have a single, unambiguous, and authoritative representation within a system.&lt;br&gt;Rails strives to remove duplication and boilerplate wherever it can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;How_to_use_Rails_with_CoffeeScript&quot;&gt;&lt;a href=&quot;#How_to_use_Rails_with_CoffeeScript&quot; class=&quot;headerlink&quot; title=&quot;How to use Rails with CoffeeScript&quot;&gt;&lt;/a&gt;How to use Rails with CoffeeScript&lt;/h4&gt;&lt;p&gt;Luckily, after Rails 3.1, you don’t need do anything to let Rails support CoffeeScript. It has already become part of rails! And also, rails has changed its default js library to jQuery.&lt;/p&gt;
&lt;p&gt;So what you need to do if you want to use coffeescript with rails? Nothing but learn rails!&lt;/p&gt;
&lt;p&gt;Just like the author said in the book: “If you haven’t done so already, I encourage you to spend some more time learning Rails as well as Ruby, and immersing yourself in the wonderful communities they support.”&lt;/p&gt;
&lt;h3 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h3&gt;&lt;p&gt;Node is fantastic. It changes something. Before node, javascript was mostly run inside browsers. Now it just came out and gave web developers a chance to become a full-stack!&lt;/p&gt;
&lt;h4 id=&quot;Features_of_Node&quot;&gt;&lt;a href=&quot;#Features_of_Node&quot; class=&quot;headerlink&quot; title=&quot;Features of Node&quot;&gt;&lt;/a&gt;Features of Node&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Event-driven&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Node.js framework only allows non-blocking, asynchronous I/O. This means that any I/O operation that is accessing an external resource, such as the operating system, a database, or a network resource must happen asynchronously.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Fast and scalable&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The V8 JavaScript engine(created by google and used in chrome) used by Node.js is highly optimized for performance, thus making Node.js applications very fast. The fact that Node is non-blocking will ensure that your applications will be able to handle many concurrent client requests without using a lot of system resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node is not Rails&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rails strives to be a full-stack solution to building web applications, whereas Node.js is more of a low-level system for writing any type of fast and scalable network application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Node_and_CoffeeScript&quot;&gt;&lt;a href=&quot;#Node_and_CoffeeScript&quot; class=&quot;headerlink&quot; title=&quot;Node and CoffeeScript&quot;&gt;&lt;/a&gt;Node and CoffeeScript&lt;/h4&gt;&lt;p&gt;Want to write coffeescript in node? It’s easy, all you need is a module named &lt;code&gt;CoffeeScript&lt;/code&gt;. And like many other languages, node has several frameworks people built for web development, like: &lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Express&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The core about how to use coffeescript with nodejs is to use the &lt;code&gt;--watch&lt;/code&gt; for &lt;code&gt;coffee&lt;/code&gt; command in node. It will automatically compile all file end with &lt;code&gt;coffee&lt;/code&gt; into &lt;code&gt;js&lt;/code&gt; when there is a change made into these files.&lt;/p&gt;
&lt;p&gt;And just like jQuery, you just follow the rules and write your code.&lt;/p&gt;
&lt;h2 id=&quot;Digest&quot;&gt;&lt;a href=&quot;#Digest&quot; class=&quot;headerlink&quot; title=&quot;Digest&quot;&gt;&lt;/a&gt;Digest&lt;/h2&gt;&lt;p&gt;CoffeeScript is a tool that can help you write js more quickly and elegant. And any platform or language you want to use coffeescript, what you need to do is following the coffeescript’s rules. There is no difference caused by platform or language.&lt;/p&gt;
&lt;p&gt;That’s all. Thanks!&lt;/p&gt;
</summary></url><url><title>Blog Migration from jekyll to hexo</title><loc>http://taoalpha.me/blog/2015/12/26/blog-migration/</loc><publish>2015-12-26T07:34:01.000Z</publish><summary>&lt;p&gt;After nearly 24 hours work, I finally migrated my blog from jekyll to hexo. Actually, I recreated the entire blog with hexo with same styles and scripts files.&lt;/p&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;Why I want to migrate to hexo instead of keeping using jekyll ? The most important reasons are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo is written with NodeJS which I am more familiar with, so it would be easy to debug and create my own extension easily;&lt;/li&gt;
&lt;li&gt;the new version of jekyll has a really bad compatibality of previous versions… after a terrible error happended when I upgraded last time, I decided to use hexo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Workflow&quot;&gt;&lt;a href=&quot;#Workflow&quot; class=&quot;headerlink&quot; title=&quot;Workflow&quot;&gt;&lt;/a&gt;Workflow&lt;/h2&gt;&lt;h3 id=&quot;Hexo_Workflow&quot;&gt;&lt;a href=&quot;#Hexo_Workflow&quot; class=&quot;headerlink&quot; title=&quot;Hexo Workflow&quot;&gt;&lt;/a&gt;Hexo Workflow&lt;/h3&gt;&lt;p&gt;First, I want to introduct the hexo workflow instead of the migration workflow, here I list some lovely features that I think are most important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theme: you can import or create your own theme in hexo with pure css/js/html and a little template langualge;&lt;/li&gt;
&lt;li&gt;npm: since it is written with Node, so you definitely can take advantage of the npm, so you can choose any language you want to write css or javascript, I’m using es6 and scss;&lt;/li&gt;
&lt;li&gt;fast: fast to build and fast to generate;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hexo is really easy to use, especially with theme functions, you can just fork some beautiful themes from github or official website of hexo, and then what you need to care is only writing the posts.&lt;/p&gt;
&lt;h3 id=&quot;Migration_Workflow&quot;&gt;&lt;a href=&quot;#Migration_Workflow&quot; class=&quot;headerlink&quot; title=&quot;Migration Workflow&quot;&gt;&lt;/a&gt;Migration Workflow&lt;/h3&gt;&lt;p&gt;Since I need to migrate the website from jekyll to hexo, there are few things you need to prepare and remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;structure: if you are using a customized theme created by yourself, then you need create a theme in hexo, but luckily, most of times, you don’t need to rewrite the scss and javsascript since hexo also supports most of the precompilers of them.&lt;/li&gt;
&lt;li&gt;format: they are using totally different format of the tempalte file, jekyll is using somthing more similiar with liquid template while hexo supports jade/ejs/swig…etc, I chose jade since it is the most familiar one compared to others :)&lt;/li&gt;
&lt;li&gt;files: You can keep your styles and scripts, but you need rewrite the template files. The structure of the html can be the same, but you need modify it according to hexo’s requirements and attributes&lt;/li&gt;
&lt;li&gt;posts: After you created your own theme, you can migrate all the posts you have to hexo, according to the content you put into your posts, you may need some extra work to convert some tags or elements, like the &lt;code&gt;highlight&lt;/code&gt; block;&lt;/li&gt;
&lt;li&gt;debug: remember to debug every functions after you have migrated the entire site :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;p&gt;Be Patient! You will encounter a lot of bugs and problems during the entire process, but you can always find something helpful from google or github.&lt;/p&gt;
&lt;p&gt;If you are doing the same thing, welcome to comment or shoot me an email :)&lt;/p&gt;
&lt;h2 id=&quot;Todo&quot;&gt;&lt;a href=&quot;#Todo&quot; class=&quot;headerlink&quot; title=&quot;Todo&quot;&gt;&lt;/a&gt;Todo&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Series Widget&lt;/li&gt;
&lt;li&gt;Small bugs&lt;/li&gt;
&lt;li&gt;Re-factor some parts&lt;/li&gt;
&lt;li&gt;Optimize the theme&lt;/li&gt;
&lt;/ul&gt;
</summary></url><url><title>Summary of the year</title><loc>http://taoalpha.me/blog/2015/12/26/Summary-of-the-year/</loc><publish>2015-12-26T18:57:40.000Z</publish><summary>&lt;p&gt;2015 年也慢慢过去了. 这一年似乎发生了不少变化, 也做了不少的改变, 今天做个简单的总结.&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;15年, 我从大清毕业2年了, 14年的时候我工作了大半年,多数时间都在准备出国和锻炼学习相关的技能, , 当然参军训练 以及成功申请 WHV绝对是我人生浓重的一笔. 今年前半年我一直在新西兰游荡, 走遍了南北岛绝大多数的城市, 认识了不少有趣的新朋友, 看到了无数完全不同, 但各有各的精彩的人生, 回国后就一直在家里陪父母等待出国, 算是过了难得的一段悠闲日子. &lt;/p&gt;
&lt;p&gt;下半年则基本以学业为主线, 找工作为副线. 说实话, 2年了, 重回象牙塔的感觉还是相当复杂的, 因为本科算是标准学渣一枚, 在大清更是绝对的生物链底层哈哈, 所以这一次回归学校, 也算是比较珍惜这一机会, 虽然不奢望做一个学霸, 但是还是希望能够过一把好学生的瘾, 哈哈, 当然, 潜意识也是希望能够通过好的成绩来证明自己转专业的选择并没有错..哈哈&lt;/p&gt;
&lt;p&gt;因为计划一年毕业, 所以找工作也算是重点关注事宜之一, 按照来美之前的计划, 先从小公司开始着手, 积累面试经验, 所以在学期中下旬的时候投了几家公司的简历, 目前面了3家, 2家 offer, 一家准备第二轮的面试. 也算是不错的结果了. 下面则主要针对这一年的经历简单列举下一些重要的项:&lt;/p&gt;
&lt;h3 id=&quot;Accomplishment_List&quot;&gt;&lt;a href=&quot;#Accomplishment_List&quot; class=&quot;headerlink&quot; title=&quot;Accomplishment List&quot;&gt;&lt;/a&gt;Accomplishment List&lt;/h3&gt;&lt;p&gt;人总是从成功的事情中收获成就感, 我很开心过去一年的所有经历, 基本完成了去年的计划, 无论是新西兰的 WHV 还是来 Cornell 读书, 都让我收获良多.&lt;/p&gt;
&lt;p&gt;下面简单列举了下个人觉得值得记录的一些事情:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刷新离家最远记录: 新西兰, 美国;&lt;/li&gt;
&lt;li&gt;独一无二体验: Working Holiday @ New Zealand, 半年;&lt;/li&gt;
&lt;li&gt;返校: 毕业两年, 回归象牙塔;&lt;/li&gt;
&lt;li&gt;工作: 拿到两家小公司的offer, 一家纽约, 一家加州;&lt;/li&gt;
&lt;li&gt;学业: 过去一学期选了 ML,DB,Statistical Method,SE, MPS, 最后成绩4A,1A-, GPA:3.93, 算是成功的过了一把好学生的瘾 :);&lt;/li&gt;
&lt;li&gt;小火一把的作品: 沾学弟的关, 也算有一个小作品登山小众软件,36Kr 等一直关注的媒体;&lt;/li&gt;
&lt;li&gt;Hackathon: 来美第一个 hackthon, 项目 BRT(Big Red Transit);&lt;/li&gt;
&lt;li&gt;Skills: 准备专注在 JS 上, 开始学习 AngularJS, ReactJS, NodeJS 等;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Regret_List&quot;&gt;&lt;a href=&quot;#Regret_List&quot; class=&quot;headerlink&quot; title=&quot;Regret List&quot;&gt;&lt;/a&gt;Regret List&lt;/h3&gt;&lt;p&gt;世间事难两全, 虽然每个人都希望活的无悔. 但人生难免会有很多遗憾, 希望以后能够有机会弥补那些还可以弥补的…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极限运动: 新西兰算是极限运动之国, 有着很多享誉世界的极限运动存在, 可惜在新西兰半年的时间, 并没有玩太多的好玩的运动, 有机会一定要回去再体验下那最高的 skydive 和各种蹦极, 冲浪, 滑翔伞…哈哈&lt;/li&gt;
&lt;li&gt;健身: 虽然一直想要坚持健身的习惯, 但还是没有养成这个习惯, 来美半年也就去过1,2次gym… 希望下学期能够坚持;&lt;/li&gt;
&lt;li&gt;BIG NAME: 目前还没有面过大公司, 下学期会去试一下;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中国: 离家才知家好, 走了几个国家才发现原来我连自己祖国都还没走完, 看完.&lt;/p&gt;
&lt;p&gt;虽然有些遗憾, 但总的来说还是很好的, 整体经历极佳, 不是吗?^_^&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Future&quot;&gt;&lt;a href=&quot;#Future&quot; class=&quot;headerlink&quot; title=&quot;Future&quot;&gt;&lt;/a&gt;Future&lt;/h2&gt;&lt;p&gt;说完了今年, 就可以扯扯16年的计划喽. 16年的主线是找工作, 副线则是学习和最后的疯狂哈哈哈. &lt;/p&gt;
&lt;p&gt;基本计划如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPA 保持在3.9, 努力争取4.0;&lt;/li&gt;
&lt;li&gt;大公司搞一波;&lt;/li&gt;
&lt;li&gt;毕业旅行去阿拉斯加;&lt;/li&gt;
&lt;li&gt;考驾照;&lt;/li&gt;
&lt;li&gt;加拿大;&lt;/li&gt;
&lt;li&gt;3月回国;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good Luck to Everyone!&lt;/p&gt;
</summary></url><url><title>Close old website and related services</title><loc>http://taoalpha.me/blog/2015/12/26/Close-old-website-and-related-services/</loc><publish>2015-12-27T01:49:20.000Z</publish><summary>&lt;p&gt;&lt;strong&gt;Hi all:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  Since I have one month winter break, so I decide to rebuild some old projects with some fancy stuff. And also to save some money, I just closed the server that supported them for nearly two years… I am sad and sorry if that causes any trouble… I have sent an email to all the active users about this … Thanks for your understanding.&lt;/p&gt;
&lt;p&gt;  The major influence would be caused by the shutdown of feedpusher and wordcard since they have most users… Truly sorry about that. I will try my best to build a new and better one in this month, look forward to it!! :)&lt;/p&gt;
&lt;p&gt;  The ipromise would be fine since they are just a plain web application without any need for server things, actually I host it on the github, so please continue using it :)&lt;/p&gt;
&lt;p&gt;  All the updates about my new feedpusher would be pushed to the github repo: &lt;a href=&quot;https://github.com/taoalpha/feedpusher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;feedpusher&lt;/a&gt;, any issues you have or features you want, just open an issue under this repo :)&lt;/p&gt;
&lt;p&gt;  Same for wordcard, I will recover it in next week, maybe will remove the user authentication and use plain web application. :)&lt;/p&gt;
&lt;p&gt;  And also I will keep updating my first CLI nodejs app: &lt;a href=&quot;https://github.com/taoalpha/baby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;baby&lt;/a&gt;, feel free to use it and give me any suggestions you have.&lt;/p&gt;
&lt;p&gt;  Seem I have a very busy break :)&lt;/p&gt;
&lt;p&gt;  Have a wonderful new year!!!&lt;/p&gt;
&lt;p&gt;Tao@Home&lt;/p&gt;
&lt;p&gt;2015-12-26&lt;/p&gt;
</summary></url><url><title>感恩</title><loc>http://taoalpha.me/blog/2015/11/27/thanksgiving/</loc><publish>2015-11-27T05:00:00.000Z</publish><summary>&lt;p&gt;我不知道感恩节的历史, 也并没有探究的欲望. 但还是以此为名, 随便写写.&lt;/p&gt;
&lt;p&gt;我很感谢我的父母, 他们给了我生命, 而这是让我得以体验这个世界的根本缘由. 还有两个月我满24岁, 至此已来人世两个小轮回, 我庆幸自己始终活着, 走着…&lt;/p&gt;
&lt;p&gt;我很感谢我的父亲, 他是我人生最大的偶像, 虽然我从未这么说过. 身为农民的孩子, 他有着坎坷的童年, 那是身在我这个时代, 绝大多数人无法想象的苦楚, 而作为军人, 他有着极为精彩的过去, 有着极为强大的精神世界和军人所有的品质, 而这些, 一直都是我所向往的, 崇拜的, 更是我面对任何困难都不会放弃, 妥协的支柱.&lt;/p&gt;
&lt;p&gt;我很感谢我的母亲, 她是个很平凡的人, 没有很高的学历, 没有多么精彩的人生, 她就是一个平平凡凡的中国母亲, 而母爱确实无愧于这个世界上最伟大, 最无私的爱, 我是她生命中最宝贵的东西, 没有之一.&lt;/p&gt;
&lt;p&gt;我庆幸我能生长在这样一个家庭里, 我的父母也许没有那么博学多才, 但他们开明, 他们允许我去尝试, 去试错, 去体验这个世界. 我很感激.&lt;/p&gt;
&lt;p&gt;至此24载, 我可以无愧的说我的人生很精彩, 我很知足, 也很感激这一路走来所有帮助过我, 启发过我的朋友, 长辈甚至是那些陌生人.&lt;/p&gt;
&lt;p&gt;我不知道我的未来如何, 但我会认真的把它过好, 因为只有我好, 才是对有所有人最大的报答.&lt;/p&gt;
</summary></url><url><title>时隔两年，重返校园</title><loc>http://taoalpha.me/blog/2015/08/18/back-to-school-after-2-years/</loc><publish>2015-08-18T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;u5F15_u5B50&quot;&gt;&lt;a href=&quot;#u5F15_u5B50&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;随着加州之行的结束, 我阔别两年之久的校园生活正式回归. 换了一个新的园子, 开启一段新的生活, 作为体验性人生的坚定支持者, 我对重返校园的期待自然是获得一份和本科截然不同的经历.&lt;/p&gt;
&lt;h2 id=&quot;u672C_u79D1&quot;&gt;&lt;a href=&quot;#u672C_u79D1&quot; class=&quot;headerlink&quot; title=&quot;本科&quot;&gt;&lt;/a&gt;本科&lt;/h2&gt;&lt;p&gt;虽然我荣幸进入国内顶尖的园子里学习, 但我真的只是个学渣. 我讨厌自己的专业, 而身为兴趣唯一驱动力的人, 一旦讨厌, 就绝不可能做好. 我花了两年多时间, 修了很多专业的基础课, 尝试找出自己喜欢的东西. 而很幸运我找到了, 也很不幸出于种种原因我无法转系(成绩啊,时间啊,朋友啊等等), 也担心一旦兴趣变成任务就会失去动力了…&lt;/p&gt;
&lt;p&gt;于是, 做了四年的学渣, 我的 GPA 仅仅3出头, 虽然能够推研, 但是最终还是选择了走出园子. 想去看看真实的社会与工作. 父母一度认为这是我不求上进的表现. 于是几次不欢而散的电话后, 我承诺父母: 当我确定自己的目标后, 我会申请自己喜欢的方向, 出国深造. 我不是不求上进, 我只是想在上进的过程中目标更明确些.&lt;/p&gt;
&lt;h2 id=&quot;u5DE5_u4F5C&quot;&gt;&lt;a href=&quot;#u5DE5_u4F5C&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h2&gt;&lt;p&gt;算是实习, 我去过不少家公司, 包括了巨头如 BAT 中的两家, 也有创新工场这种star up的公司, 当然也包含了在巨头阴影下坚强生存的中等公司. 我喜欢大公司的系统化, 职业发展路线明确; 也喜欢创业公司的氛围, 喜欢那种快速学习, 全面发展的感觉.&lt;/p&gt;
&lt;p&gt;我确认了自己对于计算机领域的真爱, 也就开始实践自己决定工作时对父母的诺言. 一步步迈过了G, T, 文书, 选校等等关卡. 终于兑现了自己的承诺.&lt;/p&gt;
&lt;h2 id=&quot;u51FA_u56FD&quot;&gt;&lt;a href=&quot;#u51FA_u56FD&quot; class=&quot;headerlink&quot; title=&quot;出国&quot;&gt;&lt;/a&gt;出国&lt;/h2&gt;&lt;p&gt;这不是我第一次出国. 在阔别学校的2年里, 我在工作一年后选择了申请新西兰的 working holiday, 开始了我人生第一次, 也很可能是唯一一次的 Gap Year. 我对此行的定位是: 锻炼英语 , 丰富阅历, 精彩人生. 半年后, 我回国办理留学事宜, 我认为, 这三点我都做到了.&lt;/p&gt;
&lt;p&gt;7月末, 我第一次踏上了美国. 这个已经在我耳边, 眼前飘过无数次的地方. 作为 IT 人士, 美国更代表着 IT 领域的引领者. 我在加州看到了 facebook, google, oracle, amazon, uber, hp, github, dropbox… 这些我听说或者使用了多年的服务创造者们, 仿佛从电视中走出来的明星一样, 让人激动, 不安.&lt;/p&gt;
&lt;p&gt;8月中, 我从 San Diego 飞来 Ithaca. 为即将开始的研究生生活做些准备工作. 带着对未来的美好期待, 开始这完全崭新的一年.&lt;/p&gt;
&lt;p&gt;几天前, 传来 Opt 延期取消的消息. 虽然消息目前众说纷纭. 有人乐观, 有人悲观. 不过似乎离我还有些遥远. 如我和朋友所说, 苦逼一年,. 牛逼了, 怎么混都是好的.&lt;/p&gt;
&lt;h2 id=&quot;u8BA1_u5212&quot;&gt;&lt;a href=&quot;#u8BA1_u5212&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;p&gt;不就一年吗. 再说, 我连学霸是什么感觉都不知道, 既然有这么一次重返校园的机会, 自然要珍惜. 当然, 要珍惜的远不只是体验下学霸的感觉.&lt;/p&gt;
&lt;p&gt;23年来, 我知道自己是个不擅长制定详细长远目标的人, 对我, 只要有一个大致的奋斗方向在远方即可, 平时更有意义的是短期目标. 所以下面列举了以下我在开学前几天计划要做的事情:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动树莓派;&lt;/li&gt;
&lt;li&gt;看完 data structure 和 mit 的 algorithms 课程;&lt;/li&gt;
&lt;li&gt;看2本书;&lt;/li&gt;
&lt;li&gt;做一个短期目标监督提醒器在树莓派上;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u5C3E&quot;&gt;&lt;a href=&quot;#u5C3E&quot; class=&quot;headerlink&quot; title=&quot;尾&quot;&gt;&lt;/a&gt;尾&lt;/h2&gt;&lt;p&gt;本科的我是迷茫的, 惶恐的, 应付差事的, 混日子的, 不善交际的…&lt;/p&gt;
&lt;p&gt;我希望以后回忆研究生的我是目标明确的, 自信的, 热爱并享受生活的… 我期待在这里遇到对的人, 对的时间, 对的地点, 做对的事, 错的事, 做所有想做而合理合法的事情.&lt;/p&gt;
</summary></url><url><title>安全抵达美帝, 激活生活新篇章!</title><loc>http://taoalpha.me/blog/2015/07/28/landing-in-usa/</loc><publish>2015-07-28T04:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7740_u9646&quot;&gt;&lt;a href=&quot;#u7740_u9646&quot; class=&quot;headerlink&quot; title=&quot;着陆&quot;&gt;&lt;/a&gt;着陆&lt;/h2&gt;&lt;p&gt;在经过了首都倾盆大雨的送行后, 历时近12小时, 我终于成功抵达LA, 非常轻松愉快的通过了入境安检后终于踏上了这个神奇的国度. 2年未见的室友C除了更帅气了几份外倒也没啥变化~ 非常省心的被安顿好后就要开始痛苦的时差调整了… 当然, 手机电话卡以及银行卡自然是首要任务之一, 本文顺带介绍下博主的办卡经历分享给大家~&lt;/p&gt;
&lt;h2 id=&quot;u5DF2_u5B8C_u6210_u4E8B_u9879_u6E05_u5355&quot;&gt;&lt;a href=&quot;#u5DF2_u5B8C_u6210_u4E8B_u9879_u6E05_u5355&quot; class=&quot;headerlink&quot; title=&quot;已完成事项清单&quot;&gt;&lt;/a&gt;已完成事项清单&lt;/h2&gt;&lt;h3 id=&quot;u7535_u8BDD_u5361&quot;&gt;&lt;a href=&quot;#u7535_u8BDD_u5361&quot; class=&quot;headerlink&quot; title=&quot;电话卡&quot;&gt;&lt;/a&gt;电话卡&lt;/h3&gt;&lt;p&gt;  博主入的AT&amp;amp;T, 主要原因是朋友的family plan是AT&amp;amp;T的, 直接加入省心省力~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所需材料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;family plan holder, 也就是开plan的这个人得在场才能办理;&lt;/li&gt;
&lt;li&gt;smartphone一台, 你也可以来了以后选择2-year contract的合约机, 不过貌似目前AT&amp;amp;T的合约机不是很值了, 但感觉还是要便宜一些的, 如果你要买iphone的话;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前往AT&amp;amp;T门店, 找客服直接一条龙搞定, 可以选号, 也可以选择区号, 因为没有找到ithaca的区号, 我就干脆选用了和C同学一样的919(北卡的区号), 因为美国没有跨州的电话费用, 所以这个其实没啥关系, 再说你也可以在新的地方更换的;&lt;/li&gt;
&lt;li&gt;关于2-year contract等类似的合约服务, 也可以在办卡后另行升级的, 具体可去门店咨询;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tips&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T门店似乎营业时间直到晚9点(至少在San Diego是的), 所以你可以晚上去办的~&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u94F6_u884C_u5361&quot;&gt;&lt;a href=&quot;#u94F6_u884C_u5361&quot; class=&quot;headerlink&quot; title=&quot;银行卡&quot;&gt;&lt;/a&gt;银行卡&lt;/h3&gt;&lt;p&gt;  博主用的BOA(Bank of America), 因为Ithaca太偏远.. BOA至少还有几个ATM在其附近…其他的有些连ATM都木有… 比如chase…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所需材料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;护照+签证: 用以证明身份以及登记所用;&lt;/li&gt;
&lt;li&gt;居住地址: 用以寄送卡片到你所在地址, 只需要一个地址即可, 不需要租赁合同, 像国际留学生等, 通常还会留一个国内地址;&lt;/li&gt;
&lt;li&gt;电话+email: 用以登记信息和服务评价;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前往BOA支行, 说明开卡需求(open account);&lt;/li&gt;
&lt;li&gt;提交护照, 地址, 电话等信息;&lt;/li&gt;
&lt;li&gt;设定pin码, 账户名称密码, 密保等等;&lt;/li&gt;
&lt;li&gt;获得临时卡片;&lt;/li&gt;
&lt;li&gt;存入25$以上金额;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tips&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BOA的卡有12$的月费, 但是如果你符合其三个条件中的任何一个即可免除这一费用: &lt;23岁(悲剧...刚好23...), 账户金额=&quot;&quot;&gt;1500$(日均-这个不太确定, 开卡的时候那哥们和我说必须要all the time, 哪怕一天小于1500也会在次月收取费用的), 有收入来源(deposit, 但是类似父母转账这种是不算在内的);&lt;/23岁(悲剧...刚好23...),&gt;&lt;/li&gt;
&lt;li&gt;BOA的信用卡是可以直接办理的, 不需要SSN之类的前提条件;&lt;/li&gt;
&lt;li&gt;跨行取款收取一定手续费, 境内2.5$,境外5$;&lt;/li&gt;
&lt;li&gt;超额支出(你的卡余额为负), 会在次月扣除35$罚款;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u65F6_u5DEE_u8C03_u6574&quot;&gt;&lt;a href=&quot;#u65F6_u5DEE_u8C03_u6574&quot; class=&quot;headerlink&quot; title=&quot;时差调整&quot;&gt;&lt;/a&gt;时差调整&lt;/h3&gt;&lt;p&gt;  恩, 虽然还没完全调整, 不过目前改善态势良好~ 第一天晚上睡了1个小时然后白天睡了大半天.. 昨天晚上就能够睡3小时, 白天也只是眯了一个多小时, 目前精神状态良好, 感觉今晚应该能睡的不错…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tips(来自好友)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白天要熬着;&lt;/li&gt;
&lt;li&gt;吃饭要规律, 按点走;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u4EE3_u529E_u4E8B_u9879_u6E05_u5355&quot;&gt;&lt;a href=&quot;#u4EE3_u529E_u4E8B_u9879_u6E05_u5355&quot; class=&quot;headerlink&quot; title=&quot;代办事项清单&quot;&gt;&lt;/a&gt;代办事项清单&lt;/h2&gt;&lt;h3 id=&quot;u6C47_u6B3E&quot;&gt;&lt;a href=&quot;#u6C47_u6B3E&quot; class=&quot;headerlink&quot; title=&quot;汇款&quot;&gt;&lt;/a&gt;汇款&lt;/h3&gt;&lt;p&gt;  既然办好卡了, 自然下一步就是汇款了, 毕竟除了学费还有房租… 吃喝等一系列花销需要搞定呢… 准备沿用学费方式付款, 直接购汇, 跨境汇款.&lt;/p&gt;
&lt;h3 id=&quot;u4FE1_u7528_u5361&quot;&gt;&lt;a href=&quot;#u4FE1_u7528_u5361&quot; class=&quot;headerlink&quot; title=&quot;信用卡&quot;&gt;&lt;/a&gt;信用卡&lt;/h3&gt;&lt;p&gt;  办卡的时候问了下, 发现我不需要SSN即可办信用卡,而且越早办信用卡, 就能越早的进入到美国的信用体系, 所以考虑过两天把信用卡也办了~&lt;/p&gt;
&lt;h3 id=&quot;u65C5_u884C_u8BA1_u5212_u786E_u5B9A&quot;&gt;&lt;a href=&quot;#u65C5_u884C_u8BA1_u5212_u786E_u5B9A&quot; class=&quot;headerlink&quot; title=&quot;旅行计划确定&quot;&gt;&lt;/a&gt;旅行计划确定&lt;/h3&gt;&lt;p&gt;  目前的计划是1号飞SF, 去Stanford呆几天, 顺带期间逛逛palo alto, mountain view等地儿; 然后大概4号5号去三番, 和另外几个朋友吃个饭, 打个屁, 呆一两天就走, 6号或者7号准备坐Starlight去西雅图看看然后再坐车/飞机直接回san diego, 然后16号直接飞Ithaca, 开启学习模式…&lt;/p&gt;
&lt;h2 id=&quot;u603B_u7ED3&quot;&gt;&lt;a href=&quot;#u603B_u7ED3&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我非常幸运比我的室友, 同学晚了2年来美帝读书, 这样就让我省了很多事情 ^_^ 当然, 也确实麻烦了他们~ 恩! 以后来Ithaca做客, 一条龙服务, 带你装X带你飞~&lt;/p&gt;
</summary></url><url><title>Facebook Messenger成为跟踪神器</title><loc>http://taoalpha.me/blog/2015/05/30/LBS-in-facebook-messenger/</loc><publish>2015-05-30T04:00:00.000Z</publish><summary>&lt;p&gt;本文是前几天一位harvard的学生&lt;a href=&quot;https://github.com/arank&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aran Khanna&lt;/a&gt; 在 &lt;a href=&quot;https://medium.com/@arankhanna/stalking-your-friends-with-facebook-messenger-9da8820bd27d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Medium&lt;/a&gt;上发布的. 介绍了他是如何利用facebook messenger网页端中公开的位置信息制作的一个chrome插件, 可以呈现你的好友甚至是陌生人的位置记录. 而你越是对messenger的依赖程度越高, 其位置记录功能就越精确… 利用这个工具, 你完全可以跟踪某个好友甚至是群组中的某个陌生人过去一段时间内的行踪… 听起来就很惊悚不是吗… 快去看最新的美剧&lt;a href=&quot;http://v.qq.com/cover/2/2idanx1okscg6dg.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stalker&lt;/a&gt;吧…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;更新: 应facebook的要求, 作者已经下线了发布的插件(不过源码还在github上), 同时facebook本身也关闭了网页端message的位置共享功能, 所以这个插件本身也失效了. 不过移动端的位置共享依然还在, 且默认开启的.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;原文颇长, 我就简单概述下.&lt;/p&gt;
&lt;p&gt;facebook作为世界上最大的互联网王国, 用户的数量和活跃度一直让其引以为傲. 而旗下的messenger更是很多用户聊天首选. 但是messenger默认信息发送时附注地理位置信息这一点就隐藏着一些非常不好的可能.&lt;/p&gt;
&lt;p&gt;作者经常使用messenger联系一起打扑克的好友和牌友们, 所以当他发现messenger每次发送信息时有一个附注位置信息的选项时. 他就开始研究起messenger的历史信息. 结果发现这些信息比他自己想的还要有趣…&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*FyAbfBKXGFpoNU-W0dEMSQ.png&quot; alt=&quot;A screenshot of the map the extension creates:&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先, 它可以轻松的让你定位你的好友或者群组人士(定位到其上次使用messenger的时间)…&lt;/p&gt;
&lt;p&gt;而因为messenger本身存储的位置信息是高精度的经纬度, 从而完全可以精确定位到米级别… 所以如果你抽取某个好友的聊天记录, 你就完全可以获取到其的位置记录, 比如下面这个是作者的一个stanford熟人几周内的活动记录:&lt;br&gt; &lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*uLtnaYTtB-ySWYWeRbmhMg.png&quot; alt=&quot;The location history data over the course of a few weeks for my Stanford acquaintance.&quot;&gt;&lt;/p&gt;
&lt;p&gt;甚至你可以根据时间筛选从而定位到此人的宿舍…&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*UjOiHrFnQhU25xcOMcPU7A.png&quot; alt=&quot;Where my acquaintance who goes to Stanford sleeps.&quot;&gt;&lt;/p&gt;
&lt;p&gt;而因为群组的特性, 你甚至可以获取到群组中那些与你不是好友的人的位置信息… 只要TA发过一次附带位置信息的消息即可… 发的越多, 越准确… 惊悚中…&lt;/p&gt;
&lt;p&gt;作者甚至拿自己测试了下这种记录和手机自身的记录的差别, 结果发现当你在messenger上足够活跃时, 其精准度惊人, 如下就是某个活跃天的两厢对比(下图是手机定位记录):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*1VZq8ArS8LCTYyxmjWOfAA.png&quot; alt=&quot;My scraped messenger location history for a certain active day&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*xQ3Jzh4UoIVg6Vwsf4zajQ.png&quot; alt=&quot;My Android phone’s location history for that same day.&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者写此文以及发布此插件的主要目的是提醒大家身处网络时代, 隐私的泄露经常是神不知鬼不觉的. 尤其是对于共享GPS这种, 总是很难预见到其有什么不好的后果… 所以人们经常很轻易的就给出了自己的这些数据.&lt;/p&gt;
&lt;p&gt;最后分享下&lt;a href=&quot;https://github.com/arank&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;作者的github&lt;/a&gt; 以及&lt;a href=&quot;https://github.com/arank/marauders-map&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个插件的repo地址&lt;/a&gt;. 快去&lt;a href=&quot;https://medium.com/@arankhanna/stalking-your-friends-with-facebook-messenger-9da8820bd27d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Medium&lt;/a&gt;给作者点赞吧~&lt;/p&gt;
</summary></url><url><title>利用TM进行系统二进制文件恢复</title><loc>http://taoalpha.me/blog/2015/05/26/filesystem-recovery-from-time-machine/</loc><publish>2015-05-26T04:00:00.000Z</publish><summary>&lt;p&gt;对于很多喜欢折腾电脑而又刚接触命令行的人而言, 经常会犯的的一个错误就是误删重要文件… 比如类似&lt;code&gt;/usr/bin/&lt;/code&gt;啊,’/usr/local/bin’之类的, 一不小心, 一激动, 就sudo rm -rf了… &lt;/p&gt;
&lt;p&gt;在mac下, 通常用户级别的二进制文件, 也就是那些你在命令行下输入的各类指令的源文件, 都是存在于系统环境变量之中的&lt;code&gt;$PATH = /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&lt;/code&gt;(冒号分割路径).&lt;/p&gt;
&lt;p&gt;那么一旦删除这些文件夹, 那么对应的常用指令就会失效, 比如你要是误删了&lt;code&gt;/bin&lt;/code&gt;路径, 那么你在bash下输入&lt;code&gt;ls&lt;/code&gt;等命令时就会提示你 &lt;code&gt;ls: command not found&lt;/code&gt;了. 当然, 出现这一错误的另一种可能就是你无意中修改了$PATH变量, 导致系统没有进入到正确的路径中. 这种情况一般还是比较好解决的, 只需要重新设定以下环境变量, 通常设置为上述的即可.&lt;/p&gt;
&lt;p&gt;那么, 如果你真是不幸误删了(或者像我一样莫名其妙的就丢失了…), 那么你可以有以下三种选择:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重装系统恢复;&lt;/li&gt;
&lt;li&gt;从友军同版本电脑中copy;&lt;/li&gt;
&lt;li&gt;从time machine中尝试恢复;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里主要介绍第三种方法, 比较适用于有经常性备份习惯的人, 或者是丢失操作发生在不久之前的(根据TM的自动备份设定时间间隔而定).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一旦找到丢失的路径后, 那么就可以进入到相应的丢失路径下(一直打开到最近路径), 比如我丢失的&lt;code&gt;/usr/bin&lt;/code&gt;, 我就进入到&lt;code&gt;/usr&lt;/code&gt;路径下;&lt;/li&gt;
&lt;li&gt;唤出TM, 回滚到未丢失前的时间节点(或者希望恢复的节点), 比如我确定自己上午时还是正常的, 所以就直接恢复到早上的一个时间节点;&lt;/li&gt;
&lt;li&gt;恢复即可;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上述操作, 基本上绝大多数时候问题都能够得到解决. 但是对于有一些有特殊权限的文件而言, 上述操作也会遇到新的问题. 还是以&lt;code&gt;/usr/bin&lt;/code&gt;为例: 其中的&lt;code&gt;sudo&lt;/code&gt;二进制文件就是一个有着特殊读写权限的文件, 以我目前admin的用户权限也是无法还原这一文件的. 这个时候就需要更换root账户来解决问题了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先通过系统设定中的users &amp;amp; groups -&amp;gt; login options -&amp;gt; join -&amp;gt; disk utility -&amp;gt; 开启root账户 -&amp;gt; 设定账户密码;&lt;/li&gt;
&lt;li&gt;开启root账户后, 就可以通过切换账户, 登录到root账户之中, 重新上述恢复的操作了, 这一次, 就不会提示你有权限问题了;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细的开启root账户的方法可以参考stackExchange的一个回答:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From the Apple menu choose System Preferences....
From the View menu choose Users &amp;amp; Groups.
Click the lock and authenticate as an administrator account.
Click Login Options....
Click the &amp;quot;Edit...&amp;quot; or &amp;quot;Join...&amp;quot; button at the bottom right.
Click the &amp;quot;Open Directory Utility...&amp;quot; button.
Click the lock in the Directory Utility window.
Enter an administrator account name and password, then click OK.
Choose Enable Root User from the Edit menu.
Enter the root password you wish to use in both the Password and Verify fields, then click OK.

Or from Terminal when logged in as an admin user -
dsenableroot to enable,
dsenableroot -d to disable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然问题已经解决, 不过到现在我都不知道我是如何把&lt;code&gt;/usr/bin&lt;/code&gt;路径搞丢的… 我记忆中丢失前的操作如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除了iphoto等一些应用;&lt;/li&gt;
&lt;li&gt;利用gem装了guard和guard-jekyll-plus来实现jekyll和livereload的链接;&lt;/li&gt;
&lt;li&gt;试了几次jekyll import模块来试图导入wordpress的数据, 以及rss的导入;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但感觉都和&lt;code&gt;/usr/bin&lt;/code&gt;八杆子打不着啊… 奇怪… 如有人知晓求务必告知! 提前拜谢!&lt;/p&gt;
</summary></url><url><title>更换DNS解析</title><loc>http://taoalpha.me/blog/2015/05/25/dns-parse/</loc><publish>2015-05-25T04:00:00.000Z</publish><summary>&lt;p&gt;回家啦回家啦~ 天南海北, 不如家好啊~!!!&lt;/p&gt;
&lt;p&gt;刚回来一天就发现家里网络似乎很诡异… 最开始是经常出现css样式错误或者图片加载不出来的问题, console中冒出来的错误也是net::ERR_CONNECTION_RESET的错误, 于是google了一下, 说是http和https的问题, 就装了一个&lt;a href=&quot;https://www.eff.org/https-everywhere&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https everywhere的插件&lt;/a&gt;, 但是console中还是冒出来一些http资源无法在https下访问的错误… 就觉得有些奇怪, 应该是没找对问题的根本… &lt;/p&gt;
&lt;p&gt;虽然我起初开始怀疑是不是家里网络的问题, 但尚不确定是网络速度的问题还是地处偏僻角落… 被伟大互联网鄙视了的原因…亦或者是其他的问题… &lt;/p&gt;
&lt;p&gt;但是, 突然发现浏览过程中遇到了莫名跳转… 而且还是个广告跳转… 就基本确定自己是遇到的DNS拦截了… 于是正好想起来很多月前百度出了一个公共的DNS解析服务, 果断拿来用了一下… 效果极佳啊~哈哈&lt;/p&gt;
&lt;p&gt;感觉上面的话语充满了百度DNS软文的感觉… 所以这里介绍下DNS解析的设定方法以及贡献以下百度, 阿里和google几家的DNS解析服务哈哈 (考虑到天朝内, 度娘的优势还是很明显的)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要设置DNS解析, 自然需要进入到网络设置中, 这个根据操作系统的区别自然是有着很大的区别;&lt;/li&gt;
&lt;li&gt;找到DNS的设定部分, 修改默认的DNS为你需要的DNS;&lt;/li&gt;
&lt;li&gt;应用修改, DONE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://dudns.baidu.com/useDoc.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Baidu DNS官网有一篇很全的设定贴&lt;/a&gt;, 小白可以围观之.&lt;/p&gt;
&lt;p&gt;当然, 附加一些阿里和google的DNS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alidns.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里DNS&lt;/a&gt; - 223.5.5.5 or 223.6.6.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/public-dns/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google DNS&lt;/a&gt; - 8.8.8.8 or 8.8.4.4 &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dudns.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度DNS&lt;/a&gt; - 180.76.76.76&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.114dns.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;114DNS-&lt;/a&gt; - 114.114.114.114 or 114.114.115.115&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恩, 我们要坚持和万恶的恶意DNS作战到底!!!&lt;/p&gt;
</summary></url><url><title>小米手环体验一周感受</title><loc>http://taoalpha.me/blog/2015/05/21/mi-band/</loc><publish>2015-05-21T04:00:00.000Z</publish><summary>&lt;p&gt;小米手环算是小米经典的低价破坏规则的又一力作! 相比市场上动辄几百上千的智能手环, 小米手环可以说简直不能更便宜… 而如今使用了一周多, 对其各方面的功能和特点都有所体验, 下面就简单结合我的体验介绍下:&lt;/p&gt;
&lt;h3 id=&quot;u8BB0_u6B65&quot;&gt;&lt;a href=&quot;#u8BB0_u6B65&quot; class=&quot;headerlink&quot; title=&quot;记步&quot;&gt;&lt;/a&gt;记步&lt;/h3&gt;&lt;p&gt;步数记录算是手环主打功能之一. 这一周使用来看, 准确性上相对一般, 不比其他家强到哪里, 不过够用是肯定的. 设定好运动目标后就可以迈开步子往前走啦&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看目标完成情况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以蓝牙链接手机app查看;&lt;/li&gt;
&lt;li&gt;链接微信后可以通过微信公众号查看实时步数;&lt;/li&gt;
&lt;li&gt;可以用看表法查看完成目标情况(指示灯闪亮);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标完成提醒: 手环会自动振动提醒;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;u7761_u7720&quot;&gt;&lt;a href=&quot;#u7761_u7720&quot; class=&quot;headerlink&quot; title=&quot;睡眠&quot;&gt;&lt;/a&gt;睡眠&lt;/h3&gt;&lt;p&gt;睡眠这一点还是比较有趣的, 统计的还算是比较准确的. 至少入睡时间和醒来时间算是比较准确的.&lt;/p&gt;
&lt;p&gt;不过比较神奇的深度睡眠和浅睡眠的区分就比较神奇了… 也无法确定准确与否…&lt;/p&gt;
&lt;p&gt;比较遗憾的是暂时不支持非晚上的睡眠检测, 所以午睡啥的都没有被计算在内.&lt;/p&gt;
&lt;h3 id=&quot;u632F_u52A8_u95F9_u949F&quot;&gt;&lt;a href=&quot;#u632F_u52A8_u95F9_u949F&quot; class=&quot;headerlink&quot; title=&quot;振动闹钟&quot;&gt;&lt;/a&gt;振动闹钟&lt;/h3&gt;&lt;p&gt;可以通过app设定最多三个闹钟, 闹钟采用振动手环方式, 不影响他人!!! 这一点很贴心! 而且唤醒效果极好~哈哈&lt;/p&gt;
&lt;h3 id=&quot;u6765_u7535_u63D0_u9192&quot;&gt;&lt;a href=&quot;#u6765_u7535_u63D0_u9192&quot; class=&quot;headerlink&quot; title=&quot;来电提醒&quot;&gt;&lt;/a&gt;来电提醒&lt;/h3&gt;&lt;p&gt;来电提醒的功能很赞, 尤其是像我这种常年手机静音的人哈哈, 可以设定振动次数. 不过如果手机和手环隔的太远也是没办法的…&lt;/p&gt;
&lt;h3 id=&quot;u793E_u4EA4_u5206_u4EAB&quot;&gt;&lt;a href=&quot;#u793E_u4EA4_u5206_u4EAB&quot; class=&quot;headerlink&quot; title=&quot;社交分享&quot;&gt;&lt;/a&gt;社交分享&lt;/h3&gt;&lt;p&gt;这个功能很赞, 通过微信公众号: 小米手环, 就可以查看你的实时步数以及同时使用手环的好友的步数啦~ 有一种被人监督的感觉~ 而像我给爸妈都买了一个的, 就可以远程监督他们走路锻炼啦哈哈&lt;/p&gt;
&lt;h3 id=&quot;u7535_u91CF&quot;&gt;&lt;a href=&quot;#u7535_u91CF&quot; class=&quot;headerlink&quot; title=&quot;电量&quot;&gt;&lt;/a&gt;电量&lt;/h3&gt;&lt;p&gt;手环本身的耗电能力还是比较弱的, 一个月的续航也是比较靠谱的!!! 厉害!!! 一周下来我这个也基本只用了20%-25%左右的电.&lt;/p&gt;
&lt;h3 id=&quot;u9632_u6C34&quot;&gt;&lt;a href=&quot;#u9632_u6C34&quot; class=&quot;headerlink&quot; title=&quot;防水&quot;&gt;&lt;/a&gt;防水&lt;/h3&gt;&lt;p&gt;亲测靠谱! 带着手环游了一个小时, 毫无压力!!! 可惜手环不支持检测游泳哈哈, 以后要是能增加运动模式检测就好了~ 跑步啊, 游泳啊, 打球啊~ 都加上~哈哈&lt;/p&gt;
</summary></url><url><title>My New Blog</title><loc>http://taoalpha.me/blog/2015/05/06/new-blog/</loc><publish>2015-05-06T04:00:00.000Z</publish><summary>&lt;p&gt;在回国前最后一天的时候, 我在BBH列了下回国后要做的几件事, 其中之一就是迁移我的Blog中技术和HCI的部分到github page上来. 到今天终于算是做完了. 内容还没有完全迁移, 也可能不准备迁移内容了… 以后的技术更新和HCI的翻译等等都准备直接发到这里了.&lt;/p&gt;
&lt;p&gt;这个blog的设计和结构主要借鉴了&lt;a href=&quot;http://www.jianshu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;, 代码是在我之前的那个blog的基础上, 融合了&lt;a href=&quot;http://beiyuu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;beiyuu&lt;/a&gt;的github page的部分设计, 从而形成了现如今的这个全新blog.&lt;/p&gt;
&lt;p&gt;至于具体的blog优化过程我会抽时间单独作一篇介绍的, 今天还是主要说下以后博客的主体内容和思路.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;内容:
Tech(技术文): 这部分主要是继续原来的Patch计划, 用来记录自己平时代码过程中的一些心得体会和tips之类的;
D&amp;amp;P(HCI文): 即Design and Psychology, 主要是以HCI的英译文为主, 加上自己的一些思考和总结, 甚至可能是直接的阅读感悟;
Other(随笔): 主要是一些杂记, 包罗万象...

发布情况:
更新: 我会尽量保持在每天更新的节奏...
技术范围: 技术文主要以web,python为主, 对其他方面的涉及会非常有限;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;恩, 很明显发现我凑字完成了… 本篇完结.&lt;/p&gt;
</summary></url><url><title>Use only JavaScript to send email</title><loc>http://taoalpha.me/blog/2015/09/30/tech-use-javascript-to-send-email/</loc><publish>2015-09-30T04:00:00.000Z</publish><summary>&lt;p&gt;Want to send an email in your static website without any server languages support? Seems impossible. But now you can do that using only JavaScript. Wonderful? I will show you how to do that.&lt;/p&gt;
&lt;h2 id=&quot;Tools_we_need&quot;&gt;&lt;a href=&quot;#Tools_we_need&quot; class=&quot;headerlink&quot; title=&quot;Tools we need&quot;&gt;&lt;/a&gt;Tools we need&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mandrill&lt;/strong&gt;: they provide the mail service that you can call using javascript;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;website&lt;/strong&gt;: the website you want to do this;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Preparation&quot;&gt;&lt;a href=&quot;#Preparation&quot; class=&quot;headerlink&quot; title=&quot;Preparation&quot;&gt;&lt;/a&gt;Preparation&lt;/h2&gt;&lt;p&gt;First, you need sign up for &lt;a href=&quot;https://mandrillapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mandrill&lt;/a&gt; to enable the service and get an API key to use. It’s easy, just follow the guide of the website and click the ‘Get API Keys’ when you enter your dashboard.&lt;/p&gt;
&lt;h2 id=&quot;Main_Function&quot;&gt;&lt;a href=&quot;#Main_Function&quot; class=&quot;headerlink&quot; title=&quot;Main Function&quot;&gt;&lt;/a&gt;Main Function&lt;/h2&gt;&lt;p&gt;After you created your api key, you can just copy it and use the template list below to create the &lt;code&gt;sendMail&lt;/code&gt; function:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendMail&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&quot;https://mandrillapp.com/api/1.0/messages/send.json&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;'key'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'YOUR API KEY'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;'message'&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'from_email'&lt;/span&gt;: msg.sender_mail,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'from_name'&lt;/span&gt;: msg.sender_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'to'&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;'email'&lt;/span&gt;: msg.receiver_mail,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;: msg.receiver_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;'type'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'to'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'autotext'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'true'&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'subject'&lt;/span&gt;: msg.subject,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;'html'&lt;/span&gt;: msg.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;).done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// do what you want to do after the mail was sent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;).fail(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// do what you want to do if it fails to send the email&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The template above is using the jQuery as a external library. If you don’t like jQuery(why?!!) or you are using something else, just remember to change the request to fit your library.&lt;/p&gt;
&lt;h2 id=&quot;DONE&quot;&gt;&lt;a href=&quot;#DONE&quot; class=&quot;headerlink&quot; title=&quot;DONE&quot;&gt;&lt;/a&gt;DONE&lt;/h2&gt;&lt;p&gt;Yeah. That’s it. Now you can just create a json object to include all information you need and call the function to send the email!&lt;/p&gt;
&lt;p&gt;Pretty easy, Ha.&lt;/p&gt;
&lt;h2 id=&quot;Cons&quot;&gt;&lt;a href=&quot;#Cons&quot; class=&quot;headerlink&quot; title=&quot;Cons&quot;&gt;&lt;/a&gt;Cons&lt;/h2&gt;&lt;p&gt;Since your api key will be exposed to everyone, anyone can just grab and use it to send their emails. And for free users, mandrill will provide 12k free emails every month and has a limitation as 150 per hour. So once you find someone is stealing your quota, disable your api key and change to a new one immediately.&lt;/p&gt;
&lt;p&gt;Besides, if you are sure you are only using this service from several ip address. You can set them in the API Key settings. Then it would be much safer.&lt;/p&gt;
</summary></url><url><title>404 Not Found：该页无法显示</title><loc>http://taoalpha.me/blog/404.html</loc><publish>2015-12-27T18:36:00.000Z</publish><summary>&lt;link rel=&quot;stylesheet&quot; href=&quot;/blog/css/404.css&quot;&gt;
</summary></url><url><title>Buy me a soda!</title><loc>http://taoalpha.me/blog/tipme/index.html</loc><publish>2015-12-27T18:36:00.000Z</publish><summary>&lt;p&gt;  小弟家大(单身)业大(读书), 身处地广(五道口)人稀(北京)之地, 生活不易啊, 如果你喜欢我的博客, 或者我的博文帮助到了你, 而你又碰巧有点零钱, 不妨给小弟买瓶苹果味芬达解解渴哦~ 当然如果你手头有我书目中的那些书籍, 也可以赠送给我哦~ 每本书我都会看并且写到读书系列中去哦! 当然您直接买书给我, 我也是不会介意哦~哈哈&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;博主自己用KindleEar搭了个kindle推送的服务(详见博客 &lt;a href=&quot;/blog/2015/06/13/tech-create-a-kindle4rss-by-yourself/&quot;&gt;用KindleEar自行搭建kindle4rss服务&lt;/a&gt;, 估摸着可以支持20个人左右, 有兴趣的恩主们可以联系博主开一个帐号给你哈 也算是个小小的报答啦 ^_^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  小弟还真没用过下面这两个支付二维码, 您要不帮我试试?? ^_^&lt;/p&gt;
&lt;div class=&quot;tipmeqrcode&quot; markdown=&quot;1&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/blog/images/wechat-tip.jpg&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/blog/images/zhifubao-tip.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;

&lt;p&gt;当然, 如果您更愿意给我物质上的打赏, 可以送我以下书目中的任意一本, 让我不断的提升自我, 写出更好的文章! 哈哈&lt;/p&gt;
&lt;div class=&quot;wishbooks&quot;&gt;&lt;br&gt;  &lt;ul class=&quot;books&quot;&gt;&lt;/ul&gt;&lt;br&gt;&lt;/div&gt;

</summary></url><url><title>通过 shell 脚本设定临时 alias</title><loc>http://taoalpha.me/blog/2015/06/05/tech-temporary-alias-shell-scrip/</loc><publish>2015-06-05T10:00:00.000Z</publish><summary>&lt;h2 id=&quot;u7F18_u8D77&quot;&gt;&lt;a href=&quot;#u7F18_u8D77&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;对于习惯在命令行下工作的人, 设定方便好用的aliases是必备工作之一. &lt;a href=&quot;https://github.com/search?q=aliases&amp;amp;ref=opensearch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;上就有很多人分享自己设定的aliases,这里就不多说设定aliases的事情了.&lt;/p&gt;
&lt;p&gt;由于最近修改blog, 需要经常在各个路径下跳转, 每次cd的痛不欲生… 于是就捣鼓了下临时alias的问题.&lt;/p&gt;
&lt;h2 id=&quot;u5982_u4F55_u8BBE_u7F6E_u4E34_u65F6aliases&quot;&gt;&lt;a href=&quot;#u5982_u4F55_u8BBE_u7F6E_u4E34_u65F6aliases&quot; class=&quot;headerlink&quot; title=&quot;如何设置临时aliases&quot;&gt;&lt;/a&gt;如何设置临时aliases&lt;/h2&gt;&lt;p&gt;首先, 这里的&lt;strong&gt;临时&lt;/strong&gt;的意思是指在当前session内生效的意思. 也就是说我关了当前的terminal或者iterm的tab, 新开一个这些aliases就不会继续生效了. 其生命周期只存在于当前session内. 这样就不会污染了. 方法有两种, 分别介绍如下:&lt;/p&gt;
&lt;h3 id=&quot;u5229_u7528alias_u547D_u4EE4&quot;&gt;&lt;a href=&quot;#u5229_u7528alias_u547D_u4EE4&quot; class=&quot;headerlink&quot; title=&quot;利用alias命令&quot;&gt;&lt;/a&gt;利用alias命令&lt;/h3&gt;&lt;p&gt;linux 或者 mac os本身都是自带有alias命令的, 支持你在命令中设定临时别名. &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; blog=&lt;span class=&quot;string&quot;&gt;'cd ~/github/blog'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此设定的aliases就是临时别名, 只在当前session内有效. 但是如果你要设定的别名比较多, 或者说你需要在一段时间内都用的话, 这样每次输入就不方便了.&lt;/p&gt;
&lt;h3 id=&quot;u5199shell_u811A_u672C&quot;&gt;&lt;a href=&quot;#u5199shell_u811A_u672C&quot; class=&quot;headerlink&quot; title=&quot;写shell脚本&quot;&gt;&lt;/a&gt;写shell脚本&lt;/h3&gt;&lt;p&gt;所有直接在命令行里执行的命令都可以写在&lt;code&gt;.sh&lt;/code&gt;文件里, 然后通过相应的命令来执行. 比如 alias:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# temp_alias.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; blog=&lt;span class=&quot;string&quot;&gt;'cd ~/github/blog'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; css=&lt;span class=&quot;string&quot;&gt;'cd ~/github/blog/_assets/stylesheets'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; js=&lt;span class=&quot;string&quot;&gt;'cd ~/github/blog/_assets/javascripts'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此写好这个&lt;code&gt;temp_alias.sh&lt;/code&gt;文件后, 我们就可以执行了.&lt;/p&gt;
&lt;p&gt;通常来说, shell脚本的执行都是通过&lt;code&gt;sh path_to_shell/xxx.sh&lt;/code&gt;来执行的; 但是, 对于alias而言, 因为我们是设定的是&lt;strong&gt;临时&lt;/strong&gt;的别名, 而每次&lt;code&gt;sh&lt;/code&gt;命令的执行都是新开一个session执行对应的命令, 这样的话, 我们的alias都是在那个隐藏的看不见的新开的session中生效, 而不会在当前session中生效, 这样就无法达到我们的目的了. 那么怎么做呢?&lt;/p&gt;
&lt;p&gt;如果使用&lt;code&gt;zsh&lt;/code&gt;或者类似的bash替换程序的人, 看过其&lt;code&gt;.zshrc&lt;/code&gt;就应该很熟悉&lt;code&gt;source&lt;/code&gt;这么一个命令了. &lt;code&gt;source&lt;/code&gt;的含义就是&lt;strong&gt;在当前bash环境下读取并执行文件中的命令&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# temp_alias.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; blog=&lt;span class=&quot;string&quot;&gt;'cd ~/github/blog'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# command&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; temp_alias.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通常source和.是等价的, 所以上述命令也可以写为:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;. ./temp_alias.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2197461/how-to-set-an-alias-inside-a-bash-shell-script&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to set an alias inside a bash shell script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bash.cyberciti.biz/guide/Source_command&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shell:source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恩~ shell其实真的有很多东西值得研究的~ 哈哈&lt;/p&gt;
</summary></url><url><title></title><loc>http://taoalpha.me/blog/mylinks/index.html</loc><publish>2015-12-27T18:36:00.000Z</publish><summary>&lt;p&gt;&lt;style&gt;&lt;br&gt;.aside{display:none;}&lt;br&gt;iframe{&lt;br&gt;  width:100%;&lt;br&gt;  height:100%;&lt;br&gt;  background-color:white;&lt;br&gt;}&lt;br&gt;&lt;/style&gt;&lt;/p&gt;
&lt;iframe src=&quot;http://fun.zzgary.info/mylinks/share.php?shareuser=zzgary&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
</summary></url><url><title>What is Pythonic?</title><loc>http://taoalpha.me/blog/2015/03/08/read-what-is-pythonic/</loc><publish>2015-03-08T08:00:00.000Z</publish><summary>&lt;p&gt;[缘起] python算是我最常用的语言之一了, 随着最近对自身定位的思考以及抉择, 我也开始逐渐加深自己对知识领域的纵深了解了. 所以开始有意识的去更加全面, 深入的了解一些喜欢的东西, 正如福尔摩斯所言: 人类的大脑是有限的, 我们应该尽量装入更多的有价值的东西, 而不能让无意义的东西占据有限的空间. 又扯远了… Pythonic是最近看到的一个名词, 于是简单做了下搜索, 查到了一个05年的定义, 考虑到虽然时间有点久远, 但是本身pythonic的基本没有多少变化, 所以还能勉强拿来借鉴的.&lt;/p&gt;

&lt;p&gt;作者写文本是回答一个在EuroPython会议邮件中的同一个问题. 考虑到这是个很有趣的问题, 而且作者本身也已经见过多次pythonic这个词语, 却一直没怎么看到过一篇很详细的解释, 所以作者写本文总结了自己以及其他人对这一名词的理解.&lt;/p&gt;

&lt;p&gt;[正文]  pythonic是一个很模糊的概念, 但又不至于像”智慧”或者”生命”那种你完全无法准确定义的模糊. 但是无法被定义不代表他们就是无用的, 尤其是人类本身对于这种模糊定义的事情非常擅长. Pythonic 的意思是”易读易于人类理解的Python”,  下面我们则针对它的意思进行简单的介绍.&lt;/p&gt;

&lt;p&gt;随着时间, Python在逐渐的发展, Python社区也在逐渐的成长, 于是出现了很多关于如何正确的使用python的想法. 而python本身也非常鼓励用多样的风格方法来实现各种任务. 而新的风格方法也会反过来帮助python社区以及python语言的发展. 举个简单的例子就是dictionary对象的&lt;code&gt;.get()&lt;/code&gt;方法, 它结合了对象的读取和&lt;code&gt;has_key()&lt;/code&gt;函数的调用这本来需要两步完成的操作.&lt;/p&gt;

&lt;p&gt;很多时候有些风格方法也不完全是直接从其他的语言中借用来的. 以C语言中的列表元素循环为例, 下面是在C语言中的写法:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for (i=0; i &amp;amp;lt; mylist_length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something(mylist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而直接转换到Python中会是如下写法:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;i = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while i &amp;amp;lt; mylist_length:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   do_something(mylist[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然这样写也没有错, 但是通常我们不认为它符合Pythonic的原则. 这绝不是python语言所鼓励的风格. 我们可以进行一些修正. 通常来说, python中建议用内置的&lt;code&gt;range()&lt;/code&gt;函数来生成一个纯数字的列表:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for i in range(mylist_length):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     do_something(mylist[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是这样也不能算是pythonic. 那么符合pythonic的方式是如何写呢? 如下所示:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for element in mylist:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在comp.lang.python 上有一个常见的问题是如何传递以及直接修改引用, 而这本身在python中是不能实现的, Python中只有assignment(类似import, class以及def这类). 很多时候, 我们会希望在自己写的函数中返回多个值. 那么在C语言或者其他很多语言中推荐的方式都是传递指针或者引用到函数中去:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void foo(int* a, float* b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *a = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *b = 3.5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int alpha;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int beta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&amp;amp;amp;alpha, &amp;amp;amp;beta);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Python中也确实可以利用一些策略实现把函数返回结果赋值给变量 , 比如:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def foo(a, b):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a[0] = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b[0] = 5.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alpha = [0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;beta = [0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(alpha, beta)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alpha = alpha[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;beta = beta[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是这种用法就相当的不pythonic了, 我们通常可以直接使用更好的方法, 利用数组:&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def foo():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 3, 5.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alpha, beta = foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于那些不那么pythonic的代码, 那些有经验的python程序员是很容易可以看出来的, 因为这样的代码往往会比较奇怪或者粗糙笨重. 往往还会感觉非常冗余, 难以理解, 尤其是和使用正常的, 推荐的, 简介的方法相比.  而且语言本身也是为了支持正确的风格方法,  所以那些不好的方法执行速度也会很慢.&lt;/p&gt;

&lt;p&gt;那么如何做到pythonic呢? 简单说就是要保证结构和数据结构都简介, 高可读性. 只在需要时为实例生成动态的类型而不是到处定义冗余的变量. 而遵循pythonic的优势之一也是为了不给那些有经验的python程序员带来因为陌生代码而引起的不必要的麻烦…&lt;/p&gt;

&lt;p&gt;pythonic除了在这种低效风格上外, 还有很多别的用处. 比如对于一个library或者框架而言, pythonic就意味着简洁自然, 能够让一个python程序员很容易的使用. 通常一个用python写的library或者框架,  如果不能有效的帮助程序员写出优质的python代码也会被认为不算是pythonic.  可能是因为它没有使用python提供的一些结构, 比如类啊, 虽然有时候这样做能够让library更加便捷或者更加容易理解.  有时候利用类似可以把函数作为参数传递给函数的方法也能够带来很多帮助的.  在一个library的类中, 有时候你可能会像在Java中那样去隐藏一些信息, 但是在Python中则相对更为宽松, 属性默认是开放的但是程序员可以通过前置下划线来声明其私有属性.&lt;/p&gt;

&lt;p&gt;当然, 当你达到使用libraries和框架的境界前,  有时候判断是否符合pythonic会更加困难或者界限模糊. 但是我们依然有一些原则可以借鉴. &lt;strong&gt;其中之一就是尽量简洁, 避免废话&lt;/strong&gt;: Python的接口跟倾向于小而轻, 尤其是和Java的相比起来. Python中那些有着非常详尽的复杂的API通常被认为不那么的Pythonic. 比如W3C XML DOM API就是个典型的例子. 有一些人认为它很像JAVA的风格, 但是实际上就我所了解的, 很多JAVA的程序员也并不是很认同这是JAVA风格的.&lt;/p&gt;

&lt;p&gt;一个基于Python的框架只要不是在重造轮子的话倒是可以被认为是pythonic的, 当然它也要符合python的一些通用方法. &lt;/p&gt;

&lt;p&gt;当然问题在于框架既然被称为框架, 不可避免的会引入一些模式或者方法是那些习惯小型应用的所不熟悉的. 这也是你发挥一个框架的为例的途径. 比如我比较熟悉的一个Zope 2的框架, 就是一个典型的例子, 它引入了很多你平时不会经常使用的方法. Acquisition就是一个典型例子, 但这样的结果就是Zope 2在很多有经验的python程序员眼中是不符合Pythonic的.&lt;/p&gt;

&lt;p&gt;想要创造一个pythonic的框架是很困难的. 这一点和如今Python本身越发完善, 优秀无关. 有一些诸如generator, set, unicode string和datetime的功能都已经被认为算是pythonic的了. Zope 2则是一个过于年轻的框架, 所以一定程度上到也不能责怪它, 毕竟它是97年才创造的. 考虑到这一点, 它已经很不容易啦.&lt;/p&gt;

&lt;p&gt;近些年来通过我自己的观察, 是可以找到一些pythonic下的新趋势的. 尤其是基于一些标准的常用python库的发展来看. 比如Twisted, Zope 3, 以及PyPy他们都或多或少的遵循这下面这一模式:&lt;/p&gt;

&lt;ul&gt;&lt;br&gt;&lt;li&gt;模块名称简洁, 基本使用小写, 单数形式;&lt;/li&gt;&lt;br&gt;&lt;li&gt;包名称通常只是包名, 基本都有一个空的&lt;strong&gt;init&lt;/strong&gt;.py文件.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;

&lt;p&gt;我也沿用了同样的方式在我写的lxml库中.&lt;/p&gt;

&lt;p&gt;有时候我认为把一个软件直接谴责其不够pythonic是一件不公平的事情, 因为有时候会影响人们看到它更有价值的一面. 一个功能不那么强大的框架往往更加容易去学习和使用, 而那些符合pythonic的框架有时候往往反而需要花费更多的时间.&lt;/p&gt;
</summary></url></urlset>