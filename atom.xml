<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TaoAlpha's Blog]]></title>
  <subtitle><![CDATA[I love a lot of things, JS is my favorite.]]></subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://taoalpha.me/blog/"/>
  <updated>2015-12-26T16:31:34.000Z</updated>
  <id>http://taoalpha.me/blog/</id>
  
  <author>
    <name><![CDATA[TaoAlpha]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Blog Migration from jekyll to hexo]]></title>
    <link href="http://taoalpha.me/blog/2015/12/26/blog-migration/"/>
    <id>http://taoalpha.me/blog/2015/12/26/blog-migration/</id>
    <published>2015-12-26T07:34:01.000Z</published>
    <updated>2015-12-26T16:31:34.000Z</updated>
    <content type="html"><![CDATA[<p>After nearly 24 hours work, I finally migrated my blog from jekyll to hexo. Actually, I recreated the entire blog with hexo with same styles and scripts files.</p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>Why I want to migrate to hexo instead of keeping using jekyll ? The most important reasons are:</p>
<ul>
<li>hexo is written with NodeJS which I am more familiar with, so it would be easy to debug and create my own extension easily;</li>
<li>the new version of jekyll has a really bad compatibality of previous versions… after a terrible error happended when I upgraded last time, I decided to use hexo;</li>
</ul>
<h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><h3 id="Hexo_Workflow"><a href="#Hexo_Workflow" class="headerlink" title="Hexo Workflow"></a>Hexo Workflow</h3><p>First, I want to introduct the hexo workflow instead of the migration workflow, here I list some lovely features that I think are most important:</p>
<ul>
<li>theme: you can import or create your own theme in hexo with pure css/js/html and a little template langualge;</li>
<li>npm: since it is written with Node, so you definitely can take advantage of the npm, so you can choose any language you want to write css or javascript, I’m using es6 and scss;</li>
<li>fast: fast to build and fast to generate;</li>
</ul>
<p>hexo is really easy to use, especially with theme functions, you can just fork some beautiful themes from github or official website of hexo, and then what you need to care is only writing the posts.</p>
<h3 id="Migration_Workflow"><a href="#Migration_Workflow" class="headerlink" title="Migration Workflow"></a>Migration Workflow</h3><p>Since I need to migrate the website from jekyll to hexo, there are few things you need to prepare and remember:</p>
<ul>
<li>structure: if you are using a customized theme created by yourself, then you need create a theme in hexo, but luckily, most of times, you don’t need to rewrite the scss and javsascript since hexo also supports most of the precompilers of them.</li>
<li>format: they are using totally different format of the tempalte file, jekyll is using somthing more similiar with liquid template while hexo supports jade/ejs/swig…etc, I chose jade since it is the most familiar one compared to others :)</li>
<li>files: You can keep your styles and scripts, but you need rewrite the template files. The structure of the html can be the same, but you need modify it according to hexo’s requirements and attributes</li>
<li>posts: After you created your own theme, you can migrate all the posts you have to hexo, according to the content you put into your posts, you may need some extra work to convert some tags or elements, like the <code>highlight</code> block;</li>
<li>debug: remember to debug every functions after you have migrated the entire site :)</li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Be Patient! You will encounter a lot of bugs and problems during the entire process, but you can always find something helpful from google or github.</p>
<p>If you are doing the same thing, welcome to comment or shoot me an email :)</p>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul>
<li>Series Widget</li>
<li>Small bugs</li>
<li>Re-factor some parts</li>
<li>Optimize the theme</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Finally migrate my blog to the hexo!!!]]>
    
    </summary>
    
      <category term="hexo" scheme="http://taoalpha.me/blog/tags/hexo/"/>
    
      <category term="migration" scheme="http://taoalpha.me/blog/tags/migration/"/>
    
      <category term="blog" scheme="http://taoalpha.me/blog/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First CLI tool with NodeJS]]></title>
    <link href="http://taoalpha.me/blog/2015/12/07/tech-my-first-cli-tool-with-nodejs/"/>
    <id>http://taoalpha.me/blog/2015/12/07/tech-my-first-cli-tool-with-nodejs/</id>
    <published>2015-12-07T06:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Briefly speaking, NodeJS is like using JS on back-end stuff. Its really cooooooool and exctied for every JS developer !!!</p>
<p>I just started to learn Node, and in order to learn it better, I made a small cli tool for myself, it’s quit helpful actually.</p>
<h2 id="Meet_Baby"><a href="#Meet_Baby" class="headerlink" title="Meet Baby"></a>Meet Baby</h2><p>I named this tool as ‘baby’ with a lot of reasons… :)</p>
<p>What it can do ? It can do a lot and also the power of it is increasing everyday :) since I always put my repeatly work together and build a command for that :)</p>
<p>Here list a few of them:</p>
<ul>
<li><strong>edit</strong>: you can set your favorite editor in the config file, and then you can use <code>baby e file_name</code> to edit it, why you want to do that? why not just use my favorite editor? Because baby can monitor your changes!!! And if you enable the ‘global summary’, it can record all you modifications and tell you how many changes you made in total :);</li>
<li><strong>ssh</strong>: this is just for myself, since I always need to log in my aws server or digital ocean server with a pem file a secret settings, so I wrote this and made it simple(with short names);</li>
<li><strong>npm</strong>: I love npm! And also I use yeoman to build my webapp workflow, one thing is that as time goes on, you will find that all you modules will become outdated or not the latest version, so I used a script to loop over all outdated packages and updated them to wanted version or to latest version;</li>
<li><strong>tool</strong>: this is a collection of small commands, like the only one I have now is print the structure of the files under the current path;</li>
<li><strong>todo</strong>: I always made a todo app when I first learn some new languages or frameworks, so I did again for node, you can add, edit, mark as done or mark as undone and also clean or empty the tasks list, next I will make a webpage for it using angularJS since I am learning that now :)</li>
<li><strong>serve</strong>: will create a server with current path and look for the index.html file by default;</li>
<li><strong>cdn</strong>: since I am a web developer, so I always need to search the JS modules or plugins, so I download all the names and links from the cdnjs, and build a trie tree for the names, now I can just use <code>baby cdn name</code> to show the matches and links;</li>
</ul>
<p>….</p>
<p>There are and will be a lot new features added to my baby, you can check it out from <a href="https://github.com/taoalpha/baby" target="_blank" rel="external">my github - baby</a></p>
<h2 id="Bye"><a href="#Bye" class="headerlink" title="Bye"></a>Bye</h2><p>Next post I will talk about how to make a cli tool for yourself with nodejs. :)</p>
]]></content>
    <summary type="html">
    <![CDATA[Build my first CLI tool with nodejs, fantastic!!]]>
    
    </summary>
    
      <category term="CLI" scheme="http://taoalpha.me/blog/tags/CLI/"/>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="NodeJS" scheme="http://taoalpha.me/blog/tags/NodeJS/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[感恩]]></title>
    <link href="http://taoalpha.me/blog/2015/11/27/thanksgiving/"/>
    <id>http://taoalpha.me/blog/2015/11/27/thanksgiving/</id>
    <published>2015-11-27T05:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<p>我不知道感恩节的历史, 也并没有探究的欲望. 但还是以此为名, 随便写写.</p>
<p>我很感谢我的父母, 他们给了我生命, 而这是让我得以体验这个世界的根本缘由. 还有两个月我满24岁, 至此已来人世两个小轮回, 我庆幸自己始终活着, 走着…</p>
<p>我很感谢我的父亲, 他是我人生最大的偶像, 虽然我从未这么说过. 身为农民的孩子, 他有着坎坷的童年, 那是身在我这个时代, 绝大多数人无法想象的苦楚, 而作为军人, 他有着极为精彩的过去, 有着极为强大的精神世界和军人所有的品质, 而这些, 一直都是我所向往的, 崇拜的, 更是我面对任何困难都不会放弃, 妥协的支柱.</p>
<p>我很感谢我的母亲, 她是个很平凡的人, 没有很高的学历, 没有多么精彩的人生, 她就是一个平平凡凡的中国母亲, 而母爱确实无愧于这个世界上最伟大, 最无私的爱, 我是她生命中最宝贵的东西, 没有之一.</p>
<p>我庆幸我能生长在这样一个家庭里, 我的父母也许没有那么博学多才, 但他们开明, 他们允许我去尝试, 去试错, 去体验这个世界. 我很感激.</p>
<p>至此24载, 我可以无愧的说我的人生很精彩, 我很知足, 也很感激这一路走来所有帮助过我, 启发过我的朋友, 长辈甚至是那些陌生人.</p>
<p>我不知道我的未来如何, 但我会认真的把它过好, 因为只有我好, 才是对有所有人最大的报答.</p>
]]></content>
    <summary type="html">
    <![CDATA[Thanksgiving 随笔]]>
    
    </summary>
    
      <category term="随笔" scheme="http://taoalpha.me/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="blog" scheme="http://taoalpha.me/blog/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[preventDefault and stopPropagation in JS]]></title>
    <link href="http://taoalpha.me/blog/2015/11/19/tech-preventDefault-and-stopPropagation-in-JS/"/>
    <id>http://taoalpha.me/blog/2015/11/19/tech-preventDefault-and-stopPropagation-in-JS/</id>
    <published>2015-11-19T09:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When we deal with event on DOM, jQuery always very helpful. But javascript has this mechanic called event bubbling is quite annoying. So be careful when you deal with them.</p>
<h2 id="Event_Bubbling"><a href="#Event_Bubbling" class="headerlink" title="Event Bubbling"></a>Event Bubbling</h2><p>We all know DOM elements can be nested inside each other which is great for structure. But it causes some troubles when you want to deal with the event on the children and parent separately. Because if we do nothing with that, the event like ‘click’ happened on children will trigger the same event for parents too, which is event bubbling.</p>
<h2 id="Event_Capturing"><a href="#Event_Capturing" class="headerlink" title="Event Capturing"></a>Event Capturing</h2><p>All browsers except IE&lt;9, there are two stages of event processing, one is event bubbling, another is event capturing. Opposite with event bubbling, the event capturing will go down along the html structure and trigger the corresponding event. And by default: All methods of event handling ignore the caputiring phase. Using addEventListener with last argument true is only the way to catch the event at capturing.</p>
<h2 id="How_to_deal_with_them"><a href="#How_to_deal_with_them" class="headerlink" title="How to deal with them"></a>How to deal with them</h2><p>In JavaScript, we have two handy fucntions called stopPropagation() and preventDefault() can help us deal with the event bubbling and event capturing. Former one can stop the event bubbling so click or other events happened on children won’t affect parents events. Latter one can prevent default event handlers defined in this element so you can rewrite the event handlers by youself.</p>
<h2 id="When_you_need_deal_with_them"><a href="#When_you_need_deal_with_them" class="headerlink" title="When you need deal with them"></a>When you need deal with them</h2><p>When you need deal with event bubbling? It depends, but most times, you will deal with that when you want to assign events on an area instead of a specific elements.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Event bubbling and capturing are really cool stuffs and let you do some fantastic things. But also they are pretty annoying that may cause a lot troubles when you want to detect the bugs in your code…</p>
]]></content>
    <summary type="html">
    <![CDATA[This post will tell you when you should use preventDefault and stopPropagation in JS.]]>
    
    </summary>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="jQuery" scheme="http://taoalpha.me/blog/tags/jQuery/"/>
    
      <category term="propagation" scheme="http://taoalpha.me/blog/tags/propagation/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Strict Mode in JavaScript]]></title>
    <link href="http://taoalpha.me/blog/2015/11/11/tech-use-strict-in-js/"/>
    <id>http://taoalpha.me/blog/2015/11/11/tech-use-strict-in-js/</id>
    <published>2015-11-11T08:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>&#39;use strict&#39;</code> is a new feature introduced from ECMAScript 5, it is not a subset of js, it has some different semantics from normal code. So be careful to use it.</p>
<h2 id="What_is_the_difference_3F"><a href="#What_is_the_difference_3F" class="headerlink" title="What is the difference?"></a>What is the difference?</h2><p>After you insert the <code>&#39;use strict&#39;</code> into the head of your entire code or in the beginning of the function code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Whole-script strict mode syntax</span></span><br><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> v = <span class="string">"Hi!  I'm a strict mode script!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function-level</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Function-level strict mode syntax</span></span><br><span class="line"><span class="pi">  'use strict'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nested</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"And so am I!"</span>; &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hi!  I'm a strict mode function!  "</span> + nested();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notStrict</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"I'm not strict."</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>And since “use strict” only validate when you insert it into the head of the script when you want to do whole-script strict mode, so be careful to concatenate scripts if you are using strict mode since concatenate strict mode with non-strict mode scripts will be strict and concatenate non-stricct with strict will be non-strict.</p>
<h3 id="Fail_aloud"><a href="#Fail_aloud" class="headerlink" title="Fail aloud"></a>Fail aloud</h3><p>We all know javascript is a really nice language that it will fail silently in most of times not breaking the interaction. But it will also cause some troubles for debugging… Now we have strict mode which will convert all mistakes into errors, so your javascript will not fail silently in strict mode.</p>
<p>So what kind of mistakes will be converted into errors in strict mode?</p>
<ul>
<li>Declare variable first - in strict mode, you can’t use assignment without <code>var</code> to create a global varibale anymore;</li>
<li>Assign value to non-writable variable or a getter-only property, non-extensible object..etc, will throw an error;</li>
<li>Delete an undeletable property will throw an error;</li>
<li>All property name in an object must be unique;</li>
<li>Parameters in a function can not be duplicate;</li>
<li>ECMAScript 5 fobids the octal syntax(starts with 0), but ES6 brings it back with prefix: ‘0o’;</li>
</ul>
<h3 id="Simplifying_variable_uses"><a href="#Simplifying_variable_uses" class="headerlink" title="Simplifying variable uses"></a>Simplifying variable uses</h3><ul>
<li>Prohibit <code>with</code> - because you could never know the properties in it is mapped to which object until you run the code;</li>
<li><code>eval</code> with strict mode will not introduct variables in it to the surrounding scope;</li>
<li>Forbid deleting on plain names(most are primitive variables);</li>
<li><code>eval</code> and <code>arguments</code> can not be overwrite with assignment;</li>
<li>no alias for <code>arguments</code>, so the arguments in a function can only be changed by assigning to <code>arguments[i]</code>;</li>
<li><code>arguments.callee</code> is no longer supported;</li>
</ul>
<blockquote>
<p>Relatedly, if the function eval is invoked by an expression of the form eval(…) in strict mode code, the code will be evaluated as strict mode code.</p>
</blockquote>
<p>I remembered someone told me a golden rule about eval in strict mode before : Don’t use it. :)</p>
<h3 id="u201CSecuring_u201D_JavaScript"><a href="#u201CSecuring_u201D_JavaScript" class="headerlink" title="“Securing” JavaScript"></a>“Securing” JavaScript</h3><p>Since before and in normal mode, all functions declared will has the global (window in browser) as <code>this</code> by default if they are not invoked by an object.</p>
<p>But in strict mode, functions invoked without an object will have a default <code>this</code> as undefined or null;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="comment">// this will be undefined in strict mode, but in normal mode, it will be the global this</span></span><br></pre></td></tr></table></figure>
<p>But you still can use <code>call()</code>,<code>apply()</code>,<code>bind()</code> to specify a particular this.</p>
<p>And you can not use function.caller and function.arguments to refer the function itself or its arguments within the function code anymore. (actually in normal code in advance browsers, you can not use these either)</p>
<h3 id="Reserved_Keywords"><a href="#Reserved_Keywords" class="headerlink" title="Reserved Keywords"></a>Reserved Keywords</h3><p>In strict mode, you will have some reserved keywords that maybe implemented in future js. Here is a list of them:</p>
<p><code>implements, interface, let, package, private, protected, public, static, and yield</code>.</p>
<p>So don’t use them in strict mode to be names of your variables.</p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>In strict mode, a function statements has to be the top level of a script or function.(in normal mode, functions statements are permitted everywhere..)</p>
<p>So you can not declare a function within a if statements or for loop…</p>
<h2 id="Referrence"><a href="#Referrence" class="headerlink" title="Referrence"></a>Referrence</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="external">Strict mode - MDN</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Some of you may have already seen some use of the strict mode before, but I believe most of the people don't actually know much about the strict mode.]]>
    
    </summary>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6 General Summary]]></title>
    <link href="http://taoalpha.me/blog/2015/11/06/tech-es6-general-summary/"/>
    <id>http://taoalpha.me/blog/2015/11/06/tech-es6-general-summary/</id>
    <published>2015-11-06T05:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This post is a copy of <a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">Luke Hoban - ES6Features repo</a></p>
</blockquote>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard.  ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is <a href="http://kangax.github.io/es5-compat-table/es6/" target="_blank" rel="external">underway now</a>.</p>
<p>See the <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">ES6 standard</a> for full specification of the ECMAScript 6 language.</p>
<h2 id="ECMAScript_6_Features"><a href="#ECMAScript_6_Features" class="headerlink" title="ECMAScript 6 Features"></a>ECMAScript 6 Features</h2><h3 id="Arrows"><a href="#Arrows" class="headerlink" title="Arrows"></a>Arrows</h3><p>Arrows are a function shorthand using the <code>=&gt;</code> syntax.  They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript.  They support both statement block bodies as well as expression bodies which return the value of the expression.  Unlike functions, arrows share the same lexical <code>this</code> as their surrounding code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Expression bodies</span></span><br><span class="line"><span class="keyword">var</span> odds = evens.map(v =&gt; v + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> nums = evens.map((v, i) =&gt; v + i);</span><br><span class="line"><span class="keyword">var</span> pairs = evens.map(v =&gt; (&#123;even: v, odd: v + <span class="number">1</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Statement bodies</span></span><br><span class="line">nums.forEach(v =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (v % <span class="number">5</span> === <span class="number">0</span>)</span><br><span class="line">    fives.push(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lexical this</span></span><br><span class="line"><span class="keyword">var</span> bob = &#123;</span><br><span class="line">  _name: <span class="string">"Bob"</span>,</span><br><span class="line">  _friends: [],</span><br><span class="line">  printFriends() &#123;</span><br><span class="line">    <span class="keyword">this</span>._friends.forEach(f =&gt;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>._name + <span class="string">" knows "</span> + f));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>ES6 classes are a simple sugar over the prototype-based OO pattern.  Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability.  Classes support prototype-based inheritance, super calls, instance and static methods and constructors.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkinnedMesh</span> <span class="keyword">extends</span> <span class="title">THREE</span>.<span class="title">Mesh</span> </span>&#123;</span><br><span class="line">  constructor(geometry, materials) &#123;</span><br><span class="line">    <span class="keyword">super</span>(geometry, materials);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.idMatrix = SkinnedMesh.defaultMatrix();</span><br><span class="line">    <span class="keyword">this</span>.bones = [];</span><br><span class="line">    <span class="keyword">this</span>.boneMatrices = [];</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  update(camera) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">super</span>.update();</span><br><span class="line">  &#125;</span><br><span class="line">  get boneCount() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bones.length;</span><br><span class="line">  &#125;</span><br><span class="line">  set matrixType(matrixType) &#123;</span><br><span class="line">    <span class="keyword">this</span>.idMatrix = SkinnedMesh[matrixType]();</span><br><span class="line">  &#125;</span><br><span class="line">  static defaultMatrix() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.Matrix4();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Enhanced_Object_Literals"><a href="#Enhanced_Object_Literals" class="headerlink" title="Enhanced Object Literals"></a>Enhanced Object Literals</h3><p>Object literals are extended to support setting the prototype at construction, shorthand for <code>foo: foo</code> assignments, defining methods, making super calls, and computing property names with expressions.  Together, these also bring object literals and class declarations closer together, and let object-based design benefit from some of the same conveniences.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// __proto__</span></span><br><span class="line">    __proto__: theProtoObj,</span><br><span class="line">    <span class="comment">// Shorthand for ‘handler: handler’</span></span><br><span class="line">    handler,</span><br><span class="line">    <span class="comment">// Methods</span></span><br><span class="line">    toString() &#123;</span><br><span class="line">     <span class="comment">// Super calls</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">"d "</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Computed (dynamic) property names</span></span><br><span class="line">    [ <span class="string">'prop_'</span> + (() =&gt; <span class="number">42</span>)() ]: <span class="number">42</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Template_Strings"><a href="#Template_Strings" class="headerlink" title="Template Strings"></a>Template Strings</h3><p>Template strings provide syntactic sugar for constructing strings.  This is similar to string interpolation features in Perl, Python and more.  Optionally, a tag can be added to allow the string construction to be customized, avoiding injection attacks or constructing higher level data structures from string contents.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic literal string creation</span></span><br><span class="line"><span class="string">`In JavaScript '\n' is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiline strings</span></span><br><span class="line"><span class="string">`In JavaScript this is</span><br><span class="line"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String interpolation</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct an HTTP request prefix is used to interpret the replacements and construction</span></span><br><span class="line">POST<span class="string">`http://foo.org/bar?a=<span class="subst">$&#123;a&#125;</span>&amp;b=<span class="subst">$&#123;b&#125;</span></span><br><span class="line">     Content-Type: application/json</span><br><span class="line">     X-Credentials: <span class="subst">$&#123;credentials&#125;</span></span><br><span class="line">     &#123; "foo": <span class="subst">$&#123;foo&#125;</span>,</span><br><span class="line">       "bar": <span class="subst">$&#123;bar&#125;</span>&#125;`</span>(myOnReadyStateChangeHandler);</span><br></pre></td></tr></table></figure>
<h3 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h3><p>Destructuring allows binding using pattern matching, with support for matching arrays and objects.  Destructuring is fail-soft, similar to standard object lookup <code>foo[&quot;bar&quot;]</code>, producing <code>undefined</code> values when not found.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list matching</span></span><br><span class="line"><span class="keyword">var</span> [a, , b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// object matching</span></span><br><span class="line"><span class="keyword">var</span> &#123; op: a, lhs: &#123; op: b &#125;, rhs: c &#125;</span><br><span class="line">       = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">// object matching shorthand</span></span><br><span class="line"><span class="comment">// binds `op`, `lhs` and `rhs` in scope</span></span><br><span class="line"><span class="keyword">var</span> &#123;op, lhs, rhs&#125; = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can be used in parameter position</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">&#123;name: x&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">g(&#123;name: <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fail-soft destructuring</span></span><br><span class="line"><span class="keyword">var</span> [a] = [];</span><br><span class="line">a === <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fail-soft destructuring with defaults</span></span><br><span class="line"><span class="keyword">var</span> [a = <span class="number">1</span>] = [];</span><br><span class="line">a === <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Default_+_Rest_+_Spread"><a href="#Default_+_Rest_+_Spread" class="headerlink" title="Default + Rest + Spread"></a>Default + Rest + Spread</h3><p>Callee-evaluated default parameter values.  Turn an array into consecutive arguments in a function call.  Bind trailing parameters to an array.  Rest replaces the need for <code>arguments</code> and addresses common cases more directly.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y=12</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// y is 12 if not passed (or passed as undefined)</span></span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>) == <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, ...y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// y is an Array</span></span><br><span class="line">  <span class="keyword">return</span> x * y.length;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>, <span class="string">"hello"</span>, <span class="literal">true</span>) == <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Pass each elem of array as argument</span></span><br><span class="line">f(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) == <span class="number">6</span></span><br></pre></td></tr></table></figure>
<h3 id="Let_+_Const"><a href="#Let_+_Const" class="headerlink" title="Let + Const"></a>Let + Const</h3><p>Block-scoped binding constructs.  <code>let</code> is the new <code>var</code>.  <code>const</code> is single-assignment.  Static restrictions prevent use before assignment.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> x;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// okay, block scoped name</span></span><br><span class="line">      <span class="keyword">const</span> x = <span class="string">"sneaky"</span>;</span><br><span class="line">      <span class="comment">// error, const</span></span><br><span class="line">      x = <span class="string">"foo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// error, already declared in block</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"inner"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Iterators_+_For-Of"><a href="#Iterators_+_For-Of" class="headerlink" title="Iterators + For..Of"></a>Iterators + For..Of</h3><p>Iterator objects enable custom iteration like CLR IEnumerable or Java Iterable.  Generalize <code>for..in</code> to custom iterator-based iteration with <code>for..of</code>.  Don’t require realizing an array, enabling lazy design patterns like LINQ.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        [pre, cur] = [cur, pre + cur];</span><br><span class="line">        <span class="keyword">return</span> &#123; done: <span class="literal">false</span>, value: cur &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Iteration is based on these duck-typed interfaces (using <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> type syntax for exposition only):<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> IteratorResult </span>&#123;</span><br><span class="line">  done: <span class="built_in">boolean</span>;</span><br><span class="line">  value: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="interface"><span class="keyword">interface</span> Iterator </span>&#123;</span><br><span class="line">  next(): IteratorResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="interface"><span class="keyword">interface</span> Iterable </span>&#123;</span><br><span class="line">  [Symbol.iterator](): Iterator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>Generators simplify iterator-authoring using <code>function*</code> and <code>yield</code>.  A function declared as function* returns a Generator instance.  Generators are subtypes of iterators which include additional  <code>next</code> and <code>throw</code>.  These enable values to flow back into the generator, so <code>yield</code> is an expression form which returns a value (or throws).</p>
<p>Note: Can also be used to enable ‘await’-like async programming, see also ES7 <code>await</code> proposal.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = pre;</span><br><span class="line">      pre = cur;</span><br><span class="line">      cur += temp;</span><br><span class="line">      <span class="keyword">yield</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The generator interface is (using <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> type syntax for exposition only):</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Generator <span class="keyword">extends</span> Iterator </span>&#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult;</span><br><span class="line">    <span class="keyword">throw</span>(exception: <span class="built_in">any</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>Non-breaking additions to support full Unicode, including new Unicode literal form in strings and new RegExp <code>u</code> mode to handle code points, as well as new APIs to process strings at the 21bit code points level.  These additions support building global apps in JavaScript.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// same as ES5.1</span></span><br><span class="line"><span class="string">"𠮷"</span>.length == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new RegExp behaviour, opt-in ‘u’</span></span><br><span class="line"><span class="string">"𠮷"</span>.match(<span class="regexp">/./u</span>)[<span class="number">0</span>].length == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new form</span></span><br><span class="line"><span class="string">"\u&#123;20BB7&#125;"</span>==<span class="string">"𠮷"</span>==<span class="string">"\uD842\uDFB7"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new String ops</span></span><br><span class="line"><span class="string">"𠮷"</span>.codePointAt(<span class="number">0</span>) == <span class="number">0x20BB7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for-of iterates code points</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> c <span class="keyword">of</span> <span class="string">"𠮷"</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Language-level support for modules for component definition.  Codifies patterns from popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour defined by a host-defined default loader.  Implicitly async model – no code executes until requested modules are available and processed.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line">alert(<span class="string">"2π = "</span> + math.sum(math.pi, math.pi));</span><br><span class="line"></span><br><span class="line"><span class="comment">// otherApp.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum, pi&#125; <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line">alert(<span class="string">"2π = "</span> + sum(pi, pi));</span><br></pre></td></tr></table></figure>
<p>Some additional features include <code>export default</code> and <code>export *</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/mathplusplus.js</span></span><br><span class="line"><span class="keyword">export</span> * from <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> ln, &#123;pi, e&#125; <span class="keyword">from</span> <span class="string">"lib/mathplusplus"</span>;</span><br><span class="line">alert(<span class="string">"2π = "</span> + ln(e)*pi*<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Module_Loaders"><a href="#Module_Loaders" class="headerlink" title="Module Loaders"></a>Module Loaders</h3><p>Module loaders support:</p>
<ul>
<li>Dynamic loading</li>
<li>State isolation</li>
<li>Global namespace isolation</li>
<li>Compilation hooks</li>
<li>Nested virtualization</li>
</ul>
<p>The default module loader can be configured, and new loaders can be constructed to evaluate and load code in isolated or constrained contexts.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dynamic loading – ‘System’ is default loader</span></span><br><span class="line">System.import(<span class="string">'lib/math'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"2π = "</span> + m.sum(m.pi, m.pi));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create execution sandboxes – new Loaders</span></span><br><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> Loader(&#123;</span><br><span class="line">  global: fixup(<span class="built_in">window</span>) <span class="comment">// replace ‘console.log’</span></span><br><span class="line">&#125;);</span><br><span class="line">loader.eval(<span class="string">"console.log('hello world!');"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Directly manipulate module cache</span></span><br><span class="line">System.get(<span class="string">'jquery'</span>);</span><br><span class="line">System.set(<span class="string">'jquery'</span>, Module(&#123;$: $&#125;)); <span class="comment">// WARNING: not yet finalized</span></span><br></pre></td></tr></table></figure>
<h3 id="Map_+_Set_+_WeakMap_+_WeakSet"><a href="#Map_+_Set_+_WeakMap_+_WeakSet" class="headerlink" title="Map + Set + WeakMap + WeakSet"></a>Map + Set + WeakMap + WeakSet</h3><p>Efficient data structures for common algorithms.  WeakMaps provides leak-free object-key’d side tables.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sets</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">"hello"</span>).add(<span class="string">"goodbye"</span>).add(<span class="string">"hello"</span>);</span><br><span class="line">s.size === <span class="number">2</span>;</span><br><span class="line">s.has(<span class="string">"hello"</span>) === <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maps</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">"hello"</span>, <span class="number">42</span>);</span><br><span class="line">m.set(s, <span class="number">34</span>);</span><br><span class="line">m.get(s) == <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Weak Maps</span></span><br><span class="line"><span class="keyword">var</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(s, &#123; extra: <span class="number">42</span> &#125;);</span><br><span class="line">wm.size === <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Weak Sets</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(&#123; data: <span class="number">42</span> &#125;);</span><br><span class="line"><span class="comment">// Because the added object has no other references, it will not be held in the set</span></span><br></pre></td></tr></table></figure>
<h3 id="Proxies"><a href="#Proxies" class="headerlink" title="Proxies"></a>Proxies</h3><p>Proxies enable creation of objects with the full range of behaviors available to host objects.  Can be used for interception, object virtualization, logging/profiling, etc.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Proxying a normal object</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">receiver, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">p.world === <span class="string">'Hello, world!'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxying a function object</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'I am the target'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params">receiver, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'I am the proxy'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">p() === <span class="string">'I am the proxy'</span>;</span><br></pre></td></tr></table></figure>
<p>There are traps available for all of the runtime-level meta-operations:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler =</span><br><span class="line">&#123;</span><br><span class="line">  get:...,</span><br><span class="line">  set:...,</span><br><span class="line">  has:...,</span><br><span class="line">  deleteProperty:...,</span><br><span class="line">  apply:...,</span><br><span class="line">  construct:...,</span><br><span class="line">  getOwnPropertyDescriptor:...,</span><br><span class="line">  defineProperty:...,</span><br><span class="line">  getPrototypeOf:...,</span><br><span class="line">  setPrototypeOf:...,</span><br><span class="line">  enumerate:...,</span><br><span class="line">  ownKeys:...,</span><br><span class="line">  preventExtensions:...,</span><br><span class="line">  isExtensible:...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>Symbols enable access control for object state.  Symbols allow properties to be keyed by either <code>string</code> (as in ES5) or <code>symbol</code>.  Symbols are a new primitive type. Optional <code>description</code> parameter used in debugging - but is not part of identity.  Symbols are unique (like gensym), but not private since they are exposed via reflection features like <code>Object.getOwnPropertySymbols</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// module scoped symbol</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="built_in">Symbol</span>(<span class="string">"key"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params">privateData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = privateData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MyClass.prototype = &#123;</span><br><span class="line">    doStuff: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ... <span class="keyword">this</span>[key] ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> MyClass;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> MyClass(<span class="string">"hello"</span>)</span><br><span class="line">c[<span class="string">"key"</span>] === <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="Subclassable_Built-ins"><a href="#Subclassable_Built-ins" class="headerlink" title="Subclassable Built-ins"></a>Subclassable Built-ins</h3><p>In ES6, built-ins like <code>Array</code>, <code>Date</code> and DOM <code>Element</code>s can be subclassed.</p>
<p>Object construction for a function named <code>Ctor</code> now uses two-phases (both virtually dispatched):</p>
<ul>
<li>Call <code>Ctor[@@create]</code> to allocate the object, installing any special behavior</li>
<li>Invoke constructor on new instance to initialize</li>
</ul>
<p>The known <code>@@create</code> symbol is available via <code>Symbol.create</code>.  Built-ins now expose their <code>@@create</code> explicitly.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pseudo-code of Array</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    constructor(...args) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    static [<span class="built_in">Symbol</span>.create]() &#123;</span><br><span class="line">        <span class="comment">// Install special [[DefineOwnProperty]]</span></span><br><span class="line">        <span class="comment">// to magically update 'length'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User code of Array subclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    constructor(...args) &#123; <span class="keyword">super</span>(...args); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Two-phase 'new':</span></span><br><span class="line"><span class="comment">// 1) Call @@create to allocate object</span></span><br><span class="line"><span class="comment">// 2) Invoke constructor on new instance</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MyArray();</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">12</span>;</span><br><span class="line">arr.length == <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="Math_+_Number_+_String_+_Array_+_Object_APIs"><a href="#Math_+_Number_+_String_+_Array_+_Object_APIs" class="headerlink" title="Math + Number + String + Array + Object APIs"></a>Math + Number + String + Array + Object APIs</h3><p>Many new library additions, including core Math libraries, Array conversion helpers, String helpers, and Object.assign for copying.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON</span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"NaN"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.acosh(<span class="number">3</span>) <span class="comment">// 1.762747174039086</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.imul(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">1</span>, <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="string">"abcde"</span>.includes(<span class="string">"cd"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="string">"abc"</span>.repeat(<span class="number">3</span>) <span class="comment">// "abcabcabc"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'*'</span>)) <span class="comment">// Returns a real Array</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// Similar to new Array(...), but without special one-arg behavior</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>].fill(<span class="number">7</span>, <span class="number">1</span>) <span class="comment">// [0,7,7]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].find(x =&gt; x == <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].findIndex(x =&gt; x == <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">3</span>, <span class="number">0</span>) <span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].entries() <span class="comment">// iterator [0, "a"], [1,"b"], [2,"c"]</span></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].keys() <span class="comment">// iterator 0, 1, 2</span></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].values() <span class="comment">// iterator "a", "b", "c"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Point, &#123; origin: <span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">0</span>) &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Binary_and_Octal_Literals"><a href="#Binary_and_Octal_Literals" class="headerlink" title="Binary and Octal Literals"></a>Binary and Octal Literals</h3><p>Two new numeric literal forms are added for binary (<code>b</code>) and octal (<code>o</code>).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b111110111</span> === <span class="number">503</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0o767</span> === <span class="number">503</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p>Promises are a library for asynchronous programming.  Promises are a first class representation of a value that may be made available in the future.  Promises are used in many existing JavaScript libraries.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">duration = 0</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(resolve, duration);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = timeout(<span class="number">1000</span>).then(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">2000</span>);</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"hmm"</span>);</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([timeout(<span class="number">100</span>), timeout(<span class="number">200</span>)]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Reflect_API"><a href="#Reflect_API" class="headerlink" title="Reflect API"></a>Reflect API</h3><p>Full reflection API exposing the runtime-level meta-operations on objects.  This is effectively the inverse of the Proxy API, and allows making calls corresponding to the same meta-operations as the proxy traps.  Especially useful for implementing proxies.</p>
<h3 id="Tail_Calls"><a href="#Tail_Calls" class="headerlink" title="Tail Calls"></a>Tail Calls</h3><p>Calls in tail-position are guaranteed to not grow the stack unboundedly.  Makes recursive algorithms safe in the face of unbounded inputs.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, acc = 1</span>) </span>&#123;</span><br><span class="line"><span class="pi">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> acc;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * acc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack overflow in most implementations today,</span></span><br><span class="line"><span class="comment">// but safe on arbitrary inputs in ES6</span></span><br><span class="line">factorial(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Referrence"><a href="#Referrence" class="headerlink" title="Referrence"></a>Referrence</h2><ul>
<li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">ES6 Features</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[As I getting to understand the ES6, I am getting to be more crazy about the JS world !!!]]>
    
    </summary>
    
      <category term="ES6" scheme="http://taoalpha.me/blog/tags/ES6/"/>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Implement LRU Cache in JavaScript]]></title>
    <link href="http://taoalpha.me/blog/2015/11/03/tech-javascript-lru-cache/"/>
    <id>http://taoalpha.me/blog/2015/11/03/tech-javascript-lru-cache/</id>
    <published>2015-11-03T05:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>LRU which is short for least recently used is a popular algorithm in cache. The basic idea is always put your items in order of used time, and when you insert new item into the fullfilled chache,remove the least recently used item in your memory.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="O_28n_29"><a href="#O_28n_29" class="headerlink" title="O(n)"></a>O(n)</h3><p>At first, I plan to use a hashtable and a list with all keys to achieve it, and I did, but the time cost apparently too large: O(n) since I have to search the list to get the key and then get the value from the hashtable.</p>
<p>Here is the code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// constructor</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span>(<span class="params">capacity</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// save all key-value pairs in this hashtable</span></span><br><span class="line">  <span class="keyword">this</span>.bucket = &#123;&#125;</span><br><span class="line">  <span class="comment">// save all keys in the stack with the order of last used time</span></span><br><span class="line">  <span class="keyword">this</span>.keys = []</span><br><span class="line">  <span class="keyword">this</span>.capacity = capacity</span><br><span class="line">  <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRUCache.prototype.updateKey = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// update the position of this key in keys </span></span><br><span class="line">  <span class="keyword">var</span> keyIndex = <span class="keyword">this</span>.keys.indexOf(key)</span><br><span class="line">  <span class="keyword">this</span>.keys[keyIndex] = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// update the key to the head of the stack</span></span><br><span class="line">  <span class="keyword">this</span>.keys.push(key)</span><br><span class="line">&#125;</span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.bucket.hasOwnProperty(key))&#123;</span><br><span class="line">    <span class="keyword">this</span>.updateKey(key)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bucket[key]</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRUCache.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.capacity &lt;= <span class="number">0</span>)&#123;<span class="built_in">console</span>.log(<span class="string">"no memory to save 1 item"</span>);<span class="keyword">return</span>&#125;</span><br><span class="line">  <span class="comment">// update exist item </span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.bucket.hasOwnProperty(key))&#123;</span><br><span class="line">    <span class="keyword">this</span>.bucket[key] = value</span><br><span class="line">    <span class="keyword">this</span>.updateKey(key)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// if the bucket is fullfilled, remove the least recently used item</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.length &gt;= <span class="keyword">this</span>.capacity)&#123;</span><br><span class="line">    <span class="keyword">var</span> dKey = <span class="keyword">this</span>.keys.shift()</span><br><span class="line">    <span class="keyword">while</span>(!dKey)&#123;</span><br><span class="line">      <span class="comment">// if the dKey is undefined, shift() again</span></span><br><span class="line">      dKey = <span class="keyword">this</span>.keys.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.bucket[dKey]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add new item and update the length</span></span><br><span class="line">  <span class="keyword">this</span>.bucket[key] = value</span><br><span class="line">  <span class="keyword">this</span>.keys.push(key)</span><br><span class="line">  <span class="keyword">this</span>.length ++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Can we do better ? Definitely. We can optimize it to O(1) if we use double linked list to achieve the same function.</p>
<h3 id="O_281_29"><a href="#O_281_29" class="headerlink" title="O(1)"></a>O(1)</h3><p>If we reconstruct the LRUCache with a map and a bunch of nodes, we can implement the LRUCache with O(1).(Since we need to get the value by key, so it has to be a hashtable)</p>
<p>Why? Since we can save the key and value in the node, and save all key-node pairs in the hashtable, and now we can get the value by key using hashtable, and we also have a list of nodes with order of last used time and the update on a linked list can be O(1).</p>
<p>Here is the code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Illustration of the design:</span><br><span class="line"> *</span><br><span class="line"> *       entry             entry             entry             entry</span><br><span class="line"> *       ______            ______            ______            ______</span><br><span class="line"> *      | tail |.newer =&gt; |      |.newer =&gt; |      |.newer =&gt; | head |</span><br><span class="line"> *      |  A   |          |  B   |          |  C   |          |  D   |</span><br><span class="line"> *      |______| &lt;= older.|______| &lt;= older.|______| &lt;= older.|______|</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span>(<span class="params">capacity</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.capacity = capacity</span><br><span class="line">  <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.map = &#123;&#125;</span><br><span class="line">  <span class="comment">// save the head and tail so we can update it easily</span></span><br><span class="line">  <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRUCache.prototype.node = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.key = key</span><br><span class="line">  <span class="keyword">this</span>.val = value</span><br><span class="line">  <span class="keyword">this</span>.newer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.older = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.map.hasOwnProperty(key))&#123;</span><br><span class="line">    <span class="keyword">this</span>.updateKey(key)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map[key].val</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">LRUCache.prototype.updateKey = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.map[key]</span><br><span class="line">  <span class="comment">// break the chain and reconnect with newer and older</span></span><br><span class="line">  <span class="keyword">if</span>(node.newer)&#123;</span><br><span class="line">    node.newer.older= node.older</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.head = node.older</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(node.older)&#123;</span><br><span class="line">    node.older.newer = node.newer</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tail = node.newer</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// replace the node into head - newest</span></span><br><span class="line">  node.older = <span class="keyword">this</span>.head</span><br><span class="line">  node.newer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.head)&#123;</span><br><span class="line">    <span class="keyword">this</span>.head.newer = node</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.head = node</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if no items in the bucket, set the tail to node too.</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.tail)&#123;</span><br><span class="line">    <span class="keyword">this</span>.tail = node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRUCache.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">new</span> <span class="keyword">this</span>.node(key,value)</span><br><span class="line">  <span class="comment">// update the value for exist entries</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.map.hasOwnProperty(key))&#123;</span><br><span class="line">    <span class="keyword">this</span>.map[key].val = value</span><br><span class="line">    <span class="keyword">this</span>.updateKey(key)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.length &gt;= <span class="keyword">this</span>.capacity)&#123;</span><br><span class="line">    <span class="comment">// remove the least recently used item</span></span><br><span class="line">    <span class="keyword">var</span> dKey = <span class="keyword">this</span>.tail.key</span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="keyword">this</span>.tail.newer</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.tail)&#123;</span><br><span class="line">      <span class="keyword">this</span>.tail.older = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.map[dKey]</span><br><span class="line">    <span class="keyword">this</span>.length --</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert node into the head</span></span><br><span class="line">  node.older = <span class="keyword">this</span>.head</span><br><span class="line">  <span class="comment">// if have head, we need re-connect node with other nodes older than head</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.head)&#123;</span><br><span class="line">    <span class="keyword">this</span>.head.newer = node</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.head = node</span><br><span class="line">  <span class="comment">// if no tail which means first insert, set the tail to node too</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.tail)&#123;</span><br><span class="line">    <span class="keyword">this</span>.tail = node</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.map[key] = node</span><br><span class="line">  <span class="keyword">this</span>.length ++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we can achieve set, get both with O(1).</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Here is some other implementations from others, if you are interested in it, check it yourself.</p>
<ul>
<li><a href="http://chrisrng.svbtle.com/lru-cache-in-javascript" target="_blank" rel="external">LRU by Chrisr NG</a></li>
<li><a href="https://github.com/rsms/js-lru/blob/master/lru.js" target="_blank" rel="external">LRU by rsms</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[This is one step for my whole implement-everything-in-javascript journey.]]>
    
    </summary>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="LRU" scheme="http://taoalpha.me/blog/tags/LRU/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Array Operation Cost in JavaScript]]></title>
    <link href="http://taoalpha.me/blog/2015/10/30/tech-javascript-array-operation-cost/"/>
    <id>http://taoalpha.me/blog/2015/10/30/tech-javascript-array-operation-cost/</id>
    <published>2015-10-30T11:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>concat()</code>,<code>splice()</code>,<code>slice()</code>,<code>push()</code>,<code>pop()</code>,<code>shift()</code>,<code>unshift()</code>… all these handy functions belong to Array. We are using them everyday, but do you really know about them ? Time cost of a function in language like JavaScript is not easy to measurement, since different browsers use different javascript engine which will cause different implementation on same functions. But, normally, the basic operations will be the same.</p>
<p>So today, I will test some basic array operations on NodeJS and compare the time cost between these operations.</p>
<p><strong>TEST ENVIRONMENT:</strong> Mac Air, iTerm, NodeJS v4.1.1</p>
<h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><p>We all know that we have several different ways to construct an array, the most frequently used are two methods I list below:</p>
<ul>
<li>Literal notation : <code>[ele1,ele2,...]</code></li>
<li><code>new</code> function : <code>new Array(ele1,ele2,...)</code> or <code>new Array(length_of_array)</code></li>
</ul>
<p>Normally there are no difference between these two methods. But if you are dealing with some real big datasets and you know exactly how long your array is and want to save a few time for some basic operations, you may should continue reading.</p>
<p>The fundamental difference between these two methods is : literal notation declare an array with elements in it, <code>new Array(ele1,ele2,...)</code> will do exactly the same, but <code>new Array(length_of_array)</code> will only declare a length of a array(and create or allocate a memory for this array with its length).</p>
<p>Here is a gif about the memory allocation will give you a clear understanding about it.</p>
<p><img src="https://gamealchemist.files.wordpress.com/2013/05/array.png" alt="bad allocate"></p>
<p>The advantage of declaring with allocating is that it can improve the speed of constructing an array.</p>
<p>As test I did, to construct a 100000 array with 0-99999 (average time cost):</p>
<ul>
<li>Use literal notation with push(): 8ms</li>
<li>Use literal notation with unshift(): 2230ms</li>
<li>Use literal notation with assigning directly by index: 5ms </li>
<li>Use <code>new Array(100000)</code> with assigning directly by index: 2ms</li>
<li>Use literal notation with assigning length first then assigning directly by index : 2ms</li>
</ul>
<p>Apparently, it would save you some time if you declare the length before you assign the values.And if you don’t like to use the <code>new</code>, you can still use literal notation and set the length manually.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// time cost for array constructing</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> ar = []</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Literal notation with assigning directly"</span>)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">99999</span>)&#123;</span><br><span class="line">  ar[i] = i</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Literal notation with assigning directly"</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">ar = []</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Literal notation with push()"</span>)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">99999</span>)&#123;</span><br><span class="line">  ar.push(i)</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Literal notation with push()"</span>)</span><br><span class="line"></span><br><span class="line">ar = []</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Literal notation with unshift()"</span>)</span><br><span class="line"><span class="keyword">while</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">  ar.unshift(i)</span><br><span class="line">  i --</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Literal notation with unshift()"</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">ar = []</span><br><span class="line">ar.length = <span class="number">100000</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Literal notation with declaring length first"</span>)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">99999</span>)&#123;</span><br><span class="line">  ar[i] = i</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Literal notation with declaring length first"</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Using new with length defined"</span>)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">99999</span>)&#123;</span><br><span class="line">  arr[i] = i</span><br><span class="line">  i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Using new with length defined"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="delete_and_remove"><a href="#delete_and_remove" class="headerlink" title="delete and remove"></a>delete and remove</h2><p>JavaScript does have a keyword for deleting: delete. For array, when you use <code>delete ar[i]</code>, you actually assign <code>ar[i] = undefined</code>. I recommend you to use the second method since it is a little faster.</p>
<p>Test on 100000-length list (delete all elements):</p>
<ul>
<li>Delete with “delete” keyword: 11ms</li>
<li>Delete with assigning “undefined” to the value: 2ms</li>
</ul>
<p>Both of the two methods would not change the length of the array, but we can also use “pop()”, “shift()” to empty an array.</p>
<p>Test on 100000-length list (remove all elements):</p>
<ul>
<li>remove with “pop()”: 5ms </li>
<li>remove with “shift()”: 18ms</li>
<li>remove with splice() : 25ms</li>
</ul>
<p>So, the shift() will cost near 3 times of pop() and splice() even slower. </p>
<p>Of course, under different conditions, you will choose different methods to achieve what you want.</p>
<h2 id="other_native_functions"><a href="#other_native_functions" class="headerlink" title="other native functions"></a>other native functions</h2><p>I did some tests on other basic native functions too. Here are the results:</p>
<ul>
<li>splice() to insert 1000 elements into a 100000-length list : 60ms </li>
<li>concat() two 100000-length lists : 1ms</li>
<li>Use while loop and push to concat two 100000-length lists : 8ms</li>
<li>slice() to hard copy one 100000-length list : 1ms</li>
<li>Use while loop and push to hard copy one 100000-length list : 8ms</li>
<li>Use while loop and assign value with predefined length to copy one 100000-length list : 2 (same as constructing part)</li>
<li>indexOf() to search every element in a 100000-length list (the smaller the index is, the sooner it will be): 4600ms </li>
<li>Use while loop to achieve the search : 7300ms</li>
<li>Reverse (ordered list like 0 - 99999) : 1ms</li>
<li>Reverse (ordered list like 99999 - 0) : 100ms (this is weird…)</li>
</ul>
<p>Most of time, the native functions are the best methods to do the operation since the engine already done a lot to optimize them.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Sometimes you will think these small difference between different methods is not important, since the technology is growing so fast, the difference will become so small that we can just ignore them. That’s 100% correct!</p>
<p>I did these just because I am curious and sometimes, if you are dealing with a really large dataset, then maybe the nanoseconds count and you may want to use some small changes to optimize your code. Why don’t you always keep your code optimized all the time?</p>
<p>That’s all!</p>
]]></content>
    <summary type="html">
    <![CDATA[Array would be one of the most frequently used data structures in javascript.]]>
    
    </summary>
    
      <category term="Array" scheme="http://taoalpha.me/blog/tags/Array/"/>
    
      <category term="Data Structure" scheme="http://taoalpha.me/blog/tags/Data-Structure/"/>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sorting Algorithm in JavaScript - Bubble Sort and Merge Sort]]></title>
    <link href="http://taoalpha.me/blog/2015/10/29/tech-javascript-sorting-algorithm-2/"/>
    <id>http://taoalpha.me/blog/2015/10/29/tech-javascript-sorting-algorithm-2/</id>
    <published>2015-10-29T08:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Bubble sort is really cool but not so useful, it seems that you will never use it… But merge sort is really cool since it is really fast.</p>
<h2 id="Bubble_Sort"><a href="#Bubble_Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><p>So what is bubble sort, according to wikipedia:</p>
<blockquote>
<p>Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. </p>
</blockquote>
<p>The whole process of sorting is like the bigger element “bubble” to the end of the list.</p>
<ul>
<li><strong>Input:</strong> A list of numbers with random order</li>
<li><strong>Procedures:</strong><ul>
<li>Start from the head of the list, and compare every two adjacent numbers and swap them if they are in wrong order;</li>
<li>Record whether you did any swaps or not, if no, your list has been sorted, otherwise, you need to step 1 again;</li>
</ul>
</li>
<li><strong>Output:</strong> A sorted list</li>
</ul>
<p>If you like, you can do a small optimization to the procedures above: since every iteration we will make sure the bigger element will “bubble” to the end of the list, so everytime we don’t need to check the last elements(they are already in ordered), and we will reduce the length for each iteration.</p>
<p>Here is a nice gif from wikipedia: <img src="https://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif" alt="bubble sort"></p>
<p>The time complexity for bubble sort would be : O(n^2) for worst case, O(n) for best case, and O(n^2) on average.</p>
<p>The space complexity for bubble sort would be O(1) since we only need one space used to do the swap.</p>
<p>Now lets do the code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bubbleSort</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> swapped</span><br><span class="line">  <span class="keyword">var</span> len = list.length</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    swapped = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt; len-<span class="number">1</span>;j++)&#123;</span><br><span class="line">      reads += <span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span>(list[j]&gt;list[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">this</span>.swap(list,j,j+<span class="number">1</span>)</span><br><span class="line">        swapped = <span class="literal">true</span></span><br><span class="line">        writes += <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = len - <span class="number">1</span></span><br><span class="line">    <span class="comment">// since everytime we will move the largest element to the end of the list, we can reduce the number of iteration without considering the last element every iteration</span></span><br><span class="line">  &#125;<span class="keyword">while</span>(swapped)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Merge_Sort"><a href="#Merge_Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>Now we met all three different kinds of sorting, all of them have a O(n^2) of time complexity on average.</p>
<p>Lets do something faster: Merge Sort.</p>
<p>Imagine you separate your list into several really small lists with only one element or zero element in each of them. Then you merge every two small lists into one sorted list, and keep doing it repeatly.(it’s easy because you are merging two sorted lists)</p>
<p>The whole procedures will be:</p>
<ul>
<li>Split the list recursively;</li>
<li>Merge the small lists until you merge them all;</li>
</ul>
<p>Since we always split by half, the number of small lists we will have would be log(n), and the total cost would be close to (n / 2 * log(n)) on average(since we have at least 1 element list to merge with zero one, at most n/2 elements list to merge with n/2 elements). So the time complexity would be O(nlog(n)) all the time, and the space complexity would be O(n) since we will save origin input list with n small lists.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mergeSort</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(list.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> list</span><br><span class="line">  <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(list.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(list.slice(<span class="number">0</span>,mid)),mergeSort(list.slice(mid)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nl = []</span><br><span class="line">  <span class="keyword">var</span> il = <span class="number">0</span>, ir = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(il&lt;left.length &amp;&amp; ir&lt;right.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left[il] &lt; right[ir])&#123;</span><br><span class="line">      nl.push(left[il++])</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      nl.push(right[ir++])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// don't use shift because shift will actually cause a lot I/Os </span></span><br><span class="line">  &#125;</span><br><span class="line">  nl = nl.concat(left.slice(il)).concat(right.slice(ir))</span><br><span class="line">  <span class="keyword">return</span> nl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Merge sort is kind useful, and if we don’t have quick sort which I will talk about next post, it would be a really good choice to do sorting. And even we have quick sort, merge sort still exists in many languages as part of their default sorting algorithm.</p>
<p>And also there are several optimizations for merge sort, if you are interested in, you can search it on google.</p>
<p>That’s all for today. Good night!</p>
]]></content>
    <summary type="html">
    <![CDATA[Two more sorting algorithms.]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://taoalpha.me/blog/tags/Algorithm/"/>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="Sorting" scheme="http://taoalpha.me/blog/tags/Sorting/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sorting Algorithm in JavaScript - Insertion Sort and Selection Sort]]></title>
    <link href="http://taoalpha.me/blog/2015/10/29/tech-javascript-sorting-algorithm-1/"/>
    <id>http://taoalpha.me/blog/2015/10/29/tech-javascript-sorting-algorithm-1/</id>
    <published>2015-10-29T08:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Sorting_Algorithm"><a href="#Sorting_Algorithm" class="headerlink" title="Sorting Algorithm"></a>Sorting Algorithm</h2><p>As the most important and fundamental algorithm, sorting algorithm is always the best start to learn algorithm.</p>
<p>Among all the different sorting algorithms, we have 10 algorithms which are used a lot in practice, and I will introduce all these ten algorithms one by one. </p>
<p>Today we will talk about: Selection Sort and Insertion Sort.</p>
<h2 id="Selection_Sort"><a href="#Selection_Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><p>Selection Sort is one of the most fundamental sort algorithms you would learn from any book about algorithm. The method and theory based on is really easy and clear:</p>
<ul>
<li><strong>input:</strong> a list of numbers need to be sorted</li>
<li><strong>procedures:</strong><ul>
<li>create a new list to save the sorted elements</li>
<li>select the minimum element from the input list and push it into the new list, and remove it from the input list</li>
<li>repeat the second step until we don’t have any more elements in input list</li>
</ul>
</li>
<li><strong>output:</strong> the list you created to save the sorted elements</li>
</ul>
<p>Easy, huh ? Let’s calculate the cost: the average time complexity would be n^2/2 which would be O(n^2), since we need check the input list n times with n/2 elements to check every time; and since we are using a new list to save the output, it would be O(n) space.</p>
<p>Can we optimize it ? Yes and no. For time complexity, we can not do any optimization since it is the theory that selection sort is using, we have nothing to do with that. But for space complexity, we can do something.</p>
<p>We can actually do the sort in-place which means we can sort the list within the list and return the same list as the input except it is sorted.</p>
<p>In order to do that, we can change the procedures to:</p>
<ul>
<li><strong>input:</strong> a list of numbers need to be sorted</li>
<li><strong>procedures:</strong><ul>
<li>start from the first element, we loop over the list from it to the end of the list and select the minimum element from the input list and swap it with it(start element);</li>
<li>repeat it until we reach the last element of the input list(now the start element and the end element would all be the last element)</li>
</ul>
</li>
<li><strong>output:</strong> the input list </li>
</ul>
<p>By doing this way, we just need two spaces, one is used to save the index of the minimum element, another is used during the swap to save the one of the value that need to be swapped later. The space complexity would be O(1).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> min = i</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>;j&lt;list.length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[min]&gt;list[j])&#123;</span><br><span class="line">          min = j</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> temp = list[i]</span><br><span class="line">      list[i] = list[min]</span><br><span class="line">      list[min] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Selection Sort is easy but not efficient, since it always costs O(n^2) even your input list is sorted when you pass it in.</p>
<h2 id="Insertion_Sort"><a href="#Insertion_Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p>Now we come to insertion sort which would a little more efficient than selection sort.</p>
<p>The theory is: consider the left part of the input list as sorted, and insert the new element into the proper position, since if one element always means it is sorted, so we always can do that by starting from the second element.</p>
<p>The procedures:</p>
<ul>
<li>start from the second element(if you don’t have second element, you are done);</li>
<li>compare every element in the left(sorted part), if it is greater than your start element, shift it to the right by 1, if it is less than your start element, insert your start element before it;</li>
<li>repeat until the end of the list;</li>
</ul>
<p>Time Complexity: O(n) in the best case(the list is sorted already), O(n^2) in the worst case, on average, it would be similiar to selection sort with O(n^2).</p>
<p>Space Complexity: O(1)</p>
<p>Lets implement it into real code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; list.length;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = list[i]</span><br><span class="line">    <span class="keyword">var</span> j = i</span><br><span class="line">    <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; list[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line">      list[j] = list[j-<span class="number">1</span>]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    list[j] = temp</span><br><span class="line">    <span class="comment">// use shift instead of swap can reduce the cost of writing -- nearly 50%</span></span><br><span class="line">    <span class="comment">// if you use swap, it will slower than selectionSort</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Some people may be used to achieve insertion sort by using the swap too. You can, you just need compare and swap it with previous one until it reaches the right position. But the cost would be high since you will double your writes with swap.</p>
<blockquote>
<p>I actually calculate the time cost in javascript, most of time, if you use swap, your insertion sort would be slower than selection sort.</p>
</blockquote>
<h2 id="Special_Note"><a href="#Special_Note" class="headerlink" title="Special Note"></a>Special Note</h2><p>In general, insertion sort would be faster than selection sort if you implement it in right way. But in some special cases, you may find selection sort is faster.</p>
<p>The different between selection sort and insertion sort:</p>
<ul>
<li>selection sort reads the list a lot(n <em> (n+1) / 2, n is the length of the list) but only writes into the list a few times(= 2 </em> (the length of your list));</li>
<li>insertion sort reads the list a lot too, but fewer than the selection sort(the worst case would be same with selection, best case would be equal to the length of the list), and meantime, it will write into the list much more times than selection sort(nearly the same with reading times);</li>
</ul>
<p>So if it costs much more on reading instead of writing, you may consider choosing selection sort instead of insertion sort.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>That’s all I think you should know about selection sort and insertion sort. Next post I will discuss about bubble sort and merge sort with you. See ya!</p>
]]></content>
    <summary type="html">
    <![CDATA[Sorting Alogorithm is one of the most frequently used algorithms and we have many different kinds of sorting algorithms. In order to understand javascript better and do more practice, I will implement several famous sorting algorithms in JavaScript.]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://taoalpha.me/blog/tags/Algorithm/"/>
    
      <category term="JS" scheme="http://taoalpha.me/blog/tags/JS/"/>
    
      <category term="Sorting" scheme="http://taoalpha.me/blog/tags/Sorting/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Restore your database in Raspberry Pi from kernel panic error]]></title>
    <link href="http://taoalpha.me/blog/2015/10/14/tech-raspberry-pi-kernel-panic-data-restore/"/>
    <id>http://taoalpha.me/blog/2015/10/14/tech-raspberry-pi-kernel-panic-data-restore/</id>
    <published>2015-10-14T13:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>My Raspberry Pi suddenly stopped running(connection lost when I was connecting with my pi through ssh) when I was doing something really normal(like modifying a file…) And then I tried to connect my pi with a screen and it showed the mysterious Kernel Panic error…</p>
<h2 id="Possible_Solutions"><a href="#Possible_Solutions" class="headerlink" title="Possible Solutions"></a>Possible Solutions</h2><h3 id="From_the_community"><a href="#From_the_community" class="headerlink" title="From the community"></a>From the community</h3><p>I did some search on google and found some people already met this problem before. And there was some answers mentioned about using <code>fsck</code> to repaire the boot partition.</p>
<p>You need run the fsck in a linux environment which means you need another linux system and load your Pi system sd-card as an external USB and run the command as follow:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># first you need find the right partition - you can use&#10;# sudo fdisk -l&#10;sudo fsck.ext4 -v /dev/xxx&#10;# replace the xxx with the name of your Pi partition</span><br></pre></td></tr></table></figure>
<p>Unfortunately, this method didn’t work on my situation… ಥ_ಥ</p>
<h3 id="From_the_StackOverFlow"><a href="#From_the_StackOverFlow" class="headerlink" title="From the StackOverFlow"></a>From the StackOverFlow</h3><p>There is a similar method like the one above with more details on <a href="http://raspberrypi.stackexchange.com/questions/4331/kernel-panic-unable-to-mount-root-fs-on-unknown-block-after-restart" target="_blank" rel="external">Kernel panic, unable to mount root fs on unknown-block after restart</a>.</p>
<p>Apparently.. it didn’t work either…</p>
<h3 id="From_you_3F"><a href="#From_you_3F" class="headerlink" title="From you?"></a>From you?</h3><h2 id="Data_Restore"><a href="#Data_Restore" class="headerlink" title="Data Restore"></a>Data Restore</h2><p>Finally I gave up recovering my pi… but I hoped I can get my data back at least since I have near 6~7 million data in my database… And I definitely don’t want to re-crawl them again…</p>
<p>I found it was pretty easy.</p>
<h3 id="Mount_the_Pi_in_your_another_linux_system"><a href="#Mount_the_Pi_in_your_another_linux_system" class="headerlink" title="Mount the Pi in your another linux system"></a>Mount the Pi in your another linux system</h3><p>First, like before, you need another linux system to mount the system partition of your Pi and copy paste your important data.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir any_path_you_want&#10;# this is your mount point&#10;sudo mount /dev/xxx path-to-your-mount-point&#10;# now you can access the files in your old pi system</span><br></pre></td></tr></table></figure>
<h3 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h3><p>Remember to run every command as root since you need the permission to do that.</p>
<p>Normally, you just need to copy paste all data you want to save. If the files are too many and large, you may need to use <code>tar -zcvf tar_ball_name path_to_files_or_folders</code> to compress them.</p>
<h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p>Since I use mysql as my primary database, and mysql always saves all data under <code>/var/lib/mysql</code>, I just need to compress the entire folder and move it to another backup hard drive.</p>
<p>You will find there is a really big file, ibdata1, which saves all your data and indexes… Don’t delete it!!!</p>
<h3 id="Restore_Database"><a href="#Restore_Database" class="headerlink" title="Restore Database"></a>Restore Database</h3><p>After you backup all you need, you can format your sd card now and re-install a system for your pi. After you install the mysql-server, you will find the <code>/var/lib/mysql</code> like before. Now just decompress the tar file you compressed before.</p>
<p>Before you jump into mysql and see whether your data has restored or not, you need change the owner and permission for your ‘new files’ under the mysql folder.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mysql:mysql /var/lib/mysql&#10;sudo find /var/lib/mysql/ -type d -exec chmod 700 &#123;&#125; \;&#10;sudo find /var/lib/mysql/ -type f -exec chmod 660 &#123;&#125; \;&#10;sudo chmod 644 /var/lib/mysql/debian-5.5.flag</span><br></pre></td></tr></table></figure>
<p>All these are to give your current mysql the right permission to all the files.</p>
<p>Now you are all set. Go and enjoy your data back in one piece!</p>
<h3 id="ibdata1"><a href="#ibdata1" class="headerlink" title="ibdata1"></a>ibdata1</h3><blockquote>
<p>The file ibdata1 is the system tablespace for the InnoDB infrastructure.<br>It contains several classes for information vital for InnoDB</p>
<ul>
<li>Table Data Pages</li>
<li>Table Index Pages</li>
<li>Data Dictionary</li>
<li>MVCC Control Data</li>
<li>Undo Space</li>
<li>Rollback Segments</li>
<li>Double Write Buffer (Pages Written in the Background to avoid OS caching)</li>
<li>Insert Buffer (Changes to Secondary Indexes)</li>
</ul>
<p><a href="http://serverfault.com/questions/487159/what-is-the-ibdata1-file-in-my-var-lib-mysql-directory" target="_blank" rel="external">Click to check more details : What is the ibdata1 file in my /var/lib/mysql directory?</a></p>
</blockquote>
<p>There is a wonderful answer on StackOverFlow about reducing the size of ibdata1 : <a href="http://dba.stackexchange.com/questions/8982/what-is-the-best-way-to-reduce-the-size-of-ibdata-in-mysql" target="_blank" rel="external">What is the best way to reduce the size of ibdata in mysql?</a>.</p>
<p>If you have some unicode characters in your database and you find them become “question marks” after you restore your database, don’t panic ^_^. Just change the default character set for your database:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/mysql/my.cnf&#10;[client]&#10;# ...&#10;default-character-set=utf8&#10;&#10;[mysqld]&#10;# ...&#10;character-set-server=utf8&#10;collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[I haven't figured out what's wrong with my Raspberry Pi... But I finally restored all important data in my little Pi and re-created it with a new system.]]>
    
    </summary>
    
      <category term="Database" scheme="http://taoalpha.me/blog/tags/Database/"/>
    
      <category term="Raspberry Pi" scheme="http://taoalpha.me/blog/tags/Raspberry-Pi/"/>
    
      <category term="Restore" scheme="http://taoalpha.me/blog/tags/Restore/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use only JavaScript to send email]]></title>
    <link href="http://taoalpha.me/blog/2015/09/30/tech-use-javascript-to-send-email/"/>
    <id>http://taoalpha.me/blog/2015/09/30/tech-use-javascript-to-send-email/</id>
    <published>2015-09-30T04:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<p>Want to send an email in your static website without any server languages support? Seems impossible. But now you can do that using only JavaScript. Wonderful? I will show you how to do that.</p>
<h2 id="Tools_we_need"><a href="#Tools_we_need" class="headerlink" title="Tools we need"></a>Tools we need</h2><ul>
<li><strong>Mandrill</strong>: they provide the mail service that you can call using javascript;</li>
<li><strong>website</strong>: the website you want to do this;</li>
</ul>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>First, you need sign up for <a href="https://mandrillapp.com/" target="_blank" rel="external">Mandrill</a> to enable the service and get an API key to use. It’s easy, just follow the guide of the website and click the ‘Get API Keys’ when you enter your dashboard.</p>
<h2 id="Main_Function"><a href="#Main_Function" class="headerlink" title="Main Function"></a>Main Function</h2><p>After you created your api key, you can just copy it and use the template list below to create the <code>sendMail</code> function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMail</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    url: <span class="string">"https://mandrillapp.com/api/1.0/messages/send.json"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="string">'key'</span>: <span class="string">'YOUR API KEY'</span>,</span><br><span class="line">      <span class="string">'message'</span>: &#123;</span><br><span class="line">        <span class="string">'from_email'</span>: msg.sender_mail,</span><br><span class="line">        <span class="string">'from_name'</span>: msg.sender_name,</span><br><span class="line">        <span class="string">'to'</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">'email'</span>: msg.receiver_mail,</span><br><span class="line">              <span class="string">'name'</span>: msg.receiver_name,</span><br><span class="line">              <span class="string">'type'</span>: <span class="string">'to'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'autotext'</span>: <span class="string">'true'</span>,</span><br><span class="line">        <span class="string">'subject'</span>: msg.subject,</span><br><span class="line">        <span class="string">'html'</span>: msg.content</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// do what you want to do after the mail was sent</span></span><br><span class="line">   &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">     <span class="comment">// do what you want to do if it fails to send the email</span></span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The template above is using the jQuery as a external library. If you don’t like jQuery(why?!!) or you are using something else, just remember to change the request to fit your library.</p>
<h2 id="DONE"><a href="#DONE" class="headerlink" title="DONE"></a>DONE</h2><p>Yeah. That’s it. Now you can just create a json object to include all information you need and call the function to send the email!</p>
<p>Pretty easy, Ha.</p>
<h2 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h2><p>Since your api key will be exposed to everyone, anyone can just grab and use it to send their emails. And for free users, mandrill will provide 12k free emails every month and has a limitation as 150 per hour. So once you find someone is stealing your quota, disable your api key and change to a new one immediately.</p>
<p>Besides, if you are sure you are only using this service from several ip address. You can set them in the API Key settings. Then it would be much safer.</p>
]]></content>
    <summary type="html">
    <![CDATA[Want to send email in some static website? Now you can. Send an email using only JavaScript.]]>
    
    </summary>
    
      <category term="email" scheme="http://taoalpha.me/blog/tags/email/"/>
    
      <category term="js" scheme="http://taoalpha.me/blog/tags/js/"/>
    
      <category term="mandrill" scheme="http://taoalpha.me/blog/tags/mandrill/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use Django with Bower and Pipeline]]></title>
    <link href="http://taoalpha.me/blog/2015/09/07/tech-django-with-bower-and-pipeline/"/>
    <id>http://taoalpha.me/blog/2015/09/07/tech-django-with-bower-and-pipeline/</id>
    <published>2015-09-07T08:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Since I decided to focus on python and JS, I started to dig into these two babies.</p>
<p>I use django as my web framework in python, so how to build a website easier is what I most concerned. I used yeoman for a while, pretty amazing and convenient, especially the bower and compressor, compiler.</p>
<p>So I did some search and study, trying to integrate the bower and compressor, compiler into django since I am getting used to the yeoman workflow.</p>
<h2 id="How_to_do_that"><a href="#How_to_do_that" class="headerlink" title="How to do that"></a>How to do that</h2><p>Python is great for extensions. It has so many modules you can find and build for it. So in order to integrate the bower and compressor, compiler into django, we need two modules:</p>
<h3 id="django-bower"><a href="#django-bower" class="headerlink" title="django-bower"></a><a href="https://github.com/nvbn/django-bower" target="_blank" rel="external">django-bower</a></h3><p>Just like other modules, you can install django-bower easily through <code>pip</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-bower</span><br></pre></td></tr></table></figure>
<p>After you installed , you need add it into your <code>INSTALLED_APPS</code> in your project settings with the name is ‘djangobower’. And If you don’t want to add the component file path by youself, you can use <code>djangobower.finders.BowerFinder</code> to do that for you. Just add it into your <code>INSTALLED_FINDERS</code>.</p>
<p>You can also set the <code>BOWER_COMPONENTS_ROOT</code> to put all your packages into one place. And if you want, you can set the path to bower manually: <code>BOWER_PATH=path_to_bower</code></p>
<p>So after these, how to use it?</p>
<p>Easy, you can manage your packages in your project settings with <code>BOWER_INSTALLED_APPS=(&#39;jquery&#39;,&#39;bootstrap#4.0.0-alpha&#39;,)</code>, and put all your packages names into it. Just similar to what you did in <code>bower.json</code>.</p>
<p>And for installing all the packages, you just need to run <code>python manage.py bower_install -- --allow-root</code>(you can get rid of the <code>-- --allow-root</code> if you don’t receive the sudo error)</p>
<p>And it will install all the packages you have listed in your settings.</p>
<p>The last step and most important step, you need to collect all your static files into your static folder. Just run:<br><code>python manage.py collectstatic</code>.</p>
<p>Now you can just put<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;&#10;&#123;% load static %&#125;&#10;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p>
<p>in the top of your template files and use</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;&#10;&#123;% static &#39;static_path_to_you_modlue_file&#39; %&#125; &#10;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<p>anywhere you want.</p>
<p>That’s it. Pretty much all about <code>django-bower</code>.</p>
<h3 id="django-pipeline"><a href="#django-pipeline" class="headerlink" title="django-pipeline"></a><a href="https://github.com/cyberdelia/django-pipeline" target="_blank" rel="external">django-pipeline</a></h3><p>Now we got bower, so next step we need to get the compressor and compiler.</p>
<p>I use coffee-script as my pre-processor for JS. It’s easy and super cool!!! Strongly recommended!</p>
<p>Bower is a pretty cool package manager, but it has nothing to do with your own scripts or stylesheets or html files. So in order to compress the files to minimize the size of files and to use coffee-script, sass in django. You can install <code>django-pipeline</code>.</p>
<p>Just like <code>django-bower</code>, you can also install <code>django-pipeline</code> with pip:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pipeline</span><br></pre></td></tr></table></figure>
<p>Same as <code>django-bower</code>, you need put some essentials into your project setting file.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">'pipeline'</span>,</span><br><span class="line">)</span><br><span class="line">STATICFILES_STORAGE = <span class="string">'pipeline.storage.PipelineCachedStorage'</span></span><br><span class="line"><span class="comment"># if you don't want the version files, you can just use `PipelineStorage` instead of `PipelineCachedStorage`</span></span><br><span class="line"></span><br><span class="line">STATICFILES_FINDERS = (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">'django.contrib.staticfiles.finders.FileSystemFinder'</span>,</span><br><span class="line">  <span class="string">'django.contrib.staticfiles.finders.AppDirectoriesFinder'</span>,</span><br><span class="line">  <span class="string">'pipeline.finders.PipelineFinder'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">  <span class="string">'absolute_path_to_your_static_folder'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># this will tell finders to find static files in these folders</span></span><br><span class="line"></span><br><span class="line">STATICFILES_STORAGE = <span class="string">'pipeline.storage.PipelineStorage'</span></span><br><span class="line"></span><br><span class="line">PIPELINE_ENABLED = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># This will enable the compress</span></span><br><span class="line"></span><br><span class="line">PIPELINE_CSS = &#123;</span><br><span class="line">    <span class="string">'group_name'</span>: &#123;</span><br><span class="line">        <span class="string">'source_filenames'</span>: (</span><br><span class="line">          <span class="string">'relative_path_to_your_files'</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'output_filename'</span>: <span class="string">'relative_path_to_your_output_file'</span>,</span><br><span class="line">        <span class="string">'extra_context'</span>: &#123;</span><br><span class="line">            <span class="string">'media'</span>: <span class="string">'screen,projection'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># in source_filenames, the path of your files is relative to your static file dirs, the Finders will look for each folder you set in the STATICFILES_DIRS.</span></span><br><span class="line"><span class="comment"># in output_filename, the path is relative to the STATIC_ROOT you set in your settings.</span></span><br><span class="line"></span><br><span class="line">PIPELINE_JS = &#123;</span><br><span class="line">    <span class="string">'group_name'</span>: &#123;</span><br><span class="line">        <span class="string">'source_filenames'</span>: (</span><br><span class="line">          <span class="string">'relative_path_to_your_files'</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'output_filename'</span>: <span class="string">'relative_path_to_your_output_file'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># same with css</span></span><br><span class="line"></span><br><span class="line">PIPELINE_COMPILERS = (</span><br><span class="line">    <span class="string">'pipeline.compilers.coffee.CoffeeScriptCompiler'</span>,</span><br><span class="line">    <span class="string">'pipeline.compilers.sass.SASSCompiler'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># in order to use these compilers, you need install them first !</span></span><br></pre></td></tr></table></figure>
<p>After finish the configuration, we can use it. In my case, I create a <code>customize</code> folder to store all the customized styles and scripts. So i put this folder into my <code>STATICFILES_DIRS</code> and create a simple group in <code>PIPELINE_CSS</code>.</p>
<p>After that, just run the <code>python manage.py collectstatic</code>. All your file will be copying and moving to your <code>STATIC_ROOT</code>.</p>
<p>Same with <code>django-bower</code>, you can set the path to <code>sass</code> or <code>coffee-script</code> manually if you want (like <code>PIPEPLINE_SASS_BINARY=&#39;&#39;</code>).</p>
<p>In your template, you can either load the file like what you did in <code>django-bower</code>(or default way, precisely), or you can load it using <code>pipeline</code>:</p>
<p>put<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;&#10;&#123;% load pipeline %&#125;&#10;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p>
<p>into the top of your template files, and use </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;&#10;&#123;% stylesheet &#39;group_name&#39;&#125;&#10;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<p> to import the stylesheet, same for javascript with <code>javascript</code> keyword.</p>
<p>All done.</p>
<h2 id="Enjoy_it"><a href="#Enjoy_it" class="headerlink" title="Enjoy it"></a>Enjoy it</h2><p>Now you have bower, coffee-script, sass in your django. Enjoy the modern web coding style!!</p>
<p>Thanks &amp; Best!</p>
]]></content>
    <summary type="html">
    <![CDATA[Integrate bower and coffee-script, sass into django.]]>
    
    </summary>
    
      <category term="django" scheme="http://taoalpha.me/blog/tags/django/"/>
    
      <category term="python" scheme="http://taoalpha.me/blog/tags/python/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 Raspberry Pi 做 NAS 和 采集器]]></title>
    <link href="http://taoalpha.me/blog/2015/08/20/tech-raspberry-pi-as-nas-and-crawlers/"/>
    <id>http://taoalpha.me/blog/2015/08/20/tech-raspberry-pi-as-nas-and-crawlers/</id>
    <published>2015-08-20T10:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5F15_u5B50"><a href="#u5F15_u5B50" class="headerlink" title="引子"></a>引子</h2><p>在之前<br><a href="/blog/2015/07/05/tech-raspberry-pi-setup/">Raspberry Pi Setup</a>一文中介绍了树莓派的初始配置. 这几天乘着还没开学, 就赶紧把树莓派重新跑起来, 虽然悲催的因为网络设定导致我的树莓派无法联网只能强制重刷了… 好在之前在家里就一直用 samba 把重要的脚本都存在了外置盘上, 而已抓取的数据也有早起的备份, 丢失的数据就没办法了..</p>
<p>所以正好相当于重新设定了一遍 NAS 和 diango , 本文做简单介绍, 方便后续查看.</p>
<h2 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h2><p>NAS 全称是: Network-attached Storage. 简单说就是在一个网络组中用来存储数据的地方, 而在这个网路组的所有用户都可以在相应的权限下查看, 编辑.</p>
<p>通常一个低配的 NAS 也要差不多100多刀左右, 当然其读写速度, 性能都是很棒的, 买来即用~ 不过作为穷屌丝一枚, 手头又有几个闲置的移动硬盘和 U 盘. 于是就参考网上的教程用树莓派做个简易的 NAS , 供个人和室友使用还是绰绰有余了~</p>
<h3 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h3><p>想要实现自用的 NAS, 主要依赖的就是 Samba 这个服务了. Samba 是基于 SMB 协议的一个服务. 利用它多平台的特性可以方便的在多平台上进行数据交换. 而自建 NAS 的核心即是: 以树莓派为搭载平台, 将链接其上的闲置硬盘作为共用存储器.</p>
<p>Samba 的安装和配置都很简单:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install samba samba-common-bin&#10;# &#20462;&#25913; /etc/samba/smb.conf &#24320;&#21551;&#23433;&#20840;&#26435;&#38480;, &#21462;&#28040; `security = user`&#30340;&#27880;&#37322;&#21363;&#21487;&#10;# &#36825;&#37324;&#20027;&#35201;&#26159;&#30830;&#20445;samba &#30340;&#29992;&#25143;&#24517;&#39035;&#26159;&#31995;&#32479;&#30340;&#29992;&#25143;&#20043;&#19968;&#10;&#10;# &#28982;&#21518;&#28155;&#21152;&#19979;&#38754;&#20869;&#23481;&#21040; /etc/samba/smb.conf &#20013;&#10;#[public]&#10;#&#27492;&#22788;&#25226;&#20844;&#20849;&#30424;&#30340;&#21517;&#23383;&#35774;&#23450;&#20026;&#20102; public, &#21487;&#20197;&#20462;&#25913;&#10;#  comment = Public Storage&#10;#  &#22791;&#27880;&#21517;&#10;#  path = /nas&#10;#  path &#36873;&#25321;&#33258;&#24049;&#25346;&#36733;&#30828;&#30424;&#30340;&#20301;&#32622;, &#21021;&#22987;&#24212;&#35813;&#26159;/dev/sdan &#36825;&#31181;&#26684;&#24335;&#30340;, &#21487;&#20197;&#36890;&#36807; `mount /dev/sdan /newpath`&#26469;&#20462;&#25913;;&#10;#  valid users = pi nas&#10;#  &#20998;&#37197;&#29992;&#25143;&#26435;&#38480;, &#36825;&#37324;&#32473;&#20104;&#20102; pi &#21644; nas &#20004;&#20010;&#29992;&#25143;&#30340;&#35775;&#38382;&#26435;&#38480;&#10;#  read only = no&#10;#  create mask = 0777&#10;#  public = yes&#10;#  writable = yes&#10;#  directory mask = 0777&#10;#  guest ok = yes&#10;#  browseable = yes</span><br></pre></td></tr></table></figure>
<p>其中, 如果希望每次开机自动挂载硬盘到自定义位置, 可以通过修改<code>/etc/fstab</code>文件来实现:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#22312;&#21407;&#26377;&#22522;&#30784;&#19978;&#28155;&#21152;(&#20462;&#25913; `/sda1` &#20026;&#20320;&#30340;&#30828;&#30424;&#21021;&#22987;&#25346;&#36733;&#20301;&#32622;):&#10;/dev/sda1       /nas            ext4    defaults          0       0</span><br></pre></td></tr></table></figure></p>
<p>在完成设定后, 就需要重启 samba 服务并添加对应用户了. 因为我们开启了<code>security = user</code>, 所以这里需要给 samba 添加系统用户, 比如默认的 pi 用户, 或者 root. 当然你可以通过<code>useradd</code>来给系统创建新用户.</p>
<p>创建用户后, 就可以给 samba 添加用户了.</p>
<p><code>smbpasswd -a username</code> 即可添加用户, <code>smbpasswd -e nas</code> 则启用此用户.</p>
<p>设定好对应用户的 samba 密码后即可通过你的电脑访问你的共享盘了, 你可以通过 connect 到 <code>smb://192.168.x.x</code>(你的 pi 地址), 然后输入对应的用户名密码即可~</p>
<p>PS. 如果你是用的 NTFS 的硬盘, 那么还需要安装<code>ntfs-3g</code>来实现对硬盘的读写功能, 如果你用的是 mac 的盘, 那么还需要安装<code>hfsplus</code>和<code>hfsutils</code>来实现同样的目的~ 上述都可以通过<code>apt-get</code>直接安装.</p>
<p>到此, 你的简易 nas 就算是完成了~ 可以享受喽~</p>
<h2 id="u91C7_u96C6_u5668"><a href="#u91C7_u96C6_u5668" class="headerlink" title="采集器"></a>采集器</h2><p>玩 python, 怎么能不写爬虫呢? 哈哈 因为树莓派低功耗, 全天候运行的特性, 作为爬虫可谓是绝佳的好平台 ^_^</p>
<h3 id="u652F_u6301_u5E93_u5B89_u88C5"><a href="#u652F_u6301_u5E93_u5B89_u88C5" class="headerlink" title="支持库安装"></a>支持库安装</h3><p>首先为了跟随时代潮流, 我选择3.4作为 python 主版本~ 2.7.6作为辅助. 这里可以通过<a href="https://github.com/utahta/pythonbrew" target="_blank" rel="external">Pythonbrew</a>来实现轻松管理 python 版本的目的. (注: pythonbrew 安装3.4的时候要使用3.4.0这种具体到小版本号的名称安装, 不然会找不到 package 的)</p>
<p>3.4已经自带了pip, 所以就可以不用自己安装了~ 接下来利用 pip 来安装支持库.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#10;# &#25105;&#27604;&#36739;&#20064;&#24815;django &#30340;&#26694;&#26550;&#20102;, &#22914;&#26524;&#20320;&#21916;&#27426; flask &#20063;&#21487;&#20197;&#26681;&#25454;&#33258;&#24049;&#30340;&#21916;&#22909;&#35843;&#25972;&#10;pip install beautifulsoup4&#10;# html &#35299;&#26512;&#24211;, &#24403;&#28982;, &#20320;&#20063;&#21487;&#20197;&#21033;&#29992; xpath &#26469;&#30828;&#35299;~&#10;pip install mysqlclient&#10;# &#36825;&#20010;&#26159; MySQLdb&#30340;&#19968;&#20010; fork, &#20294;&#26159;&#25552;&#20379;&#20102; python3&#30340;&#25903;&#25345;, &#29992;&#26469;&#20462;&#22797;&#25903;&#25345; p3 &#19979; django &#20351;&#29992; mysql .&#10;# &#22914;&#26524;&#19978;&#36848;&#25253;mysql &#30340;&#38169;&#35823;&#25110;&#32773;mysql_config not found, &#35831;&#30830;&#20445;&#20320;&#24050;&#32463;&#23433;&#35013;&#20102; mysql &#20197;&#21450; libmysqlclient-dev&#10;pip install pymysql&#10;# &#20064;&#24815;&#29992;&#36825;&#20010;&#20570;&#25235;&#21435;&#25554;&#20837;&#20102;... &#21487;&#20197;&#29992; MySQLdb &#30340;~&#10;pip install git+ssh://git@github.com/Supervisor/supervisor.git&#10;# &#22240;&#20026; supervisor &#22312; pip &#30340;&#29256;&#26412;&#19981;&#25903;&#25345; p3, &#25152;&#20197;&#38656;&#35201;&#33258;&#24049;&#30452;&#25509;&#21033;&#29992; pip &#23433;&#35013; git &#19978;&#30340;&#29256;&#26412;.&#10;# &#38656;&#35201;&#20808;&#28155;&#21152; sshkey &#21040; github &#19978;, &#19981;&#28982;&#26080;&#27861; clone &#30340;~ &#30456;&#20851;&#35831;&#26597;&#30475; github &#23448;&#26041;&#20171;&#32461;.</span><br></pre></td></tr></table></figure>
<p>到此, 基本库就算是差不多全了.</p>
<h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject PROJECT_NAME&#10;# &#21019;&#24314;&#26032;&#39033;&#30446;&#10;django-admin startapp APP_NAME&#10;# &#21019;&#24314;&#26032; app</span><br></pre></td></tr></table></figure>
<p>修改 project 里的 <code>settings.py</code>, 替换 database 的配置(根据你是用的 db 库修改), 添加 APP_NAME 到 INSTALLED_APPS 里.</p>
<h3 id="u91C7_u96C6APP"><a href="#u91C7_u96C6APP" class="headerlink" title="采集APP"></a>采集APP</h3><p>根据自己的情况修改 APP 的 <code>models.py</code> 创建表结构.</p>
<p>同步数据库:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate&#10;# &#21516;&#27493; django &#30340;&#25968;&#25454;&#24211;&#10;python manage.py makemigrations APP_NAME&#10;# APP &#34920;&#32467;&#26500;&#36801;&#31227;&#10;python manage.py sqlmigrate crawlers 000x&#10;# APP SQL &#36801;&#31227;(&#21487;&#20197;&#39044;&#35272;&#19979; SQL). &#36825;&#37324;&#30340;000x &#26159;&#26681;&#25454;&#19978;&#19968;&#27493; makemigrations &#24471;&#21040;&#30340; version &#32534;&#30721;, &#19968;&#33268;&#21363;&#21487;&#10;python manage.py migrate&#10;# &#21516;&#27493;&#25968;&#25454;&#24211;, &#27491;&#24335;&#29983;&#25928;</span><br></pre></td></tr></table></figure>
<p>此外, 记得创建一个 admin user 并且把 admin 的静态文件转移过来~ (需要在 project 的 settings.py 中设定<code>STATIC_ROOT</code>路径)</p>
<p><code>python manage.py createsuperuser</code></p>
<p><code>python manage.py collectstatic</code></p>
<p>通过这个就可以登录 django 的 admin 后台了~</p>
<h3 id="u91C7_u96C6_u811A_u672C"><a href="#u91C7_u96C6_u811A_u672C" class="headerlink" title="采集脚本"></a>采集脚本</h3><p>接下来就是数据库的填充了~ 这里就得根据自己的情况来写爬虫喽~</p>
<h3 id="supervisor__u81EA_u542F_u52A8"><a href="#supervisor__u81EA_u542F_u52A8" class="headerlink" title="supervisor 自启动"></a>supervisor 自启动</h3><p>supervisor 是很好的系统任务管理工具. 利用它可以更方便的管理我们的 django 以及其他的项目, 如果有的话.</p>
<p>上面安装支持库中已经成功的为 python 3 安装了 supervisor, 所以这里我们就可以直接进入到配置环节了:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[supervisord]&#10;[program:pragram_name]&#10;directory=path_to_django_project&#10;command=python manage.py runserver&#10;autorestart=true&#10;autostart=true</span><br></pre></td></tr></table></figure>
<p>DONE! 保存这一配置文件到你的任意目录中, 只要记得启动<code>supervisord</code>的时候利用<code>-c</code>指定到这一配置文件即可.</p>
<h3 id="nginx__u6620_u5C04"><a href="#nginx__u6620_u5C04" class="headerlink" title="nginx 映射"></a>nginx 映射</h3><p>为了让我们能够在局域网的其他机器上直接访问我们的 django, 我们需要把 nginx 映射到我们的 django 去~</p>
<p>最简单的方法就是, 利用<code>proxy_pass http://127.0.0.1:8000;</code>将80端口直接导向我们的 django server 所在.</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span>   <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> localhost;</span><br><span class="line">    <span class="title">access_log</span>  /var/log/nginx/access.log;</span><br><span class="line">    <span class="title">error_log</span> /var/log/nginx/error.log <span class="built_in">debug</span>;</span><br><span class="line">    <span class="title">rewrite_log</span> <span class="built_in">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://127.0.0.1:8000</span>;</span><br><span class="line">        <span class="title">proxy_redirect</span>  <span class="built_in">off</span>;</span><br><span class="line">            <span class="title">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="title">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="title">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">location</span> /static/ &#123;</span><br><span class="line">        <span class="title">root</span> path_to_project;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 如此, 通过 <code>supervisord -c path_to_supervisor_conf</code> 就可以启动你的 django 了~ 稍等片刻, 你就可以通过访问你的树莓派 ip 看到成功搭建的 django 欢迎页面了~</p>
<p>PS. 如果不喜欢手动加载 supervisor 配置, 也可以把配置文件放到 supervisor 的系统配置目录中, 然后就可以通过<code>supervisord  start supervisor_program_name</code>来启动了~</p>
<p>恩, 就到这里了~ 下一步就是在我的树莓派上搭建一个每天任务跟踪的服务了~ 这个还需要好好想想~ ^_^</p>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://docs.djangoproject.com/en/1.8/intro/" target="_blank" rel="external">django Getting started</a></li>
<li><a href="https://github.com/PyMySQL/mysqlclient-python" target="_blank" rel="external">MySQL database connector for Python (with Python 3 support)</a></li>
<li><a href="http://stackoverflow.com/questions/4830856/is-it-possible-to-use-pip-to-install-a-package-from-a-private-github-repository" target="_blank" rel="external">pip install from git repo</a></li>
<li><a href="http://stackoverflow.com/questions/7475223/mysql-config-not-found-when-installing-mysqldb-python-interface" target="_blank" rel="external">mysql_config not found when installing mysqldb python interface</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[本篇为树莓派折腾系列的第二篇, 主要介绍下如何用树莓派制作一个简单的采集器, 也就是自用的网络小爬虫; 另外也顺带介绍下如何把树莓派建立成一个简易的 NAS.]]>
    
    </summary>
    
      <category term="Crawler" scheme="http://taoalpha.me/blog/tags/Crawler/"/>
    
      <category term="NAS" scheme="http://taoalpha.me/blog/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://taoalpha.me/blog/tags/Raspberry-Pi/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[时隔两年，重返校园]]></title>
    <link href="http://taoalpha.me/blog/2015/08/18/back-to-school-after-2-years/"/>
    <id>http://taoalpha.me/blog/2015/08/18/back-to-school-after-2-years/</id>
    <published>2015-08-18T04:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5F15_u5B50"><a href="#u5F15_u5B50" class="headerlink" title="引子"></a>引子</h2><p>随着加州之行的结束, 我阔别两年之久的校园生活正式回归. 换了一个新的园子, 开启一段新的生活, 作为体验性人生的坚定支持者, 我对重返校园的期待自然是获得一份和本科截然不同的经历.</p>
<h2 id="u672C_u79D1"><a href="#u672C_u79D1" class="headerlink" title="本科"></a>本科</h2><p>虽然我荣幸进入国内顶尖的园子里学习, 但我真的只是个学渣. 我讨厌自己的专业, 而身为兴趣唯一驱动力的人, 一旦讨厌, 就绝不可能做好. 我花了两年多时间, 修了很多专业的基础课, 尝试找出自己喜欢的东西. 而很幸运我找到了, 也很不幸出于种种原因我无法转系(成绩啊,时间啊,朋友啊等等), 也担心一旦兴趣变成任务就会失去动力了…</p>
<p>于是, 做了四年的学渣, 我的 GPA 仅仅3出头, 虽然能够推研, 但是最终还是选择了走出园子. 想去看看真实的社会与工作. 父母一度认为这是我不求上进的表现. 于是几次不欢而散的电话后, 我承诺父母: 当我确定自己的目标后, 我会申请自己喜欢的方向, 出国深造. 我不是不求上进, 我只是想在上进的过程中目标更明确些.</p>
<h2 id="u5DE5_u4F5C"><a href="#u5DE5_u4F5C" class="headerlink" title="工作"></a>工作</h2><p>算是实习, 我去过不少家公司, 包括了巨头如 BAT 中的两家, 也有创新工场这种star up的公司, 当然也包含了在巨头阴影下坚强生存的中等公司. 我喜欢大公司的系统化, 职业发展路线明确; 也喜欢创业公司的氛围, 喜欢那种快速学习, 全面发展的感觉.</p>
<p>我确认了自己对于计算机领域的真爱, 也就开始实践自己决定工作时对父母的诺言. 一步步迈过了G, T, 文书, 选校等等关卡. 终于兑现了自己的承诺.</p>
<h2 id="u51FA_u56FD"><a href="#u51FA_u56FD" class="headerlink" title="出国"></a>出国</h2><p>这不是我第一次出国. 在阔别学校的2年里, 我在工作一年后选择了申请新西兰的 working holiday, 开始了我人生第一次, 也很可能是唯一一次的 Gap Year. 我对此行的定位是: 锻炼英语 , 丰富阅历, 精彩人生. 半年后, 我回国办理留学事宜, 我认为, 这三点我都做到了.</p>
<p>7月末, 我第一次踏上了美国. 这个已经在我耳边, 眼前飘过无数次的地方. 作为 IT 人士, 美国更代表着 IT 领域的引领者. 我在加州看到了 facebook, google, oracle, amazon, uber, hp, github, dropbox… 这些我听说或者使用了多年的服务创造者们, 仿佛从电视中走出来的明星一样, 让人激动, 不安.</p>
<p>8月中, 我从 San Diego 飞来 Ithaca. 为即将开始的研究生生活做些准备工作. 带着对未来的美好期待, 开始这完全崭新的一年.</p>
<p>几天前, 传来 Opt 延期取消的消息. 虽然消息目前众说纷纭. 有人乐观, 有人悲观. 不过似乎离我还有些遥远. 如我和朋友所说, 苦逼一年,. 牛逼了, 怎么混都是好的.</p>
<h2 id="u8BA1_u5212"><a href="#u8BA1_u5212" class="headerlink" title="计划"></a>计划</h2><p>不就一年吗. 再说, 我连学霸是什么感觉都不知道, 既然有这么一次重返校园的机会, 自然要珍惜. 当然, 要珍惜的远不只是体验下学霸的感觉.</p>
<p>23年来, 我知道自己是个不擅长制定详细长远目标的人, 对我, 只要有一个大致的奋斗方向在远方即可, 平时更有意义的是短期目标. 所以下面列举了以下我在开学前几天计划要做的事情:</p>
<ul>
<li>启动树莓派;</li>
<li>看完 data structure 和 mit 的 algorithms 课程;</li>
<li>看2本书;</li>
<li>做一个短期目标监督提醒器在树莓派上;</li>
</ul>
<h2 id="u5C3E"><a href="#u5C3E" class="headerlink" title="尾"></a>尾</h2><p>本科的我是迷茫的, 惶恐的, 应付差事的, 混日子的, 不善交际的…</p>
<p>我希望以后回忆研究生的我是目标明确的, 自信的, 热爱并享受生活的… 我期待在这里遇到对的人, 对的时间, 对的地点, 做对的事, 错的事, 做所有想做而合理合法的事情.</p>
]]></content>
    <summary type="html">
    <![CDATA[离开园子两年了, 如今又来到了一个新的园子, 开启了一段新的生活.]]>
    
    </summary>
    
      <category term="随笔" scheme="http://taoalpha.me/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="blog" scheme="http://taoalpha.me/blog/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安全抵达美帝, 激活生活新篇章!]]></title>
    <link href="http://taoalpha.me/blog/2015/07/28/landing-in-usa/"/>
    <id>http://taoalpha.me/blog/2015/07/28/landing-in-usa/</id>
    <published>2015-07-28T04:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7740_u9646"><a href="#u7740_u9646" class="headerlink" title="着陆"></a>着陆</h2><p>在经过了首都倾盆大雨的送行后, 历时近12小时, 我终于成功抵达LA, 非常轻松愉快的通过了入境安检后终于踏上了这个神奇的国度. 2年未见的室友C除了更帅气了几份外倒也没啥变化~ 非常省心的被安顿好后就要开始痛苦的时差调整了… 当然, 手机电话卡以及银行卡自然是首要任务之一, 本文顺带介绍下博主的办卡经历分享给大家~</p>
<h2 id="u5DF2_u5B8C_u6210_u4E8B_u9879_u6E05_u5355"><a href="#u5DF2_u5B8C_u6210_u4E8B_u9879_u6E05_u5355" class="headerlink" title="已完成事项清单"></a>已完成事项清单</h2><h3 id="u7535_u8BDD_u5361"><a href="#u7535_u8BDD_u5361" class="headerlink" title="电话卡"></a>电话卡</h3><p>  博主入的AT&amp;T, 主要原因是朋友的family plan是AT&amp;T的, 直接加入省心省力~</p>
<ul>
<li><p>所需材料</p>
<ul>
<li>family plan holder, 也就是开plan的这个人得在场才能办理;</li>
<li>smartphone一台, 你也可以来了以后选择2-year contract的合约机, 不过貌似目前AT&amp;T的合约机不是很值了, 但感觉还是要便宜一些的, 如果你要买iphone的话;</li>
</ul>
</li>
<li><p>流程</p>
<ul>
<li>前往AT&amp;T门店, 找客服直接一条龙搞定, 可以选号, 也可以选择区号, 因为没有找到ithaca的区号, 我就干脆选用了和C同学一样的919(北卡的区号), 因为美国没有跨州的电话费用, 所以这个其实没啥关系, 再说你也可以在新的地方更换的;</li>
<li>关于2-year contract等类似的合约服务, 也可以在办卡后另行升级的, 具体可去门店咨询;</li>
</ul>
</li>
<li><p>Tips</p>
<ul>
<li>AT&amp;T门店似乎营业时间直到晚9点(至少在San Diego是的), 所以你可以晚上去办的~</li>
</ul>
</li>
</ul>
<h3 id="u94F6_u884C_u5361"><a href="#u94F6_u884C_u5361" class="headerlink" title="银行卡"></a>银行卡</h3><p>  博主用的BOA(Bank of America), 因为Ithaca太偏远.. BOA至少还有几个ATM在其附近…其他的有些连ATM都木有… 比如chase…</p>
<ul>
<li><p>所需材料</p>
<ul>
<li>护照+签证: 用以证明身份以及登记所用;</li>
<li>居住地址: 用以寄送卡片到你所在地址, 只需要一个地址即可, 不需要租赁合同, 像国际留学生等, 通常还会留一个国内地址;</li>
<li>电话+email: 用以登记信息和服务评价;</li>
</ul>
</li>
<li><p>流程</p>
<ul>
<li>前往BOA支行, 说明开卡需求(open account);</li>
<li>提交护照, 地址, 电话等信息;</li>
<li>设定pin码, 账户名称密码, 密保等等;</li>
<li>获得临时卡片;</li>
<li>存入25$以上金额;</li>
</ul>
</li>
<li><p>Tips</p>
<ul>
<li>BOA的卡有12$的月费, 但是如果你符合其三个条件中的任何一个即可免除这一费用: <23岁(悲剧...刚好23...), 账户金额="">1500$(日均-这个不太确定, 开卡的时候那哥们和我说必须要all the time, 哪怕一天小于1500也会在次月收取费用的), 有收入来源(deposit, 但是类似父母转账这种是不算在内的);</23岁(悲剧...刚好23...),></li>
<li>BOA的信用卡是可以直接办理的, 不需要SSN之类的前提条件;</li>
<li>跨行取款收取一定手续费, 境内2.5$,境外5$;</li>
<li>超额支出(你的卡余额为负), 会在次月扣除35$罚款;</li>
</ul>
</li>
</ul>
<h3 id="u65F6_u5DEE_u8C03_u6574"><a href="#u65F6_u5DEE_u8C03_u6574" class="headerlink" title="时差调整"></a>时差调整</h3><p>  恩, 虽然还没完全调整, 不过目前改善态势良好~ 第一天晚上睡了1个小时然后白天睡了大半天.. 昨天晚上就能够睡3小时, 白天也只是眯了一个多小时, 目前精神状态良好, 感觉今晚应该能睡的不错…</p>
<ul>
<li><p>Tips(来自好友)</p>
<ul>
<li>白天要熬着;</li>
<li>吃饭要规律, 按点走;</li>
</ul>
</li>
</ul>
<h2 id="u4EE3_u529E_u4E8B_u9879_u6E05_u5355"><a href="#u4EE3_u529E_u4E8B_u9879_u6E05_u5355" class="headerlink" title="代办事项清单"></a>代办事项清单</h2><h3 id="u6C47_u6B3E"><a href="#u6C47_u6B3E" class="headerlink" title="汇款"></a>汇款</h3><p>  既然办好卡了, 自然下一步就是汇款了, 毕竟除了学费还有房租… 吃喝等一系列花销需要搞定呢… 准备沿用学费方式付款, 直接购汇, 跨境汇款.</p>
<h3 id="u4FE1_u7528_u5361"><a href="#u4FE1_u7528_u5361" class="headerlink" title="信用卡"></a>信用卡</h3><p>  办卡的时候问了下, 发现我不需要SSN即可办信用卡,而且越早办信用卡, 就能越早的进入到美国的信用体系, 所以考虑过两天把信用卡也办了~</p>
<h3 id="u65C5_u884C_u8BA1_u5212_u786E_u5B9A"><a href="#u65C5_u884C_u8BA1_u5212_u786E_u5B9A" class="headerlink" title="旅行计划确定"></a>旅行计划确定</h3><p>  目前的计划是1号飞SF, 去Stanford呆几天, 顺带期间逛逛palo alto, mountain view等地儿; 然后大概4号5号去三番, 和另外几个朋友吃个饭, 打个屁, 呆一两天就走, 6号或者7号准备坐Starlight去西雅图看看然后再坐车/飞机直接回san diego, 然后16号直接飞Ithaca, 开启学习模式…</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>我非常幸运比我的室友, 同学晚了2年来美帝读书, 这样就让我省了很多事情 ^_^ 当然, 也确实麻烦了他们~ 恩! 以后来Ithaca做客, 一条龙服务, 带你装X带你飞~</p>
]]></content>
    <summary type="html">
    <![CDATA[经历接近12小时的飞行, 终于成功落地LA, 2年未见的室友非常nice的安排了我的衣食住行, 成为我临时的衣食父母!!]]>
    
    </summary>
    
      <category term="study abroad" scheme="http://taoalpha.me/blog/tags/study-abroad/"/>
    
      <category term="travel notes" scheme="http://taoalpha.me/blog/tags/travel-notes/"/>
    
      <category term="blog" scheme="http://taoalpha.me/blog/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 闭包(Closure)初探]]></title>
    <link href="http://taoalpha.me/blog/2015/07/12/tech-javascript-closure/"/>
    <id>http://taoalpha.me/blog/2015/07/12/tech-javascript-closure/</id>
    <published>2015-07-12T07:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h2><p> 在上篇重载的介绍中提到了Closure的概念, 正好今天看到Ninja中介绍Closure的这部分, 所以今天梳理记录下. Closure作为JS的高级用法之一, 对于JS开发而言有着极为重要的作用.</p>
<h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><h3 id="Closure_u7684_u7ED3_u6784"><a href="#Closure_u7684_u7ED3_u6784" class="headerlink" title="Closure的结构"></a>Closure的结构</h3><p>什么是Closure? 更精确的说: 什么是JavaScript里面的Closure? </p>
<blockquote>
<p>a closure is the scope created when a function is declared that allows the function to access and manipulate variables that are external to that function. </p>
</blockquote>
<p>上面是Ninja一书中对Closure的定义. 难懂吗? 应该不算难懂, 核心关键词就是: scope, function, access, manipulate, variables, external</p>
<p>即一个Closure代指的是一个scope, 一个js的小型工作环境, 这一环境是随着一个函数的声明而出现的. 但是所有函数都会伴随着closure吗? 当然不是, 对于这种函数有特定的要求, 就是这个函数本身可以访问并且修改该函数外部的变量. 只有具备此性质的函数才伴随着Closure的出现.</p>
<p>还是很难懂? 举几个例子:</p>
<ul>
<li><p><strong>在浏览其中, 我们定义的一个单纯的全局函数, 会伴随closure的出现吗?</strong></p>
<p> 答案是肯定的, 根据上述定义, 我们的全局函数是可以获取并操作其之外的变量的, 通常我们称为全局变量(定义在window对象中的变量);</p>
</li>
<li><p><strong>那有啥函数不伴随Closure出现吗?</strong></p>
<p> 有, 我们可以认为window顶层是一个函数, 这个函数本身就没有外部的函数了, 自然也就没有Closure了.</p>
</li>
<li><p><strong>如此一来, Closure岂不是随处可见? 那还有什么意义?</strong></p>
<p> Closure确实随处可见. 但也正因为随处可见, 我们就会在clsore发现closure的嵌套, 我们可以在全局closure下, 定义我们自己的closure, 而利用closure的性质形成一个个小型的scope, 如此就可以构建并指定甚至操作我们的函数执行环境, 从而实现很多非常了不起的功能了.</p>
</li>
</ul>
<h3 id="u5982_u4F55_u7406_u89E3Closure"><a href="#u5982_u4F55_u7406_u89E3Closure" class="headerlink" title="如何理解Closure"></a>如何理解Closure</h3><ul>
<li>Closure 相当于一个保护罩, 其会在closure声明的那一刻为当前的scope(即此刻scope下所有的变量, 函数等, 即便他们是在closure之后声明或者是closure接受的参数)创建一个特殊的环境而不会收到垃圾回收的回收, 其存活周期完全依赖于closure自身的寿命;</li>
<li>在浏览器环境下, 即便是全局定义的函数其实也是在一个大的closure之中的, window则是这个closure中的核心对象;</li>
</ul>
<h3 id="Closure_u7684_u7528_u6CD5"><a href="#Closure_u7684_u7528_u6CD5" class="headerlink" title="Closure的用法"></a>Closure的用法</h3><ul>
<li>Closure 通常的用法:<ul>
<li>封装私有变量: 一个函数内部定义的变量, 只有内部才能访问, 所以一个函数内部的函数(closure)就可以访问这个函数定义的局部变量;</li>
<li>callback和timer函数中的应用: 对于嵌套在函数中的callback以及timers函数, 都可以访问函数内部定义的变量的, 虽然他们的context(this)通常都指向的是window全局对象或者某个特殊对象(比如jQuery.ajax的callback的this就是ajax构成的对象); 同时利用这一特点将变量定义在函数内来避免污染全局变量;</li>
<li>改变函数工作环境(context), 在一定程度上它和<code>apply</code>,<code>call</code>的逻辑一致, 典型应用即Prototypt库中的bind函数(JS1.8.5以后就默认添加了bind函数), 详见下文;</li>
<li>部分传参: 和上述中介绍的bind同理, 区别在于对参数的处理上, 部分传参的时候, 第一次传参可以传递部分参数, 希望之后补充的参数可以预置为undefined, 而在返回函数中, 也不是单纯的合并两次参数, 而是递归之前的传参, 将undefined的参数补上;</li>
<li>重写函数: 利用closure可以对一些函数进行新的重写, 比如下例中的<code>memoize</code>函数;</li>
<li>结合匿名自触发函数: Closure和<code>(function(){})()</code>的结合自然可以带来更多的想象力;</li>
</ul>
</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> -&gt;</span><br><span class="line"> c = <span class="number">1</span></span><br><span class="line"> $.ajax </span><br><span class="line">    <span class="attribute">url</span>: <span class="string">"http://taoalpha.me/blog/api/latest.json"</span></span><br><span class="line">    <span class="attribute">dataType</span>:<span class="string">'json'</span></span><br><span class="line"> .done (data)-&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(c)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> -&gt;</span><br><span class="line">  cc = <span class="number">1</span></span><br><span class="line">  timer = setInterval -&gt;</span><br><span class="line">    <span class="keyword">if</span> cc &lt; <span class="number">3</span> <span class="keyword">then</span> <span class="built_in">console</span>.log(<span class="string">"cc<span class="subst">#&#123;cc&#125;</span>"</span>);<span class="built_in">console</span>.log(<span class="string">"this<span class="subst">#&#123;@&#125;</span>"</span>);cc++ <span class="keyword">else</span> clearInterval timer</span><br><span class="line">  ,<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">Function</span>::bind -&gt;</span><br><span class="line">  <span class="comment"># console.log arguments</span></span><br><span class="line">  fn = @; args = <span class="attribute">Array</span>::slice.call(arguments);object = args.shift()</span><br><span class="line">  <span class="comment"># 此处将传入参数拆解, 默认第一个为要绑定的对象</span></span><br><span class="line">  -&gt;</span><br><span class="line">    <span class="comment"># console.log arguments</span></span><br><span class="line">    fn.apply object,args.concat Array.prototype.slice.call(arguments)</span><br><span class="line">    <span class="comment"># 这里返回一个新的函数, 新函数唯一的功能调用绑定函数(fn), 并传入绑定中除了object以外的参数(args)和调用传入的参数(这次的arguments)</span></span><br><span class="line">    <span class="comment"># 部分传参中这里需要做参数处理:</span></span><br><span class="line">    <span class="comment"># arg = 0</span></span><br><span class="line">    <span class="comment"># for i in [0..args.length] when arg &lt; arguments.length</span></span><br><span class="line">    <span class="comment">#   if args[i] == undefined</span></span><br><span class="line">    <span class="comment">#     args[i] = arguments[arg++]</span></span><br><span class="line">    <span class="comment"># fn.apply @, args</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用Closure包装缓存函数 memoized </span></span><br><span class="line"><span class="attribute">Function</span>::memoized = <span class="function"><span class="params">(key)</span> -&gt;</span></span><br><span class="line">  <span class="property">@_values</span> = <span class="property">@_values</span> || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="property">@_values</span>[key]? <span class="keyword">then</span> <span class="property">@_values</span>[key] <span class="keyword">else</span> <span class="property">@_values</span>[key] = @.apply(@,arguments)</span><br><span class="line"></span><br><span class="line"><span class="attribute">Function</span>::memoize = <span class="function">-&gt;</span></span><br><span class="line">  fn = @</span><br><span class="line">  -&gt;</span><br><span class="line">    fn.memoized.apply fn,arguments</span><br><span class="line"><span class="function"></span><br><span class="line"><span class="title">isPrime</span> = (<span class="params">(key)</span>-&gt;</span></span><br><span class="line">  prime = num != <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2.</span>..num] <span class="keyword">when</span> num % i ==<span class="number">0</span></span><br><span class="line">    prime = <span class="literal">false</span> </span><br><span class="line">  ).memoize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用自触发函数和closure来处理closure中的递归指数</span></span><br><span class="line"></span><br><span class="line">divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.</span>..divs.length]</span><br><span class="line">  divs[i].addEventListener <span class="string">'click'</span>,<span class="function">-&gt;</span></span><br><span class="line">    alert <span class="string">"divs #<span class="subst">#&#123;i&#125;</span> was clicked"</span></span><br><span class="line">  ,fasle</span><br><span class="line"><span class="comment">## 如此执行的结果就是无路你点击哪个div, 都会显示的是 "divs #&#123;divs.length&#125; was clicked",因为这里的i被保存了, 始终指向最后一个循环值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.</span>..divs.length]</span><br><span class="line">  (<span class="function"><span class="params">(n)</span>-&gt;</span></span><br><span class="line">    divs[i].addEventListener <span class="string">'click'</span>,<span class="function">-&gt;</span></span><br><span class="line">      alert <span class="string">"divs #<span class="subst">#&#123;i&#125;</span> was clicked"</span></span><br><span class="line">    ,fasle</span><br><span class="line">  )(i)</span><br><span class="line"></span><br><span class="line">通过closure, 我们把每次传入的i都单独用另一个私有变量n存储起来, 这样每个div对应的指数就是唯一的了</span><br></pre></td></tr></table></figure>
<h2 id="u8C1C_u9898"><a href="#u8C1C_u9898" class="headerlink" title="谜题"></a>谜题</h2><ul>
<li><strong>Q:</strong> 那么bind和call,apply的区别又是什么呢? 与其使用<code>fn.bind(object)</code>, 为什么我不是用<code>fn.apply(object)</code>或者<code>fn.call(object)</code>呢?</li>
</ul>
<p><strong>A:</strong> </p>
<blockquote>
<ul>
<li>bind returns a function which will act like the original function but with this predefined. It is usually used when you want to pass a function to an event handler or other async callback.</li>
<li>call and apply will call a function immediately letting you specify both the value of this and any arguments the function will receive.</li>
<li>bind和apply,call最大的区别就在于bind返回一个函数, 而apply, call则是执行一个函数. 所以bind通常用在一些异步事件处理中;</li>
</ul>
</blockquote>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://book.douban.com/subject/3176860/" target="_blank" rel="external">Secrets of the JavaScript Ninja</a></li>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript - 在线调试</a></li>
<li><a href="http://stackoverflow.com/questions/15677738/whats-the-difference-between-call-apply-and-bind" target="_blank" rel="external">what’s the difference between ‘call/apply’ and ‘bind’</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在上篇重载的介绍中提到了Closure的概念, 正好今天看到Ninja中介绍Closure的这部分, 所以今天梳理记录下.]]>
    
    </summary>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 重载函数实现探究]]></title>
    <link href="http://taoalpha.me/blog/2015/07/11/tech-javascript-overload/"/>
    <id>http://taoalpha.me/blog/2015/07/11/tech-javascript-overload/</id>
    <published>2015-07-11T04:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h2><p>今天看<a href="http://book.douban.com/subject/3176860/" title="Secrets of the JavaScript Ninja" target="_blank" rel="external">Secrets of the JavaScript Ninja</a>看到js中如何实现重载函数的部分, 然后对着一个只有7,8行代码的函数范例研究了2个多小时… 掩面羞愧难当ing… 为了让记忆更加深刻些, 特意记录下心得以防止以后再次跌在同一个坑里…</p>
<h2 id="JS_u7684_u91CD_u8F7D"><a href="#JS_u7684_u91CD_u8F7D" class="headerlink" title="JS的重载"></a>JS的重载</h2><h3 id="u91CD_u8F7D_u51FD_u6570"><a href="#u91CD_u8F7D_u51FD_u6570" class="headerlink" title="重载函数"></a>重载函数</h3><p>重载函数的概念在很多OOP(面向对象的编程), 尤其是C系的语言中是很基本的, 其允许在同一范围中声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同，从而实现同一个函数可以执行不同的逻辑.</p>
<p>但是, javascript中是不存在重载函数这个概念的, 不过其松散的函数(比如参数传递的数量和类型等限制), 变量尤其是其变量类型的自动判断的特点都让我们通常选择在函数的主体逻辑上实现根据参数的不同而执行不同的逻辑. 但是js中能模拟出真正的重载函数吗?</p>
<p>答案是肯定的, 而且很简单, 真的很简答…</p>
<h3 id="JS_u4E2D_u7684_u5B9E_u73B0_u65B9_u6CD5"><a href="#JS_u4E2D_u7684_u5B9E_u73B0_u65B9_u6CD5" class="headerlink" title="JS中的实现方法"></a>JS中的实现方法</h3><p>首先我们来看源码:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addMethod</span> = <span class="params">(object, name, fn)</span> -&gt;</span></span><br><span class="line">  old = object[name]</span><br><span class="line">  object[name] = <span class="function">-&gt;</span></span><br><span class="line">    <span class="comment"># console.log fn  # 通过调用fn来了解其每一步的逻辑</span></span><br><span class="line">    <span class="keyword">if</span> fn.length == arguments.length</span><br><span class="line">      fn.apply(@, arguments)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">typeof</span> old == <span class="string">'function'</span></span><br><span class="line">      old.apply(@, arguments)</span><br><span class="line"></span><br><span class="line">example =</span><br><span class="line">  values : [<span class="string">"Dean Edwards"</span>, <span class="string">"Sam Stephenson"</span>, <span class="string">"Alex Russell"</span>]</span><br><span class="line"></span><br><span class="line">addMethod example, <span class="string">"find"</span>, <span class="function">-&gt;</span></span><br><span class="line">    <span class="property">@values</span></span><br><span class="line"></span><br><span class="line">addMethod example, <span class="string">"find"</span>, <span class="function"><span class="params">(name)</span> -&gt;</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.</span>.<span class="property">@values</span>.length-<span class="number">1</span>]</span><br><span class="line">      ret.push(<span class="property">@values</span>[i]) <span class="keyword">if</span> <span class="property">@values</span>[i].indexOf(name) == <span class="number">0</span></span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">addMethod example, <span class="string">"find"</span>,<span class="function"><span class="params">(first, last)</span> -&gt;</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.</span>.<span class="property">@values</span>.length-<span class="number">1</span>]</span><br><span class="line">      ret.push(<span class="property">@values</span>[i]) <span class="keyword">if</span> <span class="property">@values</span>[i] == first + <span class="string">" "</span> + last</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log example.find()</span><br><span class="line"><span class="comment"># ["Dean Edwards", "Sam Stephenson", "Alex Russell"]</span></span><br><span class="line"><span class="built_in">console</span>.log example.find(<span class="string">"Sam"</span>)</span><br><span class="line"><span class="comment"># ["Sam Stephenson"]</span></span><br><span class="line"><span class="built_in">console</span>.log example.find(<span class="string">"Alex"</span>,<span class="string">"Russell"</span>)</span><br><span class="line"><span class="comment"># ["Alex Russell"]</span></span><br></pre></td></tr></table></figure>
<p>可以看到我们通过<code>addMethod</code>给example连续三次添加了一个<code>find</code>函数, 三个函数之间首要区别就是接受参数的个数不同. 而通过后面的调用发现, 我们成功的实现了不同个数传参对不同<code>find</code>的调用.</p>
<p>下面具体来探讨下, 这是如何实现的:</p>
<ul>
<li><p><strong>首先是添加部分:</strong> </p>
<ul>
<li>三次添加的<code>find</code>所指向的函数逻辑是相同的, 区别在于其<code>old</code>的指向是不同的, 第一次添加时没有<code>old</code>, <code>old</code>是undefined, 而第二次添加的时候<code>old</code>是指向第一次添加时的<code>find</code>的, 而第三次添加的时候<code>old</code>是指向第二次的<code>find</code>的;</li>
<li>需要注意的是, 因为<code>old</code>的存在, <code>fn</code>这个变量在<code>addMethod</code>域内和<code>old</code>域内都是一直存在的(这里包含了一个闭包的实现 Closure):<ul>
<li>在<code>addMethod</code>域内因为每次其都会被调用更新, 所以三次添加后, 其指向的就是最后添加的那个函数, 本例中即两个参数的find;</li>
<li>在<code>old</code>域内, 则会指向前一次的find, 本例中第三次添加的<code>old</code>的fn指向的就是第二次添加时<code>addMethod</code>传入的find函数, 即一个参数的;</li>
</ul>
</li>
<li>此外, 要记得<code>arguments.length</code>是我们传入的参数个数, <code>fn.length</code>则代表函数接受的参数个数;</li>
</ul>
</li>
<li><p><strong>下面我们看下三次执行:</strong></p>
<ul>
<li><code>example.find()</code>:  毫无悬念, 因为此时<code>fn.length</code>为2(<code>first</code>,<code>last</code>), 但是我们调用传入的<code>arguments</code>长度为0, 所以需要调用<code>old</code>, 即第二次添加的find函数, 此时<code>fn</code>也顺势切换到一个参数的函数, 但还是和<code>arguments.length</code>不同, 所以需要再次调用当前的<code>old</code>, 此时<code>old</code>指向的是第一次执行的<code>addMethod</code>, <code>fn</code>变为0参数,和<code>arguments.length</code>相同了, 我们就可以执行此时的<code>fn</code>了, 即返回example中的全部values的函数;</li>
<li><code>example.find(&quot;Sam&quot;)</code>:  同上, 我们还是需要从<code>fn.length</code>为2的情况开始, 上溯到前一次, <code>fn.length</code>为1时, 符合条件, 执行此时的<code>fn</code>, 即根据<code>name</code>查询;</li>
<li><code>example.find(&quot;Alex&quot;,&quot;Russell&quot;)</code>:  同理, 不过这一次就不用上溯了, 直接可以执行<code>fn</code>了;</li>
</ul>
</li>
</ul>
<p>通过在<code>addMethod</code>的赋值函数中加入<code>console.log</code>输出<code>fn</code>, 你会把这一过程理解的更为清晰.</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>随着对JS的逐步深入, 越发觉得JS是一个很了不起的语言, 其兼容了Function Programming和OOP. 对开发者有一种极强的普适性, 可以很简单的写函数调用, 也可以实现很复杂的功能. 了不起!</p>
<p>为了缩短文章的长度, 我选择coffeescript来展示源码(可以省掉很多空间), 其实coffeescript真的很简单, 记住几个基本的规则, 理解起来很容易, 逻辑都还是js的逻辑. 有兴趣的可以查看我之前写的 <a href="/blog/2015/06/28/book-coffeescript-programming-with-jquery-rails-and-nodejs/">CoffeeScript Programming with jQuery, Rails and Nodejs读书笔记</a></p>
<h2 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://book.douban.com/subject/3176860/" title="Secrets of the JavaScript Ninja" target="_blank" rel="external">Secrets of the JavaScript Ninja</a></li>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript - 在线调试</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[今天花了2个多小时研究一个只有8行的js重载函数代码... 记录下心得... 省的下次忘了...]]>
    
    </summary>
    
      <category term="javascript" scheme="http://taoalpha.me/blog/tags/javascript/"/>
    
      <category term="overload" scheme="http://taoalpha.me/blog/tags/overload/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Swiftype as my default internal search engine]]></title>
    <link href="http://taoalpha.me/blog/2015/07/09/tech-change-internal-search-to-swiftype/"/>
    <id>http://taoalpha.me/blog/2015/07/09/tech-change-internal-search-to-swiftype/</id>
    <published>2015-07-09T13:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Since I imported some old articles from my old blog, <a href="/blog/2015/06/21/tech-add-internal-search-to-jekyll-blog/">the internal search I built using javascript and json datas</a> last time got slower and slower. So I decided to add a third-part search engine for my blog. Like I recommended in my <a href="/blog/2015/06/21/tech-add-internal-search-to-jekyll-blog/">last post</a>, <a href="https://swiftype.com" target="_blank" rel="external">swiftype</a> is a really nice choice.</p>
<h2 id="How_to_add_swiftype_in_your_blog"><a href="#How_to_add_swiftype_in_your_blog" class="headerlink" title="How to add swiftype in your blog"></a>How to add swiftype in your blog</h2><h3 id="Before_Sign_Up"><a href="#Before_Sign_Up" class="headerlink" title="Before Sign Up"></a>Before Sign Up</h3><p>Before you open the <a href="https://swiftype.com" target="_blank" rel="external">swiftype website</a> and sign up, you should do some work to check whether your website is friendly to search engine.</p>
<h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h4><p>If you have some subdirectories or subdomains you don’t want to be crawled by some search engines, you need to set the rules in robots.txt.</p>
<p>As an example, I want to hide all my <code>api/</code> pages to all search engines, I can add this line into my robots.txt:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *&#10;Disallow: /api/</span><br></pre></td></tr></table></figure>
<p>You can just put the robots.txt in the root directory of your domain and it will work.</p>
<h4 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h4><blockquote>
<p>A site map (or sitemap) is a list of pages of a web site accessible to crawlers or users. It can be either a document in any form used as a planning tool for Web design, or a Web page that lists the pages on a Web site, typically organized in hierarchical fashion. – from wikipedia</p>
</blockquote>
<p>So if you have a sitemap, it can help search engines like google crawl your site better.</p>
<p>You can just put the sitemap.xml in your root directory with robots.txt, or you can specify it in your robots.txt using this one line code: <code>Sitemap: http://taoalpha.me/blog/sitemap.xml</code>.</p>
<p>You can have multiple sitemap.xml files, of course.</p>
<p>Don’t know how to create a sitemap.xml ? <a href="https://www.xml-sitemaps.com" target="_blank" rel="external">Check this!</a></p>
<h3 id="Sign_Up_and_Build_your_engine"><a href="#Sign_Up_and_Build_your_engine" class="headerlink" title="Sign Up and Build your engine"></a>Sign Up and Build your engine</h3><p>After you finished optimizing your site for search engines. Now you can sign up on the <a href="https://swiftype.com" target="_blank" rel="external">swiftype website</a> and build your engine.</p>
<p>The free plan of swiftype has some limits for using:</p>
<ul>
<li>Total Documents    500</li>
<li>Monthly Queries    1,000</li>
</ul>
<p>So if your blog is really big and you have a lot of users using your search, you may need to change to a pro plan~</p>
<p>Just find a nice plan for yourself on the swiftype.</p>
<h3 id="Add_your_domain_and_rules"><a href="#Add_your_domain_and_rules" class="headerlink" title="Add your domain and rules"></a>Add your domain and rules</h3><p>After you build your search engine. Now you can add your domain into your engine. Or if you start with the tutorial on the homepage of swiftype, maybe you have already done this.</p>
<p>You can go to <code>your dashboard -&gt; manage -&gt; domain</code> to check the domain you have added into your engine. And also you can set the rules for you domain.</p>
<h4 id="WHITELIST_RULES"><a href="#WHITELIST_RULES" class="headerlink" title="WHITELIST RULES"></a>WHITELIST RULES</h4><p>Only pages matching these rules will be included in your index.</p>
<h4 id="BLACKLIST_RULES"><a href="#BLACKLIST_RULES" class="headerlink" title="BLACKLIST RULES"></a>BLACKLIST RULES</h4><p>All Pages matching any of these rules will be excluded. So like my blog, I want to remove all the tag pages and category pages from my index in order to empty the room for the real post page. I can just add <code>/blog/tag/</code>,<code>/blog/user/</code>,<code>/blog/page</code> into my BLACKLIST rules.</p>
<h3 id="Install_the_Search_into_your_site"><a href="#Install_the_Search_into_your_site" class="headerlink" title="Install the Search into your site"></a>Install the Search into your site</h3><p>Swiftype has a real good instruction to help you install the search into your website. You can just follow the integrate instruction step by step and customize the color and style of your result-page.</p>
<p>After all settings, you will get a javascript code and you just need to add this code into all the page you want  your search box to be viewed by your users.</p>
<p>And according to your settings for the input field for searching, you will need do a little work to add the input into your website with the default class.</p>
<p>Just remember to activate the search after that.</p>
<h3 id="After_installed"><a href="#After_installed" class="headerlink" title="After installed"></a>After installed</h3><h4 id="Manage_your_content"><a href="#Manage_your_content" class="headerlink" title="Manage your content"></a>Manage your content</h4><p>Besides domains and the rules, you can also view the details of the pages crawled by the swiftype in <code>your dashboard -&gt; manage -&gt; content</code>.</p>
<p>Here list all the pages included in your search engine, and even better, it will also record some click-data and referring-suggest-data to help you optimize your posts.</p>
<h4 id="Customize_the_engine"><a href="#Customize_the_engine" class="headerlink" title="Customize the engine"></a>Customize the engine</h4><p>Besides all the normal functions, you can also customize your swiftype engine, like re-order the search results customize your relevance algorithm, define your Synonym list…etc.</p>
<p>Of course, it has some limits for free plan.</p>
<h4 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h4><p>Swiftype will record some information related to the search part, like top queries,top auto-completions, top searches with no result…etc</p>
<h2 id="Tips_3A"><a href="#Tips_3A" class="headerlink" title="Tips:"></a>Tips:</h2><ul>
<li>Be patient. You need to wait a while before any pages included in your engine;</li>
<li>Remember to activate your engine. If you have added the js code and input field into your website, and still can not use the engine, maybe that’s because you forget to activate your engine;</li>
<li>Customize. If you want the search box fit into your content more naturally , you should customize the style for it;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Show you how to add the swiftype search engine into your website.]]>
    
    </summary>
    
      <category term="swiftype" scheme="http://taoalpha.me/blog/tags/swiftype/"/>
    
      <category term="内置搜索" scheme="http://taoalpha.me/blog/tags/%E5%86%85%E7%BD%AE%E6%90%9C%E7%B4%A2/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给你的 Jekyll 博客添加日志汇总展示页面]]></title>
    <link href="http://taoalpha.me/blog/2015/07/09/tech-add-goaccess-like-log-page-for-your-jekyll/"/>
    <id>http://taoalpha.me/blog/2015/07/09/tech-add-goaccess-like-log-page-for-your-jekyll/</id>
    <published>2015-07-09T07:00:00.000Z</published>
    <updated>2015-12-26T08:21:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7B80_u4ECB"><a href="#u7B80_u4ECB" class="headerlink" title="简介"></a>简介</h2><p><a href="http://goaccess.io" target="_blank" rel="external">Goaccess</a> 是一个非常简单而有齐全的日志分析工具, 其<a href="http://goaccess.io/goaccess_html_report.html?201507052200" target="_blank" rel="external">生成的html页面</a>非常精细全面, 可以让你更好的查看日志, 今天就利用上次获取PV的方法来介绍下如何给 Jekyll 添加一个类似goaccess的日志页面.</p>
<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><p>如果你了解<a href="https://github.com/googleanalytics/google-analytics-super-proxy" target="_blank" rel="external"> google-analytics-super-proxy </a> 或者你看过我之前写的 <a href="/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/">如何给jekyll博文添加阅读数</a>, 那么你就可以进行下面的准备工作了, 如果没有的话, 请先阅读相关内容后再继续 ^_^</p>
<ul>
<li>在<a href="https://ga-dev-tools.appspot.com/query-explorer" target="_blank" rel="external">GA Query Explorer</a>中测试构建你需要的Query API, 比如我根据Goaccess的日志内容和GA本身的统计情况选取了: <code>ga:fullReferrer</code>,<code>ga:browser</code>,<code>ga:operatingSystem</code>,<code>ga:country</code>,<code>ga:pagePath</code>作为我的dimensions, 然后将<code>ga:pageviews</code>和<code>ga:uniquePageviews</code>作为我的metrics, 而且因为之前测试没有关闭ga, 所以存在一些干扰数据, 可以通过filters中设置<code>ga:hostname!~127*</code>来过滤掉;</li>
<li>在我们建立好的GAE上添加一个新的Query, 并设定其更新频率;</li>
</ul>
<h2 id="u89E3_u6790_u548C_u5C55_u793A"><a href="#u89E3_u6790_u548C_u5C55_u793A" class="headerlink" title="解析和展示"></a>解析和展示</h2><h3 id="u83B7_u53D6json"><a href="#u83B7_u53D6json" class="headerlink" title="获取json"></a>获取json</h3><p>这一步和 <a href="/blog/2015/06/07/tech-add-google-analytics-pageviews-to-jekyll-blog/">如何给jekyll博文添加阅读数</a>基本一样, 区别的就在于我们这次不是直接处理<code>responseData.rows</code>了, 我们直接把<code>responseData</code>传给解析函数, 因为我们需要除了rows以外的一些属性.</p>
<h3 id="u89E3_u6790_u5C55_u793A"><a href="#u89E3_u6790_u5C55_u793A" class="headerlink" title="解析展示"></a>解析展示</h3><p>主要的目的是模拟Goaccess的形式展示访客在浏览器, refer, 国家, 系统以及访问页面几个纬度的分布情况; 主要思路就是通过解析返回的数据, 然后根据各个纬度的属性将对应的pv,uv加以统计后展示出来即可.</p>
<p>js解析部分的代码如下(展示部分我主要参照了goaccess自身的样式设计, 这里就直接略过了~ 有兴趣的可以<a href="!--￼3--&gt;/galog/">点此查看效果</a>):</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="property">@parseGALog</span> = <span class="function"><span class="params">(data)</span> -&gt;</span></span><br><span class="line">  overalldata = &#123;&#125;</span><br><span class="line">  overalldata.tpv = data[<span class="string">"totalsForAllResults"</span>][<span class="string">"ga:pageviews"</span>]</span><br><span class="line">  overalldata.tuv = data[<span class="string">"totalsForAllResults"</span>][<span class="string">"ga:uniquePageviews"</span>]</span><br><span class="line">  overalldata.datasize = parseFloat(JSON.stringify(data).length/<span class="number">16</span>/<span class="number">1024</span>).toFixed(<span class="number">2</span>)</span><br><span class="line">  overalldata.referer = []</span><br><span class="line">  overalldata[<span class="string">'404'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  requestdata = &#123;&#125;</span><br><span class="line">  refererdata = &#123;&#125;</span><br><span class="line">  osdata = &#123;&#125;</span><br><span class="line">  browserdata = &#123;&#125;</span><br><span class="line">  countrydata = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  temp_data = data.rows</span><br><span class="line">  $.each temp_data,<span class="function"><span class="params">(k,v)</span> -&gt;</span></span><br><span class="line">    overalldata.referer.push(v[<span class="number">0</span>]) <span class="keyword">if</span> v[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> overalldata.referer</span><br><span class="line">    overalldata[<span class="string">'404'</span>] += parseInt(v[<span class="number">7</span>]) <span class="keyword">if</span> v[<span class="number">5</span>] == <span class="string">"/blog/404"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !requestdata[v[<span class="number">5</span>]]</span><br><span class="line">      requestdata[v[<span class="number">5</span>]] = &#123;&#125;</span><br><span class="line">      requestdata[v[<span class="number">5</span>]][<span class="string">"pv"</span>] = parseInt(v[<span class="number">7</span>])</span><br><span class="line">      requestdata[v[<span class="number">5</span>]][<span class="string">"uv"</span>] = parseInt v[<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      requestdata[v[<span class="number">5</span>]][<span class="string">"pv"</span>] += parseInt v[<span class="number">7</span>]</span><br><span class="line">      requestdata[v[<span class="number">5</span>]][<span class="string">"uv"</span>] += parseInt v[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !countrydata[v[<span class="number">3</span>]]</span><br><span class="line">      countrydata[v[<span class="number">3</span>]] = &#123;&#125;</span><br><span class="line">      countrydata[v[<span class="number">3</span>]][<span class="string">"pv"</span>] = parseInt v[<span class="number">7</span>]</span><br><span class="line">      countrydata[v[<span class="number">3</span>]][<span class="string">"uv"</span>] = parseInt v[<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      countrydata[v[<span class="number">3</span>]][<span class="string">"pv"</span>] += parseInt v[<span class="number">7</span>]</span><br><span class="line">      countrydata[v[<span class="number">3</span>]][<span class="string">"uv"</span>] += parseInt v[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !refererdata[v[<span class="number">0</span>]]</span><br><span class="line">      refererdata[v[<span class="number">0</span>]] = &#123;&#125;</span><br><span class="line">      refererdata[v[<span class="number">0</span>]][<span class="string">"pv"</span>] = parseInt v[<span class="number">7</span>]</span><br><span class="line">      refererdata[v[<span class="number">0</span>]][<span class="string">"uv"</span>] = parseInt v[<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      refererdata[v[<span class="number">0</span>]][<span class="string">"pv"</span>] += parseInt v[<span class="number">7</span>]</span><br><span class="line">      refererdata[v[<span class="number">0</span>]][<span class="string">"uv"</span>] += parseInt v[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !osdata[v[<span class="number">2</span>]]</span><br><span class="line">      osdata[v[<span class="number">2</span>]] = &#123;&#125;</span><br><span class="line">      osdata[v[<span class="number">2</span>]][<span class="string">"pv"</span>] = parseInt v[<span class="number">7</span>]</span><br><span class="line">      osdata[v[<span class="number">2</span>]][<span class="string">"uv"</span>] = parseInt v[<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      osdata[v[<span class="number">2</span>]][<span class="string">"pv"</span>] += parseInt v[<span class="number">7</span>]</span><br><span class="line">      osdata[v[<span class="number">2</span>]][<span class="string">"uv"</span>] += parseInt v[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !browserdata[v[<span class="number">1</span>]]</span><br><span class="line">      browserdata[v[<span class="number">1</span>]] = &#123;&#125;</span><br><span class="line">      browserdata[v[<span class="number">1</span>]][<span class="string">"pv"</span>] = parseInt v[<span class="number">7</span>]</span><br><span class="line">      browserdata[v[<span class="number">1</span>]][<span class="string">"uv"</span>] = parseInt v[<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      browserdata[v[<span class="number">1</span>]][<span class="string">"pv"</span>] += parseInt v[<span class="number">7</span>]</span><br><span class="line">      browserdata[v[<span class="number">1</span>]][<span class="string">"uv"</span>] += parseInt v[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># render overall part</span></span><br><span class="line">  $(<span class="string">'li.overall'</span>).find(<span class="string">'summary'</span>).html <span class="string">"&lt;ul&gt;&lt;li&gt;&lt;span class='itemname'&gt;&lt;i class='fa fa-bar-chart'&gt;&lt;/i&gt;total pageviews&lt;/span&gt; &lt;span class='count'&gt;<span class="subst">#&#123;overalldata.tpv&#125;</span>&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class='itemname'&gt;&lt;i class='fa fa-bar-chart'&gt;&lt;/i&gt;total unique visitors&lt;/span&gt; &lt;span class='count'&gt;<span class="subst">#&#123;overalldata.tuv&#125;</span>&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class='itemname'&gt;&lt;i class='fa fa-bar-chart'&gt;&lt;/i&gt;referrers&lt;/span&gt; &lt;span class='count'&gt;<span class="subst">#&#123;overalldata.referer.length&#125;</span>&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class='itemname'&gt;&lt;i class='fa fa-bar-chart'&gt;&lt;/i&gt;total 404&lt;/span&gt; &lt;span class='count'&gt;<span class="subst">#&#123;overalldata[<span class="string">'404'</span>]&#125;</span>&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class='itemname'&gt;&lt;i class='fa fa-bar-chart'&gt;&lt;/i&gt;log size&lt;/span&gt; &lt;span class='count'&gt;<span class="subst">#&#123;overalldata.datasize&#125;</span>kb&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class='itemname'&gt;&lt;i class='fa fa-bar-chart'&gt;&lt;/i&gt;log source&lt;/span&gt; &lt;span class='count'&gt;ga&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;"</span></span><br><span class="line"></span><br><span class="line">  showLogData(requestdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),<span class="string">'Path'</span>)</span><br><span class="line">  showLogData(refererdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),<span class="string">'Referer'</span>)</span><br><span class="line">  showLogData(osdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),<span class="string">'OS'</span>)</span><br><span class="line">  showLogData(browserdata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),<span class="string">'Browser'</span>)</span><br><span class="line">  showLogData(countrydata,parseInt(overalldata.tpv),parseInt(overalldata.tuv),<span class="string">'Country'</span>)</span><br><span class="line"></span><br><span class="line"><span class="property">@showLogData</span> = <span class="function"><span class="params">(rq,ptotal,utotal,id)</span> -&gt;</span></span><br><span class="line">  thead = <span class="string">"&lt;tr&gt;&lt;th&gt;PageViews&lt;/th&gt;&lt;th&gt;%&lt;/th&gt;&lt;th&gt;Unique PageViews&lt;/th&gt;&lt;th&gt;%&lt;/th&gt;&lt;th class=''&gt;__title__&lt;span onclick='if($(this).hasClass('expanded'))&#123;$(this).removeClass('expanded').closest('thead').next('tbody').find('tr:nth-of-type(n+10)').hide();&#125;else&#123;$(this).addClass('expanded').closest('thead').next('tbody').find('tr').show()&#125;'&gt;&lt;i class='fa fa-expand'&gt;&lt;/i&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;"</span></span><br><span class="line">  tbodyitem = <span class="string">"&lt;tr class='root'&gt;&lt;td class='num'&gt;__value_1__&lt;/td&gt;&lt;td&gt;__value_2__&lt;/td&gt;&lt;td class='num'&gt;__value_3__&lt;/td&gt;&lt;td&gt;__value_4__&lt;/td&gt;&lt;td&gt;__value_5__&lt;/td&gt;&lt;/tr&gt;"</span></span><br><span class="line">  tbody = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  $.each rq, <span class="function"><span class="params">(k,v)</span> -&gt;</span></span><br><span class="line">    tbody += tbodyitem.replace(<span class="string">'__value_1__'</span>,v[<span class="string">'pv'</span>]).replace(<span class="string">'__value_2__'</span>,(v[<span class="string">'pv'</span>]/ptotal*<span class="number">100</span>).toFixed(<span class="number">2</span>)).replace(<span class="string">'__value_3__'</span>,v[<span class="string">'uv'</span>]).replace(<span class="string">'__value_4__'</span>,(v[<span class="string">'uv'</span>]/utotal*<span class="number">100</span>).toFixed(<span class="number">2</span>)).replace(<span class="string">'__value_5__'</span>,k)</span><br><span class="line"></span><br><span class="line">  $(<span class="string">'li.'</span>+id).find(<span class="string">'thead'</span>).html thead.replace(<span class="string">'__title__'</span>,id)</span><br><span class="line">  $(<span class="string">'li.'</span>+id).find(<span class="string">'tbody'</span>).html tbody</span><br></pre></td></tr></table></figure>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>可能有人会说既然数据都是从GA获取的, 干嘛不直接去GA查看不就得了.. 何必多此一举呢?</p>
<p>恩… 其实确实是如此的… 只是一来我是熟悉下GA的接口和工具, 做出来练练手; 二来呢, 也是这样可以更好的聚合我想要看的数据, 方便我个人定制~ (当然, GA本身也有定制report并发送邮箱的功能~)</p>
]]></content>
    <summary type="html">
    <![CDATA[Goaccess 是一个非常简单而有齐全的日志分析工具, 其生成的html页面非常精细全面, 可以让你更好的查看日志, 今天就利用上次获取PV的方法来介绍下如何给 Jekyll 添加一个类似goaccess的日志页面.]]>
    
    </summary>
    
      <category term="Google Analytics" scheme="http://taoalpha.me/blog/tags/Google-Analytics/"/>
    
      <category term="log" scheme="http://taoalpha.me/blog/tags/log/"/>
    
      <category term="tech" scheme="http://taoalpha.me/blog/categories/tech/"/>
    
  </entry>
  
</feed>
